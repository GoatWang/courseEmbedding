



[組員]圖形處理器程式設計-徵求組員 - 看板 NTUcourse - 批踢踢實業坊


















批踢踢實業坊
›
看板 NTUcourse
關於我們
聯絡資訊




返回看板


分享







作者north (小北)看板NTUcourse標題[組員]圖形處理器程式設計-徵求組員時間Thu Feb 28 19:20:22 2013
修課的同學們好:

由於project一組要3個人,但是我們這組只有兩個人(一男一女）.
我是電信所的,有用thread-library寫平行程式的經驗,但無CUDA經驗.
另一個組員是理學院做科學計算的,但也無CUDA經驗.
我們都不是神人><,但是修課做project都很認真的！
希望可以找到一位同學和大家一起完成project!
謝謝^^
[email protected],感謝！

--
※ 發信站: 批踢踢實業坊(ptt.cc) 
◆ From: 140.112.4.202
推 wyde:++ 03/01 13:21










	高效能運算


















































































































Community​
開發人員
合作伙伴


​Language​​​


簡體中文


繁體中文


English


Français


Deutsch


日本語


한국어 (Korean)


Português


Русский


Español

































































GPU 運算技術Currently selected雲端遊戲VirtualizationResource CenterAMD FirePro™ S9170AMD FirePro™ S9150AMD FirePro™ S9100AMD FirePro™ S9050AMD FirePro™ S9000AMD FirePro™ S7150 x2AMD FirePro™ S7150AMD FirePro™ S7000AMD FirePro™ R5000AMD FirePro™ S10000AMD FirePro™ S4000XAMD FirePro™ S7100XAMD FirePro™ S9300 x2











AMD > 我們設計的產品 > 顯示卡 > 伺服器 > GPU 運算技術







 高效能運算


Image1


ContentMain4​​什麼是 GPU 運算？​​GPU 運算或 GPGPU (圖形處理器上的一般用途運算) 是運用 GPU 執行傳統上以中央處理器 (CPU) 處理的工程、數位媒體和科學應用的運算。GPU 作為協同處理器，與 CPU 的多核心設計相較之下，有巨大的平行處理能力，因此可加速應用程式。​




Image2 


ContentMain3



ContentMain1



應用程式開發人員可以根據開放式標準和跨平臺程式設計語言 OpenCL™ 控制 GPU 的運算能力。​​CPUGPU​ ​​ 
AMD FirePro™ GPU 用於運算AMD FirePro GPU 是針對調整 AMD GPU 的巨大平行處理能力而設計，除了可以攻佔包括圖形外，還有很多其他內容需要大量運算的應用程式，還可以協助科學家和工程師更快取得結果。
 ​ AMD FirePro GPU 適用於針對處理高效能工作量和工作流程的硬體和軟體，其中包含的應用需求有高單一和雙倍浮點效能、提升運算精確性的 ECC 記憶體支援、以及用於多個 GPU 之間的低延遲資料傳輸的 DirectGMA。 
​AMD FirePro GPU 最適用於 OpenCL，這是一種開放和跨平臺的程式設計標準，用於與 AMD 加速平行處理結合時的一般用途運算。​
瞭解更多有關 OPENCL 的資訊​ 
 ​ 
OpenCL 可讓程式設計人員保有他們在原始程式碼方面投入的巨額投資。經過 OpenCL 加速的應用程式可以使用單一整合平臺下結合電腦 CPU 和 CPU 核心的處理能力，改善了專業圖形和運算設計軟體的使用者的遊戲開發。使用虛擬和多核心處理器平行執行需要大量運算能力的工作，以前所未有的規模，開啟了改善效能和功能的大門。如果您正使用需要大量處理能力的應用程式進行 CAD、CAM、CAE、科學、DCC 或 M&E 方面的工作，準備好迎接 OpenCL 改變您的工作方式。AMD 的先進 Graphics Core Next (下一代圖形核心，簡稱 GCN) 架構提供快速的單一和雙倍精確性的效能。PCI Express 3.0 運用在低延遲的高頻寬資料傳輸DirectGMA 運用在快速點對點傳輸AMD PowerTune 技術允許 GPU 在 TDP 預算內提供最高的時脈速度1 ​​ 

瞭解 AMD 和 OpenCL 如何激發 DCC、CAD 和模擬軟體的能力和一窺現代 GPU 的處理能力。瞭解更多資訊
需要將您的程式碼移植到 OpenCL 的協助嗎？下載 OpenCL 程式設計指南​ ​ 

​ ​ 
AMD FirePro™ S 系列AMD FirePro S 系列顯示卡採用被動熱設計，而且是針對資料中心設計。這個系列可以部署在領導廠商的種類繁多的機架式安裝伺服器、刀鋒伺服器和 PCIe® 擴充底座上。
探索 S 系列 ​ 

  ​ 
AMD FirePro™ W 系列AMD FirePro W 系列顯示卡是針對桌上型工作站和個人超級電腦而設計，並具備了可在多種系統上彈性部署的主動冷卻功能。客戶可選擇快速單一精確性、單槽卡解決方案，例如 AMD FirePro™ W7000 GPU，以及針對雙倍精確性最佳化的解決方案，例如 AMD FirePro™ W9100。
探索 W 系列 採用開放式標準和龐大的 OS 支援協助客戶準備面對未來AMD 保證採用如 OpenGL® and OpenCL™ 的開放式標準技術，提供未來的跨平臺實行可用的解決方案。AMD FirePro 顯示卡支援多種 32 和 6 位元 Linux and Microsoft® Windows® 作業系統環境： Microsoft Windows 7、8、Server 2008 R2 和 Server 2012，以及多種 Linux 作業平臺，例如 RedHat Enterprise 6.4、Suse Enterprise Desktop (SLED) 11 SP2、Suse Enterprise Server (SLES) 11 SP2、OpenSuse 12.1 和 Ubuntu 12.1 ​ 
省電和可靠性
 ​​​​​​​​AMD FirePro 有 AMD 特有的數種智慧電源監控和管理技術，包括可在 GPU 閒置時將 GPU 用電降至低於三瓦特的 AMD ZeroCore Power 技術。1
AMD FirePro S 系列顯示卡配備被動式散熱器，簡化了熱設計和帶來無聲運作、彈性部署與資料中心級的可靠性。
瞭解更多資訊​ 
 企業級保固和支援AMD FirePro 顯示卡由 AMD 設計、製造和嚴格測試規劃至少三年的產品生命週期3 年有限產品維修/更換保固2可以聯絡到技術支援團隊的免費電話和電子郵箱





ContentMain2


PageFooter僅特定 AMD Radeon™ 產品才提供 AMD PowerTune 和 AMD ZeroCore Power 技術。這些技術可針對特定 GPU 負載條件來智慧管理 GPU 耗電量。並非所有產品都提供這些技術 – 請洽詢您的元件或系統製造商以瞭解特定型號的功能。這些處理器涵蓋在自有原始收據的原始購買日期算起的三年到期的有限保固內。此有限保固，以及依照適用法律可能存在的任何默示保固，僅適用於原購買的 AMD 圖形處理器，或基於工作站的 AMD 圖形處理器，並僅持續到此類購買者持續擁有處理器，以及三年有限保固期未到期為止。© 2014 Advanced Micro Devices, Inc. 版權所有。AMD、AMD Arrow 標誌、AMD FirePro 及前述各項的組合為 Advanced Micro Devices, Inc. 的商標。OpenCL 和 OpenCL 標誌是 Apple, Inc. 的商標，並經由 Khronos 核准使用。所有其他品牌名稱、產品名稱或商標屬其各自擁有者所有。Microsoft、Windows、Windows XP 和 Windows 7 Professional 是 Microsoft 公司集團的商標。​













註解










關於我們​


新聞室​


工作機會


企業責任


認識我們的 CEO​


投資人


部落格​










​Facebook​
Twitter
LinkedIn
​Google+​
Pinterest​
YouTube​
Newsletter​​





LinkedIn
Newsletter​​








©2014 Advanced Micro Devices, Inc.


條款與條件


隱私權


Cookie 政策


商標





聯絡資訊


AMD





 ​




























	我們設計的產品



















































































































Community​
開發人員
合作伙伴


​Language​​​


簡體中文


繁體中文


English


Français


Deutsch


日本語


한국어 (Korean)


Português


Русский


Español

































































我們設計的產品Currently selected
顯示卡處理器嵌入式系統伺服器處理器記憶體晶片組固態硬碟
我們提供的解決方案
桌上型電腦筆記型電腦PRO
解決方案伺服器解決方案嵌入式系統工作站軟體和解決方案合作夥伴專業顯示卡AMD is Everywhere半客製化解決方案amd-everywhere-case-studies
創新
創新歷史： 2010 - 迄今創新歷史： 2000 – 2009創新歷史： 1970 – 1999AMD 技術 + 軟體New Horizon
我們服務的市場
商務消費者嵌入式系統合作夥伴Gaming Technologies
我們的定位
新聞室公司資訊工作機會聯絡窗口企業責任












AMD > 我們設計的產品







ContentMain1





推出 RADEON INSTINCT運算與機器智慧的新紀元。  




 AMD 產品



 Link1桌上型電腦顯示卡
ContentMain2AMD Radeon™ 桌上型電腦顯示卡提供出色的效能與影像品質。




 Link2筆記型電腦顯示卡
ContentMain3AMD Radeon™ 筆記型電腦顯示卡提供卓越的視覺效能與電池續航力。




 Link3AMD PRO A 系列 APUs
ContentMain4專為現實世界協作​與連線能力導向生產力而最佳化的 APU 架構






 Link4桌上型電腦處理器
ContentMain5桌上型電腦搭配 AMD 桌上型電腦處理器可充份發揮其效能。




 Link5筆記型電腦處理器
ContentMain6筆記型電腦搭載 AMD APU，讓您享受所有優點 – 效能、電池續航力和最新設計。




 Link6專業顯示卡
ContentMain7AMD FirePro™ 專業顯示卡針對您企業的需求，提供與眾不同的解決方案。






 Link7嵌入式處理器
ContentMain8深入瞭解各種專為幫助您實現創意而設計的嵌入式處理器。




 Link8嵌入式分離顯示卡
ContentMain9功能強大且效果優越的顯示卡，適用嵌入式應用。




 Link9伺服器處理器
ContentMain10專為符合現今 IT 機構與資料中心所需而打造。






 Link10AMD 晶片組
ContentMain11




 Link11AMD 記憶體
ContentMain12




 Link12AMD Radeon™ 固態硬碟 (SSD)
ContentMain13

















註解










關於我們​


新聞室​


工作機會


企業責任


認識我們的 CEO​


投資人


部落格​










​Facebook​
Twitter
LinkedIn
​Google+​
Pinterest​
YouTube​
Newsletter​​





LinkedIn
Newsletter​​








©2014 Advanced Micro Devices, Inc.


條款與條件


隱私權


Cookie 政策


商標





聯絡資訊


AMD





 ​




























	AMD 圖形卡


















































































































Community​
開發人員
合作伙伴


​Language​​​


簡體中文


繁體中文


English


Français


Deutsch


日本語


한국어 (Korean)


Português


Русский


Español

































































顯示卡Currently selected
桌上型電腦顯示卡筆記型電腦顯示卡RADEON™ RX 系列伺服器工作站顯示卡
處理器
桌上型電腦處理器筆記型電腦處理器
嵌入式系統
圖形處理器嵌入式處理器
伺服器處理器
AMD Opteron™ Series 處理器的優點Opteron™ X 處理器Opteron™ A 處理器
記憶體
Radeon™ 記憶體Radeon™ RAMDisk
晶片組
AM4AMD A-Series 晶片組
固態硬碟











AMD > 我們設計的產品 > 顯示卡







		 AMD 圖形卡


Image1


ContentMain1​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​需求更多。需要 Radeon。​AMD 圖形卡採用尖端創新技術，展現優異效能與驚人智慧​​​ 



ContentMain2​​​​​​​​​


適用桌上型電腦AMD Radeon™ R9 Series 圖形卡AMD Radeon™ R7 Series 圖形卡AMD Radeon™ HD 8000 Series 圖形卡 (OEM)AMD Radeon™ HD 7000 Series 圖形卡檢視所有桌上型電腦 GPURADEON™ RX SERIES 顯示卡RADEON™ RX 480 顯示卡RADEON™ RX 470 顯示卡RADEON™ RX 460 顯示卡​瞭解 AMD 技術AMD Eyefinity 技術GCN 架構AMD CrossFire™ 技術AMD HD3D 技術適用膝上型電腦AMD Radeon™ HD 8900M Series 圖形卡AMD Radeon™ HD 8800M & 8700M Series 圖形卡AMD Radeon™ HD 8600M & 8500M Series 圖形卡AMD Radeon™ HD 7900M Series 圖形卡AMD Radeon™ HD 7800M Series 圖形卡AMD Radeon™ HD 7700M Series 圖形卡AMD Radeon™ HD 7600M & 7500M Series 圖形卡AMD Radeon™ HD 7400M Series 圖形卡AMD Radeon™ HD 7300M Series 圖形卡隨時掌握新知AMD Game 部落格掌握 AMD Radeon™ 圖形卡的最新動態適用工作站Radeon™ Pro WX 系列AMD FirePro™ W系列桌上型工作站顯示卡AMD FirePro™ W系列行動工作站顯示卡Dell 和 AMD FirePro™HP 和 AMD FirePro™適用於伺服器適用於 HPC 的 AMD FirePro™ S 系列適用於虛擬化的 AMD FirePro™ S 系列Dell 和 AMD FirePro™Hewlett Packard Enterprise 和 AMD FirePro™


ContentMain3





ContentMain4





PageFooter













註解










關於我們​


新聞室​


工作機會


企業責任


認識我們的 CEO​


投資人


部落格​










​Facebook​
Twitter
LinkedIn
​Google+​
Pinterest​
YouTube​
Newsletter​​





LinkedIn
Newsletter​​








©2014 Advanced Micro Devices, Inc.


條款與條件


隱私權


Cookie 政策


商標





聯絡資訊


AMD





 ​




























	伺服器專用的 AMD 專業級 GPU




















































































































Community​
開發人員
合作伙伴


​Language​​​


簡體中文


繁體中文


English


Français


Deutsch


日本語


한국어 (Korean)


Português


Русский


Español

































































桌上型電腦顯示卡
R9 SeriesR7 SeriesR5 SeriesOEMS
筆記型電腦顯示卡
R9 SeriesR7 SeriesR5 Series
RADEON™ RX 系列
RADEON™ RX 480RADEON™ RX 470RADEON™ RX 460
伺服器Currently selected
GPU 運算技術雲端遊戲VirtualizationResource CenterAMD FirePro™ S9170AMD FirePro™ S9150AMD FirePro™ S9100AMD FirePro™ S9050AMD FirePro™ S9000AMD FirePro™ S7150 x2AMD FirePro™ S7150AMD FirePro™ S7000AMD FirePro™ R5000AMD FirePro™ S10000AMD FirePro™ S4000XAMD FirePro™ S7100XAMD FirePro™ S9300 x2
工作站顯示卡
認證的應用程式桌上型工作站顯示牆筆記型電腦工作站舊型產品資源中心Radeon™ Pro 顯示卡












AMD > 我們設計的產品 > 顯示卡 > 伺服器









 伺服器專用的 AMD 專業級 GPU


Image1


Image3 


Image4 


Image5 




ContentMain1​​​​​​​​​​​​​​​​​​​​​​AMD FirePro™ GPU 可處理下一代資料量的需求  AMD GPU 為雲端運算提供強大的多功能​
 

Link1 


Link2 


Link4 





Image2 


ContentMain10

Link3 


Link5 





Image6 


ContentMain16




Image7 


ContentMain17









					 HPC
ContentMain2輕鬆解決密集運算的工作量​ 
    強大的運算力就在您的指尖任您驅使；我們的專業伺服器 GPU 可以輕鬆處理龐大的資料量，在彈指間解決複雜的數學計算。AMD STREAM 技術讓 AMD FirePro™ 顯示卡可以有效處理繁重的運算工作，並運用強大的 GPU 平行運算能力加速多種應用，遠勝過一般的顯示卡，為硬體生態系統註入活力。​
進一步瞭解 AMD STREAM 技術​​進一步瞭解 HPC​ 
  AMD FirePro™ S9300 x2 伺服器 GPU
全球第一個具有 1 TB/s 記憶體頻寬的 GPU 加速器。 ​ 
進一步瞭解 AMD FIREPRO™ S9300 X2​​​​  ​ 
 推薦適用於 HPC 的產品​​​

AMD FirePro™ S9170運算專用的最佳 GPU 變得更棒了
AMD FirePro™ S9150為 Green500 排名第 1 的超級電腦提供無人能及的每瓦特效能¹請 AMD 專員舄您聯絡
AMD FirePro™ S9100適用於 HPC 的高密度



					 虛擬化與視覺化雲端
ContentMain3全虛擬化圖形​​​AMD 將虛擬化工作站和應用程式推向另一波新高點 — 將 AMD FirePro™ 專業顯示卡的強大效能帶入雲端。雲端可讓使用者從任何地方都能順暢存取。IT 管理員可輕鬆地將工作者從實體 PC 移至虛擬桌面，並可輕鬆地從單一集中位置加以管理。AMD AMD FirePro™ S7150 和 FirePro™ S7150 x2 伺服器 GPU 採用 Multiuser GPU 技術，可提供虛擬化的圖表，讓企業擁有簡易、安全又符合成本效益的高效能虛擬​工作站解決方案。​ ​​ 
​進一步瞭解虛擬化​ 
  推薦適用於虛擬化、遠端圖形與 VDI 的產品

AMD FirePro™ S7100X每張卡最多可同時支援 16 個使用者
AMD FirePro™ S7150每張卡最多可同時支援 16 個使用者請 AMD 專員舄您聯絡
AMD FirePro™ S7150 x2每張卡最多可同時支援 32 個使用者



					 雲端遊戲
ContentMain4將遊戲移至雲端AMD 也為服務供應商與內容發行商針對資料中心代管的雲端遊戲提供解決方案，讓他們可以提供其自己的雲端內容。服務供應商透過網際網路，為玩家選擇的任何裝置提供高品質、低延遲的遊戲體驗。推薦適用於雲端遊戲的產品​​​​​

AMD Radeon™ Sky 900高效能雲端遊戲進一步瞭解雲端遊戲請 AMD 專員舄您聯絡
AMD Radeon™ Sky 700主流雲端遊戲
AMD Radeon™ Sky 500休閒雲端遊戲



					 購買地點
ContentMain5OEM 解決方案從我們的 OEM 合作夥伴中尋找採用 AMD 技術的適合解決方案
 
 
進一步瞭解 HPE​符合資格的系統合作夥伴 ​從我們符合資格的合作夥伴清單中尋找採用 AMD 技術的世界級解決方案
瞭解更多資訊




					 資源
ContentMain6AMD FirePro 驅動程式
取得適用於伺服器 GPU 的最新 AMD FirePro Unified 驅動程式保固 + 支援取得有關您伺服器 GPU 的支援資訊。
尋找您的伺服器 GPU 卡 OpenCL™
進一步瞭解 OpenCL™ 2.02




					  
ContentMain11




					  
ContentMain12




					  
ContentMain13





ContentMain14



ContentMain7


ContentMain8


ContentMain9



PageFooter
http://www.green500.org/lists/green201411OpenCL 是 Apple Inc. 的商標，Khronos 取得使用許可權。​













註解










關於我們​


新聞室​


工作機會


企業責任


認識我們的 CEO​


投資人


部落格​










​Facebook​
Twitter
LinkedIn
​Google+​
Pinterest​
YouTube​
Newsletter​​





LinkedIn
Newsletter​​








©2014 Advanced Micro Devices, Inc.


條款與條件


隱私權


Cookie 政策


商標





聯絡資訊


AMD





 ​





































        圖形處理器程式設計 (陳維超)  - CourseUnion：分享 x 學習 | 大學的課程社群





























Toggle navigation





                          CourseUnion
                        








                                        註冊
                                    



                                        登入
                                    




























&nbsp&nbsp加入課程&nbsp&nbsp
&nbsp&nbsp取消加入&nbsp&nbsp








				圖形處理器程式設計
			

陳維超














0

                        評價
                    



0

                        貼文
                    



0

                        同學
                    





                        課程資訊
                    















 







批踢踢評價

課程
教授






整體評分

0人評價

_

0,0,0,0,0

1&nbsp&nbsp2&nbsp&nbsp3&nbsp&nbsp4&nbsp&nbsp5

各項評分




                            甜度
                            -







0,0,0,0,0




                            扎實度
                            -







0,0,0,0,0




                            清晰度
                            -







0,0,0,0,0




                            難度
                            -







0,0,0,0,0












&nbsp&nbsp發評價
                        


                              排序 


新到舊
舊到新

分數高到低
分數低到高









目前還沒有評價


                                先別失望不妨用左方按鈕去批踢踢找找吧!
                                如果剛好修過這門課，歡迎留下你的評價哦～
                            











撰寫新評價
×



				須先登入並啟用帳號才能發文
			







				填寫成功！謝謝您
			









							修習年度/學期 :
                        

99 學年度
100 學年度
101 學年度
102 學年度
103 學年度
104 學年度
105 學年度
106 學年度


上學期
下學期



甜　度 ：
                        


1
2
3
4
5



扎實度 ：
                        


1
2
3
4
5



清晰度 ：
                        


1
2
3
4
5



難　度 ：
                        


1
2
3
4
5



整　體 ：
                        


1
2
3
4
5





評語&nbsp(可依照參考格式撰寫或自由抒發)&nbsp: 

                            ✧ 課程大概內容
                            ✧ 上課用書&nbsp(影印講義或是指定教科書)
                            ✧ 上課方式&nbsp(投影片、團體討論、老師教學風格)
                            ✧ 評分方式&nbsp(給分甜嗎？是紮實分？)
                            ✧ 考試題型、作業形式&nbsp(如團體報告、閱讀心得)
                            ✧ 總結

                         





完成




















系所
資訊工程學系


老師

教師資訊






































×















×Close



立即註冊，加入你/妳的大學課程社群 !
瞭解更多

 Facebook 註冊
         





&nbsp男
                    &nbsp&nbsp&nbsp&nbsp
                    &nbsp女










Email有點問題...
- 目前僅開放台灣大學 -





帳號特殊字元只能含 .&nbsp- _










您輸入的密碼不一致!







            已經有帳號了
        


































GPU高效能運算環境—CUDA與GPU Cluster介紹  │ 	編輯室 │ 臺大首頁 │ 計中首頁 │ 	     第0012期 	• 2010.03.20 發行  ISSN 2077-8813      歷史回顧   	訂閱/取消   校務服務   專題報導 	   技術論壇    推薦刊物       首頁 >專題報導     專題報導    GPU高效能運算環境—CUDA與GPU Cluster介紹作者：周秉誼 / 			臺灣大學計算機及資訊網路中心作業管理組碩士後研究人員  			計資中心為了提昇原有高效能運算的運算能力，在今年建置了一套圖形處理器叢集，以CUDA圖形處理器運算環境提供高效能運算服務。圖形處理器中，有大量處理核心，可同時處理不同運算工作。研究人員可以利用CUDA的C語言擴充，直接用C語言寫程式，在圖形處理器上進行科學運算，充分發揮圖形處理器強大的運算能力。 前言 			現代的視窗系統通常都有許多華麗的3D效果、電腦遊戲中也有許多3D特效來呈現特別的招式及場景的壯闊，為了流暢地把這些內容展現在電腦螢幕上，現在的電腦通常都配備了顯示卡或整合性的顯示晶片，來加速處理影像繪製及螢幕輸出。OpenGL及Direct3D等API 			(Application Programming Interface) 			也讓電腦遊戲的繪圖工作更方便，可以繪製更複雜的效果。為了繪製更精緻的材質和複雜的效果，繪圖所需的運算能力也隨之提高，顯示卡核心晶片的運算能力也如同中央處理器 			(CPU) 一般直線成長，甚至擁有不下中央處理器的運算能力，產生了圖形處理器 (GPU, Graphics Processing 			Unit) 這個概念。 因此需要大量計算能力的研究人員，就想到可以在每一臺電腦都有的圖形處理器上面進行科學計算和模擬。過去的GPU主要負責圖形繪製，想要在圖形處理器上進行科學運算或一般類型的運算，就要使用GLSL 			(OpenGL Shading Language) 、CG (C for Graphics) 等著色器語言 (shading 			language)撰寫程式。程式在執行時，會將著色器語言的程式碼載入圖形處理器硬體的驅動程式，再利用OpenGL或其他API把程式碼編譯為GPU可識別的機器碼在圖形處理器上運行。因此想要撰寫可在圖形處理器上進行一般運算的程式，是非常複雜而且麻煩的事情，很難有效率地調效程式。為了把中央處理器的運算工作，移到圖形處理器上進行，也就是通用型圖形處理器 			(General-Purpose Graphics Processing Unit, GPGPU) 			的運算概念，CUDA、OpenCL、DirectCompute等利用GPU運算的函式庫及API分別被NVIDIA、Microsoft等公司提出來。  CUDA運算環境 CUDA (Compute Unified Device Architecture) 			是NVIDIA提出，可在NVIDIA圖形處理器進行平行運算的計算環境。程式設計者可以利用CUDA的C語言擴充 (extension) 			直接用C語言寫程式，設計資料分配 (data decomposition) 			及程式流程將運算工作分配到上千個執行緒(threads)及圖形處理器中數以百計的計算核心 (cores)。CUDA可以運作在NVIDIA 			GeForce 8系列之後的GPU上，現在常見的一張二千元的NVIDIA顯示卡，就能進行CUDA運算而且效能驚人，所以GPGPU也算是一種平價的高效能運算方式，它把桌上型電腦變成一臺個人的超級電腦 			(personal supercomputer in a desktop)。 在CUDA程式中，有兩個不同的運算環境：host及device。Host就是原本中央處理器的計算環境，可以讀寫檔案、配置記憶體、使用外部函式庫、呼叫和傳遞參數給GPU的副程式。Device是指GPU，它有獨立的記憶體和計算核心，計算用的資料需要從host傳送到device上的記憶體，才能在device中處理。在device上執行的副程式，稱為kernel，通常有上百到上千個執行緒(thread)執行同一個kernel。 每一個執行緒會屬於一個執行緒區塊 (thread 			block)，每一個block裡的thread總數有上限，不能超過512個thread，可以指定成一維到三維的排列方式。所有的block又會以一維或二維的方式排列在格子(grid)裡，每次Kernel要啟動的時候，就會以kernel_function<<<blocks, 			threads>>>(…) 語法，來宣告grid及block的排列方式。每個thread及block依不同的排列順序會有不同的編號 			(thread/block ID)，藉由執行緒編號，資料可以分配到不同執行緒上進行處理。圖一顯示一個blocks為(m, 			n)、threads為(2, 2)的grid，其中block和thread的排列方式。     圖形處理器硬體環境 圖形處理器的硬體是由許多Streaming Multiprocessors (SMs) 及global 			memory組成。每一個SM裡還有數個Scalar Processors (SPs)、shared memory、指令提取分派 			(instruction fetch/dispatch)、雙倍精度浮點數 (double precision unit) 			等控制器。程式中的一個block會分配到一個SM上面執行，block中的thread會分配到這個SM的SP上執行，因此同一個block中的所有thread都可以看到共同的share 			memory區段，也可以進行同步指令 (synchronize)。以GeForce 			9500GT為例，有4個SM、最高1GB的global memory，每個SM上有8個SP、16KB的share memory。圖二是以CUDA-Z軟體顯示NVIDIA 			9500GT圖形處理器的資訊。    			圖形處理器的記憶體類型有很多種；Global 			memory是由全部的block共用的，在host的環境中也可以存取得到；每個SM上的share 			memory是block內部共用，還有register讓每個thread存放資料。速度最快的是register，share 			memory在特殊的存取方式下，可以跟register一樣快，global memory最慢，存取所需時間是share 			memory的上百倍。在撰寫程式時，可以利用 __share__ 修飾符 (qualifier) 指定share 			memory，減少存取花費的時間。圖三顯示register、shared memory及global memory的關係。   			圖形處理器有獨立的記憶體，在進行計算之前，host端程式需要以cudaMalloc()在device上的global 			memory配置記憶體，再用cudaMemcpy()搬移記憶體內容，在device上執行的kernel才能取得資料。如果要在global 			memory及share memory間移動，要在kernel裡搬移。計算結束後，把資料搬回host端，再用cudaFree()釋放記憶體。 CUDA程式跟C程式類似，撰寫完程式碼之後，都要先編譯 (compile) 			之後才能執行。但是不太一樣的部份是，CUDA的kernel及device副程式都是在圖形處理器上進行運算，編譯器 (compiler) 			會進行比較特殊的處理。一個副檔名是.cu的程式碼，編譯器會分成host及device兩個部份處理。host部份的程式碼就依一般的C程式的編譯方式，產生可執行的機器碼。而device部份的程式碼會由NVIDIA提供的編譯器，產生成PTX 			(Parallel Thread eXecution) 環境的組合語言 			(assembly)，在程式要被送到圖形處理器執行時，才被圖形處理器的驅動程式 (driver) 			組譯成不同圖形處理器可以執行的機器碼。這種設計的好處是不用在編譯時就決定圖形處理器核心類型，可以相容不同型號的GPU核心，但也使得device程式沒辦法直接直接呼叫現成的函式庫，目前也還不支援函式遞迴呼叫 			(recursive function call)。在使用nvcc編譯時加上-ptx可以產生PTX組合語言碼，加上-cubin可以產生kernel程式使用register、shared 			memory的數量資訊，這兩種資訊對程式最佳化很有幫助。表一列出CUDA程式碼及對應的PTX程式碼、cubin資訊。     CUDA數學計算 為了方便科學運算，CUDA也將常用到的數學函數，如sin()，exp()等包裝進編譯環境裡，這些提供的數學函數就可以直接在device程式中呼叫。如果不需要那麼高的精確度，而是需要率效的話，也有圖形處理器內建的數學函數 			(Intrinsic function) 可以使用，函數名就是原本的函數前加入底線，如 __sin()、__exp()，這些函數直接對應到GPU上的指令集，所以效率很高。常用來處理向量計算的BLAS 			(Basic Linear Algebra Subprograms) 及數位訊號處理、大數乘法的FFT (Fast Fourier 			Transform) 等，都有針對CUDA環境改寫，並整合在CUDA環境裡。 另外一個跟數學運算有關的限制是，目前圖形處理器的雙倍精度浮點數 (double 			precision float) 的運算能力，與單倍精度浮點數 (single precision float) 			的運算能力落差很大，甚至較低階的圖形處理器還不支援雙倍精度浮點數的運算。雙倍精度浮點數的運算速度，在下一個版本的核心Fermi將有很大的增進，預期可達目前高階顯示卡的八倍。  GPU Cluster 計資中心為了提昇原有高效能運算的運算能力，在今年建置了一套圖形處理器叢集 (GPU 			cluster)。該cluster共有20個S1070圖形處理器，每個S1070圖形處理器有240個scalar 			processors，組成30個streaming multiprocessors。還有4 gigabytes的global 			memory、每個multiprocessor有16 kilobytes的share memory，浮點數的運算能力可達1035 			gigaflops。 GPU Cluster使用Linux作業系統，及CUDA圖形處理器的運算環境。並使用PBS 			Pro排程軟體進行計算工作排程，確保每個計算工作都能有充足的計算資源可以使用，且不同計算工作間不會互相影響。運算節點間分享的檔案系統是lustre，比常見的NFS有更好的存取速度。 結論 			圖形處理器的運算能力進步飛快，以大量處理核心加速運算的方式，更是領先傳統的中央處理器，尤其在中央處理器放棄追求高時脈之後、改走多核心提高效能的現在，更是顯示出圖形處理器開發人員的遠見，而圖形處理器中大量處理核心的架構，或許也有多核心處理器值得參考的地方。 圖形處理器在一般用途的計算上打開了一條新的路，顯示強大的運算能力也可以用在圖形處理之外的地方。除了CUDA，還有OpenCL、DirectCompute等程式介面，可用來撰寫圖形處理器的應用程式，顯示晶片及中央處理器的廠商也有整合中央處理器和圖形處理器的研發計劃，可以想見會有更多常見的應用程式直接使用圖形處理器進行計算。 			等到目前圖形處理器在雙倍精度浮點數的劣勢，在NVIDIA新核心Fermi出現之後，得到加強，相信不久的將來，也會有圖形處理器組成的超級電腦，擠身在五百大超級電腦的列表中。      版權所有 © 國立台灣大學計算機及資訊網路中心 All				Rights Reserved. 電話：02-33665022 或 3366-5023 傳真： 02-23637204				讀者意見信箱：ntuccepaper@ntu.edu.tw 				  地址：10617 臺北市羅斯福路四段一號				  建議最佳螢幕解析度 1024*768 圖形處理器- 台灣Wiki 首頁百科圖片百科分類TwWiki台灣Wiki>百科分類>圖形處理器評論（0）分享到：分享到Facebook分享到Twitter分享到Google+分享到噗浪圖形處理器 標籤： 暫無標籤  顯卡全稱顯示介面卡（Video card，Graphics card），又稱為顯示適配器（Video adapter），是個人電腦最基本組成部分之一。顯卡的用途是將計算機系統所需要的顯示信息進行轉換驅動，並向顯示器提供行掃描信號，控制顯示器的正確顯示，是連接顯示器和個人電腦主板的重要元件，也是「人機對話」的重要設備之一。顯卡作為電腦主機里的一個重要組成部分，承擔輸出顯示圖形的任務，對於從事專業圖形設計的人來說顯卡非常重要。 目錄1. 簡介2. 詳細內容3. 主要作用4. 工作原理5. 與DSP區別6. 識別軟體7. 相關問題8. GPU供應商﹂8.1 nVidia﹂8.2 Matrox。回目錄1簡介顯卡的處理器稱為圖形處理器（GPU），它是顯卡的「心臟」，與CPU類似，只不過GPU是專為執行複雜的數學和幾何計算而設計的，這些計算是圖形渲染所必需的。某些最快速的GPU集成的晶體管數甚至超過了普通CPU。時下的GPU多數擁有2D或3D圖形加速功能。如果CPU想畫一個二維圖形，只需要發個指令給GPU，如「在坐標位置（x, y）處畫個長和寬為a×b大小的長方形」，GPU就可以迅速計算出該圖形的所有像素，並在顯示器上指定位置畫出相應的圖形，畫完後就通知CPU 「我畫完了」，然後等待CPU發出下一條圖形指令。有了GPU，CPU就從圖形處理的任務中解放出來，可以執行其他更多的系統任務，這樣可以大大提高計算機的整體性能。GPU會產生大量熱量，所以它的上方通常安裝有散熱器或風扇。回目錄2詳細內容圖形處理器又名顯示處理器。圖形處理器是顯示卡的「心臟」，也就相當於CPU在電腦中的作用，它決定了該顯卡的檔次和大部分性能，同時也是2D顯示卡和3D顯示卡的區別依據。2D顯示晶元在處理3D圖像和特效時主要依賴CPU的處理能力，稱為「軟加速」。3D顯示晶元是將三維圖像和特效處理功能集中在顯示晶元內，也即所謂的「硬體加速」功能。顯示晶元通常是顯示卡上最大的晶元（也是引腳最多的）。時下市場上的顯卡大多採用NVIDIA和AMD兩家公司的圖形處理晶元。NVIDIA公司在1999年發布GeForce256圖形處理晶元時首先提出GPU的概念。GPU使顯卡減少了對CPU的依賴，並進行部分原本CPU的工作，尤其是在3D圖形處理時。GPU所採用的核心技術有硬體T&L、立方環境材質貼圖和頂點混合、紋理壓縮和凹凸映射貼圖、雙重紋理四像素256位渲染引擎等，而硬體T&L技術可以說是GPU的標誌。GPU能夠從硬體上支持T&L（TransformandLighting，多邊形轉換與光源處理）的顯示晶元，因為T&L是3D渲染中的一個重要部分，其作用是計算多邊形的3D位置和處理動態光線效果，也可以稱為「幾何處理」。一個好的T&L單元，可以提供細緻的3D物體和高級的光線特效；只不過大多數PC中，T&L的大部分運算是交由CPU處理的(這就也就是所謂的軟體T&L)，由於CPU的任務繁多，除了T&L之外，還要做內存管理、輸入響應等非3D圖形處理工作，因此在實際運算的時候性能會大打折扣，常常出現顯卡等待CPU數據的情況，其運算速度遠跟不上今天複雜三維遊戲的要求。即使CPU的工作頻率超過1GHz或更高，對它的幫助也不大，由於這是PC本身設計造成的問題，與CPU的速度無太大關係。回目錄3主要作用GPU是顯示卡的「大腦」，GPU決定了該顯卡的檔次和大部分性能，同時GPU也是2D顯示卡和3D顯示卡的區別依據。2D顯示晶元在處理3D圖像與特效時主要依賴CPU的處理能力，稱為軟加速。3D顯示晶元是把三維圖像和特效處理功能集中在顯示晶元內，也就是所謂的「硬體加速」功能。顯示晶元一般是顯示卡上最大的晶元（也是引腳最多的）。時下市場上的顯卡大多採用NVIDIA和 AMD-ATI 兩家公司的圖形處理晶元。今天，GPU已經不再局限於3D圖形處理了，GPU通用計算技術發展已經引起業界不少的關註，事實也證明在浮點運算、並行計算等部分計算方面，GPU可以提供數十倍乃至於上百倍於CPU的性能，如此強悍的「新星」難免會讓CPU廠商老大英特爾為未來而緊張， NVIDIA和英特爾也經常為CPU和GPU誰更重要而展開口水戰。GPU通用計算方面的標準目前有 OPEN CL、CUDA、ATI STREAM。其中，OpenCL(全稱Open Computing Language，開放運算語言)是第一個面向異構系統通用目的並行編程的開放式、免費標準，也是一個統一的編程環境，便於軟體開發人員為高性能計算伺服器、桌面計算系統、手持設備編寫高效輕便的代碼，而且廣泛適用於多核心處理器(CPU)、圖形處理器(GPU)、Cell類型架構以及數字信號處理器(DSP)等其他並行處理器，在遊戲、娛樂、科研、醫療等各種領域都有廣闊的發展前景，AMD-ATI、NVIDIA時下的產品都支持OPEN CL。1985年 8月20日 ATi公司成立，同年10月ATi使用ASIC技術開發出了第一款圖形晶元和圖形卡，1992年 4月 ATi發布了 Mach32 圖形卡集成了圖形加速功能，1998年 4月 ATi被IDC評選為圖形晶元工業的市場領導者，但那時候這種晶元還沒有GPU的稱號，很長的一段時間ATI都是把圖形處理器稱為VPU，直到AMD收購ATI之後其圖形晶元才正式採用GPU的名字。NVIDIA公司在1999年發布GeForce 256圖形處理晶元時首先提出GPU的概念。從此NV顯卡的芯就用這個新名字GPU來稱呼。GPU使顯卡削減了對CPU的依賴，並實行部分原本CPU的工作，更加是在3D圖形處理時。GPU所採用的核心技術有硬體T&L、立方環境材質貼圖與頂點混合、紋理壓縮及凹凸映射貼圖、雙重紋理四像素256位渲染引擎等，而硬體T&L技術能夠說是GPU的標誌。回目錄4工作原理簡單說GPU就是能夠從硬體上支持T&L（Transform and Lighting，多邊形轉換和光源處理）的顯示晶元，由於T&L是3D渲染中的一個重要部分，其作用是計算多邊形的3D位置與處理動態光線效果，也能稱為「幾何處理」。一個好的T&L單元，能提供細緻的3D物體和高級的光線特效；只不過大多數PC中，T&L的大部分運算是交由CPU處理的(這就也就是所謂軟體T&L)，因為CPU的任務繁多，除了T&L之外，還要做內存管理和輸入響應等非3D圖形處理工作，所以在實際運算的時候性能會大打折扣，一般出現顯卡等待CPU數據的情況，GPU運算速度遠跟不上時下複雜三維遊戲的要求。即使CPU的工作頻率超出1GHz或更高，對它的幫助也不大，因為這是PC本身設計造成的問題，與CPU的速度無太大關係。回目錄5與DSP區別GPU在幾個主要方面有別於DSP(Digital Signal Processing，簡稱DSP，數字信號處理)架構。其所有計算均使用浮點演算法，而且此刻還沒有位或整數運算指令。此外，由於GPU專為圖像處理設計，因此存儲系統實際上是一個二維的分段存儲空間，包括一個區段號（從中讀取圖像）和二維地址（圖像中的X、Y坐標）。此外，沒有任何間接寫指令。輸出寫地址由光柵處理器確定，而且不能由程序改變。這對於自然分佈在存儲器之中的演算法而言是極大的挑戰。最後一點，不同碎片的處理過程間不允許通信。實際上，碎片處理器是一個SIMD數據並行執行單元，在所有碎片中獨立執行代碼。儘管有上述約束，但是GPU還是可以有效地執行多種運算，從線性代數和信號處理到數值模擬。雖然概念簡單，但新用戶在使用GPU計算時還是會感到迷惑，因為GPU需要專有的圖形知識。這種情況下，一些軟體工具可以提供幫助。兩種高級描影語言CG和HLSL能夠讓用戶編寫類似C的代碼，隨後編譯成碎片程序彙編語言。Brook是專為GPU計算設計，且不需要圖形知識的高級語言。因此對第一次使用GPU進行開發的工作人員而言，它可以算是一個很好的起點。Brook是C語言的延伸，整合了可以直接映射到GPU的簡單數據並行編程構造。經 GPU存儲和操作的數據被形象地比喻成「流」（stream），類似於標準C中的數組。核心（Kernel）是在流上操作的函數。在一系列輸入流上調用一個核心函數意味著在流元素上實施了隱含的循環，即對每一個流元素調用核心體。Brook還提供了約簡機制，例如對一個流中所有的元素進行和、最大值或乘積計算。Brook還完全隱藏了圖形API的所有細節，並把GPU中類似二維存儲器系統這樣許多用戶不熟悉的部分進行了虛擬化處理。用Brook編寫的應用程序包括線性代數子程序、快速傅立葉轉換、光線追蹤和圖像處理。利用ATI的X800XT和Nvidia的GeForce 6800 Ultra型GPU，在相同高速緩存、SSE彙編優化Pentium 4執行條件下，許多此類應用的速度提升高達7倍之多。對GPU計算感興趣的用戶努力將演算法映射到圖形基本元素。類似Brook這樣的高級編程語言的問世使編程新手也能夠很容易就掌握GPU的性能優勢。訪問GPU計算功能的便利性也使得GPU的演變將繼續下去，不僅僅作為繪製引擎，而是會成為個人電腦的主要計算引擎。回目錄6識別軟體說起處理器識別工具CPU-Z，其知名度和必備度無需贅言。硬體網站時下又給我們提供了一個類似的工具，用於顯卡識別的「GPU-Z」。這是TechPowerUp發布的專業顯卡識別工具。現在TechPowerUp GPU-Z的最新版本為GPU-Z 0.5.9版，更新於2012年2月13日。更新說明：0.5.9增加對A卡HD 7750和HD 7770的支持。增加對A卡HD 7950和HD 7970電壓檢測的支持。對大顯存A卡的顯存容量讀取支持。改進對英偉達顯卡核心體質檢測的標準。增加對顯卡核心體質檢測窗口的文字說明。修復GPU-Z更新組件無法正常更新的BUG。當多GPU建立檢測，PCIe載入測試建議全屏操作。增加主板ID到BIOS版本讀取的支持。在GPU-Z標題處增加顯示感測器讀數的選項(點擊感測器名稱旁邊的箭頭)。默認在後台刷新感測器讀數。修復A卡HD 7950發布日期。增加顯卡供應商Packard Bell。修復ATI顯卡催化劑缺失版本12.1。增加對一些A卡風扇轉數檢測支持。增加對基於GF108顯示核心：GT 520，GTX 555(非移動版)，GeForce 305M，610M這些N卡的支持。回目錄7相關問題第一個問題：GPU的競爭遠比CPU的競爭來得激烈。通用PC的CPU就只有英特爾和AMD兩家大廠。而在GPU方面領先的是N記和A記兩家廠商，但能生產中低端產品的還有英特爾、3S等好幾家廠商。它們的產品雖然不如前兩家，但在很多應用方面也能滿足用戶的需要，所以N記和A記只有拚命往前跑才不會死掉。CPU廠商沒有採用GPU的先進工藝是因為CPU廠商都有自己投資的生產線，不可能一下把原來的生產線都淘汰了上新的生產線，那樣做可能連當初投入的資金都難以收回。而GPU廠商由於種種原因，一般都是自己設計由別人代工的，比如找台積電代工。代工廠商為了能接到業務，只有不停升級自己的生產設備，這樣才能生存下來。所以造成以上原因。第二個問題就如你所說的一樣，CPU除了處理遊戲的AI，情節等方面的數據外，對於有些圖像方面也是由它完成的。當微軟每次發布新的DX時，並不是每款GPU都能支持DX新的特性，所以有些圖像方面的任務還得由CPU來完成。還有有些特性比如重力特性以前是由CPU來完成，時下有些GPU也能支持了，這些任務就由GPU來完成了。第三個問題GPU相當於專用於圖像處理的CPU，正因為它專，所以它強，在處理圖像時它的工作效率遠高於CPU，但是CPU是通用的數據處理器，在處理數值計算時是它的強項，它能完成的任務是GPU無法代替的，所以不能用GPU來代替CPU。另外時下AMD收購了A記顯卡晶元的設計廠商，AMD看到今後CPU和GPU只有走一條融合的道路才能地競爭中佔得先機。CPU和GPU如何配合默契才能最大地提高工作效率是AMD時下考慮的問題，也是英特爾的問題。第四個問題微軟發布windows7 其中一個顯著特性就是 聯合GPU和CPU的強大實力，提升GPU在硬體使用的價值，在Windows7中，CPU與GPU組成了協同處理環境。CPU運算非常複雜的序列代碼，而GPU則運行大規模並行應用程序。微軟利用DirectX Compute將GPU作為操作系統的核心組成部分之一。DirectX Compute。它讓開發人員能夠利用 GPU的大規模並行計算能力，創造出引人入勝的消費級和專業級計算應用程序。簡單的說，DirectX Compute就是微軟開發的GPU通用計算介面，欲統一GPU通用計算標準。也就是說windows7 以後GPU的硬體地位將僅次於CPU，發揮出更大的效用。回目錄8GPU供應商GPU有非常多的廠商都生產，和CPU一樣，生產的廠商比較多，但大家熟悉的卻只有那麼兩三個，以至於大家以為GPU只有那麼兩三個生產廠商。nVidia現在最大的獨立顯卡生產銷售商，他的顯卡包括時下大家熟悉的Geforce系列，比如GTX580 GTX480 GTX470 GTX460 GTX295等，還有專業的Quadro系列等。他也同樣銷售固化在主板上的集成顯卡，這些顯卡隨著主板一起發售，但是由於AMD兼併ATI後自身主板晶元能力提高，NV主板如日中天的景象已經失去了半壁江山。Matrox。當年和nv,ati一起爭奪獨立顯卡市場份額的一家公司，在曾經的一個時期Matrox的顯卡和nv,ati曾經在性能上比肩過。但由於後來其開發能力日漸衰退，在GF5時期，也就是ati的9000系列時期，Matrox由於性能上整整落後了GF5900和Raden9800一個世代而逐漸被淘汰，淡出了民用獨立顯卡市場。但時下Matrox仍然在工程用專業顯卡方面有自己的地位。這些顯卡用於工程主圖和多頭輸出仍然很強力。與nv和amd的專業顯卡不同，nv,ati的專業顯卡涉足的是3D領域，而Matrox得專業顯卡涉足的是2D領域，也就是CAD。但由於cuda的日漸普及，DX10以上顯卡將在所有支持CUDA的程序上表現出驚人的性能，也就是說當CUDA在各種運用軟體普及的那天，Matrox也必將退出2D專業卡的市場。sis和via硒統和威盛時下是對孿生兄弟，但他們曾經也是分開的兩家公司，並且都生產自己主板的集成顯卡。但這可憐的兩兄弟已經逐步在淡出主板市場了，也就必定將淡出GPU市場。下一篇[小雅·巧言]相關評論同義詞：暫無同義詞收藏到：收藏到Facebook收藏到Twitter收藏到Google+收藏到噗浪詞條信息瀏覽次數: 35 次更新時間: 2013-08-29相關詞條精彩詞條More>金源鄉蒸熊掌國際賽艇聯腹腔膿腫弱鹼水馬勒第五交響曲分享到分享到Facebook分享到Twitter分享到Google+分享到噗浪1簡介2詳細內容3主要作用4工作原理5與DSP區別6識別軟體7相關問題8GPU供應商8.1nVidia8.2Matrox。

開始使用 WebGL (Windows)









































Developer Network
Developer Network
Developer




登入




MSDN 訂閱




取得工具





















































很抱歉。您所要求的內容已遭移除。將會在 1 秒內自動重新導向。





Internet Explorer / Microsoft Edge
Web 平臺功能的 A 到 Z 索引

應用程式快取 API ("AppCache")13





應用程式快取 API ("AppCache")13
應用程式快取 API ("AppCache")14




應用程式快取 API ("AppCache")14




應用程式快取 API ("AppCache")14

















應用程式快取 API ("AppCache")14 

應用程式快取 API ("AppCache")15 

應用程式快取 API ("AppCache")16 

應用程式快取 API ("AppCache")17 

應用程式快取 API ("AppCache")18 

應用程式快取 API ("AppCache")19 

應用程式快取 API ("AppCache")20 



TOC

 
摺疊目錄
展開目錄




本文件已封存並已停止維護。



本文件已封存並已停止維護。

開始使用 WebGL



使用 WebGL 建立極快速的圖形。
WebGL 基本知識
使用 WebGL API 建立高效能 2D 與 3D 圖形的方法，是直接透過程式設計來控制電腦的圖形處理器 (GPU)。WebGL 在 Canvas 元素上以非常類似 2D 內容的繪圖內容進行轉譯，但以極低階的方式存取電腦 GPU。
WebGL 與傳統的網頁程式設計有些微差異，因為您要使用兩種語言來撰寫每個應用程式。若要使用 WebGL，一部分的程式碼要以 JavaScript 撰寫，而其他部分則要以 GLSL (OpenGL 著色語言) 撰寫，這是一種低階的類 C 語言。JavaScript 部分是用來載入影像、設定色彩以及描述物件；而 GLSL 程式碼則透過「著色器」程式轉譯影像、色彩和向量以在 GPU 上執行。這兩者結合就能讓 WebGL 建立極快速的圖形。 
我們使用的範例不包含任何 WebGL 程式庫。在實務上，像是矩陣數學或建立基本的幾何形狀這類困難與重複性的工作，大部分開發人員會使用程式庫。例如，WebGL 不提供像是縮放或旋轉等矩陣函式。做為使用 WebGL 建立 3D 圖形的一個重要部分，glMatrix 程式庫提供標準的矩陣轉換。而另一個範例中，您將 3D 圖形中的形狀以一系列三角形來描述。至於圓球，則需要為每個頂點建立一個座標陣列來描述三角形，使用三角函數來計算每個點。使用 Three.js 程式庫之類的一般用途程式庫 (幾乎一半的 WebGL 網頁都會用到)，只需指定要使用的半徑及三角形數量，即可建立圓球。
許多開發人員都會使用程式庫，而且只撰寫程式庫不提供的特殊著色器程式碼。如需程式庫、教學課程及其他資訊的連結，請參閱 WebGL 示範、參考及資源一節。
「變形」範例
我們要深入討論的範例稱為「變形」。「變形」會顯示您匯入的相片，根據滑鼠或觸控的輸入來延展和壓擠影像。這個範例很好玩，而且程式碼還提供您使用 WebGL 的基本知識。
「變形」範例可讓您瞭解： 


應用程式中的基本 WebGL 設定。
如何建立代表三角形與線條的向量點陣列，以及將色彩或相片套用到錶面。
如何使用滑鼠事件與一些三角函數，在延展和壓擠相片時做出酷炫特效。
雖然 WebGL 可以模擬 3D 物件，但為了讓此範例更簡單易懂，因此只使用 2D 物件。
WebGL 利用頂點或座標陣列來描述形狀，該陣列代表一個物件可以分解成一組不同的三角形。

從簡單的 2D 幾何形狀到複雜的影像呈現 (例如汽車、摩天高樓或解剖錶面的實際影像) 都在 WebGL 圖形的範圍內。物件的錶面可以使用少量或大量三角形來轉譯，三角形越多就越細緻。 差別只在於三角形的大小與數目。「變形」範例使用 800 個三角形，或是以 20 x 20 格線方式排列的 400 個正方形。大小可以提供良好的失真解析度，卻又不會太複雜。使用格線大小進行實驗，看看產生的效果。
「變形」套用相片做為紋理。在 WebGL 中，紋理定義為用來覆蓋所建立向量物件錶面的影像、色彩或圖樣。
開始撰寫 WebGL 應用程式
 應用程式傳遞形狀給 GPU 做為向量陣列，這通常代表一組三角形集合。向 GPU 描述三角形的方法包括：
使用個別三角形的三個頂點
三角形寬帶，在第一個三角形之後，每個三角形只新增一個頂點
   您也可以向 GPU 描述線條、帶狀線或點。 將向量陣列傳送給 GPU 時，您可以指定讀取陣列的方式，例如個別三角形、線條或寬帶。
若要描述三角形和其他形狀，可以使用 x、y 和 z 座標設定每個點的頂點。不論畫布的大小為何，GPU 都會使用浮點數介於 -1 與 1 之間的慣用右手 3D 笛卡兒座標系統。  零是顯示區域原點或中心，還有 x、y 及 z 三個軸。慣用右手座標系統是指正 X 值向右，正 Y 值向上，而正 Z 值朝向檢視者。因為右手大拇指可朝正 X 軸，食指朝向正 Y 軸，打開其餘手指可朝正 Z 軸 (朝向檢視者)，所以稱為慣用右手系統。
此圖顯示笛卡兒座標系統：

WebGL 轉譯管線
現代 GPU 使用可程式化的轉譯管線。早期的圖形卡有旋轉和縮放物件的內建功能，但不能讓您變更。可程式化的轉譯管線讓您能夠撰寫自己的函式，使用頂點和片段著色器來控制形狀和影像的轉譯方式。頂點著色器控制形狀上的點或頂點。旋轉空間中的物件時，頂點著色器要負責套用您提供的矩陣來旋轉座標。為了新增影像到形狀，片段著色器或像素著色器以相對於從頂點著色器取得影像的資訊，控制將影像套用到形狀的方式。 GPU 提供可讓資料路由進出著色器的管線，並執行畫面上的最終轉譯。基本的轉譯管線外觀如下： 

 轉譯管線使用以下一般步驟： 


應用程式使用指向向量緩衝區的向量陣列傳入座標。系統一次處理一個向量座標給頂點著色器。
頂點著色器會以相對於其他頂點的方式處理該頂點、移動座標、增加色彩參考及其他動作。
將所有三角形組合起來，然後傳送到轉譯器，以便在三角形的各頂點間插入像素。
深度測試操作會確認像素是否可檢視。像素 (與物件) 可能會位在檢視區域外、位置太前面或太後面(根據其 Z 座標)，或是被另一物件擋住。如果看不到，就會被忽略。
片段著色器將像素填上色彩。您可以將色彩或影像參考從頂點著色器傳送至片段著色器，或是在片段著色器內設定色彩。
最後會將像素傳送到 framebuffer，這裡它會顯示在畫面上。
這是所有 GPU 功能的簡化版本，但是讓您對於建立圖形程序有個概略瞭解。 
下篇預告
在 WebGL 內容與設定中，您將看到如何從畫布元素取得 WebGLRenderingContext，以及轉譯圖形所需的基本設定。
相關主題


WebGL 內容與設定


著色器程式


將相片載入紋理


UI 支援


WebGL 示範、參考及資源


 
 




顯示:

受繼承
        

受保護
        







列印

匯出 (0)
            







列印

分享
            













本文內容




















本頁對您有幫助嗎？
是
否





其他意見反應？


剩餘 1500 個字元

提交
略過此項







謝謝！
我們非常感謝您提供的意見反應。










© 2017 Microsoft











Web 平臺功能的 A 到 Z 索引


































Developer Network
Developer Network
Developer




登入




MSDN 訂閱




取得工具





















































很抱歉。您所要求的內容已遭移除。將會在 1 秒內自動重新導向。







MSDN Library



MSDN Library




MSDN Library

















MSDN Library 

Design Tools 

開發工具和語言 

.NET 開發 

Office 開發 

Microsoft Azure 

伺服器和企業開發 

Web 開發 

技術文章 



TOC

 


本文件已封存並已停止維護。




                Web 平臺功能的 A 到 Z 索引
            

應用程式快取 API ("AppCache")


非同步指令碼執行


音訊


先前瀏覽快取


畫布


應用程式快取 API ("AppCache")6


應用程式快取 API ("AppCache")7


使用 JavaScript 控制 Audio 物件8


使用 JavaScript 控制 Audio 物件9


使用 Media 事件新增進度列0


使用 Media 事件新增進度列1


使用 Media 事件新增進度列7


使用 Media 事件新增進度列8


使用 Media 事件新增進度列9


支援多種音訊檔格式0


支援多種音訊檔格式5


支援多種音訊檔格式7


支援多種音訊檔格式8


先前瀏覽快取0


先前瀏覽快取1


先前瀏覽快取2


先前瀏覽快取5


先前瀏覽快取7


先前瀏覽快取8


先前瀏覽快取9


畫布0


畫布1


畫布2


畫布3


畫布4


畫布5


畫布6


應用程式快取 API ("AppCache")01


應用程式快取 API ("AppCache")02


應用程式快取 API ("AppCache")09


應用程式快取 API ("AppCache")10


應用程式快取 API ("AppCache")13


應用程式快取 API ("AppCache")26


應用程式快取 API ("AppCache")27


應用程式快取 API ("AppCache")28


應用程式快取 API ("AppCache")29


應用程式快取 API ("AppCache")30


應用程式快取 API ("AppCache")31


應用程式快取 API ("AppCache")32





列印

匯出 (0)
            







列印

分享
            













本文內容




















本頁對您有幫助嗎？
是
否





其他意見反應？


剩餘 1500 個字元

提交
略過此項







謝謝！
我們非常感謝您提供的意見反應。










© 2017 Microsoft











國立交通大學機構典藏：圖形處理器之著色中介碼研究


























































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏
學術出版
畢業論文






















標題: 圖形處理器之著色中介碼研究Shader Form: an Intermediate Representation for Optimizing Compilers on GPU Shader Architectures
作者: 林聖偉Lin, Sheng-Wei游逸平You, Yi-Ping資訊科學與工程研究所
關鍵字: 編譯氣最佳化;著色器;靜態單賦值形式;compiler optimizations;shader processors;SSA form
公開日期: 2012
摘要: 圖形處理器(GPU)由於其高度平性化的特性，使它不僅可以運用在圖學運算，甚至也可以應用於一般的運算上。圖形處理器的架構從過去的固定管線(fixed function pipeline)演進到了可程式化管線(programmable pipeline)，其中可程式化的部分分別是頂點著色器(vertex shader)和片段著色器(fragment shader)。程式設計者可以藉由寫著色程式達到繪圖的效果。一般的圖形處理器在執行圖學應用程式時，會先載入應用程式裡的著色原始碼並將其編譯成目的碼，在連結成可執行的二進制檔，最後再將此二進制檔送到圖形處理器執行，然而在這過程中，由於圖形處理器採用即時編譯(JIT compilation)的方式，整個編譯的過程都是在執行階段(runtime)下執行，所以圖形處理器往往為了要降低執行時所帶來的負擔而不對任何程式作優化，如何在執行時期降低優化的成本，是圖形處理器一個重要的議題。在此篇論文我們提出一適用於著色編譯器(Shader compiler)的中介碼(IR)，使得許多程式的優化不僅可以以較簡化的方式應用於此中介碼上，還可以節省許多時間，大幅地降低了執行時期所需的負擔。我們將研究成果實作在一私有之 ESSL 編譯器，與傳統的最佳化方法之編譯器比較，平均而言，我們省下了81.8%的優化時間。Modern graphics processing units (GPUs) are not only powerful graphics-rendering engines but also used for general-purpose computing due to their highly parallel structures. A just-in-time compilation is adopted in GPUs to compile shader programs at runtime. However, such model disables many compiler optimizations for reducing runtime overhead. In this thesis, we use the concept of static single-assignment (SSA) form in the shader compiler in order to simplify compiler optimizations. Unlike other single instruction, multiple data (SIMD) architectures, shader processors allow components of a register to be separately accessed; therefore, a variable may refer to multiple definitions. This property leads a correctness problem to occur in a program when converting the program into SSA form. In general, the correct SSA form in shader compilers is to treat each component as an individual register by decomposing each operation. Although the SSA form with decomposition operations could be applied correctly, it brings some side-effects of code size expansion in the SSA form transformation and unnecessary JIT optimizations. For this reason, we present a representation, called shader form, to support GPU shader architectures for simplifying compiler optimizations. Since a variable may refer to multiple definitions, we group such definitions as a single definition for some variable in shader form. Experiments demonstrated that shader form solved the problems encountered in SSA form and efficiently simplified compiler optimizations. Furthermore, shader form could be adopted to any SIMD architectures that allows the components of a register could be separately accessed.
URI: http://140.113.39.130/cdrfb3/record/nctu/#GT079955634http://hdl.handle.net/11536/50538
顯示於類別：畢業論文




















IR@NCTUTAIRCrossRef圖形著色器之低耗能編譯器最佳化方法 / 王深弘;Wang, Shen-Hong;游逸平;You, Yi-PingVector-Aware Register Allocation for GPU Shader Processors / You, Yi-Ping;Chen, Szu-Chieh可動態重組之處理單元於頂點與像素處理 / 陳逸麒;Yi-Chi chen;鍾崇斌;Chung-Ping ChungEnergy-Aware Code Motion for GPU Shader Processors / You, Yi-Ping;Wang, Shen-Hong以圖型應用為主的用戶端多核心嵌入式系統---總計畫 (I) / 徐慰中;Hsu Wei Chung高效能3D繪圖處理器關鍵技術之研究 / 鍾崇斌;CHUNG CHUNG-PING高效能3D繪圖處理器關鍵技術之研究 / 鍾崇斌;CHUNG CHUNG-PINGVecRA: A Vector-Aware Register Allocator for GPU Shader Processors / You, Yi-Ping;Chen, Szu-Chien三維電腦繪圖著色器設計 / 餘銘鋒;Ming-Feng Yu;陳紹基;Sau-Gee Chen義守大學 - 圖形的T著色之研究 / 孫一凡 元培科技大學 - 圖形IC-著色之研究 / 彭鬱文;於尚文;王泓傑;李嘉浤;許乃中 元培科技大學 - 圖形IC-著色之研究 / 彭鬱文;於尚文;王泓傑;李嘉浤;許乃中 國立臺灣科技大學 - 圖形頂點的著色及支配問題之研究 / 郭俊麟 臺北市立大學 - 中文影像圖形處理系統之設計研究 / 賴阿福 國立臺北科技大學 - 以圖形處理器實現平行化海嘯模擬之研究 / Muhammad T.S; Muhammad Teguh Satria 國立臺北科技大學 - 以圖形處理器實現平行化海嘯模擬之研究 / Muhammad T.S; Muhammad Teguh Satria 東海大學 - 圖形處理器在RSA加密演算法應用之研究 / 蔡奇軒; Tsai,Chi-Hsuan 國立臺灣科技大學 - 具較寬匯流排可重置結構陣列處理器在圖形和影像處理上之研究 / 洪西進 Loading...












國立交通大學機構典藏：學術出版































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏






學術出版
: [108112]




























類別


專利資料

技術報告

教師專書

會議論文

期刊論文

畢業論文

研究計畫




探索


作者
570 
楊千495 
Kuo, Hao-Chung446 
陳光華374 
張翼349 
林進燈327 
Lin, Chin-Teng322 
陳安斌320 
吳重雨318 
李榮貴317 
孫春在.
下一步 >

關鍵字
449 
類神經網路424 
GaN423 
INFORMATION422 
電子工程419 
ELECTRONIC-ENGINEERING408 
 329 
氮化鎵301 
薄膜電晶體293 
OFDM275 
電腦.
下一步 >

公開日期
83654 
2000 - 201724454 
1911 - 1999









國立交通大學機構典藏：畢業論文































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏
學術出版






畢業論文
: [47103]


























類別內的文件 (依公開日期由降冪排序排序)： 從 1 到 20 筆，總共 47103 筆


 下一頁 >




公開日期標題作者2016基於位置感知非侵入式負載監測之建築能源管理系統簡子陽; Chien, Tzu-Yang; 曹孝櫟; Tsao, Shiao-Li; 資訊科學與工程研究所
2016以網格為基礎的鄰近密集區域查詢之研究蘇庭昱; Su,Ting-Yu; 黃俊龍; 資訊科學與工程研究所
2016標記有根樹的計數問題楊凱帆; Yang, Kai-Fan; 傅恆霖; 劉樹忠; Fu, Hung-Lin; Liu, Shu-Chung; 應用數學系所
2015元件佈局相關之寄生效應和參數萃取方法應用於奈米射頻CMOS模擬及雜訊分析羅毅人; Lou, Yi-Jen; 郭治群; Guo, Jyh-Chyurn; 電子工程學系 電子研究所
2015整合Kinect與加速規量化臨床Tinetti量表參數黃巖閔; Huang, Yan-Min; 楊秉祥; Yang, Bing-Shiang; 機械工程系所
2015錶面氧化層對鍺化鎳奈米線錶面形貌的影響陳佩玟; Chen, Pei-Wen; 周苡嘉; Chou, Yi-Chia; 電子物理系所
2015高效率平面式微光學聚光器李勝儀; 潘瑞文; 光電科技學程
2015兩岸服務貿易協議對台灣電影產業影響-以文化例外出發討論洪灝淩; Hung, Hao-Ling; 陳在方; Chen, Tsai-Fang; 科技法律研究所
2015漢語「人家」的語意解釋李靜汶; Li, Ching-Wen; 林若望; Lin, Jo-Wang; 外國語文學系外國文學與語言學碩士班
2015浴缸內外高低差對進出浴缸動作跌倒風險的影響黃健祐; 楊秉祥; 機械工程系所
2015耗散奈米線中接近量子相變點的非平衡電子傳輸行為林照蘊; Lin, Chao-Yun; 仲崇厚; Chung, Hou-Chung; 電子物理系所
2015新竹市水源里地方守護的形成與轉化（1980-2014）林威廷; Lin, Wei-Ting; 莊雅仲; Chuang,Ya-Chung; 人文社會學系族群與文化碩士班
2015氧化鋅奈米柱陣列長度與液晶預傾角關係之研究陳睦哲; Chen, Mu-Zhe; 鄭協昌; Jeng, Shie-Chang; 影像與生醫光電研究所
2015藉由解剖學治療學及化學分類系統與同源藥理揭露非癌症藥物於癌症治療曾仁琥; Tseng, Jen-Hu; 楊進木; Yang, Jinn-Moon; 生物資訊及系統生物研究所
2015整合薄膜電晶體及非揮發性浮動閘極記憶體的記憶體電晶體製備研究彭子瑄; Peng, Tzu-Hsuan; 謝宗雍; Hsieh,Tsung-Eong; 材料科學與工程學系所
2015標準制定組織之專利集管型態與授權爭議分析葉家齊; Yeh, Chia-Chi; 劉尚志; Liu, Shang-Jyh; 科技法律研究所
2015設計專利侵權判斷之研究—以美國法為中心陳盈如; Chen, Ying-Ju; 劉尚志; Liu, Shang-Jyh; 科技法律研究所
2015台灣北部三個空品測站大氣超細微粒的特性李國瑞; Lee, Guo-Rui; 蔡春進; Tsai,Chuen-Jinn; 環境工程系所
2015美國後eBay時代專利侵權案件永久禁制令之研究李玄; 王立達; 科技法律研究所
2015拉普拉斯變換及其應用江培華; Chiang, Pei-Hua; 林琦焜; Lin, C. K.; 應用數學系所


類別內的文件 (依公開日期由降冪排序排序)： 從 1 到 20 筆，總共 47103 筆


 下一頁 >




探索


作者
547 
楊千443 
陳光華298 
李榮貴297 
唐瓔璋294 
黃仁宏292 
陳安斌267 
鍾惠民260 
虞孝成249 
朱博湧248 
孫春在.
下一步 >

關鍵字
423 
INFORMATION419 
ELECTRONIC-ENGINEERING419 
電子工程335 
類神經網路282 
氮化鎵272 
電腦270 
MANAGEMENT268 
GaN265 
管理260 
薄膜電晶體.
下一步 >

公開日期
33253 
2000 - 201613850 
1911 - 1999











多核心程式設計資源




















 我的購物車  |  求助    























多核心程式設計資源
下載多核心程式設計資源
多核心程式設計技術白皮書系列







 NI首頁 > 產品與服務 > 多核心程式設計資源
















多核心程式設計資源










多核心處理器所代表的新軟體挑戰，即必須完全利用測試、控制，與嵌入式設計應用的處理功能。參考下列資源，以瞭解如何使用圖形化程式設計的方式，並進行多執行緒的應用、建置平行的程式設計作業，以強化雙核心與多核心處理器的功能。





多核心網路研討會系列
應用多核心
瞭解多核心平臺是如何廣為業界所接受。由多核心協會 (Multicore Association) 主席 Markus Levy 詳細解說。
多核心環境中的圖形化系統設計
瞭解以多核心平臺搭配軟體建構的方式，以利用相關處理效能。由 Intel 公司的 Ryan Parker 詳細解說。
LabVIEW 潛力無窮：繼續縱橫於多處理器/多核心平臺達 10 年
LabVIEW 圖形化程式設計語言將迎接多核心程式設計的軟體挑戰，並建立有效率的多執行緒程式碼與平行程式設計策略。由 NI 首席工程師 Dr. Aljosa Vrancic 詳細解說。
技術資源
參閱多核心程式設計基礎概念的系列技術文件
瞭解多執行緒的基礎概念、多核心程式設計策略，與雙/多核心處理器的效能基準。
以多核心技術開發高效能的 Real-Time 系統
觀看網路研討會，以瞭解 NI LabVIEW Real-Time 透過對稱多重處理 (SMP) 達到多核心效能的方法，並進一步用於精確的高階測試、控制，與設計應用。











 


我的個人檔案 | RSS | 線上隱私保護 | 安全聲明 | 連絡NI © 2014 National Instruments Corporation.  All rights reserved.    |   










國立交通大學機構典藏：一個用於以圖形處理器為基底之線上遊戲平臺的程式碼產生器



























































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏
學術出版
畢業論文






















標題: 一個用於以圖形處理器為基底之線上遊戲平臺的程式碼產生器A Code Generator for GPU-Based MMOG Platform
作者: 林宜豊Yi-Lin Lin袁賢銘Shyan-Ming Yuan資訊科學與工程研究所
關鍵字: 程式碼產生器;圖形處理器;線上遊戲;Code Generator;GPU;MMOG
公開日期: 2007
摘要: 本論文將介紹一個用於以圖形處理器為基底之線上遊戲平臺的程式碼產生器。利用此程式碼產生器，遊戲設計者可建立和管理遊戲邏輯，而不需要瞭解圖形處理器程式設計的細節。為了讓遊戲設計者更容易定做他們的遊戲邏輯，我們定義了一系列的XML (eXtensible Markup Language)的文法，利用程式碼產生器將該XML轉換為可在圖形處理器上執行的程式碼，並以插件的形式與平臺共同處理整個遊戲的運作。此外，我們針對平臺在不同情況下的效能表現做了各種測試。其結果顯示，所產生的程式碼可由該平臺以平行化的方式有效率地處理從客戶端送來的指令。This research presents a code generator for a Graphics Processor Unit (GPU) based Massive Multiplayer Online Game (MMOG) platform. Through the code generator, game designers can construct and maintain game logics without comprehending details of GPU programming. We defined a set of eXtensible Markup Language (XML) schema for game designers to customize their game logics in a manageable way. Furthermore, we provide a code generator to translate the XML to GPU code pieces as the server plug-ins to process the entire game. In addition, several tests are performed to validate the performance of the MMOG platform in different situations. As a result, commands issued by MMOG clients can be processed efficiently by GPU-based server through the generated GPU code in parallel.
URI: http://140.113.39.130/cdrfb3/record/nctu/#GT009555550http://hdl.handle.net/11536/39500
顯示於類別：畢業論文



















文件中的檔案：存到雲端




555001.pdf









IR@NCTUTAIRCrossRef利用圖形處理器加速鉅量多人連線遊戲伺服器端之運算 / 宋牧奇;Mu-Chi Sung;袁賢銘;Shyan-Ming Yuan設計與實作一個超大型多人線上遊戲中介軟體 / 蕭存喻;Tsun-Yu Hsiao;袁賢銘;Shyan-Ming Yuan一個鉅量多人連線遊戲開發及管理系統架構 / 蘇科旭;Ko-Hsu Su;袁賢銘;Shyan-Ming Yuan下一世代超大型網路虛擬環境平臺之研究(II) / 袁賢銘;YUAN SHYAN-MING一個可支援手持裝置之巨量多人連線遊戲的客戶端框架 / 彭品勻;Pin-Yun Peng;袁賢銘;Shyan-Ming YuanPractical middleware for massively multiplayer online games / Hsiao, TY;Yuan, SM高彈性高延展性易用之MMOG中介軟體之設計 / 陸振恩;Chen-En Lu;袁賢銘;Shyan-Ming Yuan崑山科技大學 - 以ARM7系列為基礎之微處理機隱含式線上模擬器智財產生器之研製 / 蔣元隆 東海大學 - 一個在多核對稱式處理器叢集上使用混合OpenMP與MPI程式以效能為準的平行迴圈自我排程法 / 張壬相; Chang, Jen-Hsiang 國立清華大學 - 一個以元素為基底的疊代並適用於多輸入多輸出通訊的高精確度低複雜度奇異值分解處理器 / 羅竹均; Lo, Chu-Chun 國立臺灣大學 - 以模擬為基礎產生影像處理編解碼器之驗證圖樣 / Liao, I-Nan; 廖宜南 淡江大學 - 以圖形處理器運算技術為基礎之即時影像增強軟體平臺之開發 / 蔡奇謚 Loading...












國立交通大學機構典藏：學術出版































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏






學術出版
: [108112]




























類別


專利資料

技術報告

教師專書

會議論文

期刊論文

畢業論文

研究計畫




探索


作者
570 
楊千495 
Kuo, Hao-Chung446 
陳光華374 
張翼349 
林進燈327 
Lin, Chin-Teng322 
陳安斌320 
吳重雨318 
李榮貴317 
孫春在.
下一步 >

關鍵字
449 
類神經網路424 
GaN423 
INFORMATION422 
電子工程419 
ELECTRONIC-ENGINEERING408 
 329 
氮化鎵301 
薄膜電晶體293 
OFDM275 
電腦.
下一步 >

公開日期
83654 
2000 - 201724454 
1911 - 1999









國立交通大學機構典藏：畢業論文































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏
學術出版






畢業論文
: [47103]


























類別內的文件 (依公開日期由降冪排序排序)： 從 1 到 20 筆，總共 47103 筆


 下一頁 >




公開日期標題作者2016基於位置感知非侵入式負載監測之建築能源管理系統簡子陽; Chien, Tzu-Yang; 曹孝櫟; Tsao, Shiao-Li; 資訊科學與工程研究所
2016以網格為基礎的鄰近密集區域查詢之研究蘇庭昱; Su,Ting-Yu; 黃俊龍; 資訊科學與工程研究所
2016標記有根樹的計數問題楊凱帆; Yang, Kai-Fan; 傅恆霖; 劉樹忠; Fu, Hung-Lin; Liu, Shu-Chung; 應用數學系所
2015元件佈局相關之寄生效應和參數萃取方法應用於奈米射頻CMOS模擬及雜訊分析羅毅人; Lou, Yi-Jen; 郭治群; Guo, Jyh-Chyurn; 電子工程學系 電子研究所
2015整合Kinect與加速規量化臨床Tinetti量表參數黃巖閔; Huang, Yan-Min; 楊秉祥; Yang, Bing-Shiang; 機械工程系所
2015錶面氧化層對鍺化鎳奈米線錶面形貌的影響陳佩玟; Chen, Pei-Wen; 周苡嘉; Chou, Yi-Chia; 電子物理系所
2015高效率平面式微光學聚光器李勝儀; 潘瑞文; 光電科技學程
2015兩岸服務貿易協議對台灣電影產業影響-以文化例外出發討論洪灝淩; Hung, Hao-Ling; 陳在方; Chen, Tsai-Fang; 科技法律研究所
2015漢語「人家」的語意解釋李靜汶; Li, Ching-Wen; 林若望; Lin, Jo-Wang; 外國語文學系外國文學與語言學碩士班
2015浴缸內外高低差對進出浴缸動作跌倒風險的影響黃健祐; 楊秉祥; 機械工程系所
2015耗散奈米線中接近量子相變點的非平衡電子傳輸行為林照蘊; Lin, Chao-Yun; 仲崇厚; Chung, Hou-Chung; 電子物理系所
2015新竹市水源里地方守護的形成與轉化（1980-2014）林威廷; Lin, Wei-Ting; 莊雅仲; Chuang,Ya-Chung; 人文社會學系族群與文化碩士班
2015氧化鋅奈米柱陣列長度與液晶預傾角關係之研究陳睦哲; Chen, Mu-Zhe; 鄭協昌; Jeng, Shie-Chang; 影像與生醫光電研究所
2015藉由解剖學治療學及化學分類系統與同源藥理揭露非癌症藥物於癌症治療曾仁琥; Tseng, Jen-Hu; 楊進木; Yang, Jinn-Moon; 生物資訊及系統生物研究所
2015整合薄膜電晶體及非揮發性浮動閘極記憶體的記憶體電晶體製備研究彭子瑄; Peng, Tzu-Hsuan; 謝宗雍; Hsieh,Tsung-Eong; 材料科學與工程學系所
2015標準制定組織之專利集管型態與授權爭議分析葉家齊; Yeh, Chia-Chi; 劉尚志; Liu, Shang-Jyh; 科技法律研究所
2015設計專利侵權判斷之研究—以美國法為中心陳盈如; Chen, Ying-Ju; 劉尚志; Liu, Shang-Jyh; 科技法律研究所
2015台灣北部三個空品測站大氣超細微粒的特性李國瑞; Lee, Guo-Rui; 蔡春進; Tsai,Chuen-Jinn; 環境工程系所
2015美國後eBay時代專利侵權案件永久禁制令之研究李玄; 王立達; 科技法律研究所
2015拉普拉斯變換及其應用江培華; Chiang, Pei-Hua; 林琦焜; Lin, C. K.; 應用數學系所


類別內的文件 (依公開日期由降冪排序排序)： 從 1 到 20 筆，總共 47103 筆


 下一頁 >




探索


作者
547 
楊千443 
陳光華298 
李榮貴297 
唐瓔璋294 
黃仁宏292 
陳安斌267 
鍾惠民260 
虞孝成249 
朱博湧248 
孫春在.
下一步 >

關鍵字
423 
INFORMATION419 
ELECTRONIC-ENGINEERING419 
電子工程335 
類神經網路282 
氮化鎵272 
電腦270 
MANAGEMENT268 
GaN265 
管理260 
薄膜電晶體.
下一步 >

公開日期
33253 
2000 - 201613850 
1911 - 1999








