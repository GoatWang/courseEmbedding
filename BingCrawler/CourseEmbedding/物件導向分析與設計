


物件導向程式設計 - 維基百科，自由的百科全書






























 







物件導向程式設計

維基百科，自由的百科全書


					前往：					導覽，					搜尋












中國大陸
面向對象程序設計


臺灣
物件導向程式設計


港澳
物件導向程式設計


物件導向程式設計（英語：Object-oriented programming，縮寫：OOP）是種具有物件概念的程式編程典範，同時也是一種程式開發的抽象方針。它可能包含資料、屬性、程式碼與方法。物件則指的是類別的例項。它將物件作為程式的基本單元，將程式和資料封裝其中，以提高軟體的重用性、靈活性和擴充功能性，物件裡的程式可以存取及經常修改物件相關連的資料。在物件導向程式編程裡，電腦程式會被設計成彼此相關的物件[1][2]。
物件導向程式設計可以看作一種在程式中包含各種獨立而又互相呼叫的物件的思想，這與傳統的思想剛好相反：傳統的程式設計主張將程式看作一系列函式的集合，或者直接就是一系列對電腦下達的指令。物件導向程式設計中的每一個物件都應該能夠接受資料、處理資料並將資料傳達給其它物件，因此它們都可以被看作一個小型的「機器」，即物件。目前已經被證實的是，物件導向程式設計推廣了程式的靈活性和可維護性，並且在大型專案設計中廣為應用。此外，支持者聲稱物件導向程式設計要比以往的做法更加便於學習，因為它能夠讓人們更簡單地設計並維護程式，使得程式更加便於分析、設計、理解。反對者在某些領域對此予以否認。
當我們提到物件導向的時候，它不僅指一種程式設計方法。它更多意義上是一種程式開發方式。在這一方面，我們必須瞭解更多關於物件導向系統分析和物件導向設計（Object Oriented Design，簡稱OOD）方面的知識。許多流行的程式語言是物件導向的,它們的風格就是會透由物件來創出實例。
重要的物件導向程式語言包含Common Lisp、Python、C++、Objective-C、Smalltalk、Delphi、Java、Swift、C#、Perl、Ruby 與 PHP等。



目錄


1 特徵

1.1 分享非物件導向程式前身語言
1.2 類別與物件
1.3 動態配置與訊息傳遞機制
1.4 封裝性
1.5 繼承
1.6 多型
1.7 抽象性


2 歷史
3 物件導向編程語言

3.1 腳本中的OOP


4 參見
5 參考文獻
6 延伸閱讀
7 外部連結



特徵[編輯]
物件導向程式編程的定義是使用「物件」來做設計，但並非所有的程式語言都直接支援「物件導向程式編程」相關技術與結構。對於OOP的準確定義及其本意存在著不少爭論。通常，OOP被理解為一種將程式分解為封裝資料及相關操作的模組而進行的編程方式。有別於其它編程方式，OOP中的與某資料類別型相關的一系列操作都被有機地封裝到該資料類別型當中，而非散放於其外，因而OOP中的資料類別型不僅有著狀態，還有著相關的行為。
OOP理論，及與之同名的OOP實踐相結合創造出了新的一個編程架構；OOP思想被廣泛認為是非常有用的，以致一套新的編程典範被創造了出來。（其它的編程典範例如函數語言程式設計或程序式編程專註於程式執行的過程，而邏輯編程專註於引發程式代碼執行的斷言）。對面向模擬系統的語言（如：SIMULA 67）的研究及對高可靠性系統架構（如：高效能作業系統和CPU的架構）的研究最終導致了OOP的誕生。其中由Deborah J. Armstrong進行的長達40年之久的電腦著作調查中，顯示出了一系列物件導向程式設計的基本理論。物件導向程式特徵被條列如下[3][4][5][6]
分享非物件導向程式前身語言[編輯]
物件導向程式設計通常共享高階編程語言的低階功能。可用於建構一個程式的基本工具包括：

變數 能儲存一些內建型態的資訊如整數與字元，也有些是資料結構像是字串、串列與雜湊表等包含內建或複合的變數如指標。
程式：也稱為函式、方法或常式，是指輸入資料產生輸出結果，現代語言還包含結構化編程結構如程式迴圈與條件。

類別與物件[編輯]
支援物件導向編程語言通常利用繼承其他類別達到代碼重用和可擴展性的特性。而類別有兩個主要的概念：

類別（Class）：定義了一件事物的抽象特點。類別的定義包含了資料的形式以及對資料的操作。
物件：是類別的實例。

其中類別別（Class）定義了一件事物的抽象特點。類別的定義包含了資料的形式以及對資料的操作。舉例來說，「狗」這個類別會包含狗的一切基礎特徵，即所有「狗」都共有的特徵或行為，例如它的孕育、毛皮顏色和吠叫的能力。類別可以為程式提供模版和結構。一個類別的方法和屬性被稱為「成員」。 我們來看一段虛擬碼：

類別 狗
開始
    公有成員:
        吠叫():
    私有成員:
        毛皮顏色:
        孕育:
結束


在這串代碼中，我們聲明瞭一個類別，這個類別具有一些狗的基本特徵。關於公有成員和私有成員，請參見下麵的繼承性一節。
物件（Object）是類別的例項。物件有時會對應到現實世界中的事物，舉例來說，一個圖形程式可能有圓形、矩形與畫面等物件，一個線上購物系統可能有購物車、顧客與產品等類別。[7]。有時物件會表示更抽象的實體，比如一個被開啟的檔案或是一個提供美國慣用量測轉換的服務。每個物件就是一個特定類別的實例（例如，名稱是「瑪麗」的物件可能是類別雇員的一個實例）。程式在物件導向編程當中被視為方法，變數被視為成員或屬性。例如，「狗」這個類別列舉狗的特點，從而使這個類別定義了世界上所有的狗。而萊絲這個物件則是一條具體的狗，它的屬性也是具體的。狗有皮毛顏色，而萊絲的皮毛顏色是棕白色的。因此，萊絲就是狗這個類別的一個例項。一個具體物件屬性的值被稱作它的「狀態」。（系統給物件分配記憶體空間，而不會給類別分配記憶體空間。這很好理解，類別是抽象的系統不可能給抽象的東西分配空間，而物件則是具體的。）
假設我們已經在上面定義了狗這個類別，我們就可以用這個類別來定義物件：

定義萊絲是狗
萊絲.毛皮顏色:棕白色
萊絲.吠叫()

我們無法讓狗這個類別去吠叫，但是我們可以讓物件「萊絲」去吠叫，正如狗可以吠叫，但沒有具體的狗就無法吠叫。
類別和物件就好比是「實型」和「1.23」，「實型」是一種資料的類別型，而「1.23」是一個真正的「實數」（即物件）。所有的「實數」都具有「實型」所描訴的特徵，如「實數的大小」，系統則分配記憶體給「實數」儲存具體的數值。
動態配置與訊息傳遞機制[編輯]
定義上動態配置是指方法會隨著實例動態的改變。而訊息傳遞機制（Message Passing）是指一個物件通過接受訊息、處理訊息、傳出訊息或使用其他類別的方法來實作一定功能。如：萊絲可以通過吠叫引起人的註意，從而導致一系列的事發生。
封裝性[編輯]
具備封裝性（Encapsulation）的物件導向程式設計隱藏了某一方法的具體執行步驟，取而代之的是通過訊息傳遞機制傳送訊息給它。封裝是通過限制只有特定類別的物件可以存取這一特定類別的成員，而它們通常利用介面實作訊息的傳入傳出。舉個例子，介面能確保幼犬這一特徵只能被賦予狗這一類別。通常來說，成員會依它們的存取權限被分為3種：公有成員、私有成員以及保護成員。有些語言更進一步：Java可以限制同一包內不同類別的存取；C#和VB.NET保留了為類別的成員聚集準備的關鍵字：internal（C#）和Friend（VB.NET）；Eiffel語言則可以讓使用者指定哪個類別可以存取所有成員。
具備封裝性（Encapsulation）的物件導向程式設計隱藏了某一方法的具體執行步驟，取而代之的是通過訊息傳遞機制傳送訊息給它。因此，舉例來說，「狗」這個類別有「吠叫()」的方法，這一方法定義了狗具體該通過什麼方法吠叫。但是，萊絲的朋友並不知道它到底是如何吠叫的。
從例項來看：

/* 一個程序導向的程式會這樣寫： */
定義萊絲
萊絲.設定音調(5)
萊絲.吸氣()
萊絲.吐氣()

/* 而當狗的吠叫被封裝到類別中，任何人都可以簡單地使用： */
定義萊絲是狗
萊絲.吠叫()

繼承[編輯]
繼承性（Inheritance）是指，在某種情況下，一個類別會有「子類別」。子類別比原本的類別（稱為父類別）要更加具體化。例如，「狗」這個類別可能會有它的子類別「牧羊犬」和「吉娃娃犬」。在這種情況下，「萊絲」可能就是牧羊犬的一個例項。子類別會繼承父類別的屬性和行為，並且也可包含它們自己的。我們假設「狗」這個類別有一個方法（行為）叫做「吠叫()」和一個屬性叫做「毛皮顏色」。它的子類別（前例中的牧羊犬和吉娃娃犬）會繼承這些成員。這意味著程式設計師只需要將相同的代碼寫一次。
在虛擬碼中我們可以這樣寫：

類別牧羊犬:繼承狗

定義萊絲是牧羊犬
萊絲.吠叫()    /* 註意這裡呼叫的是狗這個類別的吠叫方法。*/

回到前面的例子，「牧羊犬」這個類別可以繼承「毛皮顏色」這個屬性，並指定其為棕白色。而「吉娃娃犬」則可以繼承「吠叫()」這個方法，並指定它的音調高於平常。子類別也可以加入新的成員，例如，「吉娃娃犬」這個類別可以加入一個方法叫做「顫抖()」。設若用「牧羊犬」這個類別定義了一個例項「萊絲」，那麼萊絲就不會顫抖，因為這個方法是屬於吉娃娃犬的，而非牧羊犬。事實上，我們可以把繼承理解為「是」或「屬於」。萊絲「是」牧羊犬，牧羊犬「屬於」狗類別。因此，萊絲既得到了牧羊犬的屬性，又繼承了狗的屬性。 我們來看虛擬碼：

類別吉娃娃犬:繼承狗
開始
   公有成員:
      顫抖()
結束
類別牧羊犬:繼承狗

定義萊絲是牧羊犬
萊絲.顫抖()    /* 錯誤：顫抖是吉娃娃犬的成員方法。 */

當一個類別從多個父類別繼承時，我們稱之為「多重繼承」。如一隻狗既是吉娃娃犬又是牧羊犬（雖然事實上並不合邏輯）。多重繼承並不總是被支援的，因為它很難理解，又很難被好好使用。
多型[編輯]
多型（Polymorphism）是指由繼承而產生的相關的不同的類別，其物件對同一訊息會做出不同的回應[8]。例如，狗和雞都有「叫()」這一方法，但是呼叫狗的「叫()」，狗會吠叫；呼叫雞的「叫()」，雞則會啼叫。 我們將它體現在虛擬碼上：

類別狗
開始
   公有成員:
       叫()
       開始
          吠叫()
       結束
結束

類別雞
開始
   公有成員:
       叫()
       開始
          啼叫()
       結束
結束

定義萊絲是狗
定義魯斯特是雞
萊絲.叫()
魯斯特.叫()

這樣，雖然同樣是做出叫這一種行為，但萊絲和魯斯特具體做出的表現方式將大不相同。多型性的概念可以用在運算子過載上，本文不再贅述。
抽象性[編輯]
抽象（Abstraction）是簡化複雜的現實問題的途徑，它可以為具體問題找到最恰當的類別定義，並且可以在最恰當的繼承級別解釋問題。舉例說明，萊絲在大多數時候都被當作一條狗，但是如果想要讓它做牧羊犬做的事，你完全可以呼叫牧羊犬的方法。如果狗這個類別還有動物的父類別，那麼你完全可以視萊絲為一個動物。
歷史[編輯]
物件導向程式設計的雛形，早在1960年的Simula語言中即可發現，當時的程式設計領域正面臨著一種危機：在軟硬體環境逐漸複雜的情況下，軟體如何得到良好的維護？物件導向程式設計在某種程度上通過強調可重複性解決了這一問題。20世紀70年代的Smalltalk語言在物件導向方面堪稱經典——以至於30年後的今天依然將這一語言視為物件導向語言的基礎。
電腦科學中物件和例項概念的最早萌芽可以追溯到麻省理工學院的PDP-1系統。這一系統大概是最早的基於容量架構（capability based architecture）的實際系統。另外1963年Ivan Sutherland的Sketchpad應用中也蘊含了同樣的思想。物件作為編程實體最早是於1960年代由Simula 67語言引入思維。Simula這一語言是奧利-約翰·達爾和克利斯登·奈加特在挪威奧斯陸電腦中心為模擬環境而設計的。（據說，他們是為了模擬船隻而設計的這種語言，並且對不同船隻間屬性的相互影響感興趣。他們將不同的船隻歸納為不同的類別，而每一個物件，基於它的類別，可以定義它自己的屬性和行為。）這種辦法是分析式程式的最早概念體現。在分析式程式中，我們將真實世界的物件對映到抽象的物件，這叫做「模擬」。Simula不僅引入了「類別」的概念，還應用了例項這一思想——這可能是這些概念的最早應用。
20世紀70年代全錄PARC研究所發明的Smalltalk語言將物件導向程式設計的概念定義為，在基礎運算中，對物件和訊息的廣泛應用。Smalltalk的建立者深受Simula 67的主要思想影響，但Smalltalk中的物件是完全動態的——它們可以被建立、修改並銷毀，這與Simula中的靜態物件有所區別。此外，Smalltalk還引入了繼承性的思想，它因此一舉超越了不可建立例項的程式設計模型和不具備繼承性的Simula。此外，Simula 67的思想亦被應用在許多不同的語言，如Lisp、Pascal。
物件導向程式設計在80年代成為了一種主導思想，這主要應歸功於C++——C語言的擴充版。在圖形化使用者介面（GUI）日漸崛起的情況下，物件導向程式設計很好地適應了潮流。GUI和物件導向程式設計的緊密關聯在Mac OS X中可見一斑。Mac OS X是由Objective-C語言寫成的，這一語言是一個仿Smalltalk的C語言擴充版。物件導向程式設計的思想也使事件處理式的程式設計更加廣泛被應用（雖然這一概念並非僅存在於物件導向程式設計）。一種說法是，GUI的引入極大地推動了物件導向程式設計的發展。
蘇黎世聯邦理工學院的尼克勞斯·維爾特和他的同事們對抽象資料和模組化程式設計進行了研究。Modula-2將這些都包括了進去，而Oberon則包括了一種特殊的物件導向方法——不同於Smalltalk與C++。
物件導向的特性也被加入了當時較為流行的語言：Ada、BASIC、Lisp、Fortran、Pascal以及種種。由於這些語言最初並沒有物件導向的設計，故而這種糅合常常會導致相容性和維護性的問題。與之相反的是，「純正的」物件導向語言卻缺乏一些程式設計師們賴以生存的特性。在這一大環境下，開發新的語言成為了當務之急。作為先行者，Eiffel成功地解決了這些問題，並成為了當時較受歡迎的語言。
在過去的幾年中，Java語言成為了廣為應用的語言，除了它與C和C++語法上的近似性。Java的可移植性是它的成功中不可磨滅的一步，因為這一特性，已吸引了龐大的程式設計師群的投入。
在最近的電腦語言發展中，一些既支援物件導向程式設計，又支援程序導向程式設計的語言悄然浮出水面。它們中的佼佼者有Python、Ruby等等。
正如程序導向程式設計使得結構化程式設計的技術得以提升，現代的物件導向程式設計方法使得對設計模式的用途、契約式設計和建模語言（如UML）技術也得到了一定提升。
物件導向編程語言[編輯]
支援部分或絕大部分物件導向特性的語言即可稱為基於物件的或物件導向的語言。Simula (1967)被視為第一個具有物件導向特性的語言。早期，完全物件導向的語言主要包括Smalltalk等語言，目前較為流行的語言中有Java、C#、Eiffel等。隨著軟體工業的發展，比較早的程序導向的語言在近些年的發展中也紛紛吸收了許多物件導向的概念，比如C→C++，C→Objective-C，BASIC→Visual Basic→Visual Basic .NET，Pascal→Object Pascal，Ada→Ada95。「純粹」的物件導向語言, 因為所有的東西都是由物件所組成，例如: Eiffel, Emerald,[9] JADE, Obix, Ruby, Scala, Smalltalk, Self.
腳本中的OOP[編輯]
近年來，物件導向的程式設計越來越流行於手稿語言中。Python和Ruby是建立在OOP原理的指令碼語言，Perl和PHP亦分別在Perl 5和PHP 4時加入物件導向特性。
參見[編輯]

一次且僅一次（once and only once，OAOO）
Distributed Component Object Model
UML

參考文獻[編輯]


^ Kindler, E.; Krivy, I. Object-Oriented Simulation of systems with sophisticated control. International Journal of General Systems: 313–343. 2011. 
^ Lewis, John; Loftus, William. Java Software Solutions Foundations of Programming Design 6th ed. Pearson Education Inc. 2008. ISBN 0-321-53205-8. , section 1.6 "Object-Oriented Programming"
^ Deborah J. Armstrong. The Quarks of Object-Oriented Development. A survey of nearly 40 years of computing literature which identified a number of fundamental concepts found in the large majority of definitions of OOP, in descending order of popularity: Inheritance, Object, Class, Encapsulation, Method, Message Passing, Polymorphism, and Abstraction.
^ John C. Mitchell, Concepts in programming languages, Cambridge University Press, 2003, ISBN 0-521-78098-5, p.278. Lists: Dynamic dispatch, abstraction, subtype polymorphism, and inheritance.
^ Michael Lee Scott, Programming language pragmatics, Edition 2, Morgan Kaufmann, 2006, ISBN 0-12-633951-1, p. 470. Lists encapsulation, inheritance, and dynamic dispatch.
^ Pierce, Benjamin. Types and Programming Languages. MIT Press. 2002. ISBN 0-262-16209-1. , section 18.1 "What is Object-Oriented Programming?" Lists: Dynamic dispatch, encapsulation or multi-methods (multiple dispatch), subtype polymorphism, inheritance or delegation, open recursion ("this"/"self")
^ Booch, Grady. Software Engineering with Ada. Addison Wesley. 1986: 220. ISBN 978-0805306088. Perhaps the greatest strength of an object-oriented approach to development is that it offers a mechanism that captures a model of the real world. 
^ 譚浩強：《C++物件導向程式設計》，清華大學出版社，2006年1月第一版。ISBN 978-7-302-12315-6
^ The Emerald Programming Language. 2011-02-26. 


延伸閱讀[編輯]

Abadi, Martin; Luca Cardelli. A Theory of Objects. Springer Verlag. 1998. ISBN 0-387-94775-2. 
Abelson, Harold; Gerald Jay Sussman. Structure and Interpretation of Computer Programs. MIT Press. 1997. ISBN 0-262-01153-0. 
Armstrong, Deborah J. The Quarks of Object-Oriented Development. Communications of the ACM. February 2006, 49 (2): 123–128 [8 August 2006]. ISSN 0001-0782. doi:10.1145/1113034.1113040. 
Booch, Grady. Object-Oriented Analysis and Design with Applications. Addison-Wesley. 1997. ISBN 0-8053-5340-2. 
Eeles, Peter; Oliver Sims. Building Business Objects. John Wiley & Sons. 1998. ISBN 0-471-19176-0. 
Gamma, Erich; Richard Helm, Ralph Johnson, John Vlissides. Design Patterns: Elements of Reusable Object Oriented Software. Addison-Wesley. 1995. ISBN 0-201-63361-2.  引文使用過時參數coauthors (幫助)
Harmon, Paul; William Morrissey. The Object Technology Casebook - Lessons from Award-Winning Business Applications. John Wiley & Sons. 1996. ISBN 0-471-14717-6. 
Jacobson, Ivar. Object-Oriented Software Engineering: A Use Case-Driven Approach. Addison-Wesley. 1992. ISBN 0-201-54435-0. 
Kay, Alan. The Early History of Smalltalk. 
Meyer, Bertrand. Object-Oriented Software Construction. Prentice Hall. 1997. ISBN 0-13-629155-4. 
Pecinovsky, Rudolf. OOP - Learn Object Oriented Thinking & Programming. Bruckner Publishing. 2013. ISBN 978-80-904661-8-0. 
Rumbaugh, James; Michael Blaha; William Premerlani; Frederick Eddy; William Lorensen. Object-Oriented Modeling and Design. Prentice Hall. 1991. ISBN 0-13-629841-9. 
Schach, Stephen. Object-Oriented and Classical Software Engineering, Seventh Edition. McGraw-Hill. 2006. ISBN 0-07-319126-4. 
Schreiner, Axel-Tobias. Object oriented programming with ANSI-C. Hanser. 1993. ISBN 3-446-17426-5. hdl:1850/8544.  參數|id=值左起第40位存在刪除符 (幫助)
Taylor, David A. Object-Oriented Information Systems - Planning and Implementation. John Wiley & Sons. 1992. ISBN 0-471-54364-0. 
Weisfeld, Matt. The Object-Oriented Thought Process, Third Edition. Addison-Wesley. 2009. ISBN 0-672-33016-4. 
West, David. Object Thinking (Developer Reference). Microsoft Press. 2004. ISBN 0735619654. 

外部連結[編輯]



維基語錄上的相關摘錄：Object-orientation





維基學院中的Topic:Object-Oriented Programming相關學習資源：

物件導向程式設計






您可以在維基教科書中尋找此百科條目的相關電子教程：
Object Oriented Programming



開放式目錄計劃中和Object-oriented programming相關的內容
Introduction to Object Oriented Programming Concepts (OOP) and More by L.W.C. Nirosh
Discussion about the flaws of OOD
OOP Concepts (Java Tutorials)









閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類別型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類別系統進行分類別。











權威控制



LCCN: sh87007503
GND: 4233947-9
BNF: cb12115131k（資料）
NDL: 00937980
BNE: XX537453












 
						取自 "https://zh.wikipedia.org/w/index.php?title=面向對象程序設計&oldid=43533641"					
2 個分類：編程典範物件導向的程序設計隱藏分類：使用ISBN魔術連結的頁面含有英語的條目含有過時參數的引用的頁面引文格式1錯誤：不可見字符包含規範控制信息的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AfrikaansالعربيةAzərbaycancaБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBosanskiCatalàČeštinaDanskDeutschΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiFrançaisGalegoעבריתहिन्दीHrvatskiMagyarՀայերենBahasa IndonesiaIlokanoIdoÍslenskaItaliano日本語ქართულიҚазақша한국어КыргызчаLatinaLietuviųLatviešuМакедонскиമലയാളംМонголBahasa Melayuမြန်မာဘာသာNorsk nynorskNorsk bokmålPolskiPortuguêsRomânăРусскийРусиньскыйSicilianuScotsSrpskohrvatski / српскохрватскиSimple EnglishSlovenčinaShqipСрпски / srpskiSvenskaதமிழ்ไทยTürkçeУкраїнськаاردوTiếng Việt吳語粵語 
編輯連結 





 本頁面最後修訂於2017年3月8日 (週三) 22:43。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 












天瓏網路書店-深入淺出物件導向分析與設計 (Head First Object-Oriented Analysis and Design)



































天瓏網路書店
全台最齊全
中英文電腦書專賣店







天瓏資訊圖書粉絲專頁




搜尋


資料科學
簡體書
Packt
微服務
工程師必讀經典
英文書新到貨
Python
Tensorflow
無瑕程式碼








        深入淺出物件導向分析與設計 (Head First Object-Oriented Analysis and Design)
        


        Brett D. McLaughlin, Gary Pollice, Dave West 著、楊仁和 譯
        
      




 


出版商:
歐萊禮


出版日期:
2007-03-19


定價:
$880


售價:

7.9 折
          $695



語言:
繁體中文


頁數:
604


ISBN:
9867794990

ISBN-13:
9789867794994


相關標籤:

設計模式、物件導向、重構、UML






      立即出貨
        (庫存 > 10)













買這商品的人也買了...







 
$880
              售價: $695
          
深入淺出設計模式 (Head First Design Patterns)





 
$680
              售價: $537
          
深入淺出軟體開發 (Head First Software Development)





 
$880
              售價: $695
          
深入淺出 Java 程式設計, 2/e (Head First Java, 2/e)





 
$620
              售價: $527
          
大話設計模式





 
$800
              售價: $632
          
重構─改善既有程式的設計, 2/e (Refactoring: Improving The Design of Existing Code)





 
$880
              售價: $695
          
深入淺出 SQL (Head First SQL)





 
$940
              售價: $700
          
無瑕的程式碼－敏捷軟體開發技巧守則 + 番外篇－專業程式設計師的生存之道 (雙書合購)





 
$880
              售價: $695
          
深入淺出 JavaScript (Head First JavaScript)





 
$580
              售價: $458
          
程式設計師的自我修養－連結、載入、程式庫





 
$580
              售價: $452
          
無瑕的程式碼－敏捷軟體開發技巧守則 (Clean Code: A Handbook of Agile Software Craftsmanship)





 
$980
              售價: $774
          
深入淺出 C# (Head First C#)





 
$990
              售價: $782
          
C++ Primer, 4/e (中文版)





 
$1,200
              貴賓價: $1,020
          
軟體建構之道 (Code Complete, 2/e)





 
$780
              售價: $616
          
深入淺出 Python (Head First Python)





 
$680
              售價: $537
          
深入淺出網路管理 (Head First Networking)





 
$550
              售價: $495
          
物件導向設計模式－可再利用物件導向軟體之要素(精裝典藏版) (Design Patterns: Elements of Reusable Object-Oriented Software)





 
$480
              售價: $379
          
人月神話：軟體專案管理之道 (20 週年紀念版)(The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition, 2/e)





 
$800
              貴賓價: $680
          
Head First 深入淺出 HTML、CSS 與 XHTML (Head First HTML with CSS & XHTML)





 
$880
              售價: $695
          
深入淺出 PMP (Head First PMP)





 
$500
              貴賓價: $450
          
Effective C++, 3/e (中文版) (Effective C++: 55 Specific Ways to Improve Your Programs and Designs, 3/e)




產品描述

本書特色

對坊間那些只有在成為專家以後，讀起來才有感覺的 OOA&D 書籍，你是否早已感到厭倦？你可能早就聽說過 OOA&D 書籍能幫你寫出偉大的軟體 — 讓老闆高興、客戶滿意的軟體。
但如何辦到呢？
《深入淺出物件導向分析與設計》將告訴你如何分析、設計、以及撰寫真正物件導向的軟體：容易重利用、好維護、可擴展的軟體；不再使你心碎的軟體；讓你增添新功能而不會破壞舊機制的軟體。在本書裡，你將學到如何： 

使用像是封裝與委派的 OO 原則，建立有彈性的應用程式。 
使用開閉原則（Open-Closed Principle）與單一責任原則（Single-Responsibility Principle），提升程式的重利用性。 
學習如何將 OO 原則、設計模式、及各種開發方法，通通整合到 OOA&D 專案的生命週期裡。 
運用 UML、使用案例、及使用案例圖，確保所有利害關係人都能清楚地進行溝通，協助你交付正確的軟體，符合每個人的需求。 

透過一連串的腦力開發，《深入淺出物件導向分析與設計》壓縮了學習與獲取複雜資訊所需的時間。可預期地，這將是一段充滿樂趣的學習之旅。相信，在讀完本書之時，你將能夠一貫地寫出偉大的軟體。
「《深入淺出物件導向分析與設計》對 OOA&D 這個主題的探討，令人耳目一新。讓這本書與眾不同之處，在於它將焦點擺在學習上，本書的諸位作者讓從業人員，對 OOA&D 的內涵不再感到遙不可及，而且在實務上確實有用。」
— Ivar Jacobson Ivar Jacobson 顧問、UML 之父
「隱匿在詼諧圖片與逗趣文字背後的，是對 OOA&D 這個主題認真、睿智、且極度精心鋪陳的闡述。閱讀本書時，感覺就像站在專家設計者的肩膀上，環顧四方，聆聽他對我一步步，細心傾訴著那些重要的議題，並且告訴我為什麼」
— Edward Sciore 波士頓學院電腦科學系副教授
「剛讀完這本書，我深深愛上它！我最喜歡的一件事，就是本書把焦點放在為什麼要實踐 OOA&D 的原因 — 寫出偉大的軟體！」
— Kyle Brown IBM 傑出工程師

 
本書內容

目錄 
序
誰適合讀這本書？
我們知道你在想什麼
後設認知
讓你的腦袋順從你
讀我
技術審閱小組
誌謝
1 偉大軟體由此開始：良好應用程式之基石 


永遠的搖滾樂
	Rick 金光閃閃的新應用程式
	什麼是你要改變的第一件事
	偉大軟體是⋯
	偉大軟體三步驟
	先聚焦在功能性
	測試驅動
	尋找問題
	分析
	應用基礎的 OO 原則
	設計一次，設計二次
	改變你的應用程式有多簡單？
	封裝變化之物
	委派
	最後的偉大軟體（就現在而言）
	OOA&D 關乎撰寫偉大軟體
	要點


2 給客戶所需之物：收集需求 


大顯身手的機會來了
	測試驅動
	不正確的使用（有一點）
	什麼是需求
	建立需求清單
	為錯誤預作規劃
	替代路徑處理系統的疑難問題
	介紹使用案例
	一個使用案例，三個部分
	按照使用案例檢查需求
	你的系統必須運作在現實世界裡
	認識快樂路徑
	OOA&D 工具箱 


3 山可移，此情永不渝⋯現在，情況有變：需求變更 


英雄！
	犧牲品？
	軟體分析與設計的不變真理
	是選擇性路徑？是替代路徑？誰能分得清？
	使用案例對你必須合理
	從開始到完成：單一使用情節
	替代路徑的真心話
	完成需求清單
	重複程式碼，遜！
	最後的測試驅動
	撰寫你自己的設計原則
	OOA&D 工具箱


4 將你的軟體帶進現實的世界：分析


一隻狗，二隻狗，三隻狗，四隻⋯
	你的軟體有其情境
	識別問題
	規劃解法
	兩個程式人員的故事
	委派繞道
	鬆弛耦合應用程式的威力
	註意使用案例裡的名詞
	從好分析到好類別
	類別圖剖析
	類別圖不是一切
	要點


5 第一部：諸行無常：良好的設計


Rick 的吉他事業蒸蒸日上
	抽象類別
	類別圖剖析（再一次）
	UML 小抄
	設計原則秘辛
	通往偉大軟體的三步驟（重訪）
	插曲：OO 大災難 


第二部：給你的軟體 30 分鐘的伸展操：彈性的軟體


回到 Rick 的搜尋工具
	仔細瞧瞧 search() 方法
	分析的好處
	類別與行為有關
	設計之死（決策）
	將壞的設計決策轉變成好的
	Rick 軟體裡的「雙封裝」
	千萬不要怕犯錯
	瞧！Rick 具有彈性的應用程式
	測試驅動「設計良好的軟體」
	改變 Rick 的軟體有多容易？
	「變更容易性」的大挑戰
	具有內聚力的類別善於處理單一事情
	設計／內聚力生命週期
	偉大軟體是「夠好」
	OOA&D 工具箱 


6 「假如我是真的」：解決真正的大問題 


解決大問題
	關鍵在於你如何看待大問題
	需求與使用案例是個好起點
	共通性與變化性
	整理功能
	功能與需求的差別
	使用案例不總是幫你看出整體概廓
	使用案例圖
	小小行為者
	行為者也是人（好吧，不全然）
	做點領域分析吧
	化整為零，個個擊破
	別忘了真正的客戶是誰
	何謂設計模式？
	OOA&D 的威力（以及一點基本常識）
	OOA&D 工具箱 


7 為混沌帶來次序：架構 


感覺有點頭昏嗎？
	我們需要架構
	從功能性開始
	什麼是架構上重要？
	架構三問
	減少風險
	使用情節有助於減少風險
	一次把焦點放在一個功能上
	架構是你的設計結構
	再訪共通性
	共通性分析：通往彈性軟體之路
	什麼意思？問客戶吧
	減少風險有助於偉大軟體的撰寫
	要點


8 原創性被高估：設計原則


設計原則大集合
	開閉原則（OCP）
	OCP，一步一步來
	不自我重複原則（DRY）
	DRY 全然關乎一個地方一個需求
	單一責任原則（SRP）
	找出多重責任
	從多重責任到單一責任
	Liskov 替代原則（LSP）
	子類別化之誤用：誤用繼承的案例研究
	LSP 揭露繼承結構所隱藏的問題
	子型別必須能替代其基礎型別
	違反 LSP 造成令人困惑的程式碼
	將功能委派給其他類別
	使用合成組合來自其他類別的行為
	聚合：合成，但沒有突然的結束
	聚合 vs. 組合
	繼承只是選項之一
	要項
	OOA&D 工具箱


9 軟體終究為客戶服務：反覆與測試


你的工具箱滿了
	偉大軟體的撰寫是反覆進行的
	更深入地反覆：兩種基本選擇
	功能驅動開發
	使用案例驅動開發
	兩種開發方式
	功能分析
	撰寫使用情節
	測試驅動開發
	共通性分析（再探）
	強調共通性
	強調封裝
	比對你的測試與設計
	測試案例剖析 ...
	向客戶證明
	我們一直在按契約編程
	按契約編程關乎信任
	防禦式編程
	將應用程式分解成較小的功能性團塊
	要點


10 機械獸⋯組合：OOA&D 生命週期


開發軟體，OOA&D 風格
	物件村的地鐵問題
	物件村地鐵圖
	功能清單
	使用案例反映使用性；功能反映功能性
	現在開始反覆
	仔細看看地鐵的表示
	使用或不使用 Line 類別
	物件村地鐵的關註要點（類別）
	保護你的類別
	中場休息
	回歸需求階段
	聚焦在程式，然後聚焦在客戶
	反覆讓問題變得比較容易
	路徑看起來像什麼？
	讓自己看看物件村
	第 3 次反覆，有人要試試嗎？
	路未央⋯


附錄一：本書遺珠


#1. IS-A 與 HAS-A 558
	#2. 使用案例格式
	#3. 反設計模式
	#4. CRC 卡
	#5. 統計數據
	#6. 循序圖
	#7. 狀態圖
	#8. 單元測試
	#9. 撰碼標準與可讀的程式碼
	#10. 重構


附錄二：歡迎光臨物件村 


UML 與類別圖
	繼承
	多型
	封裝
	要點



 








中文書籍分類

最新新書
2016 年度暢銷排行
暢銷排行 (2017/06)
暢銷排行 (2017/05)
暢銷排行 (2017/04)



活動主題列表

資料科學
CRC好書上架
簡體中文書最新到貨
PACKT 最新到貨
Effective 系列書
微服務系列書
Ruddy老師的敏捷教室
程式設計必讀經典系列
Springer好書上架
英文書最新到貨
資料視覺化系列書
Python 系列書籍
深度學習系列書籍
無瑕的程式碼 超值合購
Maker小天地



特價書籍

Bootstrap系列76折起
松崗暢銷書展5折起









	深入淺出物件導向分析與設計
















































                                                                      






















 




 
               















	 
           
           


























             















加入會員
忘記密碼


修改基本資料
會員權益
















	 
           
           







































	 
           
























‧為企劃書製作索引



‧增強素描真實感的秘密武器



‧建造 Who's Off Bot 的對話體驗


















	 
           
























臺北: (02)2788-2408 






臺中: (04)2452-7051 

 



高雄: (07)384-7699 


 



















































深入淺出物件導向分析與設計Head First Object-Oriented Analysis and Design 
                            
















作者：
                                                Brett D. McLaughlin,...






譯者： 楊仁和



書號：
A210
   
                                            出版日：
2010/12/07



ISBN：
9789867794994
   
                                            EAN：
9789867794994



紙本書價格： 880
   
                                            附件： 
無



電子書： 尚未出版






































  博客來    金石堂    天瓏     團體購書
























































 
回頁首







對坊間那些只有在成為專家以後，讀起來才有感覺的 OOA&D 書籍，你是否早已感到厭倦？你可能早就聽說過 OOA&D 書籍能幫你寫出偉大的軟體—讓老闆高興、客戶滿意的軟體。但如何辦到呢？《深入淺出物件導向分析與設計》將告訴你如何分析、設計、以及撰寫真正物件導向的軟體：容易重利用、好維護、可擴展的軟體；不再使你心碎的軟體；讓你增添新功能而不會破壞舊機制的軟體。在本書裡，你將學到如何： 使用像是封裝與委派的 OO 原則，建立有彈性的應用程式。 使用開閉原則（Open-Closed Principle）與單一責任原則（Single-Responsibility Principle），提升程式的重利用性。 學習如何將 OO 原則、設計模式、及各種開發方法，通通整合到 OOA&D 專案的生命週期裡。 運用 UML、使用案例、及使用案例圖，確保所有利害關係人都能清楚地進行溝通，協助你交付正確的軟體，符合每個人的需求。 透過一連串的腦力開發，《深入淺出物件導向分析與設計》壓縮了學習與獲取複雜資訊所需的時間。可預期地，這將是一段充滿樂趣的學習之旅。相信，在讀完本書之時，你將能夠一貫地寫出偉大的軟體。「《深入淺出物件導向分析與設計》對 OOA&D 這個主題的探討，令人耳目一新。讓這本書與眾不同之處，在於它將焦點擺在學習上，本書的諸位作者讓從業人員，對 OOA&D 的內涵不再感到遙不可及，而且在實務上確實有用。」— Ivar Jacobson Ivar Jacobson 顧問、UML 之父「隱匿在詼諧圖片與逗趣文字背後的，是對 OOA&D 這個主題認真、睿智、且極度精心鋪陳的闡述。閱讀本書時，感覺就像站在專家設計者的肩膀上，環顧四方，聆聽他對我一步步，細心傾訴著那些重要的議題，並且告訴我為什麼」— Edward Sciore 波士頓學院電腦科學系副教授「剛讀完這本書，我深深愛上它！我最喜歡的一件事，就是本書把焦點放在為什麼要實踐 OOA&D 的原因 — 寫出偉大的軟體！」— Kyle Brown IBM 傑出工程師







回頁首














深入淺出 Java 程式設計 第二版 深入淺出設計模式 深入淺出 SQL 














 
回頁首









1 偉大軟體由此開始：良好應用程式之基石 永遠的搖滾樂Rick 金光閃閃的新應用程式什麼是你要改變的第一件事偉大軟體是⋯偉大軟體三步驟先聚焦在功能性測試驅動尋找問題分析應用基礎的 OO 原則設計一次，設計二次改變你的應用程式有多簡單？封裝變化之物委派最後的偉大軟體（就現在而言）OOA&D 關乎撰寫偉大軟體要點2 給客戶所需之物：收集需求 大顯身手的機會來了測試驅動 不正確的使用（有一點）什麼是需求建立需求清單為錯誤預作規劃替代路徑處理系統的疑難問題介紹使用案例一個使用案例，三個部分按照使用案例檢查需求你的系統必須運作在現實世界裡認識快樂路徑 OOA&D 工具箱 3 山可移，此情永不渝⋯現在，情況有變：需求變更 英雄！犧牲品？軟體分析與設計的不變真理是選擇性路徑？是替代路徑？誰能分得清？使用案例對你必須合理從開始到完成：單一使用情節替代路徑的真心話完成需求清單重複程式碼，遜！最後的測試驅動撰寫你自己的設計原則OOA&D 工具箱4 將你的軟體帶進現實的世界：分析一隻狗，二隻狗，三隻狗，四隻⋯你的軟體有其情境識別問題規劃解法兩個程式人員的故事委派繞道鬆弛耦合應用程式的威力註意使用案例裡的名詞從好分析到好類別類別圖剖析類別圖不是一切 要點5 第一部：諸行無常：良好的設計Rick 的吉他事業蒸蒸日上抽象類別類別圖剖析（再一次）UML 小抄設計原則秘辛通往偉大軟體的三步驟（重訪） 插曲：OO 大災難 第二部：給你的軟體 30 分鐘的伸展操：彈性的軟體回到 Rick 的搜尋工具仔細瞧瞧 search() 方法分析的好處類別與行為有關設計之死（決策）將壞的設計決策轉變成好的Rick 軟體裡的「雙封裝」千萬不要怕犯錯瞧！Rick 具有彈性的應用程式測試驅動「設計良好的軟體」改變 Rick 的軟體有多容易？「變更容易性」的大挑戰具有內聚力的類別善於處理單一事情設計／內聚力生命週期偉大軟體是「夠好」 OOA&D 工具箱 6 「假如我是真的」：解決真正的大問題 解決大問題 關鍵在於你如何看待大問題 需求與使用案例是個好起點共通性與變化性整理功能功能與需求的差別使用案例不總是幫你看出整體概廓使用案例圖小小行為者 行為者也是人（好吧，不全然）做點領域分析吧化整為零，個個擊破別忘了真正的客戶是誰何謂設計模式？OOA&D 的威力（以及一點基本常識）OOA&D 工具箱 7 為混沌帶來次序：架構 感覺有點頭昏嗎？我們需要架構從功能性開始什麼是架構上重要？架構三問減少風險使用情節有助於減少風險一次把焦點放在一個功能上架構是你的設計結構再訪共通性共通性分析：通往彈性軟體之路什麼意思？問客戶吧減少風險有助於偉大軟體的撰寫要點8 原創性被高估：設計原則設計原則大集合開閉原則（OCP）OCP，一步一步來不自我重複原則（DRY）DRY 全然關乎一個地方一個需求單一責任原則（SRP）找出多重責任從多重責任到單一責任Liskov 替代原則（LSP）子類別化之誤用：誤用繼承的案例研究LSP 揭露繼承結構所隱藏的問題子型別必須能替代其基礎型別違反 LSP 造成令人困惑的程式碼將功能委派給其他類別使用合成組合來自其他類別的行為聚合：合成，但沒有突然的結束聚合 vs. 組合繼承只是選項之一要項OOA&D 工具箱9 軟體終究為客戶服務：反覆與測試你的工具箱滿了偉大軟體的撰寫是反覆進行的更深入地反覆：兩種基本選擇功能驅動開發使用案例驅動開發兩種開發方式功能分析撰寫使用情節測試驅動開發共通性分析（再探）強調共通性強調封裝比對你的測試與設計測試案例剖析 ...向客戶證明我們一直在按契約編程按契約編程關乎信任防禦式編程將應用程式分解成較小的功能性團塊要點10 機械獸⋯組合：OOA&D 生命週期開發軟體，OOA&D 風格物件村的地鐵問題物件村地鐵圖功能清單使用案例反映使用性；功能反映功能性現在開始反覆仔細看看地鐵的表示使用或不使用 Line 類別物件村地鐵的關註要點（類別）保護你的類別中場休息回歸需求階段聚焦在程式，然後聚焦在客戶反覆讓問題變得比較容易路徑看起來像什麼？讓自己看看物件村第 3 次反覆，有人要試試嗎？路未央⋯附錄一：本書遺珠#1. IS-A 與 HAS-A 558#2. 使用案例格式 #3. 反設計模式#4. CRC 卡#5. 統計數據#6. 循序圖#7. 狀態圖 #8. 單元測試#9. 撰碼標準與可讀的程式碼 #10. 重構附錄二：歡迎光臨物件村 UML 與類別圖繼承多型封裝 要點


















僅提供已加入碁峰會員之教師申請任教科目之教師資源：教學投影片、習題解答、教學樣書、線上測驗系統…，若申請未任教科目之教學資源，碁峰保有核發與否之權利。






若您已是碁峰教師會員，請直接於左方 教師登入區 輸入帳號密碼。






若您尚未加入會員，請先 加入會員，即可享有多項教師專屬服務。













 
遍佈北中南，陣容堅強的碁峰業務團隊，都將竭誠的為您服務





請利用申請表單填寫欲申請之相關教學資源，將盡快為您處理 




教學配件(教學投影片)













 










  
                                












 












關於碁峰│隱私權政策│聯絡我們    
                                檢視 : PC 版  手機版 






碁峰資訊股份有限公司 GOTOP INFORMATION INC. 
         臺北市南港區三重路66號7樓之6 / 7F.-6,No.66,Sanchong Rd.,Nangang District,Taipei 
         TEL:(02)2788-2408 FAX:(02)8192-4433 劃撥帳號:14244383 
         Copyright 2014© GOTOP   Information Inc, All Rights Reserved 請勿任意連結、轉載





















物件導向分析方法的七大好處 | iThome





















移至主內容















































 





物件導向分析方法的七大好處
 沒時間讀UML/OOAD書之挑讀筆記第 22 回物件導向分析（三）系統分析是挖掘系統需求的過程，除了物件導向分析外，還有三種重要的方法

 






 
按讚加入iThome粉絲團









 




 
文/iThome
|
2009-07-17發表
  

 









 系統分析方法是一種思考工具，可以協助我們思索並表達需求（requirements）。但是，「系統分析」（systems analysis）又是個什麼東西呢？簡單來說，我們在採取行動之前，先對問題（problem）進行瞭解且研究，這個事先研究的過程就是所謂的「系統分析」。更進一步來說，系統分析是一個挖掘系統需求的過程，它關註的是系統必須做些什麼（what）才能夠滿足客戶，而不是如何（how）實作出系統。正是因為系統分析關註的焦點是客戶對系統的要求，所以系統分析師開始動手進行系統分析的第一步驟，通常是從研讀客戶提供的文件和訪談客戶，開始著手。「需求文件」（requirement document）是系統分析過程中極為重要的產出，它主要具備下述特色：● 許多人士都會需要瞭解甚至同意需求文件的內容，常見的人士有客戶、問題領域專家、開發人員。● 在需求文件中，系統分析師將詳述系統所需，而這份需求聲明必須是完整的、一致的而且是可行的。● 在需求文件中所記載的需求，在落實之前或之後都必須持續維護且追蹤。● 在需求文件中，系統分析師不僅要記錄系統的功能性需求，還需要記錄非功能性需求。譬如，資料需求、性能需求、產能需求和測試需求等等，都是十分常見的非功能性需求。● 其他諸如系統必須處理的介面、必須適應的環境，及任何必須遵守的設計限制，都需明確記載在需求文件中。除了物件導向分析方法外，還有功能分解（Funcational Decomposition）、資料流程（Data Flow）和資訊建模（Information Modeling）這三種古典且重要的系統分析方法，物件導向分析方法可說是集大成者，它吸取這三種方法的精華，並且剔除其不理想的部分。功能分解顧名思義，「功能分解」就是把一整個系統細分成數個次系統（sub-system），再把一個次系統往下細分成數個功能，接著再繼續把一個功能往下細分成數個次功能（sub-function），然後再把次功能往下細分成更細小的次次功能；如此細分、細分、再細分…，一直到系統分析師心裡頭覺得可以了為止。總之，功能分解有著下列幾項主要的缺點，分別為：● 系統分析師必須高度仰賴過往開發過相似系統的經驗，才能夠得知該將系統細分成哪些次系統、功能及次功能。● 問題領域無法直接對映成功能，因此需要靠著系統分析師人工的方式來將問題領域對映成功能與次功能。● 也因此，到底要分解成幾個功能，而且又得往下細分到哪個層級，都沒有一定，隨著系統分析師的不同而有不同的決定。因為自由度太高，所以產出的結果難以理解，也難以形成共識，同時日後也不容易重用與維護。● 整個系統由數個次系統所組成；每一個次系統又由數個功能所組成；每一個功能再由數個次功能所組成…一層一層往下功能分解，再一層一層往上組成整個系統。由於功能的變動性太高，也因此造成系統的結構不穩定。因此，物件導向分析不以功能做為系統結構。主要是因為功能的變動頻率高，所以如果以功能做為系統結構，會導致系統結構經常隨著功能的變動而變動，因此導致系統結構的不穩定。取而代之的是，物件導向分析把功能分解的技術應用在分解服務上頭，將服務分解成小片的功能，再將這些小功能分派給物件。同時，還將這些變動頻率高的功能封裝在物件內部，使得功能隨著需求變動而改變時，不會影響到其他物件，而且也就不會導致系統陷入牽一髮而動全身的險境了。資料流程其實，資料流程方法就是鼎鼎有名的「結構化分析」（structured analysis）。許多人耳熟能詳的「資料流程圖」（Data Flow Diagram），正是結構化分析方法中非常具有代表性的技術。在套用資料流程方法時，系統分析師將真實世界化成資料流與程序（process），各式的資料會流進或流出不同的處理程序。請看到圖1，這是張資料流程圖片段，訂單資料隨著資料流的箭頭方向流進結帳程序，待結帳程序執行完畢之後，將輸出另一份名為出貨單的資料，並且繼續流入下一個出貨程序。圖1：資料流程圖（片段）不僅如此，資料流程也有層級的概念，套用功能分解的技術，可以將程序往下細分成次程序。資訊建模在資訊建模方法中，最赫赫有名的技術便是「實體關聯圖」（Entity Relationship Diagram）了。相信多數使用關聯式資料庫的開發人員，到目前為止，可能都還在使用這項技術呢！請看到圖2，這是一張局部的實體關聯圖，圖中有兩個實體（Entity），分別名為顧客與訂單。而且，顧客與訂單兩者之間存在著一對多（1：N）的關聯性，也就是說，一個顧客擁有多筆訂單，而每一筆訂單只能被一個顧客所擁有。再者，以橢圓圖示代表實體的屬性（Attribute），所以顧客有兩個屬性，分別名為：姓名與電話。訂單實體也有兩項屬性，分別名為：金額與日期。圖2：實體關聯圖甚至到了1970年代中期，資訊建模還添加了物件概念。不過，雖說如此，相較於物件導向方法，資訊建模仍舊只是個不完全的方法，因為它缺少了下列幾項在物件導向中非常重要的概念：● 服務（Service）：也就是「操作」（operation），它會與屬性一塊被封裝在物件中。● 訊息（Messgae）：物件之間藉由傳遞訊息來進行溝通，以便協力合作達成特定目標。● 繼承（Inheritance）：把數個類別裡頭相同的屬性與操作獨立出來，再透過繼承關係來重用這些相同的部分。● 結構（Structure）：諸如一般化-特殊化關係、整體-部分關係，這些人類慣用的組織方法。物件導向對於想要說服部屬採用物件導向分析方法的主管，以及對於想要說服主管採用物件導向分析方法的部屬而言，物件導向分析可以帶來下列七項好處：1. 物件導向分析重視問題領域，因此能夠面對豐富多樣的問題領域。物件導向分析並沒有鎖定特定的問題領域，可以用來分析各式不同的問題領域。2. 物件導向分析採用人們慣用的組織方法來表達系統分析與規格內容，因此增進了系統分析師與領域專家之間的溝通、互動與瞭解。3. 物件導向分析將屬性與操作整合在同一個類別中，使得系統內部的資料結構（屬性）與行為結構（操作）一致。對比於古典的結構化分析方法，以實體關聯圖呈現資料結構，且以結構圖（Structure Chart）呈現行為結構，使得系統內部的資料結構與行為結構不一致。相反地，物件導向分析則將系統內部的資料結構與行為結構整合在一起，並且以類別圖呈現出來。4. 物件導向分析透過繼承概念，明顯地表達出可以共用的相同屬性與操作。5. 物件導向分析以穩定的問題領域結構來封裝易變的部分，以此形成具有彈性的系統結構，使得系統能夠順應需求的變動。6. 物件導向分析採用問題領域做為系統內部結構，因此提升了分析產出的重用（reuse）程度，無論是現在的重用或者是日後的重用。這是因為問題領域比較穩定，變化速度較為緩慢，所以結構的雷同性高，相對的重用程度當然就會提升。7. 無論是系統分析或系統設計都採用物件導向技術，因此從分析到設計都採用一致性的思維與圖示。此外，物件導向分析方法由五個主要的活動所組成，分別為：尋找類別與物件、確立結構、確立主題、定義屬性與定義服務。雖然，這五個活動並不需要依照順序進行，不過後續各回中，會依照此順序來介紹。
 


































 




 







 Advertisement


 

 

更多 iThome相關內容


  
 不能說的秘密背後的學問 

 歡迎來到資料監控的世界 

 產品如何讓人上癮靠這招 

 史丹佛名師的創業實現術 

 創投專家給創業者的忠告 

 新顛覆：平臺正吞噬世界 
 
 






 







 

熱門新聞






 


英國Wi-Fi業者使壞，讓2.2萬名用戶無意中同意去掃流動廁所

2017-07-18
 
 






 


Google 兩步驟驗證將以手機提示取代簡訊

2017-07-17
 
 






 


【AI關鍵技術】三大熱門深度學習框架新進展

2017-07-19
 
 






 


硬體不相容，部份英特爾Atom裝置無法升級Windows 10 Creators Update

2017-07-18
 
 






 


災難！CoinDash首度發行貨幣當天就被駭，損失近700萬美元

2017-07-18
 
 






 


微軟亞洲研究院院長洪小文：越複雜越不管用，AI最適合封閉型的高重複性任務

2017-07-17
 
 






 


安撫使用者不滿情緒，Skype聯絡人狀態顯示功能回來了!

2017-07-17
 
 






 


南韓代管業者Nayana遭勒索軟體攻擊，與駭客達成協議將支付110萬美元贖金

2017-06-21
 
 






 


2017年AI開始普及化，技術競賽白熱化

2017-07-15
 
 






 


國際警方聯手關閉暗網市集AlphaBay

2017-07-17
 
 



 

專題報導




企業行動化管理解決方案採購大特輯 


AI 100（上） 


公有雲儲存服務大盤點 


富士通AI新戰略 


企業身分驗證雲端服務採購特輯 

更多專題報導
 

 























軟體設計必讀經典(2)物件導向分析與設計入門 | iThome





















移至主內容















































 





軟體設計必讀經典(2)物件導向分析與設計入門
 物件責任的分派很容易被忽略，卻很重要。若不重視這個部分，將導致行為分散，造成系統的混亂與複雜。

 






 
按讚加入iThome粉絲團









 




 
文/iThome
|
2007-08-15發表
  

 









 翻譯自《Applying UML and Patterns 2nd edition》（目前已出至第三版）的《UML與樣式徹底研究》，是物件導向分析與設計最為暢銷的入門教科書之一，也是筆者踏入軟體設計領域的第一本書。
《UML與樣式徹底研究》的大綱架構，可說是最為標準的典型軟體工程式教科書。作者Craig Larman把他多年來豐富的教學經驗全都濃縮在本書內。第二版並導入UP（Unified Process）流程框架到大綱目錄內，讓讀者能大致掌握UP的 Milestone階段目標，與每次往覆（Iteration）的產出（Artifacts）。
系統開發的基本：瞭解需求
對軟體設計入門者而言，關於「需求」的討論是本書最有價值的部分。這本書是以需求作為系統開發的初端，再進而導出系統內部的結構分析、設計至實作等。使用案例模型（Use Case Model）的建立，是功能性需求當中最重要、用來發掘並記錄需求的一種機制，它會影響到系統開發之後的諸多環節。
UP所倡導的「4+1 View」，即是以使用案例作為驅動，並且涵蓋整個專案的重心所在。
本書在使用案例敘述部分寫得相當好，同時也揭露多種不同的寫作格式與風格，讓讀者得以選擇適合的需求寫作方式。除了使用案例外，作者也介紹輔助規格（記錄非功能性需求）、企業規則、字彙表、專案願景等其它功能需求，其實，這也是UP建議在需求製程的產出。參考範例的寫作方式不錯，但不要全盤照收，以免造成不必要的儀式與負擔。
物件導向分析設計精髓：物件責任的分派
物件責任的分派（Responsibility Assign）是本書最精彩之處，也是其它書籍所看不到的。
對SA／SD而言，責任的分派容易被忽略，相對來說卻最重要。要把軟體作「軟」，物件責任的分派是關鍵。舉例來說，誰負責訂購總額的計算？一般SA並不重視這個，可能就寫在表單（Form）、Stored-Procedure，或者功能性的物件上，導致行為的分散，因此造成系統的混亂與複雜。
如何熟練指派責任是SA在物件設計中最重要的事，作者提出GRASP（General Responsibility Assignment Software Patterns）的設計原則，裡面提出5種重要的責任設計樣式。
其中，高內聚力（High Cohesion）與低耦合性（Low Coupling），決定了軟體核心的穩定性。但兩者也經常相互衝突，它們之間的關係，可比擬為軟體工程的陰與陽，互相牽制且彼此影響。
系統內部的靜態結構分析：找出物件
至於如何找出建構領域模型，進而產出軟體規格設計圖的部分，作者仍是以傳統的方式──找名詞，以歸納概念性類別。雖然他又列出概念性類別分類清單，來協助SA找物件，但這仍不是個好方法，因為這是從需求的片段記錄來找尋物件，但需求並不穩定，相對來說，也不容易找出最具本質性（Essential）的核心物件。
當初我在看這一部分時，著實疑惑甚久，後來閱讀了Peter Coad《Object Modeling》一書，揭露出以交易為核心，來找出本質性的領域物件的作法，才總算得到滿意的解決方案。
以POST系統開發案例，串連各章節觀念
後面幾個章節，一般的讀者其實可以忽略不看。例如：利用設計樣式設計出永續性框架（Persistent Framework）。由於.NET的ADO.NET，以及J2EE的Hibernate等，都作得很好，我們只需學會如何使用即可。
總體而論，全書以一個POST系統開發為案例研討對象，包含需求分析記錄、領域模型建立、物件責任分派、系統規格模型設計等。讓讀者能透過案例跟著內容操作，將所有章節的觀念串連起來。
本書與《UML 精華》都是我鼓勵軟體從業人員必買的兩本好書，由於中譯本的翻譯品質甚佳，建議軟體公司都擺上一本，甚至舉辦讀書會鑽研一番。
 
UML與樣式徹底研究（Applying UML and Patterns）
Craig Larman /著
趙光正/譯
培生出版
售價：720元
 
《作者簡介》
王克明
臺北工專五專部電子科畢業。現於HSDc軟體設計顧問團隊擔任架構師／顧問／講師。興趣為整體架構性的思考與學習、期貨投機操作與閱讀。
相關閱讀：軟體設計必讀經典(1)以簡約之道介紹UML最實用的部分軟體設計必讀經典(3)洞悉易學難精的Use Case軟體設計必讀經典(4)知易行難的極致軟體製程軟體設計必讀經典(5)用科學化方式搞懂設計模式軟體設計必讀經典(6)RUP活用，也可以是敏捷開發軟體設計必讀經典(7)重構讓程式回到應有位置軟體設計必讀經典(8)由生活出發，輕鬆領會物件導向軟體設計必讀經典(9)優質使用者介面，源自好的狀態圖設計軟體設計必讀經典(10)幫助SA紮穩UML底子的實務手冊軟體設計必讀經典(11)反覆測試與修正，讓錯誤消失
 


































 




 







 Advertisement


 

 

更多 iThome相關內容


  
 不能說的秘密背後的學問 

 歡迎來到資料監控的世界 

 產品如何讓人上癮靠這招 

 史丹佛名師的創業實現術 

 創投專家給創業者的忠告 

 新顛覆：平臺正吞噬世界 
 
 






 







 

熱門新聞






 


英國Wi-Fi業者使壞，讓2.2萬名用戶無意中同意去掃流動廁所

2017-07-18
 
 






 


Google 兩步驟驗證將以手機提示取代簡訊

2017-07-17
 
 






 


【AI關鍵技術】三大熱門深度學習框架新進展

2017-07-19
 
 






 


硬體不相容，部份英特爾Atom裝置無法升級Windows 10 Creators Update

2017-07-18
 
 






 


災難！CoinDash首度發行貨幣當天就被駭，損失近700萬美元

2017-07-18
 
 






 


微軟亞洲研究院院長洪小文：越複雜越不管用，AI最適合封閉型的高重複性任務

2017-07-17
 
 






 


安撫使用者不滿情緒，Skype聯絡人狀態顯示功能回來了!

2017-07-17
 
 






 


南韓代管業者Nayana遭勒索軟體攻擊，與駭客達成協議將支付110萬美元贖金

2017-06-21
 
 






 


2017年AI開始普及化，技術競賽白熱化

2017-07-15
 
 






 


國際警方聯手關閉暗網市集AlphaBay

2017-07-17
 
 



 

專題報導




企業行動化管理解決方案採購大特輯 


AI 100（上） 


公有雲儲存服務大盤點 


富士通AI新戰略 


企業身分驗證雲端服務採購特輯 

更多專題報導
 

 










物件導向分析設計與應用(第三版)-金石堂網路書店














































會員功能列

 


加入會員
登入




您好
登出


會員專區
客服中心
查訂單


 
（ 0 件）0 元
結帳












購物車
（ 0 件）0 元
結帳



金石堂及銀行均不會請您操作ATM!  如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當!
    (詳情)




物件導向分析設計與應用(第三版)－金石堂網路書店歡迎您加入博客和facebook 臉書粉絲團！The largest retail books store chains in Taiwan! 





TOP關鍵字

2017希望書包
怪獸的產地
七龍珠
肆一 
蠟筆小新套票
抽EC






全館搜尋
中文書
英文書

雜誌
MOOK
文具
玩具親子
美妝配飾
3C
家電
運動休閒
居家生活
動漫部屋
日用清潔
食品




 

天花版bn

12345678910





購物目錄


首頁
3h快送
中文書
英文書

雜誌
MOOK
文具
美妝配飾
玩具親子
3C
家電
運動休閒
居家生活
日用清潔
動漫精品
食品






商品次目錄


新書
預購書
推薦書
套書
暢銷書排行榜
書展 / 特惠
讀者書評
出版社專區
香港出版品




 

    您的位置：金石堂網路書店
中文書
電腦資訊
網路／安全／概論
雲端技術
商品詳情

 


物件導向分析設計與應用(第三版)
                        










作者：Grady Booch，Michael W.En
追蹤



出版社：碁峰資訊  
出版社追蹤


出版日：2009/2/18

ISBN：9789861816074
語言：中文繁體
適讀年齡：全齡適讀


定價：720 元

特價：85 折 612 元 (可得紅利6點)
紅利優惠價：83 折 594 元 (折抵說明)紅利可抵：18 元 
信用卡紅利：可折抵多家銀行 (扣抵說明)
運送方式：全球配送　香港到店　國內宅配國內店取　












<<



>>


https://cdn.kingstone.com.tw/book/images/product/20147/2014713124524/2014713124524b.jpg














                           購買後立即為您進貨!立即購買 預計出貨日：2017/7/27



金石堂讀者好評
 
0 個人說讚，看排行 >






電腦資訊分類追蹤
使用此功能請先登入金石堂網路書店正式會員。這是什麼？




分享：
                            
                           	  










書籍介紹
其他讀者也買
強力推薦
讀者好評(0)
下標籤
團體專屬服務






內容簡介目錄
詳細資料






內容簡介 top 
《物件導向分析設計與應用(第三版)》
                                Grady Booch, Robert A. Maksimchuk, Michael W. Engle等著本書特色《物件導向分析設計與應用》一直以來都是學習物件導向技術的必備工具書，該技術經過多年演進，已然成為主流軟體開發領域的業界標準。現在，本書的第三版終於問世，而讀者也將能夠從中學習如何運用 UML 2.0 於物件導向分析設計。本書是由多位專家共同編寫，而 UML 的創始人 Grady Booch 亦為其中之一。作者們提供了個人豐富的物件導向系統開發經驗與方法，以協助軟體開發人員解決複雜的問題。除了詳細闡述物件模型的基本概念，他們還透過各種不同類型的應用程式範例來展示物件導向分析設計（OOAD）的方法，其應用領域涵蓋了系統架構、資料擷取、密碼分析、控制系統、以及 Web 應用程式等。讀者亦將發現書中有許多重要議題的實務建議，包括：分類方法、實作策略、以及有效的專案管理方法。新版增加了：‧UML 2.0 表示法的詳細說明（稱得上書中之書），其中包括基本用法與進階元素，並且特別點出了 UML 2.0 主要的改變。‧對塑模（modeling）方面的議題著墨更多（應讀者要求），而且書中的五個應用實例分別突顯了軟體開發生命週期中的不同階段。‧分析複雜系統的新途徑，包括使用 OOAD 與 UML 來設計軟體架構的新方法。‧詳細解釋物件模型經常被誤解的基礎概念，例如抽象化、封裝、模組化、繼承等等。‧提供有關開發團隊的人力資源分配，以及如何管理複雜系統之開發風險的相關建議。‧於附錄中提供幾種常見物件導向程式語言的簡單介紹，例如 Java 和 C++。對任何想要使用物件導向技術來管理、建構、與設計軟體系統的人來說，本書都提供了相當實用且重要的觀念與技術。Grady Booch 曾榮獲 IBM 院士，寫過六本有關物件導向程式設計的暢銷書籍。他也是全球公認的 OO 專家與 UML 創始人。Robert A. Maksimchuk 是 Unisys Chief Technology Office 的研究部主任，專長是研究新的塑模技術。他也是《UML for Mere Mortals》和《UML for Database Design》的作者。Michael W. Engle 是 Lockheed Martin 公司的首席工程師，他有超過二十六年的開發技術與管理經驗，曾擔任過專案起始到後勤支援整個開發生命週期的各種角色。身為一名系統架構師，Mike 是運用物件導向技術來解決複雜系統的各種分析設計問題。Bobbi J. Young 博士 是 Unisys Chief Technology Office 的研究部主管，她在 IT 產業有多年的實務經驗，並曾與美國國防部的簽約廠商及其他軟體公司合作。Jim Conallen 是 IBM Rational 的塑模驅動開發策略小組的軟體工程師，其主要工作是運用物件管理組織（OMG）的模型驅動架構（Model Driven Architecture；MDA）方法來設計 IBM Rational 的塑模工具。Kelli Houston 是 IBM Rational 的 IT 顧問。她也是方法架構師（method architect），負責設計與整合 IBM 內部使用的開發方法。
                            


目錄 top 
物件導向分析設計與應用(第三版)－目錄導覽說明

第一篇 概念第1章 複雜性第2章 物件模型第3章 類別與物件第4章 分類第二篇 方法第5章 圖形表示法第6章 流程第7章 實務第三篇 應用第8章 系統架構：衛星導航第9章 控制系統：交通管理第10章 人工智慧：密碼分析第11章 資料擷取：氣象觀測站 第12章 Web應用程式：請假管理系統附錄A 物件導向程式語言附錄B 延伸閱讀索引
                                





詳細資料top 

                               語言：中文繁體規格：平裝分級：普級開數：18開17*23cm頁數：712
                               出版地：台灣















雲端技術相關書籍
延伸閱讀推薦















共0篇好評top 
寫書評去 >










商品標籤 (什麼是標籤？)

物件導向



我的標籤新增









團體專屬服務top

團體專屬服務














訂購須知top 
防治詐騙，提醒您!!金石堂及銀行均不會請您操作ATM! 如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當! 

商品運送說明：
當商品送達金石堂門市或便利商店後，您會收到E-mail及APP出貨/到貨通知，您也可透過【訂單查詢】確認到貨情況。
建議您可下載『金石堂APP』並開啟推撥設定，即可收到相關出貨/到貨通知訊息。
並請您於指定期限內取貨付款，若逾期未取，您取貨的金石堂門市或便利商店將會辦理退貨作業。
產品顏色可能會因網頁呈現與拍攝關係產生色差，圖片僅供參考，商品依實際供貨樣式為準。 

退換貨說明：
依據「消費者保護法」第19條及行政院消費者保護處公告之「通訊交易解除權合理例外情事適用準則」，以下商品購買後，除商品本身有瑕疵外，將不提供7天的猶豫期：

                            1、 易於腐敗、保存期限較短或解約時即將逾期。（如：生鮮食品）
                            2、 依消費者要求所為之客製化給付。（客製化商品）
                            3、 報紙、期刊或雜誌。（含MOOK、外文雜誌）
                            4、 經消費者拆封之影音商品或電腦軟體。
                            5、 非以有形媒介提供之數位內容或一經提供即為完成之線上服務，經消費者事先同意始提供。（如：電子書、電子雜誌、下載版軟體、虛擬商品…等）
                            6、 已拆封之個人衛生用品。（如：內衣褲、刮鬍刀、除毛刀…等）
若非上列種類商品，商品均享有到貨7天的猶豫期（含例假日）。
辦理退換貨時，商品（組合商品恕無法接受單獨退貨）必須是您收到商品時的原始狀態（包含商品本體、配件、贈品、保證書、所有附隨資料文件及原廠內外包裝…等），請勿直接使用原廠包裝寄送，或於原廠包裝上黏貼紙張或書寫文字。退回商品若無法回復原狀，將請您負擔回復原狀所需費用，嚴重時將影響您的退貨權益。










中文書籍分類

文學財經企管生活風格飲食料理心理勵志醫療保健旅遊宗教命理教育/親子教養童書羅曼史輕小說漫畫語言／字辭典藝術設計電腦資訊
程式設計
網頁設計
繪圖／影音／多媒體
辦公軟體／應用軟體
作業系統
資料庫
3C數位生活
APPLE專區
認證考試
網路／安全／概論
網路技術
雲端技術
系統分析／設計
計算機概論
電腦專業辭典


其他電腦資訊

自然科普人文歷史社會哲思考試書／政府出版品參考書全部的分類 >>



手機版
物件導向分析設計與應用(第三版)




相關商品


雜誌



PC DIY! 7月2017第245期
數位狂潮DIGITREND 2017第44期
PC HOME 電腦家庭 7月2017第258期
MAXIMUM PC Spcl: BUILD IT:The Perfect PC Vol.2 2017
PC DIY! 6月2017第244期









外嵌連結
物件導向分析設計與應用(第三版)



在金石堂門市找此書
                         選擇縣市：

請選擇
基隆市
臺北市
新北市
桃園市
新竹市
新竹縣
宜蘭縣
苗慄市
苗慄縣
南投縣
臺中市
雲林縣
彰化縣
嘉義市
臺南市
高雄市
屏東縣

查詢












↑回上方

金石堂網路書店

首頁
關於金石堂網路書店
人才招募
客服中心
異業合作
出版情報
手機版
關於金石堂書店
金石堂書店全台門市



客服專線：02-2364-9989
傳真：02-2364-4672
客服時間：週一至週五 9：00∼12：30 及 13：30∼18：00（例假日除外）
地址：100 台灣臺北市中正區汀州路三段 160 巷 3 號 2 樓
Copyright©2016, Digital Kingstone Co., Ltd. 金石網絡股份有限公司






瀏覽本站建議使用：Internet Explorer 8.0 以上或 FireFox、Google Chrome、Safari 等瀏覽器。
本網站已依台灣網站內容分級規定處理且符合電子商務、安全交易















金石堂APP出/到貨提醒不漏接，讓您便利隨行
















.21































	
    物件導向分析與UML圖形
















This site requires javascript

                    為了能正常使用本網站
                    請您啟動瀏覽器的scripting設定
 
                    IE設定步驟
                    步驟一：工具/網際網路選項
                    步驟二：安全性/自訂等級
                    步驟三：指令碼處理，選擇啟用
                    關閉IE後再重新開啟IE，即可正常使用本網站。    
                

























課程介紹

課程查詢
課程進階查詢
說明會講座
申請重聽
Red Hat Internet Remote LAB線上申請
原廠介紹



Amazon Web Services

Adobe

Cisco 思科

Cloudera

EC-Council

EnterpriseDB

Guidance

(ISC)²

ITPreneurs

Microsoft 微軟

Oracle 甲骨文DB/BEA

Oracle 甲骨文Java/Solaris

PMI®

RedHat 紅帽

SGS

Salesforce

VMware

Veritas
Prometric
VUE





轉職培訓

恆逸轉職培訓網站
雲端虛擬化系統工程師就業認證養成班
互動式網站與Mobile App設計師養成班
智慧型手機應用程式設計實務班
微軟全方位網站程式設計師養成班
Java全方位Web程式設計師養成班
生產力4.0物聯網IoT智慧應用技術養成班
全省職訓補助專案課程


師資介紹

考試中心

考試最新訊息
各區考試中心
考試費用一覽表
國際認證考試報名流程
Prometric考試中心
VUE考試中心
Kryterion考試中心
報名Red Hat 認證考試
考試FAQ



關於恆逸

恆逸教育訓練中心介紹
臺北恆逸
新竹恆逸
臺中恆逸
高雄恆逸
原廠授權夥伴介紹
精誠資訊附設職訓中心介紹
精誠資訊附設職訓中心新竹分部介紹
精誠資訊附設職訓中心臺中分部介紹



企業服務

企業服務介紹
企業教育訓練點數
企業包班
場地租借
企業徵才



主題專區

恆逸轉職培訓網站
恆逸最新課程簡介
恆逸校園網站
恆逸學生網站
恆逸顧客證言網站
恆逸資訊安全網站
.NET程式開發 X 資料庫
廠商最新職缺


















 


首頁 > 課程查詢 > UML








程式設計開發必修 - UML
物件導向分析與UML圖形Object-Oriented Analysis and UML Diagrams 

時數：21小時
費用：NT$ 18,000
點數：4.5




選擇查詢分區開課時間

臺北
新竹
臺中
高雄



            開課時間請洽詢業務
聯絡恆逸





 臺北 17089 班
                        
                        
2017/08/22 ~ 2017/09/07每週二四18:30~22:00

報名





 臺北 17095 班
                        
                        
2017/11/11 ~ 2017/11/18每週六日09:00~17:00

報名







                點此展開更多課程時段
            



                點此收合列表
            





教材
恆逸專用教材
課程目標
本課程以專案實例循序漸進的方式，介紹UML的所有圖形，並詳細說明如何適當應用UML於軟體開發流程中。課程過程中會運用與強調物件導向分析概念，解說將設計轉換為實作的MDA模式驅動架構與程式重構的時機。讓您不僅學會物件導向分析與UML圖形，更能瞭解在實務中如何應用。
適合對象

系統或是軟體規劃與設計人員
要將UML導入軟體開發流程之專案經理、架構師
程式開發人員
欲瞭解UML圖形者

預備知識

具備程式開發基本概念
熟悉電腦基本操作
瞭解專案開發之流程

課程內容

UML使用案例圖(Use Case Diagram)
UML活動圖(Activity Diagram)
UML類別圖(Class Diagram)
UML循序圖(Sequence Diagram)
UML溝通圖(Communication Diagram)
UML物件圖(Object Diagram)
UML狀態機圖(State Machine Diagram)
UML時序圖(Timing Diagram)
UML套件圖(Package Diagram)
UML互動概觀圖(Interaction Overview Diagram)
UML複合結構圖(Composite Structure Diagram)
UML元件圖(Component Diagram)
UML部署圖(Deployment Diagram)
MDA模式驅動架構介紹
程式的重構
軟體開發與團隊合作

備註事項
課程優惠方案：
早鳥優惠價：開課前2周完成報名繳費，享有早鳥優惠價NT$16,200元




相關課程



關聯課程


軟體測試實務課程 

物件導向分析與UML圖形 

資料庫理論與設計基礎  

C與C++程式設計─初階與中階 

JavaScript程式設計與物件導向應用 

Python程式設計 

程式設計基本概論  


















說明會資訊



臺北場次

日期：07/21(五)

                        打造微軟程式設計師職涯講座
                    
免費參加


日期：07/25(二)

                        PMP®國際專案管理師認證講座
                    
免費參加


日期：07/27(四)

                        PDU專案管理講座-群英會診我專案
                    
免費參加


日期：08/09(三)

                        Java Web程式設計師養成班講座
                    
免費參加


日期：08/11(五)

                        智慧型手機App開發養成講座
                    
免費參加


日期：08/16(三)

                        多媒體RWD設計師養成班講座
                    
免費參加




更多講座訊息












物件導向的缺點是什麼? | Yahoo奇摩知識+




















 









   ⌂首頁信箱新聞股市名人娛樂氣象運動App下載購物中心商城拍賣更多⋁知識+汽車機車電影字典遊戲旅遊理財房地產時尚美妝折扣城   Yahoo 奇摩知識+                        👤 登入    ✉ 信箱     ⚙ 服務說明    帳號資料 服務說明 意見回報        
















Yahoo奇摩知識+ 首頁











所有分類
 
健康
 
商業與財經
 
娛樂與音樂
 
家居與園藝
 
家庭與人際關係
 
寵物
 
懷孕與育兒
 
政治與政府
 
教育與參考
 
新聞與活動
 
旅遊
 
汽車與交通
 
消費電子產品
 
環境
 
社會科學
 
社會與文化
 
科學
 
美容與造型
 
藝術與人文
 
遊戲與休閒活動
 
運動
 
電腦與網際網路
 
食品與飲料
 
餐廳與小吃
 





世界Yahoo 








阿根廷





澳洲





巴西





加拿大





法國





德國





印度





印尼





義大利





馬來西亞





墨西哥







紐西蘭





菲律賓





魁北克





新加坡





香港





西班牙





泰國





英國與愛爾蘭





美國





越南





西班牙文







關於





關於 Yahoo奇摩知識+
社群指南
排行榜
點數與等級
部落格
如何安全地使用 Yahoo奇摩

 








 電腦與網際網路

 軟體


 看另一則問題 










            物件導向的缺點是什麼?
        


看了很多書都提到了物件導向的優點 
就是沒看到他的缺點





 
追蹤 


 
 3 個解答 
3


檢舉不當使用









您確定要刪除此解答嗎？
是
否












 









抱歉，似乎發生一些問題。



Trending Now





 

解答


評分


最新
最舊







 



最佳解答: 
             張氏(2002)也在本身的觀察中指出物件導向的缺點： 
1.物件導向語言的門檻高。 
2.物件導向分析難度高，導入期長。 
3.物件導向分析與設計的時間較長。 
提到物件導向的缺點並非自我毀滅其存在的價值，物件導向正是為瞭解決問題而產生的技術，乃因以往分析技術並不會真正的將每一項任務詳細的分解精練，故物件導向之分析設計會花費比較多的時間，但這也究極解決了所有的問題，完整的分析任務與設計系統，並可以不斷的擴充與維護，比起以往的設計技術，物件導向才是企業永續的永恆之道。 

文獻 
張裕益，“UML理論與實作---個案研討與經驗分享”，博碩文化股份有限公司，2002。 




 參考資料： 
 


 匿名使用者 
 · 13 年前 





0
真讚



0
真遜





檢舉不當使用


意見





 




新增意見











送出












 · 剛才不久













                  發問者的評分
                













 = =上面的大哥 copy了一堆 那裡面講的還是物件導向的優點 哈哈~ 

其實物件導向的優點的確是多過於缺點  而且書上假如寫缺點 你還會買來看嗎? 

老實說 物件導向 在實做的時候 常常會發生 一行錯 步步錯的狀況 如果你有再寫VC++之類的東西你就能瞭解了 雖然他的變化很多 但死也死的很快  

而且針對一些和其他軟體介面的融合 需要花更多的精神 利用物件導向來做所謂的小程式 也變的很浪費 很多東西都變成虛幻的東西





 參考資料： 
 經驗 


 匿名使用者 
 · 13 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久



















 【物件導向式資料庫】  

定義：  
　　　根據 Khoshafian 資料庫大師的定義如下：  

　　　物件導向 = 抽象資料型別＋繼承＋物件識別元(object identity)  

　　　資料庫的能力 = 永存(persistence)＋並行控制(concurrency)＋交易控制(transactions)＋復原控制(recovery)  
　　　　　　　　　　＋查詢(query)＋版本控制(versioning)＋整合控制(integrity)＋安全控制(security)＋效能  
　　　　　　　　　　控制(performance)  

　　　物件導向式資料庫 = 物件導向 + 資料庫的能力  

　　　因此，物件導向式資料庫是將物件導向的概念，導入於資料庫中。並同樣使用物件導向的方法模  
　　　擬傳統資料庫的功能。  

【物件導向式資料庫的優缺點】  

優點：  
１、具有物件導向的功能。  
２、物件與物件之間有多樣化的關係。彌補了傳統資料庫的 1:1 、1:m 及 m:n 的不足處。  
３、可以處理大型(如多媒體資料)且複雜(如CAD/CAM資料)的資料，並合併資料與相對應的函數操作於同  
　　一物件中進行。  

缺點：  
可能無法完全模擬傳統資料庫的功能。  

【物件導向式資料庫的特性】  

１、資料庫與程式設計環境使用一致的資料模式  
　　物件導向的技術可以用在資料庫以及系統設計及開發上，因此不會造成資料庫的設計以及程式的  
　　設計使用了不同的資料模式，而造成錯誤。  

２、資料模型化能力  
　　由於物件導向技術具有資料模型化的能力，可以處理複雜以及龐大的資料結構以及物件關係，因  
　　此當系統或資料擴充時，並不會造成太大的影響，而且可以很彈性的加以修正及加強系統功能，  
　　這一點是關連式資料庫無法做到的。  

３、長時間交易  
　　關連式資料庫對於長時間的資料處理並無法提供良好的解決方法，但是物件導向資料庫則可以滿  
　　足此種需求，並不會因為長期的鎖住（lock）某筆資料而造成執行上或是使用上的困擾。  

４、執行效率較佳  
　　物件導向技術並不利用如關連式資料庫一樣的索引方式作資料處理。它支援了物件識別碼技術，  
　　因此可以非常快速的找出所要的物件。  

基於上述這些特性，可知物件導向式資料庫對於資料的處理方式確實具有較大的彈性。另外，其對於  
需要處理各種大量且複雜的資料，像是多媒體的影像、圖形、聲音等，或是需要表示資料間複雜關係  
的應用系統，都適合使用物件導向資料庫。  

除此之外，隨著網際網路的盛行，媒體資料的形式也趨向多元化；以往的資料庫只處理一些書目式的  
固定格式資料，未來將面對各式各樣的儲存格式，而物件導向式資料庫的特長正是在於儲存及管理各  
式各樣的媒體資訊。  

【傳統資料庫 v.s. 物件導向式資料庫】  

傳統資料庫的特點：  

１、整齊化一性 ( Uniforimity )  
　　大量結構相同的資料項目，有相同的 size 。  
２、資料錄導向 ( Record orientation )  
　　基本的資料項由固定長度記錄 ( fixed length record ) 組成。  
３、很小的資料項目 ( Small data items )  
　　每一筆 record 都很短，經常是 80 bytes 以內，最多也只有數百個 bytes 而已。  
４、基元欄位 ( Atomic fields )  
　　在一個 record 內的欄位都很短，而且長度固定。同時，在欄位內沒有結構 ( structure ) 。  
５、短交易 ( Short transaction )  
　　使用者備妥一筆交易 ( transaction ) 使之執行，並等待回應。  
６、靜態概觀架構 ( Static conceptual schema )  
　　資料庫的綱要 ( schema ) 並不常改變，即使變動，其改變的類別也很簡單。  

上述這些特點，對於一些新的應用卻有不足，如下：  

１、電腦輔助設計 ( Computed - aided design (CAD) )  
２、電腦輔助軟體工程 ( Computed -aided software engineering ( CASE )  
３、多媒體資料庫 ( Multimedia database )  
４、辦公室資訊系統 ( Office Information System )  
５、專家資料庫系統 ( Expert database system )  

以上這些新的應用，需要新的資料模型 ( data model ) 、新的查詢語言 ( query language ) 和新的交易模型  
( transaction models )，這些新的應用程式需求有：  

１、複雜的物件 ( Complex objects )  
　　一個複雜的物件本身是一個項目 ( item ) ，在真實的世界裡被視為一個單一物件，但是包含其它的  
　　物件。這些物件可能有任意複雜的內部結構。  

２、活動狀態的資料 ( Behavioral data )  
　　不同的物件對相同的指示 ( command ) 可能需要以不同的方法來反應。   

３、Meta Knowledge  
　　對應用程式而言，經常最重要的資料是關於應用程式的通則，而不是特定的 tuples 。  

兩者間的差異  




兩者最主要的差別是在於系統的被動的 ( passive ) 和主動的 ( active ) 活動狀態 ( behavior ) ，以及被實作的  
方法。  


傳統資料庫是屬於被動 ( passive ) 。例如，關聯式資料庫具體收集一些結構化的資料，當處理 ( process )  
和維護資料 ( Manipulated data ) 時，應用程式透過 DBMS 來存取。data 儲存在 data structure 內，處理資料  
產生需要的動作 ( action ) ，且那個 action 的結果寫回該 passive database 。  

在物件導向式資料庫裡，資料庫包括物件 ( objects ) 。它們是由 passive data 和 active data 所組成。用來反  
應該 object 的活動狀態 ( behavior ) 。如圖所示，當使用者的需求送至 object base ，該 objects 對此需求的反  
應是以一種包括它們的 behavior ，來發生必需的動作，改變 data 。





 參考資料： 
 http://www.cs.nchu.edu.tw/~fileman/notepad/db10.htm 


 匿名使用者 
 · 13 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久













 

檢舉不當使用

 我認為此問題違反社群指南 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此問題違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此解答違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此解答違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此意見違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此意見違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消



 

你可能對以下搜尋感興趣：


防毒軟體為您抵擋病毒攻擊

揉捏按壓在家輕鬆舒緩疲勞

暑假趴趴走輕鬆訂房出遊去

高效率學習程式設計












發問問題
通常可在幾分鐘內獲得解答！







展開»






詳細資料



詳細資料






現有問題




更多





請多詳述您的問題
上傳處理中




上傳失敗。 請上傳大於 100x100 像素的檔案
目前發生問題，請再試一次。
您只能上傳 PNG、JPG 或 JPEG 等類型的檔案。
您只能上傳 3GP、3GPP、MP4、MOV、AVI、MPG、MPEG 或 RM 等類型的檔案。
您只能上傳不超過 5 MB 的相片。
您只能上傳不超過 600 MB 的影片。
您只能上傳相片 (png, jpg, jpeg) 或影片 (3gp, 3gpp, mp4, mov, avi, mpg, mpeg, rm)。
您只能上傳相片或影片。
影片不應超過 <b>600mb/5 分鐘</b>
相片不應超過 <b>5mb</b>
影片不應超過 <b>600mb/5 分鐘</b>相片不應超過 <b>5mb</b>
  







解答問題


明明有下載程式，想要解除安裝，但控制台卻找不到，怎麼會這樣?



 

Word2010不能用?



 

電腦送修 有關GOOGLE資料夾?



 

我電腦裡的win10是在它免費時安裝的，照理說應該不用金鑰，可是後來念腦壞掉，給別人修一修，好了，過不久接上網路，卻突然跳出啟動金鑰，怎麼辦?



 


發燒問題




男人陽虛怎麼辦???

                  4 個解答
              

 

電腦看影片為何會斷斷續續的?

                  5 個解答
              

 

WELCOME色情視窗關不掉 求解QQ?

                  4 個解答
              

 
更多問題





我的電腦一直跳出新視窗?

             4 個解答
         

 

電腦桌面東西完全不見 工作管理員也無法開啟 但右鍵可以使用 求好心人幫忙解決?

             4 個解答
         

 

20170606
求line禮品小舖金頭腦送禮達人第2彈解答~~😀😀?

             8 個解答
         

 

  








服務條款


隱私權


RSS















