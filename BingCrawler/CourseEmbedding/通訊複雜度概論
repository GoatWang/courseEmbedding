

數位通訊概論 | Yahoo奇摩知識+




















 









   ⌂首頁信箱新聞股市名人娛樂氣象運動App下載購物中心商城拍賣更多⋁知識+汽車機車電影字典遊戲旅遊理財房地產時尚美妝折扣城   Yahoo 奇摩知識+                        👤 登入    ✉ 信箱     ⚙ 服務說明    帳號資料 服務說明 意見回報        
















Yahoo奇摩知識+ 首頁











所有分類
 
健康
 
商業與財經
 
娛樂與音樂
 
家居與園藝
 
家庭與人際關係
 
寵物
 
懷孕與育兒
 
政治與政府
 
教育與參考
 
新聞與活動
 
旅遊
 
汽車與交通
 
消費電子產品
 
環境
 
社會科學
 
社會與文化
 
科學
 
美容與造型
 
藝術與人文
 
遊戲與休閒活動
 
運動
 
電腦與網際網路
 
食品與飲料
 
餐廳與小吃
 





世界Yahoo 








阿根廷





澳洲





巴西





加拿大





法國





德國





印度





印尼





義大利





馬來西亞





墨西哥







紐西蘭





菲律賓





魁北克





新加坡





香港





西班牙





泰國





英國與愛爾蘭





美國





越南





西班牙文







關於





關於 Yahoo奇摩知識+
社群指南
排行榜
點數與等級
部落格
如何安全地使用 Yahoo奇摩

 








 消費電子產品

 手機與費率方案


 看另一則問題 










            數位通訊概論
        


請說明何謂膺頻效應?解決方法?





 
追蹤 


 
 1 個解答 
1


檢舉不當使用









您確定要刪除此解答嗎？
是
否












 









抱歉，似乎發生一些問題。



Trending Now





 

解答














最佳解答: 
             信號經取樣後頻譜發生重疊之現象,此稱為膺頻效應 


首先 
由頻域上來看，其頻率響應的不理想造成重新取樣時的膺頻效應 
（Aliasing），而在時域上對訊號波形的重建，計算其重建波形與原始波形 
的平方誤差期望值，比較Linear、Cubic、Parabolic 和本論文提出的升餘 
弦函數（Raised cosine function）插值器對波形的重建能力。 
接著將插值時序恢復的方法應用在p 4-shifted DQPSK的調系統，考 
慮系統的實際取樣情形和不理想的狀況，使得不同插值器在此系統應用 
的表現上並沒有明顯的差異，因為不同的插值器會消耗不同程度的資源， 
因此在考慮到計算複雜度和對位元錯誤率的影響時，必需視系統的條件 
來決定該使用何種插值器，如此才能發揮最大的效益。 

http://tw.myblog.yahoo.com/cepin168 




 參考資料： 
 


永將室內裝修規劃公司
 · 7 年前 





0
真讚



0
真遜





檢舉不當使用


意見





 




新增意見











送出












 · 剛才不久














 

檢舉不當使用

 我認為此問題違反社群指南 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此問題違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此解答違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此解答違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此意見違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此意見違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消



 

你可能對以下搜尋感興趣：


優惠機票隨時有

搶先擁有愛瘋7

別輕忽小症狀，及早發現遠離癌

專業3D列印












發問問題
通常可在幾分鐘內獲得解答！







展開»






詳細資料



詳細資料






現有問題




更多





請多詳述您的問題
上傳處理中




上傳失敗。 請上傳大於 100x100 像素的檔案
目前發生問題，請再試一次。
您只能上傳 PNG、JPG 或 JPEG 等類型的檔案。
您只能上傳 3GP、3GPP、MP4、MOV、AVI、MPG、MPEG 或 RM 等類型的檔案。
您只能上傳不超過 5 MB 的相片。
您只能上傳不超過 600 MB 的影片。
您只能上傳相片 (png, jpg, jpeg) 或影片 (3gp, 3gpp, mp4, mov, avi, mpg, mpeg, rm)。
您只能上傳相片或影片。
影片不應超過 <b>600mb/5 分鐘</b>
相片不應超過 <b>5mb</b>
影片不應超過 <b>600mb/5 分鐘</b>相片不應超過 <b>5mb</b>
  







解答問題


哈囉大大：我們要針對爸爸（88）禮盒預購，發簡訊刺激買氣，請問有大大推薦哪個簡訊平臺比較好用，謝謝?



 

延時噴劑對身體傷害大嗎?



 

請問到遠傳門市換NFC SIM卡，要錢嗎？如果要，大概多少錢？



 

[手機遊戲]線上遊戲排行榜2017適合女生玩的遊戲?



 


發燒問題




隋棠產後瘦身8大重點 有人知道是什麼嗎?

                  7 個解答
              

 

有人知道隋棠產後是怎麼瘦身嗎?

                  7 個解答
              

 

勃起不持久可以吃延時藥嗎?

                  4 個解答
              

 
更多問題





隋棠產後瘦身8大重點 有人知道是什麼嗎?

             4 個解答
         

 

有人知道隋棠產後是怎麼瘦身嗎?

             4 個解答
         

 

隋棠產後瘦身8大重點 有人知道是什麼嗎?

             4 個解答
         

 

  








服務條款


隱私權


RSS


















光纖通訊 - 維基百科，自由的百科全書































 







光纖通訊

維基百科，自由的百科全書


					前往：					導覽，					搜尋






本條目需要補充更多來源。（2015年3月14日） 
請協助添加多方面可靠來源以改善這篇條目，無法查證的內容可能會因為異議提出而移除。 

















光纖通訊


光纖通訊（Fiber-optic communication）也作光纖通訊，是指一種利用光與光纖（optical fiber）傳遞資訊的一種方式，屬於有線通訊的一種。光經過調變（modulation）後便能攜帶資訊。自1980年代起，光纖通訊系統對於電信工業產生了革命性的作用，同時也在數位時代裡扮演非常重要的角色。光纖通訊具有傳輸容量大、保密性好等許多優點。光纖通訊現在已經成為當今最主要的有線通訊方式。將需傳送的資訊在傳送端輸入到傳送機中，將資訊疊加或調變到作為資訊訊號載體的載波上，然後將已調變的載波通過傳輸媒質傳送到遠處的接收端，由接收機解調出原來的資訊。
根據訊號調變方式的不同，光纖通訊可以分為數位光纖通訊、類比光纖通訊。光纖通訊的產業包括了光纖電纜、光器件、光裝置、光通訊儀表、光通訊積體電路等多個領域。
利用光纖做為通訊之用通常需經過下列幾個步驟：

以發射器（transmitter）產生光訊號。
以光纖傳遞訊號，同時必須確保光訊號在光纖中不會衰減或嚴重變形。
以接收器（receiver）接收光訊號，並且轉換成電訊號。




目錄


1 應用
2 歷史
3 核心技術

3.1 發射器
3.2 光纖
3.3 光放大器
3.4 接收器
3.5 波長分波多工
3.6 頻寬距離乘積


4 應用極限

4.1 訊號色散
4.2 訊號衰減
4.3 訊號再生
4.4 最後一哩路光纖網路


5 與傳統通訊系統的比較
6 現行技術標準
7 延伸閱讀
8 參考資料
9 外部連結



應用[編輯]
光纖常被電話公司用於傳遞電話、網際網路，或是有線電視的訊號，有時候利用一條光纖就可以同時傳遞上述的所有訊號。與傳統的銅線相比，光纖的訊號衰減（attenuation）與遭受乾擾[來源請求]（interference）的情形都改善很多，特別是長距離以及大量傳輸的使用場合中，光纖的優勢更為明顯。然而，在城市之間利用光纖的通訊基礎建設（infrastructure）通常施工難度以及材料成本難以控制，完工後的系統維運複雜度與成本也居高不下。因此，早期光纖通訊系統多半應用在長途的通訊需求中，這樣才能讓光纖的優勢徹底發揮，並且抑制住不斷增加的成本。
從2000年光通訊（optical communication）市場崩潰後，光纖通訊的成本也不斷下探，目前已經和銅纜為骨幹的通訊系統不相上下[1]。
對於光纖通訊產業而言，1990年光放大器（optical amplifier）正式進入商業市場的應用後，很多超長距離的光纖通訊才得以真正實現，例如越洋的海底電纜。到了2002年時，越洋海底電纜的總長已經超過25萬公里，每秒能攜帶的資料量超過2.56Tb，而且根據電信業者的統計，這些資料從2002年後仍然不斷的大幅成長中。
歷史[編輯]
自古以來，人類對於長距離通訊的需求就不曾稍減。隨著時間的前進，從烽火到電報，再到1940年第一條同軸電纜（coaxial cable）正式服役，這些通訊系統的複雜度與精細度也不斷的進步。但是這些通訊方式各有其極限，使用電氣訊號傳遞資訊雖然快速，但是傳輸距離會因為電氣訊號容易衰減而需要大量的中繼器（repeater）；微波（microwave）通訊雖然可以使用空氣做介質，可是也會受到載波頻率（carrier frequency）的限制。到了二十世紀中葉，人們才瞭解使用光來傳遞資訊，能帶來很多過去所沒有的顯著好處。
然而，當時並沒有同調性高的發光源（coherent light source），也沒有適合作為傳遞光訊號的介質，也所以光通訊一直只是概念。直到1960年代，雷射（laser）的發明才解決第一項難題。1970年代康寧公司（Corning Glass Works）發展出高品質低衰減的光纖則是解決了第二項問題，此時訊號在光纖中傳遞的衰減量第一次低於光纖通訊之父高錕所提出的每公里衰減20分貝（20dB/km）關卡，證明光纖作為通訊介質的可能性。與此同時使用砷化鎵（GaAs）作為材料的半導體雷射（semiconductor laser）也被發明出來，並且憑藉著體積小的優勢而大量運用於光纖通訊系統中。1976年，第一條速率為44.7Mbit/s的光纖通訊系統在美國亞特蘭大的地下管道中誕生。
經過五年的研發期，第一個商用的光纖通訊系統在1980年問市。這個人類史上第一個光纖通訊系統使用波長800奈米（nanometer）的砷化鎵雷射作為光源，傳輸的速率（data rate）達到45Mb/s（bits per second），每10公里需要一個中繼器增強訊號。
第二代的商用光纖通訊系統也在1980年代初期就發展出來，使用波長1300奈米的磷砷化鎵銦（InGaAsP）雷射。早期的光纖通訊系統雖然受到色散（dispersion）的問題而影響了訊號品質，但是1981年單模光纖（single-mode fiber）的發明剋服了這個問題。到了1987年時，一個商用光纖通訊系統的傳輸速率已經高達1.7Gb/s，比第一個光纖通訊系統的速率快將近四十倍之譜。同時傳輸的功率與訊號衰減的問題也有顯著改善，間隔50公里才需要一個中繼器增強訊號。1980年代末，EDFA的誕生，堪稱光通訊歷史上的一個里程碑似的事件，它使光纖通訊可直接進行光中繼，使長距離高速傳輸成為可能，並促使DWDM的誕生。
第三代的光纖通訊系統改用波長1550奈米的雷射做光源，而且訊號的衰減已經低至每公里0.2分貝（0.2dB/km）。之前使用磷砷化鎵銦雷射的光纖通訊系統常常遭遇到脈波延散（pulse spreading）問題，而科學家則設計出色散遷移光纖（dispersion-shifted fiber）來解決這些問題，這種光纖在傳遞1550奈米的光波時，色散幾乎為零，因其可將雷射光的光譜限制在單一縱模（longitudinal mode）。這些技術上的突破使得第三代光纖通訊系統的傳輸速率達到2.5Gb/s，而且中繼器的間隔可達到100公里遠。
第四代光纖通訊系統引進光放大器（optical amplifier），進一步減少中繼器的需求。另外，波長分波多工（wavelength-division multiplexing, WDM）技術則大幅增加傳輸速率。這兩項技術的發展讓光纖通訊系統的容量以每六個月增加一倍的方式大幅躍進，到了2001年時已經到達10Tb/s的驚人速率，足足是80年代光纖通訊系統的200倍之多。近年來，傳輸速率已經進一步增加到14Tb/s，每隔160公里才需要一個中繼器。
第五代光纖通訊系統發展的重心在於擴展波長分波多工器的波長操作範圍。傳統的波長範圍，也就是一般俗稱的「C band」約是1530奈米至1570奈米之間，新一帶的無水光纖（dry fiber）低損耗的波段則延伸到1300奈米至1650奈米間。另外一個發展中的技術是引進光孤子（optical soliton）的概念，利用光纖的非線性效應，讓脈波能夠抵抗色散而維持原本的波形。
1990年至2000年間，光纖通訊產業受到網際網路泡沫的影響而大幅成長。此外一些新興的網路應用，如隨選視訊（video on demand）使得網際網路頻寬的成長甚至超過莫耳定律（Moore's Law）所預期積體電路晶片中電晶體增加的速率。而自網際網路泡沫破滅至2006年為止，光纖通訊產業透過企業整併壯大規模，以及委外生產的方式降低成本來延續生命。
核心技術[編輯]
現代的光纖通訊系統多半包括一個發射器，將電訊號轉換成光訊號，再透過光纖將光訊號傳遞。光纖多半埋在地下，連接不同的建築物。系統中還包括數種光放大器，以及一個光接收器將光訊號轉換回電訊號。在光纖通訊系統中傳遞的多半是數位訊號，來源包括電腦、電話系統，或是有線電視系統。
發射器[編輯]
在光纖通訊系統中通常作為光源的半導體元件是發光二極體（light-emitting diode, LED）或是雷射二極體（laser diode）。LED與雷射二極體的主要差異在於前者所發出的光為非同調性（noncoherent），而後者則為同調性（coherent）的光。使用半導體作為光源的好處是體積小、發光效率高、可靠度佳，以及可以將波長最佳化，更重要的是半導體光源可以在高頻操作下直接調變，非常適合光纖通訊系統的需求。
LED藉著電激發光（electroluminescence）的原理發出非同調性的光，頻譜通常分散在30奈米至60奈米間。LED另外一項缺點是發光效率差，通常只有輸入功率的1%可以轉換成光功率，約是100微瓦特（micro-watt）左右。但是由於LED的成本較低廉，因此常用於低價的應用中。常用於光通訊的LED主要材料是砷化鎵或是砷化鎵磷（GaAsP），後者的發光波長為1300奈米左右，比砷化鎵的810奈米至870奈米更適合用在光纖通訊。由於LED的頻譜範圍較廣，導致色散較為嚴重，也限制了其傳輸速率與傳輸距離的乘積。LED通常用在傳輸速率10Mb/s至100Mb/s的區域網路（local area network, LAN），傳輸距離也在數公里之內。目前也有LED內包含了數個量子井（quantum well）的結構，使得LED可以發出不同波長的光，涵蓋較寬的頻譜，這種LED被廣泛應用在區域性的波長分波多工網路中。
半導體雷射的輸出功率通常在100毫瓦特（mW）左右，而且為同調性質的光源，方向性相對而言較強，通常和單模光纖的耦合效率可達50%。雷射的輸出頻譜較窄，也有助於增加傳輸速率以及降低模態色散（model dispersion）。半導體雷射亦可在相當高的操作頻率下進行調變，原因是其復合時間（recombination time）非常短。
半導體雷射通常可由輸入的電流有無直接調變其開關狀態與輸出訊號，不過對於某些傳輸速率非常高或是傳輸距離很長的應用，雷射光源可能會以連續波（continuous wave）的形式控制，例如使用外接的電吸收光調變器（electroabsorption modulator）或是馬赫·任德干涉儀（Mach-Zehnder interferometer）對光訊號加以調變。外接的調變元件可以大幅減少雷射的「啁啾脈波」（chirp pulse）。啁啾脈波會使得雷射的譜線寬度變寬，使得光纖內的色散變得嚴重。
光纖[編輯]
主條目：光導纖維
光纖纜線包含一個核心（core），纖殼（cladding）以及外層的保護被覆（protective coating）。核心與折射率（refractive index）較高的纖殼通常用高品質的矽石玻璃（silica glass）製成，但是現在也有使用塑膠作為材質的光纖。又因為光纖的外層有經過紫外線固化後的壓克力（acrylate）被覆，可以如銅纜一樣埋藏於地下，不需要太多維護費用。然而，如果光纖被彎折的太過劇烈，仍然有折斷的危險。而且因為光纖兩端連接需要十分精密的校準，所以折斷的光纖也難以重新接合。
光放大器[編輯]
主條目：光放大器
過去光纖通訊的距離限制主要根源於訊號在光纖內的衰減以及訊號變形，而解決的方式是利用光電轉換的中繼器。這種中繼器先將光訊號轉回電訊號放大後再轉換成較強的光訊號傳往下一個中繼器，然而這樣的系統架構無疑較為複雜，不適用於新一代的波長分波多工技術，同時每隔20公里就需要一個中繼器，讓整個系統的成本也難以降低。
光放大器的目的即是在不用作光電與電光轉換下就直接放大光訊號。光放大器的原理是在一段光纖內摻雜（doping）稀土族元素（rare-earth）如鉺（erbium），再以短波長雷射激發（pumping）之。如此便能放大光訊號，取代中繼器。
接收器[編輯]
構成光接收器的主要元件是光偵測器（photodetector），利用光電效應將入射的光訊號轉為電訊號。光偵測器通常是半導體為基礎的光二極體（photo diode），例如p-n接面二極體、p-i-n二極體，或是雪崩型二極體（avalanche diode）。另外「金屬-半導體-金屬」（Metal-Semiconductor-Metal, MSM）光偵測器也因為與電路整合性佳，而被應用在光再生器（regenerator）或是波長分波多工器中。
光接收器電路通常使用轉阻放大器（transimpedence amplifier, TIA）以及限幅放大器（limiting amplifier）處理由光偵測器轉換出的光電流，轉阻放大器和限幅放大器可以將光電流轉換成振幅較小的電壓訊號，再透過後端的比較器（comparator）電路轉換成數位訊號。對於高速光纖通訊系統而言，訊號常常相對地衰減較為嚴重，為了避免接收器電路輸出的數位訊號變形超出規格，通常在接收器電路的後級也會加上時脈及資料回復電路（clock and data recovery, CDR）以及鎖相迴路（phase-locked loop, PLL）將訊號做適度處理再輸出。
波長分波多工[編輯]
主條目：波長分波多工
波長分波多工的實際做法就是將光纖的工作波長分割成多個通道（channel），俾使能在同一條光纖內傳輸更大量的資料。一個完整的波長分波多工系統分為發射端的波長分波多工器（wavelength division multiplexer）以及在接收端的波長分波解多工器（wavelength division demultiplexer），最常用於波長分波多工系統的元件是陣列波導光柵（Arrayed Waveguide Gratings, AWG）。而目前市面上已經有商用的波長分波多工器/解多工器，最多可將光纖通訊系統劃分成80個通道，也使得資料傳輸的速率一下子就突破Tb/s的等級。
頻寬距離乘積[編輯]
由於傳輸距離越遠，光纖內的色散現象就越嚴重，影響訊號品質。因此常用於評估光纖通訊系統的一項指標就是頻寬-距離乘積，單位是百萬赫茲×公里（MHz×km）。使用這兩個值的乘積做為指標的原因是通常這兩個值不會同時變好，而必須有所取捨（trade off）。舉例而言，一個常見的多模光纖（multi-mode fiber）系統的頻寬-距離乘積約是500MHz×km，代表這個系統在一公里內的訊號頻寬可以到500MHz，而如果距離縮短至0.5公里時，頻寬則可以倍增到1000MHz。
應用極限[編輯]
雖然目前已經出現很多技術降低諸如色散之類的問題，也使得光纖通訊系統的容量已經達到14Tb/s以及160公里的傳輸距離[2]，仍然有些問題需要工程師與科學家的研究與剋服。以下是這些問題的簡單討論。
訊號色散[編輯]
對於現代的玻璃光纖而言，最嚴重的問題並非訊號的衰減，而是色散問題，也就是訊號在光纖內傳輸一段距離後逐漸擴散重疊，使得接收端難以判別訊號的高或低。造成光纖內色散的成因很多。以模態色散為例，訊號的橫模（transverse mode）軸速度（axial speed）不一致導致色散，這也限制了多模光纖的應用。在單模光纖中，模態間的色散可以被壓抑得很低。
但是在單模光纖中一樣有色散問題，通常稱為群速色散（group-velocity dispersion），起因是對不同波長的入射光波而言，玻璃的折射率略有不同，而光源所發射的光波不可能沒有頻譜的分佈，這也造成了光波在光纖內部會因為波長的些微差異而有不同的折射行為。另外一種在單模光纖中常見的色散稱為偏振態色散（polarization mode dispersion），起因是單模光纖內雖然一次只能容納一個橫模的光波，但是這個橫模的光波卻可以有兩個方向的偏振（polarization），而光纖內的任何結構缺陷與變形都可能讓這兩個偏振方向的光波產生不一樣的傳遞速度，這又稱為光纖的雙折射現象（fiber birefringence）。這個現象可以透過偏振保持光纖（polarization-maintaining optical fiber）加以抑制。
訊號衰減[編輯]
訊號在光纖內衰減也造成光放大器成為光纖通訊系統所必需的元件。光波在光纖內衰減的主因有物質吸收、瑞立散射（Rayleigh scattering）、米氏散射（Mie scattering）以及連接器造成的損失。雖然石英的吸收係數只有0.03dB/km，但是光纖內的雜質仍然會讓吸收係數變大。其他造成訊號衰減的原因還包括應力對光纖造成的變形、光纖密度的微小擾動，或是接合的技術仍有待加強。
訊號再生[編輯]
現代的光纖通訊系統因為引進了很多新技術降低訊號衰減的程度，因此訊號再生只需要用於距離數百公里遠的通訊系統中。這使得光纖通訊系統的建置費用與維運成本大幅降低，特別對於越洋的海底光纖而言，中繼器的穩定度往往是維護成本居高不下的主因。這些突破對於控制系統的色散也有很大的助益，足以降低色散造成的非線性現象。此外，光孤子也是另外一項可以大幅降低長距離通訊系統中色散的關鍵技術。
最後一哩路光纖網路[編輯]
雖然光纖網路享有高容量的優勢，但是在達成普及化的目標，也就是「光纖到戶」（Fiber To The Home, FTTH）以及「最後一哩路」（last mile）的網路布建上仍然有很多困難待剋服。然而，隨著網路頻寬的需求日增，已經有越來越多國家逐漸達成這個目的。以韓國為例，光纖網路系統已經開始取代使用銅線的數位用戶迴路系統。
與傳統通訊系統的比較[編輯]
對於某個通訊系統而言，使用傳統的銅纜作為傳輸介質較好，或是使用光纖較佳，有幾項考量的重點。光纖通常用於高頻寬以及長距離的應用，因為其具有低損耗、高容量，以及不需要太多中繼器等優點。光纖另外一項重要的優點是即使跨越長距離的數條光纖並列，光纖與光纖之間也不會產生串訊（cross-talk）的乾擾，這和傳輸電訊號的傳輸線（transmission line）正好相反。
不過對於短距離與低頻寬的通訊應用而言，使用電訊號的傳輸有下列好處：

較低的建置費用
組裝容易
可以利用電力系統傳遞資訊

因為這些好處，所以在很短的距離傳輸資訊，例如主機之間、電路板之間，甚至是積體電路晶片之間，通常還是使用電訊號傳輸。然而目前也有些還在實驗階段的系統已經改採光來傳遞資訊。
在某些低頻寬的場合，光纖通訊仍然有其獨特的優勢：

能抵抗電磁乾擾（EMI），包括核子造成的電磁脈波。（不過光纖可能會毀於α或β射線）
對電訊號的阻抗極高，所以能在高電壓或是地面電位不同的狀況下安全工作。
重量較輕，這在飛機中特別重要。
不會產生火花，在某些易燃的環境中顯得重要。
沒有電磁輻射、不易被竊聽，對於需要高度安全的系統而言十分重要。
線徑小，當繞線的路徑被限制時，變得重要。

現行技術標準[編輯]
為了能讓不同的光纖通訊裝置製造商之間有共通的標準，國際電信聯盟（International Telecommunications Union, ITU）制定了數個與光纖通訊相關的標準，包括：

ITU-T G.651, "Characteristics of a 50/125 µm multimode graded index optical fibre cable"
ITU-T G.652, "Characteristics of a single-mode optical fibre cable"

其他關於光纖通訊的標準則規定了發射與接收端，或是傳輸介質的規格，包括了：

10G乙太網路（10 Gigabit Ethernet）
光纖分散式數據介面（FDDI）
光纖通道（Fibre channel）
HIPPI（英語：HIPPI）
同步數位階層（Synchronous Digital Hierarchy）
同步光纖網路（Synchronous Optical Networking）

此外，在數位音效的領域中，也有利用光纖傳遞資訊的規格，那就是由日本東芝（Toshiba）所制定的TOSLINK規格。採用塑膠光纖（plastic optical fiber, POF）作為媒介，系統中包含一個採用紅光LED的發射器以及整合了光偵測器與放大器電路的接收器。
延伸閱讀[編輯]

光導纖維
光通訊
資訊理論

參考資料[編輯]

Encyclopedia of Laser Physics and Technology
Fiber-Optic Technologies by Vivek Alwayn
Agrawal, Govind P. Fiber-optic communication systems. New York: John Wiley & Sons. 2002. ISBN 978-0-471-21571-4. 

外部連結[編輯]

How Fiber-optics work (Howstuffworks.com)
The Laser and Fiber-optic Revolution
Fiber Optics, from Hyperphysics at Georgia State University
"Understanding Optical Communications" - An IBM redbook
"光纖線上









閱
論
編


電話






類型

固網電信、行動電話、光通訊






聯接方式

通訊衛星、光纖通訊、Free-space optical、ISDN、手機訊號、普通老式電話服務、公共交換電話網、海底電纜、IP電話






通話

未接來電、Misdialed call、騷擾電話、Phone tag






應用

傳真、電話呼叫、電報、Théâtrophone、視訊電話






其他

答錄機、來電顯示














閱
論
編


光通訊






基本

烽火（狼煙） · 燈塔 · 光信標（英語：Beacon） · 液壓電報（英語：Hydraulic telegraph） · 國際訊號旗 · 光學電報（英語：Semaphore line） · 日光反射訊號器（英語：Heliograph） · 訊號燈（英語：Signal lamp）






先進

光纖通訊 · 自由空間光通訊（英語：Free-space optical communication）（FSO） · 光無線通訊（英語：Optical wireless） · 光導纖維（光纖電纜（英語：Optical fiber cable） · 光纖接頭） · 光載波（英語：Optical Carrier transmission rates） · 光電話（英語：Photophone） · 亮度調變（英語：Intensity modulation） · 調變後向反射器（英語：Modulating retro-reflector） · 光傳輸網路（英語：Optical Transport Network）（OTN）










 
						取自 "https://zh.wikipedia.org/w/index.php?title=光纖通訊&oldid=44846908"					
2 個分類：光纖通信光電科技隱藏分類：自2015年3月需補充來源的條目拒絕當選首頁新條目推薦欄目的條目自2008年11月有未列明來源語句的條目使用ISBN魔術連結的頁面 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


العربيةDanskDeutschEnglishEspañolفارسیՀայերենBahasa IndonesiaItaliano日本語LëtzebuergeschPolskiPiemontèisپښتوPortuguêsРусскийසිංහලСрпски / srpskiTürkçeУкраїнськаTiếng Việt 
編輯連結 





 本頁面最後修訂於2017年6月20日 (週二) 09:01。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 










臺大課程地圖































首頁
共同必修課程

國文
外文
體育
服務學習
進階英語


通識課程

文學與藝術領域
歷史思維領域
世界文明領域
哲學與道德思考領域
公民意識與社會分析領域
量化分析與數學素養領域
物質科學領域
生命科學領域


院系所課程

文學院
理學院
社會科學院
醫學院
工學院
生物資源暨農學院
管理學院
公共衛生學院
電機資訊學院
法律學院
生命科學院
牙醫專業學院
獸醫專業學院
其他教學單位


其他全校性課程

軍訓
共同選修
新生專題
寫作教學
基本能力課程


English．英文版








請選擇學院
文學院
理學院
社會科學院
醫學院
工學院
生物資源暨農學院
管理學院
公共衛生學院
電機資訊學院
法律學院
生命科學院
牙醫專業學院
獸醫專業學院
其他教學單位





請選擇系所
電機工程學系
資訊工程學系
光電工程學研究所
電信工程學研究所
電子工程學研究所
資訊網路與多媒體研究所
生醫電子與資訊學研究所
資料科學學位學程
生物資訊學國際研究生學位學程


請選擇班級或分組
資訊工程學系
資訊工程學研究所碩士班
資訊工程學研究所博士班







選擇未來發展－升學
報考資訊工程相關博士班


選擇未來發展－就業
擔任資訊工程相關工作人員






資訊工程學研究所碩士班
教育目標


創新領導：使學生能活用專業知識成為創新的知識領導者。
專業知識：使學生具備理論與實務的專業知識。
國際視野：讓學生瞭解全球科技與國際潮流的脈動。
社會關懷：讓學生瞭解資訊科技對於社會人文之影響與責任。
終身學習：讓學生習於自我充實，以面對資訊科技快速變化的挑戰。


學生核心能力



            資訊專業進階知識
        

            自我提升資訊專業知識的能力
        

            尊重學術、工程倫理、及智慧財產權
        

            閱讀與檢索資訊文獻的能力
        

            帶領研發團隊、溝通合作的能力
        

            撰寫並闡述學術論文的能力
        

            把人本考量融入資訊產品的能力
        



核心能力與課程規劃關聯圖



課程規劃

課程規劃架構圖
本系課程列表



課程分類課程名稱(建議修課年級)

必/選修

碩士論文(56)
                              專題研究(56)
                              專題討論(56)
                          


選修

軟體系統(567)
                              資訊工程理論基礎(567)
                              計算機安全(567)
                              人工智慧(567)
                              高等人工智慧(3456)
                              應用隨機過程(567)
                              演算法的數學解析(34567)
                              高等作業系統(567)
                              生物資訊與計算分子生物學(567)
                              系統效能評估(567)
                              數值方法(567)
                              生物序列分析演算法(567)
                              生醫資料探勘演算法(567)
                              軟體工程(34567)
                              編譯程式理論(5678)
                              電腦視覺(567)
                              電腦網路專題(34567)
                              自然語言處理(567)
                              軟體工程設計(4567)
                              數位訊號處理導論(567)
                              機器人學(567)
                              電腦視覺一(567)
                              應用代數(34567)
                              高等編譯器設計(567)
                              高等計算機結構(567)
                              平行程式設計(234567)
                              即時系統(567)
                              演算法設計方法論(567)
                              資訊檢索與擷取(567)
                              圖形分析辨認(567)
                              分散式代理人系統(567)
                              圖形演算法特論(567)
                              隨機演算法(34567)
                              數學模擬與系統生物(567)
                              嵌入式系統軟體設計專題(34567)
                              嵌入式系統編譯器設計(4567)
                              數位語音處理(567)
                              賽局理論(567)
                              行動通訊服務系統效能評估(34567)
                              機器人知覺與學習(567)
                              遊戲設計(567)
                              生醫資訊學導論(567)
                              化學資訊(567)
                              多核處理器及編譯(4567)
                              低功率系統設計(567)
                              科技英文寫作(567)
                              幾何模型(567)
                              嵌入式作業系統實作(456)
                              系統代謝學(567)
                              高等電腦模擬藥物設計(567)
                              社群網路分析(567)
                              資通訊產業發展專題(567)
                              雲端運算特論(567)
                              平行與分散式程式設計(567)
                              智慧整合感控系統之理論與實務(567)
                              計算攝影學(567)
                              無線網路基礎與應用(567)
                              圖形演算法及生物資訊應用(567)
                              資訊檢索專題(34567)
                              三維動態環境感知(567)
                              機率圖形學習模型(567)
                              系統研究專題(567)
                              數位人文導論(567)
                              適地性技術、應用與服務(567)
                              機率型機器感知(4567)
                              數位學習與工程教學(4567)
                              雲端運算概論(34567)
                              巨量資料系統(34567)
                              巨量資料統計與探勘(34567)
                              虛擬機器(567)
                              Web程式設計與應用(34567)
                              Android執行環境及編譯器(234567)
                              巨量資料系統之應用(234567)
                              行動雲端計算之系統設計(34567)
                              Android虛擬機與編譯器(234567)
                              智慧聯網專題(45678)
                              Android平臺及其Big Data後台(234567)
                              異質系統架構與應用(4567)
                              Big Data程式語言、編譯與應用(23456)
                              數理邏輯簡介(4567)
                              比特幣及數據分析(34567)
                              量子演算法(34567)
                              資料庫理論進階專題(34567)
                              人機界面與設計(34567)
                              開源系統軟體概論與實務(4567)
                              人機互動(4567)
                              計算機安全特論(45678)
                              系統專題研究-物聯網中介軟體設計(4567)
                              深度學習之應用(34567)
                              數據分析學與模型專題(34567)
                              機器學習基石(34567)
                              區塊鏈與數據分析(23467)
                              智慧對話機器人(34567)
                              機器學習技法(34567)
                              通訊複雜度概論(34567)
                              金融科技導論(5678)
                          




未來發展

本系畢業生未來發展圖


升學
就業




報考資訊工程相關博士班




擔任資訊工程相關工作人員












Copyright 2008 臺灣大學 National Taiwan University
10617 臺北市羅斯福路四段一號　No. 1, Sec. 4, Roosevelt Road, Taipei, 10617 Taiwan(R.O.C)
電話 (Phone)：+886-2-3366-2388轉308,607　　傳真號碼 (Fax)：+886-2-2362-6282







﻿
演算法筆記 - Algorithm

Algorithm

演算法是什麼？

演算法是計算機科學非常重要的基礎科目。簡單來說，演算法就是用電腦算數學的學問（古代人用算盤算、現代人用電腦算），可以說是數學科目。
想要解決現實生活當中的各種問題，電腦科學家就把現實問題對應到數學問題，然後設計公式、把公式寫成程式，讓電腦執行程式計算答案──這些公式就叫做演算法了。
儘管這裡用了「公式」這個字眼來形容演算法，然而並不是各位印象中的數學公式。由於電腦能夠執行繁複的計算，所以公式可以設計成好幾十行、好幾百行，甚至用到很多數學理論。
因此呢，就算學習過演算法的人，也不見得懂得設計演算法；因為數學、程式的東西實在太複雜了。想把現實問題對應到數學問題，那就更複雜了。
電腦只會算數字
回過頭來，電腦又是什麼？電腦是個很潮的中文翻譯，不過實際上電腦的原意是「計算機」。電腦的英文叫做computer，而計算的英文就叫做compute。
電腦是一臺計算機，只會計算、判斷、儲存數字。又快又準。
程式是一連串計算、判斷、儲存數字的步驟。
電腦只會處理數字（二進位數字）。電腦裡的每一個文字、每一種顏色、每一種聲音，其實都有相對應的數字。
打個比方，我們規定：用1代表「一」，用2代表「乙」，用3代表「人」，……。一個數字對應一個中文字。電腦裡面的所有中文字，都依循人為規定，變作了數字。
再打個比方，「人」這個字，呈現電腦螢幕上是個「人」樣。電腦螢幕的畫面，是由許多小光點組成的；電腦螢幕上的「人」也是由許多小光點組成的。我們以「人」的左下角為座標原點，橫向為X軸，直向為Y軸，那麼「人」其實是(0,1)、(1,2)、(2,3)、...這些座標畫上黑點後所形成的。「人」這個字的的形狀，在電腦中變作了一連串的數字。
同樣的道理，呈現在電腦螢幕畫面上的文字、顏色、圖片、影像、聲音，全部都可以化作數字。一切事物在電腦裡面都是數字。
電腦並沒有想像中的那麼神奇。不過電腦最厲害的地方並不是電腦本身，而是在於電腦可以接上各式各樣的設備。接上攝影機與螢幕，就可以把色彩變成數字、把數字變成色彩；接上麥克風與耳機，就可以把聲音變成數字、把數字變成聲音。
電腦一旦接上了設備，就額外有用處。接上話機和基地台，就可以互通有無；接上數位相機和印表機，就可以製造回憶；接上重量儀和篩子，電腦也會揀土豆；接上車廂、接上警示燈、再雜七雜八接上一堆東西，就變成了大眾運輸系統。
若要用電腦解決現實問題，通常要考慮兩個方面：一、電腦應該接上那些設備？如何用電腦控制這些設備？二、現實問題如何對應到數學問題？如何設計演算法？
程式用來比對數字、改變數字、儲存數字
舉個例子，我們希望把螢幕上的「人」變成斜體字。過程大略是這樣──首先呢，把「人」的形狀(0,1)、(1,2)、(2,3)、...這些數字拿出來；然後呢，位置越高的座標，就往右移動多一點，如此一來就成為斜體字了。想讓座標往右移動，就是讓電腦做數字加法計算，然後把相加結果儲存起來。
再舉個例子，用滑鼠點選一個資料夾，資料夾的顏色會反白。過程大略是這樣──首先呢，電腦偵測到滑鼠點擊的座標之後，把座標轉換成數字；然後呢，再把螢幕畫面的資料拿出來，看看螢幕上每個東西的座標，是哪一個與滑鼠的座標相符合；噢，原來是一個資料夾的圖示，把資料夾的顯示顏色給反白過來。
再舉個例子，電腦據說會揀選土豆。過程大略是這樣──把每一顆土豆拿出來，利用特殊的儀器，把形狀、重量、色澤、氣味統統轉換成數字，儲存在電腦裡面；然後呢，用電腦比較這些數字，找出優良的土豆，如此一來就有綿綿鬆鬆的土豆了！
編寫程式，計算數字，這就是程式設計師的工作。
數學和程式這麼複雜，為什麼要用電腦解決現實問題？
電腦的計算速度可說是非常的快，一秒鐘可以進行好幾千萬次。就算文字多麼的多，圖片多麼的大，電腦處理起來，也是輕鬆寫意，順暢無比。
打開電腦裡的任何一份文件，用滑鼠捲動一下文件畫面，眼睛都還沒眨一下，正確畫面馬上就呈現在螢幕上了。事實上在捲動畫面的時候，電腦已經經過幾千萬次的計算，僅使用了極短的時間，就把螢幕上應該呈現的資料全部計算好了。
人類會想要用電腦解決問題，正是仰賴電腦的計算速度、正確性，以及電腦會自動按照程式計算的特性。程式設計師只要花心思寫出一支好程式，接下來的工作就可以讓電腦代勞了。電腦做的比人類更快更好，電腦做得到人類做不到的事情；儘管數學和程式很複雜，還是有很多人選擇使用電腦解決問題。
那些現實問題是用演算法解決的？
現代人的生活已經離不開演算法了。比如說你的手機裡面就有上百個演算法。你可以Google一下新聞。下麵的表格是隨手整理出來的，可以參考看看。

物理 ⑴
化學 ⑴ ⑵
醫學 ⑴
藥學 ⑴
生物 ⑴
農業 ⑴ ⑵
天文
地理 ⑴
海洋 
太空 ⑴ ⑵
地球 ⑴
環境 ⑴ ⑵
生態 ⑴
社會 ⑴ ⑵
心理
居家 ⑴ ⑵
生活 ⑴
設計 ⑴
藝術 ⑴
美術 ⑴
音樂 ⑴
文學 ⑴
歷史 ⑴ ⑵
遊戲 ⑴ ⑵
玩具 ⑴
演藝 ⑴ ⑵
經濟
金融 ⑴ ⑵
訊息 ⑴
交通 ⑴
運輸 ⑴ ⑵
物流 ⑴
鑑識 ⑴
治安 ⑴ ⑵
國防 ⑴
政治 ⑴
教育 ⑴ ⑵
救護 ⑴
安全 ⑴ ⑵
機械 ⑴
工廠 ⑴ ⑵
資源 ⑴
能源


Algorithm

演算法是什麼？
演算法由三個部分組成：輸入、計算步驟、輸出。介紹這件事情的時候，有人連結到函數的概念，也有人連結到黑箱白箱的概念。

          -----------------
input --->| computational |
          | sequence      |---> output
          -----------------

輸入、輸出是一堆數字。實務上是將這些數字放在資料結構，例如array、list。輸入來源，通常是硬碟裡面儲存的檔案，或者是藉由硬體裝置擷取到的數字，例如數位相機、麥克風等等。輸出去處，通常是硬碟裡面儲存的檔案，或者是藉由硬體裝置轉換之後以其他型態呈現，例如數位電視、數位音響等等。
計算步驟是一連串處理數字的指令。指令有兩種類型，一類是運算，例如數學運算加減乘除、邏輯運算且或非、比較運算大於等於小於、位元運算左右反且或異或。另一類是讀寫，例如讀取某處的數字、儲存數字至某處，就跟計算機的MR、M+按鍵的意義相似。
古人定義演算法，規定計算步驟的數量是必須是有限步，不是無限步。用程式語言的術語來說就是：演算法不能有無窮迴圈。
古人當初規定有限步，是為了方便統計總步數。但是實務上，很多電腦程式是開啟之後就保持執行狀態，直到當機、重開機，例如網路傳輸的演算法。因此實務上可以是無限步。
如何記載一個演算法？
有人用虛擬碼來記載一個演算法。如要設計電腦程式，虛擬碼是比較恰當的。

GREATEST_COMMON_DIVISOR(a, b)
1   while a ≠ b do
2       if a > b then
3           a ← a - b
4       else
5           b ← b - a
6   return a

有人用流程圖來記載一個演算法。如要設計電子電路，流程圖是比較恰當的。

大多數時候，我們無法光從虛擬碼和流程圖徹底理解演算法，就如同我們無法光從數學公式徹底理解數學概念。想要理解演算法，通常還是得藉由文字、圖片的輔助說明。
如何實作一個演算法？
實作的意思是：實際去操作、實際去運行。
對於資工系學生來說，自然就是把演算法撰寫成電腦程式，例如C或者C++程式，然後在個人電腦上面執行程式。

int gcd(int a, int b) {
	while (a != b)
		if (a > b)
			a -= b;
		else
			b -= a;
	return a;
}

對於電機系學生來說，自然就是把演算法設計成電子電路，在麵包板、印刷電路板、PLD上面執行。

電子電路也有加法器、減法器、AND邏輯閘、OR邏輯閘等等，所以也可以用電子電路實作演算法。例如電子錶、隨身聽、悠遊卡等等，都是直接將演算法做死在晶片上面。在個人電腦、智慧型手機還沒流行之前，以往都是用電子電路實作演算法。
電子電路的執行速度是飛快的，電腦程式的執行速度慢了一點。然而，製作電子電路的過程相當麻煩，需要精密的設備、複雜的製程、大量的人力和經費，而且製成之後就無法修改；相對地，寫程式就簡單輕鬆多了，在電腦上面很容易調整程式碼，又可以儲存很多程式碼，最主要的是家家戶戶都有電腦。
時間複雜度、空間複雜度
要評斷一個演算法的好壞，最基本的指標是時間和空間。
最直覺的方式，就是測量程式的執行時間、程式的記憶體使用量。但是由於相同演算法於不同電腦的執行時間會有差異，又由於每個人實作演算法所採用的程式語言、程式設計技巧都不一樣，所以執行時間、記憶體使用量不是一個穩定的評斷標準。
數學家於是計算步驟數量。

BUBBLESORT(A, n)                  | steps   
1 for i ← 0 to n-1 do             | n       
2     for j ← i to n-i-1 do       | n(n-1)/2
3         if A[j] < A[j+1] then   | n(n-1)/2
4             temp ← A[j]         | n(n-1)/2
5             A[j] ← A[j+1]       | n(n-1)/2
6             A[j+1] ← temp       | n(n-1)/2


total = n + 5n(n-1)/2
      = n + 2.5n² - 2.5n
      = 2.5n² - 1.5n
      = O(n²)

數學家把步驟數量寫成代數式子。例如當輸入資料有n = 1000個數字，步驟數量一共是2.5×1000² - 1.5×1000 = 2498500步。
有了步驟數量之後，還可以進一步粗估執行時間。假設一個步驟需要10個clock，而電腦中央處理器CPU的時脈是2GHz：每秒鐘執行2000000個clock，那麼程式執行時間大約12.4925秒。
但是這不是精準的步驟數量。由於實作的關係，係數很容易變動，所以係數的意義不大。因此數學家只取出代數式子的最高次方，並且規定n必須足夠大（類似微積分的趨近無限大）。儘管這是非常不精準的估算方式，不過還是可以對常見的演算法進行簡易分類，粗略地比較快慢。

               | time*       | space
---------------+-------------+--------
bubble sort    | O(n²)       | O(n)
insertion sort | O(n²)       | O(n)
merge sort     | O(n log(n)) | O(n)
quicksort      | O(n²)       | O(n)
heapsort       | O(n log(n)) | O(n)
counting sort  | O(n+r)      | O(n+r)

*worst case

空間的計算方式與時間類似，就不多提了。
解決問題的成效
要評斷一個演算法的好壞，除了時間和空間的用量以外，主要還是看演算法解決問題的成效如何。
數學問題，通常可以明定解答好壞，例如數字越大越好。通常這種情況，有多種演算法可以求得正解，那麼這些演算法的成效是一樣好的。
真實世界的問題，通常難以界定絕對的好壞優劣，例如美醜、樂音噪音、喜怒哀樂、是非對錯等等，此時演算法的成效，則由人類自行判斷，利用兩兩比較、投票表決等等方式來決定成效。
數學與計算學
數學是以基本元件來構築事物、表達概念。而數學家藉由數，嘗試構築每一件事物、表達每一個概念，拼湊出世界的全貌。比如位置、形狀、關係、轉換、遞迴、極限、比較、排列、正反、假設，這些東西都是數。又比如有、無、聚、散、疏、密、盈、虧、彎、直、交、錯、動、靜，這些東西也都是數。與物體的行為有關的數，就是物理；與物質性質變化有關的數，就是化學；與生命運作有關的數，就是生物學。繼續細分下去的話，我們所知的各種東西，其實皆可說是數。
在數當中，可以用數量來表示的，便可以計量。像是情緒、風格、謀略，難以用數量來表示，也就難以計量，甚至不可計量。像是動作、旋律、次序，可以部分地或完全地用數量表示，便得以計量。計算學是以數量來構築事物、表達概念。而計算學家藉由數量，嘗試量度各種事物、各種概念，掌握其確切的程度與層次。

Algorithm

學習程式語言
學習程式語言，有兩個層次：一、程式語言本身的語法；二、把想法轉換成程式碼。
第一個層次稱做「程式語言Programming Language」。目標是背熟規格書、靈活運用程式語言。
第二個層次稱做「程式設計Programming」。目標是設計程式碼解決問題。然而現今世界上還沒有一套公認的、固定的學習流程。
學習演算法
學習演算法，有兩個層次：一、演算法本身的運作過程；二、把想法轉換成演算法。
第一個層次稱做「演算法Algorithm」。目標是理解演算法、靈活運用演算法。讀者可以參考本站首頁的各大欄位，例如圖論、計算幾何、字串學等等。
第二個層次稱做「演算法設計Algorithm Design」。目標是設計計算步驟解決問題。讀者可以參考本站首頁的Algorithm Design欄位，以及從各種演算法當中汲取經驗、擷取靈感。
學習函式庫、工具
很多現實問題及其計算步驟，已經成為標準流程SOP，沒有什麼改動的餘地，成為了演算法。因此科學家就把這些演算法編寫成函式庫（Library），接著把現實生活的常見需求編寫成工具（Toolkit），讓程式設計的過程更加迅速。
時間就是金錢。現今的軟體產業當中，絕大部分都是直接使用現成的函式庫、工具，只有從事研發才會從無到有設計程式碼、設計演算法。優秀的工程師，總是擅於活用函式庫、工具，快速實現自己想要的功能。網路上已經有許多現成的函式庫和工具，通常也附帶詳細的使用說明書，方便工程師運用。
由於大家看事情習慣只看錶面，因此衍生了一種奇怪的現象：大家把使用工具稱做「使用技術」，大家把背熟使用說明書、依樣畫葫蘆稱做「學習技術」。大家常常自詡擁有許多「技術」，將「技術」奉為圭臬；但是卻很少人懂得背後的程式碼技巧、演算法原理，也很少人有能力研發、創新、解決目前尚未解決的現實問題。這是本末倒置的奇怪現象。
演算法營隊

臺大資訊系資訊之芽
熱心學生自動自發舉辦的高中營隊

演算法書籍









演算法網站

Jeff Erickson
演算法課程網站，有許多課程講義。

Erik Demaine
演算法課程網站，有許多特殊主題。

David Eppstein
計算幾何和圖論。維基百科有很多內容是他寫的。

GeeksforGeeks
程式語言、數學、演算法益智問題。

Algorithms Notes
演算法益智問題。

高中職資訊科技融入教學網
提供很多教學flash。

演算法論文

Two Minute Papers
短片介紹計算機科學的前沿論文，主攻多媒體領域。

arXiv
收集物理學、數學、計算機科學、生物學的論文草稿。
有機會可以找到一些期刊論文的草稿。

CiteSeer，CiteSeerX
資訊學術論文的搜尋引擎，統計論文引用情形。有時可以抓到論文的電子檔。

SODA、FOCS、STOC
頂級的演算法學術會議，這幾個是偏向數學理論的。

Scimago Journal & Country Rank
收集期刊的出版數據，用來判斷期刊優劣。

國家教育研究院：雙語詞彙、學術名詞暨辭書資訊網
提供英文對繁體中文的學術名詞翻譯。

全國科學技術名詞審定委員會：術語知識服務平臺
提供英文對簡體中文的學術名詞翻譯。

演算法故事書






繁：《勇闖資訊新未來：打造資訊科技的幕後英雄》
簡：《奇思妙想：15位計算機天才及其重大發現》

繁：《改變世界的九大演算法：讓今日電腦無所不能的最強概念》
簡：《改變未來的九大算法》

繁：《演算法統治世界》介紹此書的廣播節目
簡：《算法帝國》

數學網站

Matrix67
一位中國學生Matrix67的個人部落格，
他的專長是文史，然而他閒暇之餘也喜歡研究數理。
作者經常寫下令人驚艷的數學文章！
偶爾也會談談有趣的演算法！
是非常值得常常去逛的網站。

Wolfram Math World
這個網站收集了豐富的數學資料，同時也不斷的收集新知放到網站上。
如果遇到了數學問題，可以到這裡查詢資料。
這個網站是Wolfram公司製作的一個數學網站。
該公司在數學領域上有很多研究，開發了有名的mathmatica軟體。

planetmath.org
這個網站的目標是成為數學的百科全書。
收集了豐富的數學資料，同時也不斷的收集新知放到網站上。
可以找到很多好讀的數學文章。

AMS Open Math Notes
數學家的教學筆記。

The On-Line Encyclopedia of Integer Sequences
這個網站含有各式各樣、包羅萬象的數列資訊。
你可以參考網站的操作範例，輸入一串數列，就可以找到該數列的詳細資料，
有名稱、公式、解釋、相關連結。包你看的目不暇給、眼花撩亂。
若是你遇到了莫名奇妙的數列，可以試著來這裡找找看，鐵定找得到！


Competitive Programming

Competitive Programming
「Association for Computing Machinery (ACM)」是一個致力於電腦科學教育的協會，出版大量的專業期刊文獻，舉辦重大的計算機科學會議，在資訊界舉足輕重、名聞遐邇。
ACM每年度都會舉辦一次「The ACM-ICPC International Collegiate Programming Contest (ACM-ICPC)」，是一個給全世界大專院校學生參加的演算法程式設計比賽，比賽目的在於考驗選手臨場的演算法設計能力、程式編寫能力。ACM首先在世界各地舉辦初賽，再從各個賽區選拔出表現優秀的隊伍，角逐世界總決賽。
ACM-ICPC帶動了演算法程式設計的風氣。世界上許多大專院校的資訊系所，仿照ACM-ICPC的比賽模式，紛紛自行開發出即時線上比賽系統，能夠自動批改、評分、計時、統計。學生不必齊聚一堂，藉由網際網路，就可以相互切磋程式設計技巧。比賽結束之後，便將比賽題目編列題庫，開放線上批改程式的功能，供學生賽後練習檢討。這套系統大家普遍稱呼為「Online Judge」。
從事這項活動，不僅可以熟悉程式設計、學習演算法、鍛鍊智力，還可以培養自主學習與獨立解題的能力──此即程式設計師的核心價值。
這項活動開始獲得大家重視。產業界舉行演算法競賽，發掘優異人才；學術界開設課程，促進演算法的研究發展。由於競賽的緣故，大家將這項活動稱呼為「Competitive Programming」。
UVa Online Judge工具網站
最古老、最有知名度的Online Judge，是由西班牙知名的瓦雅多利大學「Universidad de Valladolid (UVa)」開發的「UVa Online Judge」。資源非常豐富。

Lucky貓的ACM園地、Ruby兔的ACM園地、Unfortunate狗的ACM園地、uniDog的ACM園地
UVa Online Judge題目中譯！非常偉大的工作，請大家要心懷感激！

uHunt
可以查詢自己在UVa Online Judge的解題進度、簡單題列表、世界排名等等。
另外也整理了一套題庫，適合初學者循序練習。輸入使用者名稱就會出現。
是你不得不知道的網站！

uDebug
提供UVa Online Judge題目解答的執行檔，
自行輸入資料，可以生成正確輸出，進而測試自己的程式。

World of 7
uHunt站長的兄弟所製作。
整理了UVa Online Judge題目的解法提示、演算法動畫。

Problem Classification on Spanish Archive
題目分類。

演算法題庫

UVa Online Judge
西班牙Valladolid大學的Online Judge。
是最古老也是全世界最知名的Online Judge，題庫目前約有4000+題。
題目類型非常廣泛。絕大部分的題目難度偏易，適合初學者磨練程式設計功力。

PKU JudgeOnline
中國北京大學的Online Judge。中國最大的Online Judge。
題目類型偏向演算法競賽，可以找到比賽常見題型。
好處是網路上能輕鬆找到中文的解題報告。

Timus Online Judge
俄國Ural大學的Online Judge。俄國最大的Online Judge。
有比較進階的演算法題目，難度偏高。

Sphere Online Judge
波蘭Sphere實驗室建立的Online Judge。波蘭最大的Online Judge。
會員可自創題目，題目很有特色，但是品質良莠不齊。

Kattis
瑞典Kattis公司成立的Online Judge。瑞典最大的Online Judge。

URI Online Judge
巴西最大的Online Judge。

高中生程式解題系統 ZeroJudge
台灣高雄師大附中建立的Online Judge。台灣最大的Online Judge。

演算法例賽

TopCoder，簡介
全世界規模最大的程式競賽網站，其中包含了演算法競賽。

Codeforces
俄國最大的演算法例賽。
題目較有挑戰性。賽後會提供詳細的題目講評，是個自主學習的好地方！

CodeChef
印度最大的演算法例賽。

AtCoder
日本最大的演算法例賽。

BestCoder
中國最大的演算法例賽。由中國杭州電子科技大學維護。

ITSA & PTC 線上程式設計競賽
台灣最大的演算法例賽。台灣教育部提供的例行賽事。

演算法面試考題

leetcode
世界知名的演算法面試考題網站。
想要省時省力的面試主考官從裡面挑題目，
於是求職者不得不去練習這些題目。
然而工作上用不到這些知識，已經發展到了病態的地步。

PAT計算機程序設計能力考試
中國的證照考試。

CPE大學程式能力檢定
台灣某些教授聯手搞出來的證照考試，你懂的。

演算法競賽



2016TW、2015TW、2014TW

ACM International Collegiate Programming Contest
縮寫：ACM-ICPC
對象：大專院校學生
　　　（學士班一年級至碩士班一年級）
時間：台灣站11～12月
　　　亞洲各站是8～12月
　　　世界總決賽是隔年5～7月
主辦：Association for Computing Machinery
承辦：台灣賽區由台灣大專院校輪流承辦




ACM SIGMOD Programming Contest
對象：大專院校學生
時期：2～4月




Google Code Jam
對象：社會大眾
時期：4月～7月




TopCoder Open
對象：社會大眾
時期：4月～8月

比賽項目相當多元，其中一個項目是演算法競賽。




Facebook Hacker Cup
對象：社會大眾
時期：1月～3月


Taipei

HP CodeWars
對象：高中學生、大專院校學生，各分公司就地舉辦
時期：臺北4月




Internet Problem Solving Contest
對象：社會大眾
時期：5～6月


NCPC
2016、2015、2014

全國大專電腦軟體設計競賽
縮寫：NCPC
對象：台灣大專院校學生
時間：9～10月
主辦：教育部
承辦：由臺灣師範大學與中山大學輪流辦理


NCPU
2016、2015、2014

全國私立大專院校程式競賽
縮寫：NCPU
對象：台灣私立大專院校學生
時間：6月
主辦：各私立大學輪流辦理
備註：ICPC台灣站衍生賽事


NCTU
2016

全國科技大專院校程式競賽
縮寫：NCTU
對象：台灣科技大專院校學生
時間：6月
主辦：各科技大學輪流辦理
備註：ICPC台灣站衍生賽事


NPSC

網際網路程式設計全國大賽
縮寫：NPSC
對象：台灣高中學生、國中學生
時期：11～12月
主辦：科技部
承辦：台灣大學


ACM International Collegiate Programming Contest
資訊界規模最大、歷史最悠久的競賽，最近幾屆競賽皆有上千所學校、數萬名選手參加。
ACM-ICPC是一個氣氛相當活潑，非常具有特色的競賽。一場ACM-ICPC的賽事，由許多活動所組成，主軸當然是現場上機競賽，另外還有安排晚餐宴會、娛樂表演、城市遊覽等行程。整個賽程為期兩至三天，過程有吃有玩，遊樂的成分比競賽的成分還多，對於參賽選手來說是相當新鮮的體驗。活動細節請參考歷年的ACM-ICPC區域賽網站。
ACM-ICPC的競賽方式是三人一隊，並且要有一位同校教授作為領隊教練。教練的主要作用，是負責向大會接洽賽事行程，替選手打點賽事期間的生活細節，讓選手無後顧之憂，得以傾盡全力比賽，教練就如同經紀人的角色。另外，報名時可以額外登記一名後備隊員，發生緊急狀況時得替補上陣。
現場上機競賽的過程，是所有隊伍聚集於會場，一支隊伍分配一張桌子、三張椅子、一臺電腦、一份英文題本。開賽後所有隊伍同時開始作答，選手必須迅速調校好電腦環境，然後編寫程式解決問題，將程式碼上傳給裁判批改。
所有作答皆是即時批改，幾分鐘內回覆結果，結果只有對與錯兩大類，答錯還可以再答。成績的計算方式，是以答對題數作為主要的排名依據；但是作答的錯誤次數、上傳答案的時刻，統統列入扣分，最後作為次要的排名依據。因此選手除了要盡力答出問題，也要盡快答出問題，還要盡量避免答錯問題又一錯再錯。實力在伯仲之間的隊伍，勝負的差距往往取決於審題與答題的效率。動作慢人一步，或者大意發生失誤，就很可能名落千丈。
選手有五小時時間，要解出十道左右的演算法問題，期間可以喝水、外出上廁所、享用大會提供的奢華點心、在題本上塗鴉、把題本拆了摺紙鶴、睡覺、談情說愛、玩電腦遊戲；唯一的限制，就是不得與隊伍之外的人交流。
比賽規則看似輕佻，但是事實上，五小時時間解十道左右的題目，電腦卻只有一臺，所以比賽過程是非常緊迫的，就算是技藝高超的選手，也幾乎無暇休息，必須分工合作、爭取時間。通常是一人隨時坐在電腦前作答，充分運用電腦，發揮時效；另外兩人則在旁解讀其餘題目，在腦中羅織解法，伺機輪換上陣。五小時的比賽過程，選手剋服環境限制、調適心理壓力、發揮大腦潛能，也可以說是一場精神的對抗賽。
至於教練必須在會場外等待，不得與選手交談。不過教練們可以彼此交流，也可以觀戰和吃點心。現場上機競賽可以說是教練在整個賽程當中最輕鬆的時刻，也是辛苦之後驗收成果的時刻。
現場上機競賽還有許許多多的有趣的地方，此處只做初步介紹，詳細過程留給各位選手們自行體驗吧！

歷年比賽題目：ACM-ICPC Live Archive
ACM-ICPC官方消息：https://www.facebook.com/ICPCNews
ACM-ICPC亞洲區指導員：西傑的博客與阿雄
台灣ACM-ICPC非官方協會：ACM-ICPC Contest Council for Taiwan
中國ACM-ICPC非官方協會：ACM-ICPC中國區競賽指導委員會
中國非官方消息：ACM/ICPC信息站
日本非官方消息：ACM-ICPC Japanese Alumni Group
教練感想：2016 ACM-ICPC World Finals — MZ’s log

根據規定，ACM-ICPC區域賽必須要有全國性（或者兩省以上）的預賽。台灣歷年都是以NCPC作為預賽，然而實際上NCPC根本就不是預賽。會有這種現象，主要原因是台灣的參賽隊伍十分稀少，無從篩選隊伍。直至2015年，台灣才開始正式舉辦網路預賽，跟隨亞洲各國的比賽模式，時序如下：
一、區域預賽（網路賽）：由ACM-ICPC台灣區負責人負責組織比賽，各大專院校教授熱情協助。國內外選手透過網路比賽，最後根據當年承辦人員的戰鬥力，從中選出40至80隊，參加現場賽。由於國外隊伍出國參加現場賽，需要時間打點準備，所以網路賽往往很早舉辦，3至6個月前就會舉辦。
二、全國賽：與ACM-ICPC無關。台灣教育部舉辦的NCPC，全國學生一較高下。成績優秀的隊伍，教育部全額補助參加ACM-ICPC。
三、區域正式賽（現場賽）：請參考前面介紹的內容，國內外選手齊聚一堂進行較量。最後依照複雜的公式和規則，評量各個區域的戰鬥力之後，從各賽區選出至少1隊，參加世界總決賽。
四、世界總決賽：每年都從世界五大洲輪流選擇一間學校，作為主辦學校；從全世界篩選一百多隊參加總決賽。以往台灣大專院校實力較差，總是被國外學校痛宰，鮮少晉級總決賽。直到近年才有改善跡象，與國外學校互有進退（一群無名英雄前僕後繼苦心經營數年的成果）；同時也積極的參與其他國家的區域賽，爭取其他賽區的總決賽門票。目前臺灣僅台灣大學、交通大學有能力進入總決賽。
營隊

臺灣大學程式解題競賽培訓營
熱心學生自動自發努力辦理的營隊。

交大競技程式訓練冬令營、夏令營
熱心老師和學生自動自發努力辦理的營隊。

競程日記
關於競賽活動的大小事

講義

臺大資訊系資訊之芽算法班
熱心學生自動自發舉辦的高中營隊以及教材。

板橋高中資訊社演算法講義
熱心學生自動自發努力彙整的教材。

建國中學資訊科培訓講義
熱心學生自動自發努力彙整的教材。

交通大學PSPT課程講義
熱心老師自動自發努力彙整的教材。

成功大學ACM課程講義
熱心學生自動自發努力彙整的教材。

Stanford CS 97SI: Introduction to Competitive Programming Contests
Stanford大學開設的課程。

Competitive Programmer's Handbook
芬蘭IOI國家隊訓練教材

書籍



Discrete Mathematics and Its Applications
Kenneth Rosen
McGraw-Hill

離散數學，資工系用書，演算法的數學知識。
此書含有許多程式解題的基礎概念。
細讀此書，對程式解題有一定幫助。
此書有繁體中文譯本。




數學思考
臺北市建國高中第49屆314班合譯
九章出版社

很有趣的數學書籍，教導如何解決數學問題。
書中提到的思考方式，其實和程式解題是相通的。
這本書由《Thinking Mathematically》改著，
原書作者為John Mason。




How to Solve It
G. Pólya
Princeton University Press

經典的數學教育著作。
這本書有繁體中文譯本《怎樣解題》。




名題精選百則:技巧篇
冼鏡光
儒林出版社

收集程式設計的經典問題，
而且這些問題不會用到特殊的資料結構與演算法。
題目大多小巧精緻，非常具有啟發性。




Cracking the Coding Interview
Gayle Laakmann McDowell
CareerCup

收集面試問題，
其中包含許多演算法益智問題！

這本書有繁體中文譯本
《來自程式的試鍊：
專為程式開發人員所寫的技術面試完全攻略》。




Competitive Programming
Steven Halim, Felix Halim
Lulu

世界上第一本演算法競賽教科書！
詳細介紹競賽常用演算法，
精心挑選大量UVa Online Judge練習題，
配有追蹤解題進度的網站UVa Hunting，
規劃相當完善的教材。




프로그래밍 대회에서 배우는 알고리즘 문제 해결 전략
구종만
인사이트

將演算法競賽的所有經典主題分門別類，
依照學習順序編排例題，仔細說明解題思路。

這本書有簡體中文譯本《算法問題實戰策略》。




プログラミングコンテストチャレンジブック
秋葉拓哉、岩田陽一、北川宜稔
マイナビ

選錄大量題目，以題目為主角，介紹各種演算法。

這本書有繁體中文譯本
《培養與鍛鍊程式設計的邏輯腦：
世界級程式設計大賽的知識、心得與解題分享》。





算法競賽入門經典
劉汝佳
清華大學出版社

算法競賽入門經典——訓練指南
劉汝佳、陳鋒
清華大學出版社

http://code.google.com/p/aoapc-book/
這是一套系列作，目前只出版兩本。
知識水平是所有書籍之中最高的。
想要躋身高手行列的人，絕對不要錯過此系列作。

第一本書有繁體中文譯本
《打下好基礎：程式設計與演算法競賽入門經典》。

第二本書有繁體中文譯本
《提升程式設計的解題思考力─
國際演算法程式設計競賽訓練指南》。



Computer Science

國內的資訊工程系學些什麼？
計算機的學問，分成計算機工程（Computer Engineering）與計算機科學（Computer Science）兩大系列。
計算機工程。製造電腦、操控電腦的學問（台灣把計算機翻譯成電腦）。製造電腦的部分，屬於電機系的專業；操控電腦的部分，屬於資工系的專業。在國外，有些學校乾脆把電機系和資工系合在一起，讓整件事情完美圓滿。下麵列出國內資工系應該學得到的計算機工程課程：

電子學：討論電流與電子元件的行為。
數位邏輯：操控電流與電子元件的行為，並且賦予意義。
微處理機：討論中央處理器。等登等登。
計算機組織與結構：討論電腦如何組成、如何運作，討論電腦的零件。
組合語言：操控電腦的指令。
程式設計：程式語言也是操控電腦的指令，設計成稍微貼近人類思惟。通常學C或C++。
編譯器：如何把程式碼變成操控電腦的指令。
系統程式：發揮電腦零件功能的程式，讓電腦執行特定作業。
作業系統：人與電腦的介面，讓使用者便於執行系統程式。
資料庫：電腦結合儲存設備，用來記錄。
計算機網路：電腦結合網路設備，用來通訊。
分散式系統：電腦結合網路設備、儲存設備，用來分工合作。
嵌入式系統：電腦結合其他機械，有著各種功能。
程式語言：如何設計程式語言，方便人類撰寫、方便電腦作業。
軟體工程：程式員很多、程式碼很長的情況，要如何應對。
人機互動：人類如何操控電腦。
普適計算：電腦與這個世界如何相互依存。

計算機科學。運用電腦實施計算、達成任務的學問。電腦是計算機，只會算數學，因此計算機科學皆是數學。計算機科學是資工系學生必備的基礎理論，是計算機的深奧之處。事實上，計算機工程的後半課程，就需要計算機科學的知識作為輔助。下麵列出國內資工系應該學得到的計算機科學課程：

資料結構：電腦實施計算時、儲存資料的方法。
演算法：電腦計算的方法。
平行處理：許多台電腦一起計算的方法。
自動機理論：討論電腦的計算模式，用數學表達。
計算理論：討論電腦的計算能力，用數學表達。
字串學：連成一串的文字（數列）的數學知識，著重比對。
數位訊號處理：連成一串的數列的數學知識，著重轉化。
密碼學：改變資料外觀的數學知識。
資訊理論：資料本身的數學知識。entropy！
編碼理論：壓縮資料的數學知識。用到資訊理論。
模式識別：比對資料的數學知識。
機器學習：分析資料的數學知識。用到模式識別。
人工智慧：搜尋資料的數學知識。用到機器學習。

緊接著列出計算機科學的實際應用課程。通常會在大四、研究所開課，通常只能學到皮毛；若要有所小成，就必須加入相對應的實驗室，認真做研究：

資料探勘：用數學解析、轉化數值資料。
自然語言處理：用數學解析、轉化文字資料。
語音處理：用數學解析、轉化聲音資料。
影像處理：用數學解析、轉化圖片資料、影片資料。
計算機圖學：用數學製造圖片、影片。
計算機視覺：用數學辨識圖片、影片。
幾何處理：用數學解析、轉化物體資料。
數值方法：用電腦計算數學方程式。
計算幾何：用電腦計算數學幾何。
計算物理：用電腦解決物理問題。
計算化學：用電腦解決化學問題。
生物資訊：用電腦解決生物學、醫學問題。
機器人學：上述所有東西加上機械設備，計算機工程與計算機科學集大成。

另外還有一些數學課程。計算機科學的各個應用領域都會用到數學，因此數學課程通常在大一、大二就會用力教完。雖說是數學，但是資工系與數學系的學習方向有著極大差異──資工系屬於實務導向，所以沒有太多晦澀的內容，也不需要推導定理，只要懂得原理、懂得運用就可以了，內容反而比數學系有趣。下麵列出國內資工系的基礎數學課程：

線性代數、機率論、離散數學。

另一方面還有理工科系的共同課程：微積分、工程數學。微積分就不討論了，總是有人認為有用、有人認為沒用，各人心裡有底。至於工程數學，計算機科學用不到，計算機工程用得比較多，尤其是在製造電腦、操控機械方面。
還有一些其他的數學，計算機科學有時候會用到，像是統計學、隨機過程、賽局理論、圖論、組合最佳化、數論等等。有些課程資工系沒有開課，電機系、數學系才有開課。
國外的計算機科學系學些什麼？
國外大學的課程更加豐富細膩！請大家看看UIUC和UCSD這兩間大學的課程總表：
https://cs.illinois.edu/courses/full-curriculum
http://ucsd.edu/catalog/courses/CSE.html
這兩間大學的計算機科學系樂於分享教材，絕大部分課程都公開了課程講義。大家可以透過網路自主學習：將課名代號、課名全名，放到Google搜尋，馬上就能找到課程講義。有時候則是要搜尋開課教授的姓名，從教授的個人網頁找到課程網站連結。
課程總表實在太籠統。有人依照工作性質，將課程歸類。
http://www.computerscienceonline.org/courses/
除了學校的正規課程，也有網路的影音課程。諸如Coursera、Udacity、edX，都有計算機科學的課程。課程種類正在持續增加當中，大家可以一睹國外教授的風採。
https://www.coursera.org/browse/computer-science
如果還不過癮，那麼還可以找QS世界大學排名，找前100大計算機科學系，再用Google搜尋這些學校的課程。
https://www.topuniversities.com/university-rankings/university-subject-rankings/2017/computer-science-information-systems
世界上還有許多比台清交更優秀的學校。打開心胸放眼全世界，不要自我設限，相信大家會有更多的收穫。
資訊工程系
資訊工程不是主流詞彙。從字面上來看，意思是處理資料的工程──架設一些電腦設備、運用一些計算機科學，來處理資料這樣。
資訊工程系是非常奇怪的系名。國外大學的計算機科學系所，系名都沒有包含資訊工程的字眼。在台灣，資訊工程系的英文系名是Department of Computer Science and Information Engineering，直接翻譯是「計算機科學與資訊工程系」，故意在計算機科學的後方添上了資訊工程，而且只取資訊工程的部分當成了中文系名。我不清楚這種亂象是如何產生的，或許是當時某些老人家想要譁眾取寵、追逐潮流，因此更改系名，欺騙學生就讀、保全自己地位。各位可以參考台灣交通大學資訊工程系的改名歷程：
https://www.cs.nctu.edu.tw/cswebsite/intro/history
國內計算機科學發展
台灣政府接受美援，引進國外設備，建造電子工廠、電腦工廠。台灣政府指派黨政軍人士前往海外觀摩，回國後設立研究院和大學，擔任校長和教授，督促學生解讀技術原理、創業開工廠。因此台灣並未發展計算機科學。
以學界而言，許多大學教授的水準，不如自學的中學生。比如引入計算機科學的先驅，只寫得出虛有其表的爛教材。資工系畢業生，一個班級只有兩三人學會寫程式。
以業界而言，只要去補習班接受短期訓練，就能寫程式，完全不必經過資工系的專業訓練。程式員如同臨時工，花錢請就有，人力流動相當頻繁。大部份公司都沒有完善的專案管理機制，修改規格、程式出錯、加班工作是家常便飯。
在台灣，光是學會寫程式，就是個大問題，更遑論計算機科學。如果你對計算機科學有興趣，就必須自立自強，學校教育幫不了你。
國外計算機科學發展
請參考維基百科以及谷歌搜尋結果。



臺大課程地圖






核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            碩士論文
        
 
◎
 
 
◎
◎
◎




            專題研究
        
◎
◎
 
 
◎
◎
 




            專題討論
        
 
 
 
 
 
 
 




            軟體系統
        
◎
◎
◎
◎
◎
◎
◎




            資訊工程理論基礎
        
◎
◎
 
 
 
 
◎




            計算機安全
        
◎
 
 
 
 
 
 




            人工智慧
        
◎
 
◎
 
 
 
◎




            高等人工智慧
        
◎
◎
◎
 
 
 
 




            應用隨機過程
        
◎
 
 
 
 
 
 




            演算法的數學解析
        
◎
◎
 
 
 
 
 


核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            高等作業系統
        
◎
◎
◎
 
 
 
 




            生物資訊與計算分子生物學
        
◎
 
 
◎
◎
◎
◎




            系統效能評估
        
◎
 
◎
 
◎
 
 




            數值方法
        
◎
 
 
 
 
 
 




            生物序列分析演算法
        
◎
◎
 
◎
◎
 
◎




            生醫資料探勘演算法
        
◎
◎
◎
◎
◎
 
◎




            軟體工程
        
◎
 
 
 
 
 
 




            編譯程式理論
        
◎
 
 
 
 
 
 




            電腦視覺
        
◎
◎
◎
 
 
 
◎




            電腦網路專題
        
◎
◎
 
 
◎
 
 


核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            自然語言處理
        
◎
◎
◎
◎
◎
◎
 




            軟體工程設計
        
◎
◎
 
 
 
 
 




            數位訊號處理導論
        
◎
◎
 
 
 
◎
◎




            機器人學
        
◎
◎
◎
◎
 
 
◎




            電腦視覺一
        
◎
◎
◎
 
 
 
◎




            應用代數
        
◎
 
 
◎
 
 
 




            高等編譯器設計
        
◎
 
 
 
 
 
 




            高等計算機結構
        
◎
◎
 
 
◎
◎
 




            平行程式設計
        
◎
◎
 
 
 
 
 




            即時系統
        
◎
◎
◎
 
◎
 
◎


核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            演算法設計方法論
        
◎
◎
 
 
◎
◎
◎




            資訊檢索與擷取
        
 
◎
◎
 
 
 
 




            圖形分析辨認
        
◎
◎
◎
 
◎
◎
◎




            分散式代理人系統
        
◎
 
 
 
 
 
 




            圖形演算法特論
        
◎
◎
 
◎
◎
◎
◎




            隨機演算法
        
◎
◎
 
◎
 
 
 




            數學模擬與系統生物
        
◎
 
 
 
 
 
 




            嵌入式系統軟體設計專題
        
◎
◎
 
 
 
 
 




            嵌入式系統編譯器設計
        
◎
◎
◎
 
 
 
 




            數位語音處理
        
◎
◎
◎
 
◎
 
 


核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            賽局理論
        
◎
◎
 
 
 
 
 




            行動通訊服務系統效能評估
        
◎
 
 
 
 
 
 




            機器人知覺與學習
        
◎
◎
 
 
◎
◎
◎




            遊戲設計
        
◎
◎
◎
 
 
 
 




            生醫資訊學導論
        
◎
 
 
◎
◎
◎
◎




            化學資訊
        
◎
◎
 
◎
◎
◎
◎




            多核處理器及編譯
        
◎
 
 
 
 
 
 




            低功率系統設計
        
◎
◎
◎
◎
◎
◎
◎




            科技英文寫作
        
 
 
 
 
◎
◎
 




            幾何模型
        
◎
 
 
 
 
 
 


核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            嵌入式作業系統實作
        
◎
 
 
 
 
 
 




            系統代謝學
        
◎
◎
◎
◎
◎
◎
◎




            高等電腦模擬藥物設計
        
◎
 
 
 
 
 
 




            社群網路分析
        
◎
 
◎
◎
◎
◎
◎




            資通訊產業發展專題
        
 
 
 
 
 
 
 




            雲端運算特論
        
◎
 
 
 
 
 
 




            平行與分散式程式設計
        
◎
◎
◎
 
 
 
 




            智慧整合感控系統之理論與實務
        
◎
 
◎
 
◎
 
 




            計算攝影學
        
◎
 
 
◎
◎
 
◎




            無線網路基礎與應用
        
◎
◎
◎
 
 
 
◎


核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            圖形演算法及生物資訊應用
        
◎
 
 
 
 
 
◎




            資訊檢索專題
        
◎
◎
 
 
◎
 
◎




            三維動態環境感知
        
◎
 
 
 
 
◎
 




            機率圖形學習模型
        
◎
◎
 
◎
◎
 
 




            系統研究專題
        
◎
◎
 
◎
◎
 
 




            數位人文導論
        
◎
◎
 
 
◎
 
 




            適地性技術、應用與服務
        
◎
◎
◎
◎
 
◎
◎




            機率型機器感知
        
◎
◎
◎
◎
 
 
 




            數位學習與工程教學
        
◎
◎
◎
◎
◎
◎
◎




            雲端運算概論
        
◎
◎
 
◎
 
 
 


核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            巨量資料系統
        
◎
◎
 
◎
◎
◎
 




            巨量資料統計與探勘
        
◎
◎
 
 
 
◎
 




            虛擬機器
        
◎
◎
 
◎
◎
◎
 




            Web程式設計與應用
        
◎
◎
 
◎
◎
 
 




            Android執行環境及編譯器
        
◎
◎
◎
◎
◎
 
◎




            巨量資料系統之應用
        
◎
◎
◎
◎
◎
 
◎




            行動雲端計算之系統設計
        
◎
◎
 
◎
◎
◎
 




            Android虛擬機與編譯器
        
◎
◎
◎
◎
◎
 
◎




            智慧聯網專題
        
 
 
 
 
◎
 
 




            Android平臺及其Big Data後台
        
◎
◎
◎
◎
◎
 
◎


核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            異質系統架構與應用
        
◎
◎
◎
◎
◎
◎
 




            Big Data程式語言、編譯與應用
        
◎
◎
◎
◎
◎
◎
 




            機器學習
        
◎
◎
 
◎
◎
 
 




            數理邏輯簡介
        
◎
 
◎
 
 
 
 




            比特幣及數據分析
        
◎
◎
◎
◎
◎
◎
 




            量子演算法
        
◎
◎
 
 
◎
 
 




            資料庫理論進階專題
        
◎
 
 
◎
 
◎
 




            人機界面與設計
        
◎
 
 
 
◎
 
◎




            開源系統軟體概論與實務
        
◎
◎
◎
◎
◎
◎
 




            人機互動
        
◎
◎
 
◎
◎
◎
◎


核心能力課程
A
              資訊專業進階知識
B
              自我提升資訊專業知識的能力
C
              尊重學術、工程倫理、及智慧財產權
D
              閱讀與檢索資訊文獻的能力
E
              帶領研發團隊、溝通合作的能力
F
              撰寫並闡述學術論文的能力
G
              把人本考量融入資訊產品的能力




            計算機安全特論
        
◎
◎
 
 
◎
 
 




            系統專題研究-物聯網中介軟體設計
        
◎
◎
◎
 
◎
 
 




            深度學習之應用
        
◎
◎
 
◎
◎
 
 




            數據分析學與模型專題
        
◎
◎
 
◎
 
 
 




            機器學習基石
        
◎
◎
 
◎
 
 
 




            區塊鏈與數據分析
        
◎
◎
◎
◎
◎
◎
 




            智慧對話機器人
        
◎
◎
 
◎
◎
 
◎




            機器學習技法
        
◎
◎
 
◎
 
 
 




            通訊複雜度概論
        
◎
◎
 
 
 
 
 




            金融科技導論
        
◎
 
 
◎
◎
◎
 



核心能力名稱
A
          資訊專業進階知識
B
          自我提升資訊專業知識的能力
C
          尊重學術、工程倫理、及智慧財產權
D
          閱讀與檢索資訊文獻的能力
E
          帶領研發團隊、溝通合作的能力
F
          撰寫並闡述學術論文的能力
G
          把人本考量融入資訊產品的能力


相關課程數量
        （課程總數：100）
94
68
36
43
52
32
34










中華科技大學 電子工程系暨研究所


























































































































































　







　


　




















　
























































　








安全衛生



工作手則










實驗室管理教師










Kristall-3M長晶實驗室







白光LED製程實驗室







光電製程與模擬實驗室







系統整合與自動化量測實驗室







系統模擬實驗室







晶片應用實驗室







超大型積體電路實驗室







可程式晶片系統實驗室







數位電子術科乙級考場







高頻量測實驗室




　




　


































 　高頻量測實驗室 
				K504 















海報1
			| 
			海報2
			 


教學目的


1.培養能夠自行設計製作完成一複雜度較高的高頻通訊電路
              2.計劃擬以業界普遍使用之軟體進行射頻與微波通訊電路模擬設計，並將電路圖佈局製作電路  3.RFID之應用


主要軟硬體設備


1.Ansoft HFSS三維電磁模擬軟體
              2.電磁相容分析儀
              3.射頻微波電路模擬軟體
              4.網路分析儀
              5.頻譜分析儀
              6.信號產生器
              7.計頻器
              8.ISO/IEC 15693 讀寫模組(RWM600A型)  9.個人電腦


已開設課程


1.通訊電子學與實習
              2.射頻與微波電路設計與實作
              3.高頻與微波電路導論
              4.微波電晶體設計
              5.微波電路設計與實習
              6.電磁乾擾與電磁相容原理與量測  7.RFID概論  8.RFID系統與應用　

 

















　



　
　
　
                

                                      

                                             


                                                                                           



