

免費電子書：編譯器設計 -- 開放電腦計劃 - 陳鍾誠的網站































Wikidot.com



.wikidot.com
    


Share on








Edit
History
Tags
Source

Explore »

 





陳鍾誠的網站
金門大學：免費電子書、教材、程式、動畫








文章列表

最近修改
所有網頁
標記


相關網站

陳鍾誠的網站
系統程式
C# 程式設計


陳鍾誠

關於陳鍾誠
陳鍾誠的信箱
陳鍾誠的 Facebook
陳鍾誠的網站
陳鍾誠的手機網
陳鍾誠的簡歷
陳鍾誠的 Diigo
陳鍾誠的 Youtube


Wikidot

網站管理
本站成員
標記
加入本站?
頂欄
側欄
樣版
Wikidot 文件
Wikidot 語法
Wikidot Module
Wikidot Embedding
Wikidot Template
Wikidot Layout




Create account or Sign in 




課程
兩岸產業
網路資源
網路程式
開放原碼
動畫設計
研究專題
書籍
系統程式
C# 程式設計
Blender 動畫設計
作品
程式
論文
動畫
文章
新詩
故事
歷史
研究
研究
衛星遊戲
人工智慧
網路出版
機器翻譯
興趣
閱讀
寫作
影片
關註
學習
常用
生活
網站
手機版
手機最愛
Diigo
Twitter
Facebook
Scribd
Youtube
Kmit
ping
GAE
金門不動產
手機入口網
大學課程網


rating: 0+x





                            免費電子書：編譯器設計 -- 開放電腦計劃
                        








編譯器設計
編譯器簡介
高階語言
語法理論
剖析器
語意理論
符號表
直譯器
型態系統
中間碼
目標語言
最佳化
錯誤處理
進階議題
原始碼下載
程式實作
C 語言
案例研究
JavaScript
V8
Lua
Oberon
NeoPascal
pcc
tcc
gcc
C--
Lex
YACC
AntLR
LLVM
CLang
訊息
相關網站
參考文獻
最新修改
簡體版
English





文章
留言
授權



本書是「開放電腦計劃」的一系列書籍之一，「開放電腦計劃」的目標是設計一臺完整的「開放原始碼電腦」，從軟體到硬體通通都是開放的，我們已經知道怎麼做了，我們正在努力的實現這個夢想。
開放電腦計劃將會設計出「組譯器 as1、編譯器 cc1、虛擬機 vm1、作業系統 os1、處理器 cpu1、主機板 board1」等元件，並且撰寫出下列的相關書籍，以便讓想理解電腦設計原理的學生與愛好者，能夠有一個清楚又簡單的參考目標。透過這個計畫所釋出的程式碼與書籍，我們希望讓讀者能很容易的透過實務設計理解電腦的原理。
我們計畫釋出下列領域的原始碼與書籍，以便讓這些實作有一個清楚的理論說明，用程式搭配書籍說明電腦的設計原理。


領域
原始碼
書籍
網址


編譯器
cc1
編譯器設計
http://ccckmit.wikidot.com/cd:main


組譯器
as1
組合語言
http://ccckmit.wikidot.com/as:main


虛擬機
vm1
虛擬機設計
http://ccckmit.wikidot.com/vm:main


作業系統
os1
作業系統設計
http://ccckmit.wikidot.com/os:main


處理器
cpu1
計算機結構
http://ccckmit.wikidot.com/ca:main


主機板
board1
計算機結構
http://ccckmit.wikidot.com/ca:main


電腦整體
m1
開放電腦計劃
http://ccckmit.wikidot.com/ocs:main


Facebook



Facebook

Wikidot


Show Comments





Add a New Comment


Post preview:


Close preview








or Sign in as Wikidot user



(will not be published)




-
+


                    Help: wiki text quick reference 











Permanent Link
Edit
Delete





本網頁的作者、授權與引用方式


作者
陳鍾誠，於金門大學資訊工程系，電子郵件：wt.ude.uqn|ccc#wt.ude.uqn|ccc，網站：http://ccckmit.wikidot.com。
授權
本文採用創作共用 (Creative Common) 3.0 版的 姓名標示─非商業性─相同方式分享 授權條款，歡迎轉載或修改使用，但若做為商業使用時必須取得授權，引用本文時請參考下列格式。
中文版 (APA格式)
陳鍾誠 (26 May 2011 03:45)，(網頁標題) 免費電子書：編譯器設計 — 開放電腦計劃，(網站標題) 陳鍾誠的網站，取自 http://ccckmit.wikidot.com/cd:main ，網頁修改第 0 版。
英文版 (APA格式)
Chung-Chen Chen (26 May 2011 03:45), Retrieved from http://ccckmit.wikidot.com/cd:main , Page Revision 0.















page revision: 0, last edited: 26 May 2011 03:45

Edit
Rate (0)
Tags
Discuss (0)
History
Files
Print
Site tools
+ Options


Edit Sections
Append
Edit Meta
Watchers
Backlinks
Page Source
Parent
Lock Page
Rename
Delete









Help
     |
    Terms of Service
     |
    Privacy
     |
    Report a bug
     |
    Flag as objectionable

Powered by Wikidot.com


                    Unless otherwise stated, the content of this page is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License





Other interesting sites






Language Arts (8)









Fondazione SCP
          
              Branca Italiana della SCP Foundation
            







MIS 213-2
          
              Intro to IS
            







Trading With The Flow!!!
          
              The Art of Trading the NOW
            


























        Click here to edit contents of this page.    



        Click here to toggle editing of individual sections of the page (if possible).         Watch headings for an "edit" link when available.    

        Append content without editing the whole page source.    

        Check out how this page has evolved in the past.    

        If you want to discuss contents of this page - this is the easiest way to do it.    

        View and manage file attachments for this page.    

        A few useful tools to manage this Site.    

        See pages that link to and include this page.    

        Change the name (also URL address, possibly the category) of the page.    

        View wiki source for this page without editing.    
  
        View/set parent page (used for creating breadcrumbs and structured layout).    

            Notify administrators if there is objectionable content in this page.        

            Something does not work as expected? Find out what you can do.        

            General Wikidot.com documentation and help section.        

            Wikidot.com Terms of Service - what you can, what you should not etc.        

            Wikidot.com Privacy Policy.          
        






Fw: [心得] 編譯器設計概論 - 徐慰中 - 看板 b00902HW - 批踢踢實業坊


















批踢踢實業坊
›
看板 b00902HW
關於我們
聯絡資訊




返回看板


分享







作者suhorng ( )標題Fw: [心得] 編譯器設計概論 - 徐慰中時間Sun Aug 25 23:22:25 2013
※ [本文轉錄自 suhorng 信箱]

作者: yukuro (魔法師mystery) 看板: NCTU-Teacher
標題: [心得] 編譯器設計概論 - 徐慰中
時間: 2012/07/03 Tue 19:06:30

     （按Ctrl+v 預覽，稍微修一下版面，可讓你這篇文章更專業喔^^）

⊕課名⊕

  編譯器設計概論

▲教授▲

  徐慰中

★修課年度★（請加註開課單位 如:大三通識、XX系選修、XX所）

 大三資工組必修

￡教了什麼￡（課程大概內容。或是額外學會了什麼東西。）

 課本是用 Crafting a Compiler
 參考書是 Compilers: Principles, Techniques, and Tools(俗稱Dragon Book)

 內容的話:

 1. Introduction to Compiler

 2. Simple Compiler Design

 以上兩個就是簡介compiler是什麼,要做那些事,大致上可以分為6個階段:
 (i)  Lexical Analysis: 辨識那些token是屬於語言語言
                        (用Scanner辨識Identifier,某些符號...是否合法)
 (ii) Syntax Analysis: 辨識token間怎樣排是合法的
                       (用Parser辨識文法)

 (iii)Semantic Analysis: 判斷一些屬於程式語言的規則,但又沒辦法在(ii)處理的
                         是否合法(Ex: Type checking, Declaration...)

 (iv) Intermediate Code Generation: 就像Java產生Byte code這種例子

 (v)  Optimization: 著重在產生出來的code,是否可以把它做的更有效率

 (vi) Code Generation: 產生target code

 3. Scanner的理論,Lex/Flex的規則和使用

 4. Parser的理論, Yacc/Bison的使用

 5. Top-Down Parsing(主要是LL(1) parsing) 以及限制

 6. Bottom-Up Parsing(主要是LR(0), LR(1), SLR(1), LALR(1))

 7. Declaration Processing, Type Checking, Name Space, Symbol Table

 8. Reachable Analysis, Termination Analysis, Exception Handling
    (這部分是Java有的特色, 上課也是稍微提一下)

 9. Generate Codes by Mips Assembly Language
    (i) Local Variable, Global Variable
    (ii) Assignment Statement
    (iii) if, if-else, while, for statement
    (iv) function call
    (v) Caller-saved, Callee-saved registers

 10. Run-Time Support: Activation Record, Stack Allocation,
     Compute Array Index, Deal with Non-local Variables by
     static link, dynamic link, and display...

 11. Simple Register Scheduling and Management

 12. Leaf Routine Optimaztion, Jump Code Generation,
     Switch Statement Code Generation


 課本請參考

 Chapter 1-6, 7.1, 7.2, Chapter8(除了8.7), 9.1, Chapter 12
 至於Chapter 13,14可以看一下

◆上課方式◆（投影片、團體討論、老師教學風格）

 主要是以老師自己做的投影片教學, 上課時很喜歡和學生互動和問問題
 也很關心學生到底有沒有聽懂上課的內容, 也會藉著問問題的時候記住學生
 這學期有兩次團體競賽搶答,主要是為了看學生瞭解多少，搶答答對會有額外加分

▼考試作業▼

 1. 有6次project(50%)

     project1: 做一個簡單的算數運算compiler,主要是改Java的code,來完成作業
     ,目的是瞭解compiler的6個phases

     project2-6: 是實作C-- Compiler(簡化版的C)

     project2: C-- Scanner

     project3: C-- Parser

     project4: C-- type checking, declararion, symbol table, name space

     project5-6: Code generation for C-- by Mips

     前3個比較簡單, 主要是為的熟悉Flex, Bison這些工具如何用來做scanner, parser
     的功能

     project4 是寫最多code的時候,有4個禮拜,但是要知道如何下手,可能要花2個禮拜

     project5-6 要用QtSpim來測試自己產生的Mips assembly code是否正確
     另外project4-6要註意如何用value stack, 和加action routine來幫自己做
     type-checking, 操作symbol table, 和產生assembly code
     還有就是因為我們project沒有產生abstract syntax tree, 所以多數都要在一個
     文法的production內,就決定產生出來的code, 和決定source code的對錯,和課本
     有點不一樣
     (但你也可以產生abstract syntax tree, 應該不會禁止)

 2. 期中考(20%): 內容Chpater 1-5

 3. 期末考(25%): 內容是期中考後教的, 但是會以project實作部分為主

 4. 額外加分(5%): 我猜是像上課搶答,學習態度之類的

 另外期中期末可以開書,看講義,甚至用筆電,但不可上網


￥其他￥（是否註重出席率or嚴禁遲到？需要的基礎？）

我覺得需要的基礎應該比較著重程式設計的能力,我覺得需要

1. C program design: 基礎指令的不用講, 但是pointer, struct, union的使用能力,
   我覺得非常重要, 不會活用應該很難完成project, 還有就是正確使用pointer,
   不然絕對會dangling pointer, memory leak滿天飛
   另外就是要會切割C source code, 分成好幾個source code 和 header file,
   這真的很重要, 不然要再好幾千行code 搜尋某段程式碼會非常痛苦

2. Data Structure: 你能不能判斷在造一個parameter構成的list, 要用什麼data
   structure才好處理, 每一個node要有那些東西, 才能存放所有資訊, 怎樣才能
   有效率的插入,刪除和搜尋資料。我覺得用的data structure大多數都沒什麼特別的
   (link list, stack, queue, hash table, binary search tree就夠了), 但是用的
   好就需要好好思考

3. Algorithm Design: 要用怎樣的流程, 才可以解決你的問題, 而不是馬上就開始寫
   程式碼, 不然像type checking的時候, 光檢查variable reference的文法和語意
   對不對, 就要100多行, 而且很容易忘記一些細節, 總不希望在好幾千的code慢慢
   試到對為止吧? 所以要練習自己寫psuedocode, 才不會手忙腳亂
   當然, 如果可以分析你的程式效率更好

4. Software Engineer: 怎樣把你的code變得好讀一點, 容易修改和擴充, 整個project
   的程式加起來, 寫再簡潔也是3000行起跳, 而且project分好幾個階段, 所以我覺得
   這個非常重要, 不然你會改code和debug得非常痛苦


5. 會寫 Linux, Unix 的make file: 因為要能把好幾個source code連結起來, 而且
   flex/bison主要是在linux/unix運作的, 所以也要學習使用繫上工作站,或是用
   vitual box 裝linux也可以

6. 熟悉如何把 C code轉成assembly code: 其實上課會講一些, 只是基礎的還是要會,
   雖然是用Mips assembly language, 但學會x86就可以了, 重要的是怎麼翻,而不是
   語法

其實每次都會有助教的source code給你改, 也會把make file寫好, 不過自己會寫會比較
能照自己的意思寫, 比較有彈性

理論的部分:

Formal Language 的 Regular Language 和 Context-Free Grammer 以及一點Turing
Machine的知識就夠了, 因為會用的上課會教, 而且也沒考過證明, 所以我覺得會了是
真的比較好理解, 只是沒有很需要, 而且compiler著重的是如何把finite automata
轉成程式碼, LL(k), LR(k) parser怎麼實作, 其實和formal language上的東西有點
不一樣


￠最後想說的話￠

 我覺得老師很認真, 很關心學生的學習狀況, 上課都是用自己的方式講解,
 不是照本宣科, 所以整個學期上完, 是很有價值的, 而且他似乎很擅長把
 很難的觀念, 用很容易理解的方式說明, 真的是好老師


＆誰適合修這門課＆

 願意認真去上課,作筆記的人非常適合上他的課,
 當然所有人都很適合


--
※ Origin: 交大次世代(bs2.to)
◆ From: 111-251-181-131.dynamic.hinet.net
推 dogsbear：看了好像不錯                                          07/03 19:12
糖 super9817020：大推!!!                                           07/03 19:12
→ kougousei：超級操....                                           07/03 20:29
推 shaform：常常會有人想問到底為什麼要修編譯器，除了老師說的業界   07/03 20:34
→ shaform：需求外，正如這篇文章所述，編譯器幾乎可說是把三年所學   07/03 20:34
→ shaform：的知識、技巧，(資結、程式語言、正規語言、組語...)      07/03 20:34
→ shaform：全部結合起來，用一個小型專案的方式讓你操兵演練，       07/03 20:34
→ shaform：這樣的歷程絕對是獲益良多的。                           07/03 20:34
→ shaform：我自己覺得dragon book和crafting兩本教科書其實          07/03 20:35
→ shaform：都不是那麼容易讀懂。                                   07/03 20:35
→ shaform：而老師的講課真的是非常清楚，很值得推薦。               07/03 20:35
推 kramasdia：徐慰中教授的課真的值得認真上                         07/03 20:46

我寫的時候忘了加上一個重要科目:程式語言
其實程式語言課程上學的東西,真的也非常重要.因為這門課會介紹程式語言會有那些元素
,然後這些東西的語意或是結構上大概是怎麼樣,好像每個老師在這門課著重的點不同,像
黃問泙老師會要求你用各式各樣的語言寫程式,黃世強老師就教一些課本上會有的東西,
有一次project教你用common lisp 和 prolog寫簡單的程式, 有一次是要求你用virtual
function改他的C++ source code, 所以我覺得不管上誰的程式語言,認真學對compiler
這門課都會很有幫助

 作者從 111-251-181-131.dynamic.hinet.net 修改文章於 2012/07/03 Tue 21:10:48
作者從 111-251-181-131.dynamic.hinet.net 修改文章於 2012/07/03 Tue 21:12:41
→ sa411022：程式語言這門課快沒了                                  07/03 21:28
→ mTwTm：程式語言要被砍掉了 我也很驚訝                            07/03 21:53
推 aplmnbvcxz：要砍也先砍林正中好嗎@@唉~                           07/03 22:01
推 dogsbear：林正中老師其實還不錯                                  07/03 22:03
→ kougousei：樓上當真@@?!                                         07/03 22:06
推 dogsbear：林正中老師比較有個性 但真的是位好老師                 07/03 22:15
→ yukuro：原來程式語言真的被砍了,而且很多課都提前了,真的改了不少  07/03 22:29
→ sa411022：電電學也被砍了 (雖然後來好像不是林正中教了            07/03 22:40
→ yukuro：還真可以說完全整容,而且compiler和OS一起修,不知道好不好? 07/03 22:52
→ sa411022：以後大四根本沒事情做...                               07/03 23:01
推 windtw：雖然很操但是其實最後做出來一個堪用的compiler很有成就感  07/03 23:04
推 windtw：教授上課真的上的很不錯 推~                              07/03 23:06
推 b6683421：上他的課真的很有幫助                                  07/03 23:38
推 gh40402：推薦這篇文章                                           07/04 11:13
→ erase2004：這老師很專業=b                                       07/04 12:35
推 xatier：大推老爹阿！                                            07/06 09:34
推 PG：推薦這篇文章                                                07/15 02:29
推 jpopaholic：我也是先修他的課,他的作業會讓你更加會寫程式語言     01/09 04:56


※ 發信站: 批踢踢實業坊(ptt.cc)
※ 轉錄者: suhorng (118.166.52.160), 時間: 08/25/2013 23:22:25
※ 編輯: suhorng         來自: 118.166.52.160       (08/25 23:22)
推 q82419:囧... 接受挑戰!!! 08/26 00:55











編譯器 - 維基百科，自由的百科全書






























 







編譯器

維基百科，自由的百科全書


					前往：					導覽，					搜尋









編譯器（Compiler），是一種電腦程式，它會將用某種程式語言寫成的原始碼（原始語言），轉換成另一種程式語言（目標語言）。
它主要的目的是將便於人編寫，閱讀，維護的高階電腦語言所寫作的原始碼程式，翻譯為電腦能解讀、執行的低階機器語言的程式，也就是執行檔。編譯器將原始程式（Source program）作為輸入，翻譯產生使用目標語言（Target language）的等價程式。原始碼一般為高階語言（High-level language），如Pascal、C、C++、C# 、Java等，而目標語言則是組合語言或目標機器的目的碼（Object code），有時也稱作機器碼（Machine code）。 一個現代編譯器的主要工作流程如下： 原始碼（source code）→ 預處理器（preprocessor）→ 編譯器（compiler）→ 組譯程式（assembler）→ 目的碼（object code）→ 連結器（Linker）→ 執行檔（executables）， 最後打包好的檔案就可以給電腦去判讀執行了。



目錄


1 歷史

1.1 教學用的編譯器


2 編譯器輸出
3 參考文獻
4 參見



歷史[編輯]
早期的電腦軟體都是用組合語言直接編寫的，這種狀況持續了數年。當人們發現為不同類型的CPU編寫可重用軟體的開銷要明顯高於編寫編譯器時，人們發明瞭高階程式語言。由於早期的電腦的記憶體很少，當大家實現編譯器時，遇到了許多技術難題。
大約在20世紀50年代末期，與機器無關的程式語言被首次提出。隨後，人們開發了幾種實驗性質的編譯器。第一個編譯器是由美國女性電腦科學家葛麗絲·霍普（Grace Murray Hopper）於1952年為A-0系統編寫的。但是1957年由任職於IBM的美國電腦科學家約翰·巴科斯（John Warner Backus）領導的FORTRAN則是第一個被實作出具備完整功能的編譯器。1960年，COBOL成為一種較早的能在多種架構下被編譯的語言。
高階語言在許多領域流行起來。由於新的程式語言支援的功能越來越多，電腦的架構越來越複雜，這使得編譯器也越來越複雜。
早期的編譯器是用組合語言編寫的。首個能編譯自己源程式的編譯器是在1962年由麻省理工學院的Hart和Levin製作的。從20世紀70年代起，實現能編譯自己源程式的編譯器變得越來越可行，不過還是用Pascal和C語言來實現編譯器更加流行。製作某種語言的第一個能編譯器，要麼需要用其它語言來編寫，要麼就像Hart和Levin製作Lisp編譯器那樣，用直譯器來執行編譯器。
教學用的編譯器[編輯]
編譯器的構造與最佳化是電腦專業的大學課程，[1]課程名稱一般為「編譯原理」或「編譯器」。通常在課程中包含瞭如何實現一種教學用程式語言的編譯器。一個著名的例子是20世紀70年代，瑞士計算機科學家尼克勞斯·維爾特（Niklaus Emil Wirth）用於講解編譯器的構造時使用的PL/0（英語：PL/0）編譯器。儘管它很簡單，PL/0編譯器介紹了這個領域的幾個有影響的概念：

逐步求精的程式開發（也是 1971年 Wirth 的論文的標題）[2]
使用遞迴下降解析器
使用EBNF指定語言的語法。
代碼生成器產生便攜P-code
在自舉問題的正式描述中使用T-diagram。

編譯器輸出[編輯]
編譯器的一種分類方式是按照生成代碼所執行的系統平臺劃分，這個平臺稱為目標平臺。
有一些編譯器輸出的代碼，將執行於與編譯器所在相同類型的電腦和作業系統之上，這種編譯器叫做本地編譯器。輸出可以執行於不同的平臺之上的編譯器，叫做交叉編譯器。由於嵌入式系統通常沒有軟體開發環境，因此，為這類系統開發軟體時，通常需要使用交叉編譯器。
編譯器所輸出於虛擬機器上執行之代碼，編譯器和編譯器輸出的執行平臺有可能相同，也有可能不同。因此，對於這類編譯器，不去區分它是本地編譯器還是交叉編譯器。
參考文獻[編輯]


^ Chakraborty, P., Saxena, P. C., Katti, C. P., Pahwa, G., Taneja, S. A new practicum in compiler construction. Computer Applications in Engineering Education, In Press. http://onlinelibrary.wiley.com/doi/10.1002/cae.20566/pdf
^ The ACM Digital Library. 


參見[編輯]

連結器
直譯器










閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。











權威控制



LCCN: sh86007588
GND: 4148248-7
BNF: cb120631538（資料）
NDL: 01191219
BNE: XX532454












 
						取自 "https://zh.wikipedia.org/w/index.php?title=編譯器&oldid=45249566"					
2 個分類：編譯器軟體程序設計工具隱藏分類：含有英語的條目含有德語的條目包含規範控制信息的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AfrikaansAragonésالعربيةAsturianuAzərbaycancaتۆرکجهБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBosanskiCatalàکوردیČeštinaDanskDeutschZazakiΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiFrançaisGaeilgeGalegoעבריתहिन्दीHrvatskiHornjoserbsceMagyarՀայերենInterlinguaBahasa IndonesiaIlokanoÍslenskaItaliano日本語ქართულიҚазақша한국어КыргызчаLatinaLëtzebuergeschLietuviųLatviešuОлык марийМакедонскиമലയാളംBahasa MelayuMirandésမြန်မာဘာသာनेपालीNederlandsNorsk bokmålਪੰਜਾਬੀPolskiپنجابیPortuguêsRomânăРусскийScotsSrpskohrvatski / српскохрватскиSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSvenskaதமிழ்తెలుగుไทยTagalogTürkçeУкраїнськаاردوTiếng ViệtWinarayייִדישBân-lâm-gú 
編輯連結 





 本頁面最後修訂於2017年7月18日 (週二) 04:12。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 








專案設計工具、編譯頁 (Visual Basic)













































Developer Network
Developer Network
Developer




登入




MSDN 訂閱




取得工具





















































很抱歉。您所要求的內容已遭移除。將會在 1 秒內自動重新導向。





參考
一般使用者介面項目 (Visual Studio)

專案屬性參考





專案屬性參考
專案設計工具、編譯頁 (Visual Basic)




專案設計工具、編譯頁 (Visual Basic)




專案設計工具、編譯頁 (Visual Basic)

















專案設計工具、應用程式頁 (Visual Basic) 

專案設計工具、應用程式頁 (C#) 

專案設計工具、建置事件 (C#) 

專案設計工具、建置頁 (C#) 

專案設計工具、程式碼分析 

專案設計工具、編譯頁 (Visual Basic) 

進階編譯器設定對話方塊 (Visual Basic) 

建置事件對話方塊 (Visual Basic) 

專案設計工具、偵錯頁 

專案設計工具、My 擴充頁 (Visual Basic) 

專案設計工具、發行頁 

專案設計工具、參考頁 (Visual Basic) 

專案設計工具、安全性頁 

專案設計工具、服務頁 

專案設計工具、簽署頁 

選項對話方塊、專案、Visual Basic 預設值 

選項對話方塊、專案和方案、VC++ 專案設定 



TOC

 
摺疊目錄
展開目錄




本文件已封存並已停止維護。



本文件已封存並已停止維護。


專案設計工具、編譯頁 (Visual Basic)



                Visual Studio 2015 
            






                        其他版本
                    







Visual Studio 2013 


Visual Studio 2012


Visual Studio 2010


Visual Studio 2005






 如需 Visual Studio 2017 的最新文件請參閱 Visual Studio 2017 文件。使用 [專案設計工具] 的 [編譯] 頁，指定編譯指令。  您也可以在此指定進階編譯器選項及建置前或建置後事件。若要存取 [編譯] 頁，請選取專案節點 (不是 [方案] 節點) 在 [方案總管]。  然後選取 [專案]，請在功能表列上的 [屬性] 。  顯示 [專案設計工具] 時，請按一下 [編譯] 索引標籤。 註意 

在下列指示的某些 Visual Studio 使用者介面項目中，您的電腦可能會顯示不同的名稱或位置： 您所擁有的 Visual Studio 版本以及使用的設定會決定這些項目。 如需詳細資訊，請參閱將 IDE 個人化。
組態和平臺以下設定可讓您選取要顯示或要修改的組態和平臺。 註意 
使用簡化組建組態，專案系統會判斷要建置偵錯或發行版本。  因此沒有顯示 [組態] 和 [平臺] 清單。  如需詳細資訊，請參閱Debug and Release Project Configurations。組態
指定要顯示或修改的組態設定。  設定為 [偵錯] (預設值)、[發行] 或 [所有組態]。  如需詳細資訊，請參閱Debug and Release Project Configurations與如何：建立和編輯組態。平臺
指定要顯示或修改的平臺設定。  您可以指定 [任何 CPU] (預設值)， [ [x64] 或 [x86]。  如需詳細資訊，請參閱Debug and Release Project Configurations。編譯器組態選項下列設定可讓您設定編譯器組態選項。建置輸出路徑
指定此專案組態的輸出檔案位置。  在這個方塊中輸入建置輸出路徑，或者按一下 [瀏覽] 按鈕以選取路徑。  請註意，路徑是相對的，如果您輸入絕對路徑，它會儲存成相對路徑。  預設路徑為 bin\Debug\ 或 bin\Release\。  如需詳細資訊，請參閱Debug and Release Project Configurations。使用簡化組建組態，專案系統會判斷要建置偵錯或發行版本。  不論您所指定的 [輸出路徑] 為何，[偵錯] 功能表 (F5) 上的 [建置] 命令，就會將組建放在偵錯位置中。  但是，使用 [建置] 功能表上的 [建置] 命令卻會放在您所指定的位置。  如需詳細資訊，請參閱Debug and Release Project Configurations。Option Explicit
指定是否允許變數隱含宣告。  選取 [開]，要求明確宣告變數。  如果變數未在使用前宣告，這會導致編譯器報告錯誤。  如果選取 [Off]，則可以用隱含方式宣告變數。這個設定對應於 /optionexplicit 編譯器選項。如果原始碼檔案包含Option Explicit Statement，陳述式中的 On 或Off 值會覆寫 [編譯頁面] 中的 [選項明確] 設定。當您建立新專案時，[編譯] 頁上的 [Option Explicit] 會設定為 [選項] 對話方塊中的 [Option Explicit] 設定值。  若要檢視或變更這個對話方塊中的設定，請按一下 [工具] 功能表中的 [選項]。  在 [選項] 對話方塊中，展開 [專案和方案]，然後按一下 [VB 預設值]。  在 [VB 預設值] 中的 [Option Explicit] 初始預設設定是 [On]。將 [Option Explicit] 設定為 Off 通常不是好做法。  一個或多個位置中的變數名稱可能有拼字錯誤，這會在程式執行時造成非預期的結果。Option Strict
指定是否強制執行嚴格的類型語意。  當 [Option Strict] 為 [On] 時，下列情況將造成編譯時期錯誤：隱含 Narrowing 轉換晚期繫結造成 Object類型的隱含類型化隱含資料類型轉換是 Narrowing 轉換時，會發生隱含 Narrowing 轉換錯誤。  如需詳細資訊，請參閱 Option Strict Statement、Implicit and Explicit Conversions和Widening and Narrowing Conversions。物件被指派給宣告類型為 Object 之變數的屬性或方法時，為晚期繫結物件。  如需詳細資訊，請參閱Option Strict Statement與Early and Late Binding。無法推斷宣告變數的適當類型，因此推斷Object類型時，會發生隱含物件類型錯誤。  這主要是發生在您使用 Dim 陳述式宣告變數而未使用 As 子句，並且 Option Infer 已設為關閉的時候。  如需詳細資訊，請參閱Option Strict Statement、Option Infer Statement 和 Visual Basic Language Specification。[Option Strict] 設定對應至 /optionstrict 編譯器選項。如果原始碼檔案包含Option Strict Statement，陳述式中的 On 或Off 值會覆寫 [編譯頁面]中的 [選項嚴格] 設定。當您建立專案時，[編譯] 頁上的 [Option Strict] 設定會設定為 [選項] 對話方塊中 [Option Strict] 的值。  若要檢視或變更這個對話方塊中的設定，請按一下 [工具] 功能表中的 [選項]。  在 [選項] 對話方塊中，展開 [專案和方案]，然後按一下 [VB 預設值]。  在 [VB 預設值] 中的 [Option Strict] 初始預設設定是 [Off]。選項嚴格個別警告。[編譯] 頁的 [警告組態] 區段中所包含的設定對應三個會在 Option Strict 設為開啟時導致編譯時期錯誤的條件。  以下是這些設定：隱含轉換後期繫結；叫用可能會在執行階段失敗隱含類型；假定物件當您將 [Option Strict] 設定為 [開啟] 時，這三個警告組態設定都會設定為 [錯誤]。  當您將 [Option Strict] 設定為 [關閉] 時，所有三個設定都會設定為 [無]。您可以將每個警告組態個別變更為 [無]、[警告] 或 [錯誤]。  如果三個警告組態設定皆設為 [錯誤]，On會出現在Option strict方塊中。  如果三個都設為 [無]，此方塊中會出現  Off。  若為這些設定的其他任何組合，會出現 [(自訂)]。Option Compare
指定要使用的字串比較型別。  選擇 [二進位]，指示編譯器使用二進位、區分大小寫的字串比較。  選取 [文字]，則會使用依地區設定特性 (Locale-Specific)、不區分大小寫的文字字串比較。這個設定對應於 /optioncompare 編譯器選項。如果原始碼檔案包含Option Compare Statement，陳述式中的 Binary或Text會覆寫 [編譯頁面] 中的 [選項比較] 設定。當您建立專案時，[編譯] 頁上的 [Option Compare] 設定會設定為 [選項] 對話方塊中 [Option Compare] 的值。  若要檢視或變更這個對話方塊中的設定，請按一下 [工具] 功能表中的 [選項]。  在 [選項] 對話方塊中，展開 [專案和方案]，然後按一下 [VB 預設值]。  在 [VB 預設值] 中的 [Option Compare] 初始預設設定是 [Binary]。Option infer
指定變數宣告中是否允許區域型別推斷。  選取 [開]，允許使用區域型別推斷。  選取 [Off] 以攔阻區域型別推斷。這個設定對應於 /optioninfer 編譯器選項。如果原始碼檔案包含Option Infer Statement，陳述式中的 On 或Off 值會覆寫 [編譯頁面] 中的 [選項推斷] 設定。當您建立專案時，[編譯] 頁上的 [Option Infer] 設定會設定為 [選項] 對話方塊中 [Option Infer] 的值。  若要檢視或變更這個對話方塊中的設定，請按一下 [工具] 功能表中的 [選項]。  在 [選項] 對話方塊中，展開 [專案和方案]，然後按一下 [VB 預設值]。  在 [VB 預設值] 中的 [Option Infer] 初始預設設定是 [On]。目標 CPU
指定做為輸出檔目標的處理器。  為所有 32 位元 Intel 相容處理器指定任何 64 位元 Intel 相容處理器的 [x86] 時，任何 ARM 處理器的 [x64] ， [ARM] 或 [任何 CPU] 指定任何處理器是可接受的。  因為它在硬體類型，最多可讓應用程式執行 [任何 CPU] 是新專案的預設值。如需詳細資訊，請參閱/platform。[32 位元的慣用方法。]
如果 [Prefer32 位元] 核取方塊已選取，應用程式設定為在 Windows 32 位元和 64 位元版本的 32 位元應用程式。  否則，應用程式設定為在 Windows 32 位元版本的 32 位元應用程式和做為 Windows 64 位元版本的 64 位元應用程式。執行，因為 64 位元應用程式加倍指標大小及其可能產生相容性問題完整 32 位元的型別程式庫。  其執行速度本機執行或需要超過 4 GB 記憶體，因此才會執行應用程式如 64 位元。只有在下列所有條件都成立時，這個核取方塊可用:在 [編譯頁面] 中， [ [目標 CPU] 清單設定為 [任何 CPU]。在 [應用程式頁面] 中， [ [應用程式類型] 清單指定專案是應用程式。在 [應用程式頁面] 中， [ [目標 Framework] 清單指定 .NET Framework 4.5。警告組態
這個表格會列出建置條件以及各項條件所對應之 [無]、[警告] 或 [錯誤] 的告知層級。根據預設，所有的編譯器警告都會在進行編譯時加入到工作清單中。  選取 [停用所有警告]，以指示編譯程式不要發出警告或錯誤。  如果您要編譯器將警告視為必須修正的錯誤，選取 [將所有警告視為錯誤]。停用所有警告
指定是否允許編譯器發出通知，如本文件稍早的「狀況與告知」表中的描述。  這個核取方塊預設為清除。  如果選取這個核取方塊，則會指示編譯器不要發出警告或錯誤。這個設定對應於 /nowarn 編譯器選項。將所有警告都視為錯誤。
指定如何看待警告。  這個核取方塊預設為清除，也就是所有警告通知仍然設定為 [警告]。  選取這個核取方塊，則會將所有警告通知變更為 [錯誤]。只有在清除 [停用所有警告] 的情況下，才能使用這個選項。產生 XML 文件檔案
指定是否產生文件資訊。  這個核取方塊預設為選取，指示編譯器產生文件資訊並放在 XML 檔案中。  如果清除這個核取方塊，就會指示編譯器不要建立文件。這個設定對應於 /doc 編譯器選項。註冊 COM Interop
指定 Managed 應用程式是否要公開 COM 物件 (COM 可呼叫包裝函式)，讓 COM 物件與應用程式互動。這個核取方塊預設為清除，也就是指定應用程式不允許 COM Interop。  如果選取這個核取方塊，則允許使用 COM Interop。這個選項不適用於 [Windows 應用程式] 或 [主控台應用程式] 專案。建置事件
按一下這個按鈕以存取 [建置事件] 對話方塊。  使用這個對話方塊以指定專案的建置前和建置後組態指令。  此對話方塊只適用於 Visual Basic 專案。  如需詳細資訊，請參閱建置事件對話方塊 (Visual Basic)。進階編譯選項
按一下這個按鈕以存取 [進階 編譯器設定] 對話方塊。  使用 [進階 編譯器設定] 對話方塊，指定專案的進階組建組態屬性。  此對話方塊只適用於 Visual Basic 專案。  如需詳細資訊，請參閱進階編譯器設定對話方塊 (Visual Basic)。請參閱Debug and Release Project ConfigurationsManaging Compilation Properties如何：指定建置事件 (Visual Basic)Visual Basic Command-Line Compiler如何：建立和編輯組態





顯示:

受繼承
        

受保護
        







列印

匯出 (0)
            







列印

分享
            













本文內容




















本頁對您有幫助嗎？
是
否





其他意見反應？


剩餘 1500 個字元

提交
略過此項







謝謝！
我們非常感謝您提供的意見反應。










© 2017 Microsoft

















 
電腦網路 | 編譯器設計(第2版) 庫珀 著 2013-1 人民郵電出版社 | Yahoo拍賣















ga conf


 













首頁
超級商城
購物中心
中古車
帳務中心






Yahoo!奇摩拍賣


:::商品搜尋框

搜尋
搜尋:


















:::上方功能區塊






件商品已加入





前往購物車







        {{#if items_normal}}
            {{{merchant_name}}}
{{items_normal}}項商品
        {{/if}}
        {{#if items_nextbuy}}
            {{{merchant_name}}}
下次買清單
        {{/if}}
        

 









   拍賣  >    圖書/影音/文具  >    圖書與雜誌  >    簡體書  >    電腦網路  






         
 檢舉商品   tumblr share   facebook share       0 
 {{#if isLoveIcon}}
	
		{{likeNums}}
	
{{else}}
    {{#if trackItem}}已喜愛商品{{else}}喜愛商品{{/if}}
{{/if}}
   


    競標 編譯器設計(第2版) 庫珀 著 2013-1 人民郵電出版社           1 天 10 時 31 分 55 秒結束
      拍賣時間會自動延長 賣家可提前結束拍賣        起標價格    $495 / 0 次出價   出價增額 $10   最高出價者  無   數　　量    Decrease  Increase  庫存僅剩件     
         結標前 2 小時手機提醒   加入 iOS 行事曆   加入 Google 行事曆    
    本商品僅提供自動出價 (說明)              請輸入直接出價金額   請輸入單件出價上限    建議最低出價 $495   系統將按增額，依序遞補出價至上限金額為止   
 
      Yahoo拍賣保障 放心買!我們給你五萬交易保障!     付款方式    信用卡一次付清   Yahoo奇摩輕鬆付   、  現金付款  Yahoo奇摩輕鬆付現金接受付款方式  帳戶餘額 網路ATM 實體ATM FamiPort  ATM提供6家銀行：合作金庫、華南銀行、玉山銀行、臺灣銀行、國泰世華、中國信託，以上6家同行轉帳，免轉帳手續費。  、   （想使用貨到付款嗎？）       運　　費   跨國寄送 - 單件運費$200     商品狀況 全新品   所在地區   中國大陸     商品編號   100050279798       {{#with countdown}}
    {{#if days}}{{days}} 天 {{/if}}{{hours}} 時 {{minutes}} 分 {{seconds}} 秒結束
{{/with}}
   {{#with countdown}}
    {{year}}/{{month}}/{{date}} {{hour}}:{{minute}}:{{second}} 結束
{{/with}}
    




 永擴文化傳播 代號 Y1237333505  加入最愛     正評99.26%  評價 2,201 則     關於我 商品問與答 (0) 全部商品 (214900) 












  賣場任意門  廣告            29元炫彩會計章送授權貼紙連續章職章   $29              超人氣～復古滾輪日期印章～手作必備唷   $75              暑期免運活動特賣中   $75         看更多商品>   我要曝光>   





{{title}}

            {{#each geList}}
            

                    {{#if thumbnail}}{{/if}}
                    {{desc}}

                {{#if sponsorLink}}
                    {{sponsor}}
                {{else}}
                    {{sponsor}}
                {{/if}}
            
            {{/each}}
        










     商品資訊    出價紀錄   問與答(0)    商品資訊      分級   普級     decoration decoration      《編譯器設計(第2版)》是編譯器設計領域的經典著作,主要從以下四部分詳解了編譯器的設計過程。第一部分涵蓋編譯器前端設計和建立前端所用工具的設計和構建;第二部分探討從源代碼到編譯器中間形式的映射,考察前端為優化器和後端所生成代碼的種類;第三部分介紹代碼優化,同時包含對分析和轉換的進一步處理;第四部分專門講解編譯器後端使用的算法……       出價紀錄  瀏覽摘要 詳細記錄   record   出價者   拍賣代號   出價金額   數量   出價時間   操作    看更多出價紀錄arrow  看更多出價紀錄arrow  目前沒有人出價    問與答 看更多問與答arrow  目前沒有任何問與答   comments   請先登入再進行發問    

賣家回覆

0/250


取消





 
  app migrate  熱門APP快下載 快下載拍賣APP，第一時間掌握賣家回覆，熱門商品別錯過！   立即下載 再等等  




  賣家推薦  






 



















 




 編譯器設計|編譯器介紹|反編譯器資訊|反編譯程式|編譯9筆-癮科技書籤











































 


 


























 



搜尋：編譯器設計網站相關資料
















 

 




關於在G1上刷韌體HTC-Magic 5.0.2Hr2

8月 21, 2009
suki0924
android 黑客開發板






小弟已成功在G1刷上5.0.2Hr4 ApptoSD by Haykuro ,但是..所有的中文,包括註音,都是顯示 "口口口口..." 請問各位高手要如何使中文能夠正常顯示呢..? 是不是我刷的版本不對?...






 




[新品] IKEA也有賣電腦包喔，好加在不用回家組裝 :P

8月 10, 2009
Judy
女子科技






 不管是Notebook還是Netbook，既然現在各家電腦廠牌都強調攜帶性便利性，總是要有個漂亮的電腦包，才真正稱得上攜帶方便，總不能要求每個女生帶電腦出門，都要穿著黑色套裝和高跟鞋，去搭配黑鴉鴉的長方形電腦袋吧！ Ikea 推出的Upptacka週末包和電腦包，打破傳統電腦袋的框架，包包裡面除了...






 




Android一拖拉庫好軟體+ 夢魅以求的VNC

7月 7, 2009
713908
android






6月中托朋友帶回了一支山寨iphone3G，把玩一日後便棄於桌上，只覺得雙卡是唯一優點，實在受不了MKT方案，雖然什麼都有但樣樣就缺那麼一點質感。月底逛twitter上看到po文htc magic+mPro方案出爐，衝動之下買了所謂的魔術機，說什麼方案優惠，原來是空機價20700加送coupon價值...






 




晶華飯店下午茶$299活動

6月 6, 2009
crocs
哈拉打屁區






從PTT上轉貼過來的 優惠時間：6/8（一）11:00開搶優惠網址：http://ppt.cc/4Q-K下午茶一人$299，限量三組每次搶購需購買兩人份 剛也在網路上隨便查了一下看得肚子都餓了 >....






 




HTC Magic 韌體 for G1 v5.0.2Hr3

4月 11, 2009
plokijuh
android 黑客開發板






本來要睡覺了，結果 haykuro 又丟出 5.0 來了，這次還蠻勁爆的跟這篇提到的兩段影片有高度的相似，我想應該很接近零售的版本了首先開機動畫換了來源http://haykuro.theiphoneproject.org/?p=44目前已知的問題照相機是反轉模式此版的語言選項只剩下英文與正體中文所...






 




陽光新科技 : 可以躺著參加的研討會

9月 10, 2008
galaxymario
一閃一閃陽光妹






 今日我在上班的時候，偷偷的看一個研討會， 是一個線上研討會， 從宣傳、演講傳播方式、給大家作問券的方式...都是線上的。 以下是他幾個很神的功能，  畫面下方的播放器正再播送主持人的講話內容，上方的ppt會一頁一頁的隨著主持人的說話內容跟著跑。 下麵的播放器隨時可以暫停。 而且有問題可以直接打在下...













Fw: [心得] 編譯器設計概論- 徐慰中- 看板b00902HW - 批踢踢實業坊

7月 19, 2017






2013年8月25日 ... [本文轉錄自suhorng 信箱] 作者: yukuro (魔法師mystery) 看板: NCTU-Teacher 標題
 : [心得] 編譯器設計概論- 徐慰中時間: 2012/07/03 Tue 19:06:30 ......













編譯器- 維基百科，自由的百科全書 - Wikipedia

7月 19, 2017






編譯器（Compiler），是一種電腦程式，它會將用某種程式語言寫成的原始碼（原始
 語言），轉換成另一種程式語言（ ... 編譯器將原始程式（Source program）作為輸入，
 翻譯產生使用目標語言（Target language）的等價程式。 .... 編譯器軟體 · 程序設計
 工具....













免費電子書：編譯器設計-- 開放電腦計劃- 陳鍾誠的網站

7月 17, 2017






2011年5月25日 ... 開放電腦計劃將會設計出「組譯器as1、編譯器cc1、虛擬機vm1、作業系統os1、處理
 器cpu1、主機板board1」等元件，並且撰寫出下列的相關書籍， ......













編譯器設計-- 參考文獻- 陳鍾誠的網站

7月 19, 2017






2012年2月6日 ... 編譯器設計-- 參考文獻. 編譯器設計 · 編譯器簡介 · 高階語言 · 語法理論 · 剖析器 · 
 語意理論 · 符號表 · 直譯器 · 型態系統 · 中間碼 · 目標語言 · 最佳化....













開放電腦計劃-- 編譯器設計- 陳鍾誠的網站

7月 20, 2017






2013年12月30日 ... chunk ::= {stat [`;´]} [laststat [`;´]] block ::= chunk stat ::= varlist `=´ explist | 
 functioncall | do block end | while exp do block end | repeat block until ......













1.1 語言處理器

7月 19, 2017






編譯器設計的原理和技術還可以用於編譯器設計之外的眾多領域。 ... 簡單地說，編譯
 器就是程式，它可以讀取某一種語言（原始語言, source language）編寫的....













程式語言、編譯器與軟體工程- 國立交通大學資訊工程學系NCTU ...

7月 20, 2017






程式語言、編譯器與軟體工程. Programming Languages, Compilers and Software 
 Engineering. 隨著晶片製造技術不斷進步，處理器設計者得以應用更複雜的技術及 ......













高等編譯器設計 - 臺大課程地圖

7月 14, 2017






課號, 班次, 課名, 學分數, 全半年, 授課教師, 時間(教室). CSIE5054, 01, 高等編譯器
 設計, 3, 2, 廖世偉, 五ABC. CSIE5054, 02, 高等編譯器設計, 3, 2, 徐慰中, 五ABC ......













資工系開放式課程資源 - 交資夢想 - WordPress.com

7月 15, 2017






2011年8月5日 ... 計算機概論與程式設計→ ... 密碼學概論; 微處理機系統實驗; 編譯器設計概論. 
 Computer Language ... 組合數學; 統計學; 嵌入式系統設計概論與實作....






1 





 






 
最新文章


松下成功完成Zetes Industries SA的收購和下市


How to Get a Girl Back After a Break Up 7 Ways You


小米平衡車被揭漏洞百出，能被搖控及偷取資料


「運動消閒博覽」- 去書展時可以去感受一下，讓小朋友先放電


A How-To-Guide – How To Become A Swimsuit Designer




網友正在看


超堅固超滑順！iPad 也有康寧 0.3mm 玻璃保護貼！


Industry Trends Mobile retailers』 battle for colla


【球鞋實著】Nike Air Foamposite One – White Summit White




熱門文章


提升辦公桌的優雅質感，木製電腦桌面組


PhotoMath – 用手機鏡頭對著數學公式，就自動有答案


Apple 重上顛峰: 價值創歷史新高




精選文章


名符其實的腳踏車阿宅！中國的 Tricycle House 三輪車屋


kono 瘋讀書 app 一個全新的電子雜誌閱讀平臺


iPhone 上面出現 Gmail 和 Google exchange 密碼不正確的解決方式













 









 




 























國立交通大學機構典藏：記憶體受限之Java Just-in-Time(JIT)編譯器設計(I)






















































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏
學術出版
研究計畫






















標題: 記憶體受限之Java Just-in-Time(JIT)編譯器設計(I)Memory-Constrained Java Just-in-Time (JIT) Compiler Design(I)
作者: 單智君JEAN JYH-JIUNSHANN國立交通大學資訊工程學系
關鍵字: JIT 編譯器;J2ME;Java Bytecode
公開日期: 2004
摘要: 現今通訊相關產業快速發展，資訊家電、個人數位助理 (PDA) 及各種小型電子裝
置需求急速增加。而這些產品需要有足以處理相關資訊的小型專製處理器、作業系統、
以及發展應用程式的程式語言。因為各種產品的作業系統環境和執行平臺差異性很大，
現在有許多廠商使用Java 語言來撰寫應用程式，發揮Java 語言跨平臺的特性以及安全
上的考量。
為了要執行Java 程式，必須在這些小型系統上執行Java 虛擬機器。目前最常見的
有Sun 公司所提供的J2ME 技術平臺規格，其中的Java 執行引擎為K Virtual Machine / C
Virtual Machine (KVM/CVM)，是以Interpreter 的方式來直譯Java Bytecode。然而，此種
執行方式將會嚴重影響執行效能。因此，在兼具執行效能，省電和程式可攜性的考慮下，
可以選擇以Just in time compiler (JIT) 為虛擬機器的執行引擎。
本計劃將以三年時間探討整合JIT Compiler 在記憶體有限之系統上所面臨的各項研
究議題，包括:
(1) Bytecode block hotspot detection design
(2) JIT stack configuration consistence maintain
(3) Stack operation folding 之應用探討
(4) Global Optimization 之適用性評估
(5) 底層指令集之選擇與評估
(6) Register relabeling 省電技術評估與register allocation 之搭配
並且將在計劃完成時，提出上述各項議題之最佳化解決方案以及提出系統整合之解決方
法。此外，也將完成整合之Memory-constrained Mix-mode Java JIT Compiler 的實作。
官方說明文件#: NSC93-2213-E009-078
URI: http://hdl.handle.net/11536/91398https://www.grb.gov.tw/search/planDetail?id=1007004&docId=189779
顯示於類別：研究計畫



















文件中的檔案：存到雲端




932213E009078.pdf









IR@NCTUTAIRCrossRef記憶體受限之Java Just-in-Time (JIT)編譯器設計(III) / 單智君;SHANN JEAN JYH-JIUN記憶體受限之Java Just-In-Time (JIT)編譯器設計(II) / 單智君;JEAN JYH-JIUNSHANN動態配罝即時編譯程式碼至草稿記憶體以利高效率爪哇執行 / 郭泰毅;Guo, Tai-Yi;單智君;Shann, Jyh-Jiun嵌入式即時編譯器中方法展開之設計與實作 / 唐心磊;Shin-Lei Tang;單智君使用LLVM JIT Compiler實作加速JNA / 蔡宇欣;Tsai, Yu-Hsin;單智君一個嵌入式之Java即時編譯器架構 / 廖宜涼;Yi-Liang Liau;陳俊穎;Jing-Ying Chen應用在ARM/Thumb雙指令集處理器的嵌入式混合模式爪哇虛擬機器之設計與實作 / 黃健豪;單智君;Dr. Jean, J. J. Shann在嵌入式混合模式爪哇虛擬機器中使用多重載入/儲存指令之實驗 / 黃俊諭;Jun-Yu Huang;鍾崇斌;Chung-Ping Chung國立政治大學 - International Logistics Toward Just In Time / 周宣光 國立政治大學 - International Logistics Toward Just In Time / 周宣光 國立政治大學 - International Logistics Toward Just In Time / 周宣光 國立中山大學 - Comparison between Just-In-Time and EOQ System / Fuchiao Chyr;Tsong-Ming Lin;Chin-Fu Ho 國立成功大學 - Just-In-Time Cache for Capsule-Based Active Networks / Huang, Tzu-Chi; Shieh, Ce-Kuen; Miao, Yu-Ben Loading...












國立交通大學機構典藏：學術出版































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏






學術出版
: [108112]




























類別


專利資料

技術報告

教師專書

會議論文

期刊論文

畢業論文

研究計畫




探索


作者
570 
楊千495 
Kuo, Hao-Chung446 
陳光華374 
張翼349 
林進燈327 
Lin, Chin-Teng322 
陳安斌320 
吳重雨318 
李榮貴317 
孫春在.
下一步 >

關鍵字
449 
類神經網路424 
GaN423 
INFORMATION422 
電子工程419 
ELECTRONIC-ENGINEERING408 
 329 
氮化鎵301 
薄膜電晶體293 
OFDM275 
電腦.
下一步 >

公開日期
83654 
2000 - 201724454 
1911 - 1999









國立交通大學機構典藏：研究計畫































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏
學術出版






研究計畫
: [16504]


























類別內的文件 (依公開日期由降冪排序排序)： 從 1 到 20 筆，總共 16504 筆


 下一頁 >




公開日期標題作者2017單層碳與Weyl半金屬的電動力學性質儒森斯坦 ; 國立交通大學電子物理學系（所） 
2016微波電漿氮化金屬氧化物及化學氣相沉積鑽石張立; CHANG LI; 國立交通大學材料科學與工程學系（所）
2016功能性新穎螢光體之研製、特性鑑定及能量傳遞之研究與其在節能、生化檢測與綠能元件之應用陳登銘; CHEN TENG-MING; 國立交通大學應用化學系（所）
2016新穎矽量子點薄膜之開發與其在太陽能電池之應用李柏璁; Lee Po-Tsung; 國立交通大學光電工程學系（所）
2016分子設計與元件工程於高分子太陽能電池許千樹; HSU CHAIN-SHU; 國立交通大學應用化學系（所）
2016結合非揮發性之多核心系統與記憶體架構陳添福; Chen Tien-Fu; 國立交通大學資訊工程學系（所）
2016數位鑑識應用於多國文字的印刷來源辨識及掃瞄印刷偽造文件的偵測蔡銘箴; TSAI MIN-JEN; 國立交通大學資訊管理與財務金融學系
2016補助國內大專院校購置「 Datastream 財經資訊」資料庫專案戴天時; Dai Tian-Shyr; 國立交通大學資訊管理與財務金融學系
2016具非揮發性記憶體之多核心處理器電源與記憶體管理曹孝櫟; Tsao Shiao-Li; 國立交通大學資訊工程學系（所）
2016R-1234 系列冷媒熱流特性與系統研究開發王啟川; WANG CHI-CHUAN; 國立交通大學機械工程學系（所）
2016克雷白氏肺炎桿菌CG43反應膜外壓力的雙分子系統CpxAR 的功能性探討彭慧玲; PENG HWEI-LING; 國立交通大學生物科技學系（所）
2016探討大腦語音神經編碼之機制與長期聲音處理對其之影響曲在雯; Chiu Tzai-Wen; 國立交通大學生物科技學系（所）
2016設計合成新穎P型與N型有機共軛分子應用於溶液製程之有機光電元件鄭彥如; Cheng Yen-Ju; 國立交通大學應用化學系（所）
2016指定機組之流線型生產排程：複雜度分析與文獻綜覽林妙聰; Lin Bertrand  Miao-T; 國立交通大學資訊管理與財務金融學系
2016利用果蠅中樞神經系統發育系統性探討神經幹細胞的典型分化模式及分子機制高智飛; Kao Chih-Fei; 國立交通大學生物科技學系（所）
2016利用溶液製程之鈣鈦礦材料製作新穎光電元件-子計畫二：可溶液製程之有機金屬鹵化鈣鈦礦光電材料特性研究與其發光元件的開發陳方中; Chen Fang-Chung; 國立交通大學光電工程學系（所）
2016台灣左翼思想口述計畫（1970年代至1980年代）陳光興; CHEN KUAN-HSING; 國立交通大學社會與文化研究所
2016族群傳播與客家蔡欣怡; 國立交通大學傳播與科技學系
2016新穎磁性複合型介晶體材料之研製與應用朱英豪; Chu Ying-Hao; 國立交通大學材料科學與工程學系（所）
2016結合傳統金屬與新穎類金屬材料發展錶面電漿之垂直整合元件進行生物粒子捕獲與感測之前瞻性研究李柏璁; Lee Po-Tsung; 國立交通大學光電工程學系（所）


類別內的文件 (依公開日期由降冪排序排序)： 從 1 到 20 筆，總共 16504 筆


 下一頁 >




探索


作者
88 
吳重雨88 
蔡春進77 
林進燈75 
LIN CHIN-TENG75 
黃志彬74 
許千樹73 
HSU CHAIN-SHU71 
張良正71 
李鎮宜69 
LEE CHEN-YI.
下一步 >

關鍵字
408 
 114 
類神經網路79 
客家71 
Neural network58 
量子點54 
虛擬實境53 
Hakka48 
網際網路47 
氮化鎵45 
Virtual reality.
下一步 >

公開日期
5169 
2010 - 20177869 
2000 - 20093466 
1993 - 1999








