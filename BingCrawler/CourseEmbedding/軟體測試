


軟體測試 - 維基百科，自由的百科全書






























 







軟體測試

維基百科，自由的百科全書


					前往：					導覽，					搜尋






本條目可參照英語維基百科相應條目來擴充。 
若您熟悉來源語言和主題，請協助參考外語維基擴充條目。請勿直接提交機械翻譯，也不要翻譯不可靠、低品質內容。依版權協議，譯文需在編輯摘要註明來源，或於討論頁頂部標記{{Translated page}}標籤。 







本條目已列出參考文獻，但因為沒有文內引註而使來源仍然不明。（2013年11月20日） 
請通過加入合適的行內引用來改善這篇條目。 









軟體開發過程


核心行動




需求分析
軟體設計
軟體構造（英語：Software construction）
軟體測試
偵錯
軟體部署（英語：Software deployment）
軟體維護




軟體開發模式




軟體工程
瀑布模型
淨室（英語：Cleanroom software engineering）
疊代建模（英語：Incremental build model）
螺旋模型
V模型（英語：V-Model (software development)）
敏捷軟體開發




方法和框架




軟體原型（英語：Software prototyping）
快速應用程式開發（RAD）
統一流程（英語：Unified Process）
極限編程
團隊軟體流程（英語：Team software process）
個人軟體程式
動態系統開發方法（英語：Dynamic systems development method）
MSF（英語：Microsoft Solutions Framework）
Scrum
看板 (軟體開發)
Dual Vee Model（英語：Dual Vee Model）
測試驅動開發
ATDD（英語：Acceptance test–driven development）
行為驅動開發
FDD（英語：Feature-driven development）
DDD（英語：Domain-driven design）
MDD（英語：Model-driven_development）
疊代式開發
精益軟體開發
DevOps




軟體開發輔助領域




軟體配置管理
基礎設施作為代碼（英語：Infrastructure as Code）
軟體文件
軟體品質保證
軟體專案管理（英語：Software project management）
使用者經驗
WinOps（英語：WinOps）




軟體開發工具




編譯器
偵錯工具
效能分析
GUI設計器（英語：Graphical user interface builder）
建模（英語：UML tools）
整合式開發環境（IDE）
組建自動化
發布自動化（英語：Application release automation）
測試




標準和BOK




能力成熟度模型整合
IEEE標準（英語：IEEE_Standards_Association）
ISO 9000
ISO/IEC標準（英語：ISO/IEC JTC 1/SC 7）
SWEBOK（英語：SWEBOK）
專案管理知識體系
BABOK（英語：BABOK）







閱
論
編





軟體測試（英語：software testing），描述一種用來促進鑑定軟體的正確性、完整性、安全性和品質的過程。據此，您可能會想，軟體測試永遠不可能完整的確立任意電腦軟體的正確性。然而，在可計算理論（計算機科學的一個支派）一個簡單的數學證明推斷出下列結果：不可能完全解決所謂「當機」，指任意電腦程式是否會進入無窮迴圈，或者罷工並產生輸出問題。換句話說，軟體測試是一種實際輸出與預期輸出間的稽核或者比較過程。
軟體測試的經典定義是：在規定的條件下對程式進行操作，以發現程式錯誤，衡量軟體品質，並對其是否能滿足設計要求進行評估的過程。
軟體測試有許多方法，但對複雜的產品執行有效測試不僅僅是研究過程，更是創造並嚴格遵守某些獃板步驟的大事。測試的其中一個定義：為了評估而質疑產品的過程；這裡的「質疑」是測試員試著對產品做的事，而產品以測試者腳本行為反應作為回答。雖然大部分測試的智力過程不外乎回顧、檢查，然而「測試」這個詞意味著產品動態分析──讓產品流暢運行。程式品質可能，而且通常會，隨系統不同而有差異；不過某些公認特性是共通的：可靠性、穩定性、輕便性、易於維護、以及實用性。請參照至ISO標準ISO 9126有更詳盡的說明。



目錄


1 測試的進程

1.1 Alpha測試
1.2 Beta測試

1.2.1 封測與公測


1.3 Gamma測試


2 測試的方法

2.1 黑箱測試
2.2 白箱測試


3 測試的類型

3.1 壓力測試與效能測試


4 測試的階段

4.1 單元測試
4.2 整合測試
4.3 系統測試
4.4 回歸測試


5 測試用例、測試指令碼和測試場景
6 測試過程範例

6.1 軟體測試活動


7 代碼覆蓋率
8 自動化的測試
9 參考文獻
10 參見



測試的進程[編輯]
Alpha測試[編輯]
Alpha測試通常是階段性的開發完成後所開始進行，一直持續到進入Beta測試階段前的階段。Alpha測試是一種驗證測試，在模擬的環境中以模擬的資料來執行。
在這個階段中，通常是在開發單位由開發人員與測試的測試人員，以模擬或實際操作性的方式進行驗證測試。
Beta測試[編輯]
在系統測試中通常先進行Alpha測試以驗證資訊系統符合使用者以及設計需求所期望的功能。當Alpha階段完成後，開發過程進入到Beta階段，由公眾參與的測試的階段。Beta測試可稱為確認測試，在一個真實的環境中以實際的資料來執行測試，以確認效能，系統執行有效率，系統復原與備份作業正常，透過測試讓資訊系統日後可以更趨完善。
封測與公測[編輯]
封閉測試（Closed Beta，常簡作封測或CB）是軟體或服務等產品在開發完成後、將公開上市前的測試過程。相對於公開測試，封閉測試的主要用途是測試軟體的功能和檢查程式錯誤等等，因此通常只提供給少數人進行測試。有些公司會要求參與測試者簽署保密協定，以避免測試的產品提前外流。MMORPG的封測結束之後，遊戲公司常會將角色資料刪除，但也有少數不刪的。
公開測試（Open Beta，常簡作公測或OB），一般常指軟體或服務等產品在正式上市前開放給不特定人試用，雖然原意是希望試用者能夠提報bug，但並不是把試用者當做真正的驗證人員。由於通常為免費性質，故常常能夠吸引到大批的試用者參與，可視為另一種行銷策略。另一方面也節省下測試人員的成本，和驗證穩定度（對於多人使用的頻寬及機器是否能負載，又稱壓力測試）的時間。
Gamma測試[編輯]
Gamma測試是一個很少被提及的非正式測試階段，該測試階段對應的是對「存在缺陷」產品的測試。考慮到任何產品都可以被稱為「存在缺陷」的產品（測試只能發現產品中存在的問題，不能說明產品不存在問題），因此這個概念存在一定的不確定性。 對Alpha和Beta測試常見的一個誤解是「Beta測試＝黑盒測試」。實際上，Alpha和Beta測試對應在軟體產品發布之前的Alpha和Beta階段，而白盒、黑盒和灰盒測試技術是從技術和方法層面對測試的描述，不應該將這兩部分概念混淆。
測試的方法[編輯]
軟體測試一般分為白箱測試和黑箱測試。
黑箱測試[編輯]
主條目：黑箱測試
黑箱測試（black-box testing），也稱黑盒測試，是軟體測試方法，測試應用程式的功能，而不是其內部結構或運作。測試者不需具備應用程式的程式碼、內部結構和程式語言的專門知識。測試者只需知道什麼是系統應該做的事，即當鍵入一個特定的輸入，可得到一定的輸出。測試案例是依應用系統應該做的功能，照規範、規格或要求等設計。測試者選擇有效輸入和無效輸入來驗證是否正確的輸出。
此測試方法可適合大部分的軟體測試，例如整合測試（integration testing）以及系統測試（system testing）。
白箱測試[編輯]
主條目：白箱測試
白箱測試（white-box testing，又稱透明盒測試glass box testing、結構測試structural testing等）是一個測試軟體的方法，測試應用程式的內部結構或運作，而不是測試應用程式的功能（即黑箱測試）。在白箱測試時，以程式語言的角度來設計測試案例。測試者輸入資料驗證資料流在程式中的流動路徑，並確定適當的輸出，類似測試電路中的節點。
白箱測試可以應用於單元測試（unit testing）、整合測試（integration testing）和系統的軟體測試流程，可測試在整合過程中每一單元之間的路徑，或者主系統跟子系統中的測試。儘管這種測試的方法可以發現許多的錯誤或問題，它可能無法檢測未使用部分的規範。
測試的類型[編輯]


功能測試
按照測試軟體的各個功能劃分進行有條理的測試，在功能測試部分要保證測試項覆蓋所有功能和各種功能條件組合。


系統測試
對一個完整的軟體以用戶的角度來進行測試，系統測試和功能測試的區別是，系統測試利用的所有測試資料和測試的方法都要模擬成和用戶的實際使用環境完全一樣，測試的軟體也是經過系統整合以後的完整軟體系統，而不是在功能測試階段利用的每個功能模組單獨編譯後生成的可執行程式。


極限值測試
對軟體在各種特殊條件，特殊環境下能否正常執行和軟體的效能進行測試。
特殊條件一般指的是軟體規定的最大值，最小值，以及在超過最大、最小值條件下的測試。
特殊環境一般指的是軟體執行的機器處於CPU高負荷，或是網路高負荷狀態下的測試，根據軟體的不同，特殊環境也有過不同。


效能測試
效能測試是對軟體效能的評價。簡單的說，軟體效能衡量的是軟體具有的回應及時度能力。因此，效能測試是採用測試手段對軟體的回應及時性進行評價的一種方式。根據軟體的不同類型，效能測試的側重點也不同。


壓力測試與效能測試[編輯]
壓力測試常常和效能測試相混淆。它們主要不同點是，壓力測試要求進行超過規定效能指標的測試。例如一個網站設計容量是100個人同時點擊，壓力測試就要是採用120個同時點擊的條件測試。
壓力測試的通常判斷準則：

系統能夠取消復原。
壓力過程中不要有明顯效能下降。

測試的階段[編輯]
單元測試[編輯]
主條目：單元測試
單元測試是對軟體組成單元進行測試，其目的是檢驗軟體基本組成單位的正確性，測試的物件是軟體設計的最小單位：函式。
整合測試[編輯]
主條目：整合測試
整合測試也稱綜合測試、組裝測試、聯合測試，將程式模組採用適當的整合策略組裝起來，對系統的介面及整合後的功能進行正確性檢測的測試工作。其主要目的是檢查軟體單位之間的介面是否正確，整合測試的物件是已經經過單元測試的模組。
系統測試[編輯]
主條目：系統測試
系統測試主要包括功能測試、介面測試、可靠性測試、易用性測試、效能測試。 功能測試主要針對包括功能可用性、功能實現程度（功能流程&業務流程、資料處理&業務資料處理）方面測試。
回歸測試[編輯]
主條目：回歸測試
回歸測試指在軟體維護階段，為了檢測代碼修改而引入的錯誤所進行的測試活動。回歸測試是軟體維護階段的重要工作，有研究表明，回歸測試帶來的耗費占軟體生命周期的1/3總費用以上。
與普通的測試不同，在回歸測試過程開始的時候，測試者有一個完整的測試用例集可供使用，因此，如何根據代碼的修改情況對已有測試用例集進行有效的復用是回歸測試研究的重要方向，此外，回歸測試的研究方向還涉及自動化工具，物件導向回歸測試，測試用例優先級，回歸測試用例補充生成等。
測試用例、測試指令碼和測試場景[編輯]
主條目：測試用例
測試過程範例[編輯]
軟體測試活動[編輯]

驗收測試
系統測試
整合測試
單元測試
回歸測試
效能測試
壓力測試
安全測試
安裝測試
可用性測試
穩定性測試
易用性測試
移植測試

代碼覆蓋率[編輯]
主條目：代碼覆蓋率
代碼覆蓋率原本是種白箱測試活動。目標軟體通過特殊選項或者函式館編譯並且/或者在特殊環境（程式裡每個函式都被對映回原始碼裡函式起點）下執行。這個過程允許開發員與品管員檢視系統中在正常情況下極少或從未被讀寫的部分（例如：例外處理之類）並且幫助測試員確認最重要的情況（函式點）都被測過了。
測試員可檢視代碼覆蓋率測試結果來設計測試個案、相對應的輸入或者設定組以增加重要函式的代碼覆蓋率。兩種測試員常用的代碼覆蓋率形式：語句覆蓋率（或稱行覆蓋率）以及路徑覆蓋率（或稱邊覆蓋率）。行覆蓋率回報到測試完成時，執行過哪些行，或者記憶體大小。邊覆蓋率回報到測試完成時，哪些分支，或者程式決定點被執行過。正如覆蓋率的「率」字所言，這兩個都以百分比為單位。
通常代碼覆蓋率的工具與函式館要求的效能、記憶體、或者其他資源開銷不為正常的軟體營運接受。因此它們通常只存在實驗室裡。又，你可能會想到軟體裡的許多類無法一一通過這些代碼覆蓋率測試，雖然代碼覆蓋程度可通過分析但不是直接測試。
有些瑕疵也會受這些工具的影響。個別來說某些競態條件（race condition）或者類似的對即時（real time）敏感度高的操作幾乎不可能在代碼覆蓋率測試環境下偵知；相反的這類的瑕疵只會帶來更多的測試碼開銷。
自動化的測試[編輯]
測試自動化是使用軟體工具和既定程式，對軟體所進行的測試活動。
參考文獻[編輯]


鄭人傑，《計算機軟體測試技術》，清華大學出版社

參見[編輯]


軟體測試主題



程式錯誤
黑盒測試
白盒測試
軟體測試模型
軟體品質
軟體驗證及確認










閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。











權威控制



NDL: 01179782












 
						取自 "https://zh.wikipedia.org/w/index.php?title=軟件測試&oldid=44682040"					
分類：軟體測試隱藏分類：需要從英語維基百科翻譯的條目自2013年11月缺少註腳的條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


العربيةБеларуская (тарашкевіца)‎БългарскиCatalàČeštinaDeutschEnglishEspañolEestiفارسیSuomiFrançaisעבריתहिन्दीMagyarBahasa IndonesiaItaliano日本語ქართულიҚазақшаಕನ್ನಡ한국어МакедонскиBahasa MelayuNederlandsNorsk bokmålPolskiPortuguêsRomânăРусскийSimple EnglishSlovenčinaShqipSvenskaதமிழ்ไทยTürkçeУкраїнськаTiếng Việt 
編輯連結 





 本頁面最後修訂於2017年6月8日 (週四) 17:41。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 









中華民國品質學會







站內查詢
				進階查詢

網站導覽聯絡方式English




　關於我們會員申請品質課程介紹認證考試
年度考試日期
各種考試介紹
考試規則辦法
近期考試線上報名 
重認證作業
放榜名單
考試查詢系統
考試問題Q&A品質月刊及書籍品質學報品質獎國際交流品質芳鄰工作委員會品質知識社群廣告看板意見 Q＆A企業徵才服務


現在位置首頁認證考試各種考試介紹

各種考試介紹
回上一頁
			友善列印
		
軟體測試工程師
軟體測試工程師(Certified Software Test Engineer，CSTE)：

資格認證考試報考資格： 
 具備下表中依照“學歷”之畢業後實際從事相關工作年資者（畢業前之年資均不予計算）


學歷
第一類
第二類


博士
0 年
1 年


碩士
1 年
2 年


學士
2 年
3 年


專科
3 年
4 年


高中職
4 年
5 年


第一類係指符合下列條件其中之一，且持有證書（明）者。
    
已修習軟體品保課程三學分以上
已修習軟體工程課程六學分以上
曾在國內外公私機構修習軟體品保相關課程五十小時以上博、碩士論文方向與軟體品保相關者

    第二類係指未達第一類標準者。    
  鑑定考試:    上述之學歷及工作年資不符合者參加本項鑑定考試，並於成績評定合格時，並於甲、乙兩個單元成績均合格時發給鑑定合格證明(而非資格認證証書)，俟其條件符合時，再經申請核給資格認證證書，並酌收證書審查費共陸佰元。 
報名手續：
    
 請至學會網站線上報名並將其有關證明文件（影本）及報名費，郵寄本學會考試委員會。 
經考試委員會審查通過後，於考試前1週郵寄準考證並e-mail告知考場。
如學經歷證明文件不合或証件不齊時，則視為報考鑑定考試，另有疑義時，考試委員會得通知報考人。


報名費： 
    分甲、乙兩個單元，每一單元報名費新台幣會員1400元（含團體會員及個人會員）、非會員1600元（應考者由本學會提供午餐飯盒），凡已繳報名費因故不能前來應試者，應在考試前15天以書面提出申請退費，按規定退費一半，逾期概不退還。
  
考試科目： 
    分為甲、乙兩個單元，其各單元之子題如下： 
甲單元： 
(1)軟體測試原理(Principles of Software Testing) 30 % 

1.測試策略(Testing Strategy)
2.測試週期(Testing Life Cycle) 
3.測試階層(Levels of Testing) 
4.測試品質(Testing Quality) 


(2)測試設計方法(Testing Design Approach) 30 % 

1. 程式碼為基礎之測試案例設計(Code-based test case design techniques) 
2. 需求為基礎之測試案例設計(Requirement-based test case design techniques) 
3. 測試設計規格書之編纂(Testing design specification)


(3)測試管理流程(Testing Management Process) 40 % 

1. 規劃前活動(Pre-Planning Activities): 

1.1 訂定成功/驗收準則(Success Criteria/Acceptance Criteria) 
1.2 確定測試目的(Test Objectives) 
1.3 訂定允入/允出準則(Entrance Criteria/Exit Criteria)


2. 測試規劃(Test Planning)  

2.1 訂定測試計畫書(Test Plan) 
2.2 建立測試與需求對照追溯清單(Requirements/Traceability)
2.3 預估測試活動所須資源之大小(Estimating) 
2.4 安排測試時程(Scheduling) 
2.5 安排測試人力(Staffing) 
2.6 確定測試方法(Approach) 


3. 規劃後活動(Post-Planning Activities) 

3.1調適變更管理流程(Change Management)
3.2檢討變更控制型態管理之作業方法(Versioning) 


4. 測試監控(Test Monitoring)
5. 風險管理(Risk Management)




乙單元： 
(1) 測試執行與錯誤追蹤(Testing Executions and Defect Tracking) 50 % 

1. 測試案例(Test scripting) 
2. 測試報告(Reporting) 
3. 錯誤追蹤(Defect tracking) 


(2)測試自動化(Testing Automation) 20 % 

1. 測試工具評估選擇(Tool evaluation and selection) 
2. 自動化標準與準則(Automation standards and guidelines) 
3. 測試工具整合(Integration with Testing Process) 


(3)特殊主題測試(Special Testing Topics) 30 % 

1. 主從式應用系統測試(Testing client/server applications) 
2. 網際網路與網頁系統測試(Testing Internet and web applications) 
3. 物件導向系統測試(Testing object-oriented applications)
4. 嵌入式系統測試(Testing embedded systems) 
5. 系統性能測試(Performance testing) 
6. 系統安全測試(Security testing)






考試要則：
考試時間為5小時，每單元各2.5小時，分上下午兩次考試，上午09:30~12:00下午1:00~3:30 (依實際收到準考證為準)
各單元為80題選擇題(單選題) 
考試時可攜帶參考書籍（不含打印模擬試題）及計算工具，但不得與他人合用或互相傳閱交談。
使用2B鉛筆作答

成績評定：
考試成績各別書面通知。
每一單元以100分為滿分，成績在60分（含）以上者為合格。
合格單元之成績有效期限為3年。
其他依試場規則辦理

重考：
      凡凡未達合格標準分數之單元，得於保留年限內重考，重考時仍須按規定報名並繳納報名費。 
合格證書：
甲乙兩個單元成績全部合格者，由本學會頒發合格證書，証書有效期限為5年，到期者則依本學會公佈之考試重認證辦法辦理，以維持認證資格之有效。
祇有一個單元合格者，不發合格證書。
上項證書不另收費用

報考人有任何疑問時請撥(02)2363-1344洽詢，或親赴臺北市羅斯福路二段七十五號十樓本學會面洽。
註：請詳閱考試規章之各項規定，自認合格於規定者，請從速報名。





		 Copyright © 2005,　CSQ 中華民國品質學會
	






資策會數位教育研究所 - 軟體測試個案設計與分析實戰班






























              資訊工業策進會˙數位教育研究所




資策會臺北-軟體開發/ 專案管理/ 人資財務課程

							【主題館】軟體架構與開發主題館

							【主題館】專案管理主題館

							【主題館】人資/財務/經營管理課程主題館































                        《
                        106/10/28開課，10/20前報名即享早鳥優惠》
~歡迎企業洽談包班需求~


「軟體測試管理實務班 」 同步招生中 !!






→ 「TDD自動化測試實戰班」同步招生中







    ◆ 課程源起








  
													 資訊服務產業要能長久經營，除了有良好的開發能力之外，還要有良好的軟體品質，及較低的軟體維護成本以維持公司的競爭優勢，其中高品質的軟體以及較低的軟體維護成本，這兩者的共同要素即是軟體測試。對企業來說，軟體測試往往是軟體開發過程中，最繁瑣也是最重要的工作之一。其中測試個案開立技巧，更是決定的測試結果的成敗。因為好的測試個案能夠找出更多錯誤，並且能以最小集合，來涵蓋最多範圍，以達到最佳投資報酬率。可惜學校大多並沒有教授軟體測試，即時有提到軟體測試時，也大多是專有名詞的介紹。有些老師雖然有開立專門課程，但也大多著重於理論介紹，或者偏重於研究方法或者數理計算，但是對於業界實際現狀，卻不知道要如何應用和調整所學到的理論，本課程特邀業者講師，企圖以實作的方式，讓學員實際操作所教授的方法，加深以及確保所學的東西能應用到工作上面。 
													

    本課程並不在追求學習眾多的測試個案設計方法，而是希望學員能夠真正知道如何操作。此外結合一些實戰時常遇到狀況，像是非功能性測試要如何開立測試個案，甚麼時候測試可以停止，回歸測試時要如何選擇測試個案，在敏捷專案時要如何開立測試個案等等，讓學員知道要如何應用這些個案開立技巧於工作上。 




 ◆ 課程目標









學習各種測試個案設計方法，及瞭解IEEE 
								829測試文件標準，並透過實作演練以更深入瞭解其觀念與技術，藉由討論各種案例，來增加實戰能力。



 ◆ 
                          適合對象









								從事資訊軟體開發的工程師、軟體測試工作或品質保證工作的人員、系統分析師，具軟體開發觀念、或想從事軟體測試工作者及有興趣者等。


 ◆ 課程日期








106年10/28-10/29(  
													週六日 白天9:30 ~ 16:30上課 )，共2天、計12小時。

													*主辦單位得視報名情況而保留實際開課日期的變更權利 。 
													


 ◆ 上課地點








								資策會數位教育研究所，臺北市信義路三段153號10樓。 
								上課地點位於捷運大安站1號出口左轉約20公尺（農會大樓樓上）


* 上課地點與教室之確認，以上課通知函為主。


 ◆ 課程內容









   





課程單元


課程內容大綱




軟體測試簡介


- 軟體測試的基本概念 
										- 測試與軟體開發周期的關係 
  >單元測試 
  >整合測試 
  >系統測試 
  >驗收測試




測試個案設計


									- 測試個案介紹 
									- 可測試性 
									- 靜態測試 
  >瀏覽 (Walkthrough) 
  >檢驗 (Inspection) 
  >搭檔編程 
  >靜態分析



黑箱測試

- Equivalence 
										Class Testing 
										- Boundary Values Testing 
										- Use Case Testing 
										- Pairwise Testing 
										- State Transition Diagram 
										- Decision Table



白箱測試

- 白箱測試簡介 
										- 控制流程涵蓋度 
										- 資料流程涵蓋度 
										- 測試涵蓋的實務 
										- 單元測試最佳實務 
										- 白箱測試和黑箱測試如何結合使用 




									測試文件


										- 測試計畫書 
										- 測試設計規格書 
										- 測試個案規格書 
										- 測試程序



敏捷測試

- 敏捷測試概念 
										- TDD 
										- 驗收測試驅動開發 
										- 探索式測試 
										- 固定會期的測試管理方法 




									效能測試

- 什麼是效能測試?
										
										- 效能測試流程 
										- 效能測試計劃書
										- 效能測試報告 
										- 何時測試可以停止






*                                  課程執行單位保留調整課程內容、日程與講師之權利



 ◆ 報名方式










                    	本課程採線上報名，請按右方【我要報名】進入報名系統。
								
								課程諮詢電話：(02)6631-6534 黃小姐  聯絡E-mail：wenhsin@iii.org.tw



                    			報名確認電話：(02)6631-6535 孫小姐  
                      			聯絡E-mail：chelseasun@iii.org.tw
 







 ◆ 課程費用與繳費








1.本課程
								原費用NT$9,000元(含稅)，費用含課程、講義及
								午餐餐盒。
2.凡於10月20日前完成報名及並填寫繳費資料者，可享優惠價NT$7,200元(含稅)。 
								3.招生及最低人數： 本課程預計招收人數為30人，至少需達12人才予開課。 

4.團報優惠：兩人團報可打95折、四人團報可打9折優惠。

●團報優惠與早鳥優惠可一併使用。

●課程報名系統每個帳號僅提供一位學員報名，若為團報學員，每位皆必須完成線上報名，並於其他金額說明欄位註記「與XXX一起團報」，以利事後核對名單。


5.課程若未如期開班，費用將全額退還。
6.請以信用卡或即期支票支付—
●以信用卡支付者：請務必將正確信用卡資料填寫於繳費方式資料表。
●以即期支票支付者：抬頭為「財團法人資訊工業策進會」，劃線並禁止背書轉讓，以掛號寄至臺北市106信義路三段153號9樓之1
                                                    邱小姐
                              收。



 ◆ 報名確認與取消









1.已完成報名與繳費之學員，課程主辦單位將於開課三天前以E-mail方式寄發上課通知函；若課程因故取消或延期，亦將以E-mail方式通知，如未收到任何通知，敬請來電確認。
2.已完成繳費之學員如欲取消報名，請於實際上課日前以書面通知業務承辦人，主辦單位將退還90% 
								課程費用。
3.學員於培訓期間如因個人因素無法繼續參與課程，將依課程退費規定辦理之︰上課未逾總時數三分之一，欲辦理退費，退還所有上課費用之二分之一，上課逾總時數三分之一，則不退費。
4.本單位保留是否接受報名之權利
								5.如遇不可抗拒之因素，課程主辦單位保留修訂課程日期及取消課程的權利。


 ◆ 結業證書








                                   
								依資訊工業策進會ISO品質系統之「教育訓練服務程序」規定，本課程為短期班，參訓學員缺課未超過總時數五分之一者，結業時由本會核發結業證書。


 ◆   餐點服務


    
                               本課程上課期間，每天都會提供午餐，學員不需自行準備或額外付費。





 ◆ 
學習護照








    
                                資策會為人事行政局首批認證審定之民間學習機構，參加本課程之中小企業員工，亦可獲得「中小企業終身學習護照」認可之時數；此外，公務人員參加資策會課程，學習時數可登錄「公務人員終身學習護照」。







 



資訊工業策進會 數位教育研究所  版權所有，禁止侵害，違者必究。

Copyright (c) 2017 III Digital Education Institute. All Rights
      Reserved








HiNet連線速率測試 - HiNet測速網站
















 






 



















 


				 







 








 












								 












 




 





 







						 























 












 




         
      電腦燒機測試軟體「BurnInTest」測試硬體的穩定和極限 - 硬是要學                  2016年防毒軟體排名 ｜好玩好用App推薦 ｜16個必學WORD技巧   小兒科醫師推薦空氣清淨機 現在再送1年濾網吃到飽，動作快！ Quick Charge 2.0 快速充電器 2個小時0→100%極速充電 有志難伸? 合作夥伴募集中 硬是要學歡迎您一起加入分享     首頁 » 系統工具» 電腦燒機測試軟體「BurnInTest」測試硬體的穩定和極限  Werboy				發表於 2011/11/12  電腦燒機測試軟體「BurnInTest」測試硬體的穩定和極限 文/Werboy   相關關鍵字：BurnInTest 燒機測試軟體   燒機測試顧名思義就是讓電腦硬體發揮最大效能來測試穩定度，電腦在故障送修後，有些廠商也會幫你電腦做長時間的燒機測試，若能順利的通過燒機測試表示電腦可以長時間在高負載的環境下工作，一般使用當然就更沒問題。    「BurnInTest」這款全方位的燒機測試軟體可以測試CPU、顯示卡、硬碟、光碟機、記憶體、網路連線、印表機、影像、音效…等等的能力，透過 Quick Tests 功能可以直接將指定項目以最高負載測試，在最短時間內測試系統穩定。軟體名稱：BurnInTest 軟體版本：v 7.0 軟體語系：英語 官方網站：http://www.passmark.com/products/bit.htm 下載頁面：點這裡（含32位元及64位元版）BurnInTest 使用簡介以下以 Quick Tests 快速測試顯示卡為例在 BurnInTest 工具列選擇「Quick Tests」→「3D Graphic」接著軟體會跳出警告訊息，主要是說建議將重要檔案先行備份，以免突發狀況影響。燒機測試本身會有一定的風險，測試時建議在旁觀察，如果為超頻的CPU燒到8、90度表示散熱一定有問題，顯示卡也一樣，測試前可以上網看看專家們對於硬體溫度的見解，或是請朋友指點。測試時會看到一個3D畫面及「STOP」按鈕，若硬體溫度太高或是停止測試可以隨時按下STOP按鈕。切換到〔Temperature〕分頁可以檢視目前的硬體溫度。其他的測試項目也是類似的操作方式。   廣告對抗梅雨季黴菌滋生！小兒科醫師推薦使用空氣清淨機     廣告價格更便宜，耐用更加倍的耐折 MicroUSB、Lightning 傳輸線都在這！      系統工具 最多人瀏覽 »【權威評測】拒絕假評比，2016年防毒軟體排名總整理 (免費防毒下載)不怕踩地雷！一鍵將 Windows 10 還原至升級前版本使用WinToUSB將Windows 10裝入USB裝置變成行動系統微軟提供免費 Windows 7/8/10作業系統虛擬機器映像檔下載批次移除所有不需要的軟體   關於 Werboy3C科技部落客，硬是要學共同創辦人，台灣部落客社群（TBC）共同發起人。熱愛發掘、體驗及分享各類科技產品。Email：werboy@soft4fun.net更多Werboy的文章...Facebook 網友留言站內留言  專題報導我們的粉絲團硬是要學敗3C 買物市集  想在此投放廣告？報導彙整 (依日期) 報導彙整 (依日期) 選擇月份 2017 年 七月  (30) 2017 年 六月  (89) 2017 年 五月  (86) 2017 年 四月  (74) 2017 年 三月  (77) 2017 年 二月  (73) 2017 年 一月  (79) 2016 年 十二月  (83) 2016 年 十一月  (79) 2016 年 十月  (69) 2016 年 九月  (58) 2016 年 八月  (84) 2016 年 七月  (97) 2016 年 六月  (64) 2016 年 五月  (39) 2016 年 四月  (44) 2016 年 三月  (69) 2016 年 二月  (44) 2016 年 一月  (53) 2015 年 十二月  (89) 2015 年 十一月  (69) 2015 年 十月  (60) 2015 年 九月  (61) 2015 年 八月  (52) 2015 年 七月  (51) 2015 年 六月  (36) 2015 年 五月  (20) 2015 年 四月  (24) 2015 年 三月  (36) 2015 年 二月  (35) 2015 年 一月  (31) 2014 年 十二月  (35) 2014 年 十一月  (43) 2014 年 十月  (59) 2014 年 九月  (57) 2014 年 八月  (80) 2014 年 七月  (74) 2014 年 六月  (88) 2014 年 五月  (59) 2014 年 四月  (38) 2014 年 三月  (31) 2014 年 二月  (17) 2014 年 一月  (24) 2013 年 十二月  (37) 2013 年 十一月  (30) 2013 年 十月  (38) 2013 年 九月  (33) 2013 年 八月  (25) 2013 年 七月  (49) 2013 年 六月  (28) 2013 年 五月  (27) 2013 年 四月  (27) 2013 年 三月  (28) 2013 年 二月  (19) 2013 年 一月  (21) 2012 年 十二月  (23) 2012 年 十一月  (32) 2012 年 十月  (27) 2012 年 九月  (41) 2012 年 八月  (45) 2012 年 七月  (43) 2012 年 六月  (39) 2012 年 五月  (62) 2012 年 四月  (47) 2012 年 三月  (51) 2012 年 二月  (42) 2012 年 一月  (55) 2011 年 十二月  (70) 2011 年 十一月  (72) 2011 年 十月  (81) 2011 年 九月  (64) 2011 年 八月  (83) 2011 年 七月  (42) 2011 年 六月  (22) 2011 年 五月  (7) 2011 年 四月  (5) 2011 年 三月  (7) 2011 年 二月  (7) 2011 年 一月  (5) 2010 年 十二月  (6) 2010 年 十一月  (8) 2010 年 十月  (10) 2010 年 九月  (9) 2010 年 八月  (7) 2010 年 七月  (21) 2010 年 六月  (29) 2010 年 五月  (20) 2010 年 四月  (18) 2010 年 三月  (11) 2010 年 二月  (16) 2010 年 一月  (5) 2009 年 十二月  (13) 2009 年 十一月  (21) 2009 年 十月  (27) 2009 年 九月  (4) 2009 年 八月  (7) 2009 年 七月  (16) 2009 年 六月  (18) 2009 年 五月  (15) 2009 年 四月  (14) 2009 年 三月  (5) 2009 年 二月  (4) 2009 年 一月  (16) 2008 年 十二月  (12) 2008 年 十一月  (11) 2008 年 十月  (15) 2008 年 九月  (11) 2008 年 八月  (2) 2008 年 七月  (4) 2008 年 六月  (7) 2008 年 五月  (9) 2008 年 四月  (6) 2008 年 三月  (4) 2008 年 二月  (7) 2008 年 一月  (16) 2007 年 十二月  (6) 2007 年 十一月  (11) 2007 年 十月  (22) 2007 年 九月  (18) 2007 年 八月  (20) 2007 年 七月  (22) 2007 年 六月  (22) 2007 年 五月  (25) 2007 年 四月  (30) 2007 年 三月  (23) 2007 年 二月  (4) 2007 年 一月  (27) 2006 年 十二月  (31)今天最熱門 韓版天堂M 完整中文化界面翻譯對照說明 Apple 針對 iPhone/iPad 釋出 iOS 10.3.3，可能是 32bit 系統最後一次更新 「Day Plus 空氣濾淨創風機」電扇+空氣清淨機合體 製造乾淨空氣、節省居家空間 寫論文、做報告必備的16個 WORD 技巧 microSD 記憶卡強勢回歸！如何挑記憶卡，就看這篇選購指南最新文章 臉書上有批手機特價好便宜？開箱仿冒 OPPO R11 給你看！ Apple 針對 iPhone/iPad 釋出 iOS 10.3.3，可能是 32bit 系統最後一次更新 輕薄隨身高階數位相機 Canon PowerShot G7X Mark II 評測，參加神腦線上年中慶再送更多好禮！ 「Day Plus 空氣濾淨創風機」電扇+空氣清淨機合體 製造乾淨空氣、節省居家空間 網路與媒體｜業配沒有不好，讓業配變得不好，是因為你誤解了業配 iOS 檔案救援軟體 iMyFone D-Back，輕鬆找回遺失誤刪的照片/簡訊/WhatsApp/Line/Wechat訊息 新加坡共享單車服務oBike不僅在台影響道路使用 英國倫敦也出現相同問題 Samsung Pay 會員卡功能開放！家樂福、寶雅、燦坤、康是美在列 iPhone 7s 先 Hold 住全場？ iPhone 8可能延至年底少量供貨 觀點／oBike 占用公用停車格合理？生存在法律與公益灰色地帶的公眾服務應該如何取捨？    想在此投放廣告？熱門 3C 推薦 「Day Plus 空氣濾淨創風機」電扇+空氣清淨機合體 製造乾淨空氣、節省居家空間 越騎越賺錢的自行車！米騎生活體驗門市+騎記電助力摺疊自行車國際版試乘分享 Samsung Galaxy J7登場！雙卡雙待、超大光圈、廣角自拍，絕對超值！ 輕薄隨身高階數位相機 Canon PowerShot G7X Mark II 評測，參加神腦線上年中慶再送更多好禮！ 拍照真的棒！OPPO R11 前後 2,000 畫素相機讓你輕鬆拍出單眼相機般效果的照片App推薦 手機防護防毒軟體推薦誰？權威評測告訴你 GainFollow 快速增加 Instagram 粉絲神器 Funliday：最好用的行程規劃APP，景點安排、路線規劃一次搞定！ Evernote 完美整合 Google 行事曆！就用 Sunrise 日曆 警政署「110 視訊報案」App，GPS自動定位，有聲有影報案清晰、方便又安全手機/平板推薦 拍照真的棒！OPPO R11 前後 2,000 畫素相機讓你輕鬆拍出單眼相機般效果的照片 ZenFone 3 Zoom 評測開箱：目前為止最值得購入的照相手機，超長續航力使用 24 小時也不用擔心！ 就是今天！iPhone 7/iPhone 7 Plus 消光黑 完整開箱介紹 Samsung Galaxy Note 3 勸敗開箱評測+實用週邊推薦 ZenFone 2 規格比較攻略，教你如何挑選適合型號生活/家電推薦 越騎越賺錢的自行車！米騎生活體驗門市+騎記電助力摺疊自行車國際版試乘分享 開箱：荷蘭原裝 PHILIPS 三刀頭乾濕兩用電鬍刀(S5600) 「Day Plus 空氣濾淨創風機」電扇+空氣清淨機合體 製造乾淨空氣、節省居家空間 [開箱] 臺南電腦椅/辦公椅，高CP值、俗擱大碗！（臺南工廠） Gogoro在家充電！GoCharger 充飽一組電池需要多少電費？實測吧！友站連結CircleIT4FUN硬是要縮 短網址藍色小舖最新留言Word 2010 排版教學 - 5ihealth 在 寫論文、做報告必備的16個 WORD 技巧Werboy 在 小米「米家掃地機器人」開箱實測，智慧繪製清掃地圖再大面積都掃得乾淨路過的人 在 確認！Chrome 將內建廣告過濾功能，主動濾除惱人的網頁廣告寶島國民 在 確認！Chrome 將內建廣告過濾功能，主動濾除惱人的網頁廣告KEN CHAN 在 小米「米家掃地機器人」開箱實測，智慧繪製清掃地圖再大面積都掃得乾淨李新宇 在 別哭！WannaCry 解密工具程式來了！ (Win 7/XP/2003/Vista可解密)Chen Chad 在 別哭！WannaCry 解密工具程式來了！ (Win 7/XP/2003/Vista可解密)好手 在 別哭！WannaCry 解密工具程式來了！ (Win 7/XP/2003/Vista可解密)Yi Hsu 在 別哭！WannaCry 解密工具程式來了！ (Win 7/XP/2003/Vista可解密)Chen Chad 在 別哭！WannaCry 解密工具程式來了！ (Win 7/XP/2003/Vista可解密)    [X]  聯絡我們任何合作或疑問洽詢歡迎寫信至聯絡信箱，我們將儘速與您聯繫。聯絡信箱：contact [at] soft4fun.net內容授權未經允許禁止轉錄(載)禁止以人工或機器 (包含但不限) 方式截取本站內容如有特殊需求請來信與我們連絡訂閱電子報輸入 E-mail 訂閱最新內容  其他訂閱方式： Facebook｜ Google+｜ Plurk  標籤雲Android android app Android軟體 Apple ASUS chrome Dropbox Facebook Firefox Gogoro Google Google plus Google地圖 HTC IE iOS iPad ipad-iphone ipad app iPhone iphone 6 iPhone 6S iPhone app Line Microsoft MSN Office Pokemon go samsung Sony VR windows 10 word Wordpress Youtube Zenfone 三星 地球圖輯隊 小米 微軟 智慧型手機 穿戴裝置 華碩 虛擬實境 資訊安全取得更多 3C 新玩意和優惠資訊，立刻加入粉絲團！ 關閉  知道了，別吵我！               合作洽談 | 關於我們 | 合作夥伴 | RSS訂閱 | Facebook粉絲團 |  新聞稿發布  ©硬是要學版權所有   


軟體王2017-軟體資訊網站!


















































軟體王-資訊網站




*2017/7/21 星期五

下載次數 : 













軟體名稱
檔案名稱
軟體簡介
軟體公司


所有分類
系統工具光碟相關工具程式多媒體影片相關音樂相關圖片工具安全與隱私網路相關網頁設計架站工具郵件相關瀏覽相關商用軟體桌面螢幕電腦遊戲硬體驅動程式教育學習研發工具


其他選項

Google搜尋












































焦點關註

限時免費

IObit 優化魔術師 Advanced SystemCare 10.4.0.760系統調校

全面性系統自動優化與維護功能的軟體，包含反間諜程式、個人隱私管理保護、提升電腦效能和系統垃圾清理。

※ 語言:多國語言※ 共享軟體2017/7/20 上午 04:51:31Advanced SystemCare 提供全面性的自動系統優化與維護功能，包含反間諜程式、個人隱私管理及保護、電腦效能提升和系統垃圾清理工具。強大且獲獎無數的自動系統優化功能能夠：精確地防止電腦運作錯誤、清理電腦系統、優化瀏覽網頁、下載資料的速度、保障使用者的個人隱私、有效提高電腦執行效能。




限時免費

WonderFox HD Video Converter Factory Pro 13.2影片轉檔

功能強大的影音轉檔軟體，可用來下載 YouTube、Facebook 的影片。

※ 語言:英文※ 共享軟體2017/7/20 上午 04:38:15WonderFox HD Video Converter Factory Pro 是一款功能強大的影音轉檔軟體。支援許多常見的影音格式，除了支援一般的影片，還支援高畫質的影片，甚至是 4K 影片也沒有問題。除此之外，它還能用來下載 YouTube 或者 Facebook……等網站的影片。




Glary Utilities Pro 5.80.0.101系統調校

一款全功能系統管理的工具軟體，實用功能包含了磁碟清理、登錄檔修復、重組登錄檔、軟體反安裝...等等功能。

※ 語言:多國語言※ 共享軟體2017/7/18 上午 12:39:14Glary Utilities 是一個全功能的系統調校、加速、清理軟體。它擁有許多的實用的工具與功能，例如：磁碟清理、登錄檔修復、右鍵選單管理、重組登錄檔、檔案加密、檔案分割、軟體反安裝……等。




免費Glary Utilities 5.80.0.101 免安裝版系統調校

一款全功能系統管理的工具軟體，實用功能包含了磁碟清理、登錄檔修復、重組登錄檔、軟體反安裝…等等功能。

※ 語言:多國語言※ 免費軟體2017/7/18 上午 12:38:16Glary Utilities 是一個全功能的系統調校、加速、清理軟體。它擁有許多的實用的工具與功能，例如：磁碟清理、登錄檔修復、右鍵選單管理、重組登錄檔、檔案加密、檔案分割、軟體反安裝……等。




免費Glary Utilities 5.80.0.101 安裝版系統調校

一款全功能系統管理的工具軟體，實用功能包含了磁碟清理、登錄檔修復、重組登錄檔、軟體反安裝...等等功能。

※ 語言:多國語言※ 免費軟體2017/7/18 上午 12:36:56Glary Utilities 是一個全功能的系統調校、加速、清理軟體。它擁有許多的實用的工具與功能，例如：磁碟清理、登錄檔修復、右鍵選單管理、重組登錄檔、檔案加密、檔案分割、軟體反安裝……等。




免費Freemake Video Downloader 3.8.0.40影片工具

可以從 YouTXXX, Vevo, Facebook, MTV, TubePlus, Vimeo 和 50 個以上的網站下載視訊影片的軟體。

※ 語言:多國語言※ 免費軟體2017/7/18 上午 12:32:57使用Free Video Downloader 從 YouTXXX, Vevo, Facebook, MTV, TubePlus, Vimeo 和 50 個以上網站下載視訊、擷取低失真音訊、轉換線上視訊為 AVI, MKV, MP3, iPod, iPhone, PSP, Android!




免費Freemake Audio Converter 1.1.8音樂轉檔

免費的音訊轉檔器及可合併多個音訊檔案功能的檔案。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 11:53:04將音訊轉換至MP3, WMA, WAV, FLAC, AAC, M4A, OGG和轉換至MP3撥放器, iPod, iPhone, iPad, PSP, 等可以支援的格式。




免費Freemake YouTube to MP3 Boom 1.0.5.14音樂轉檔

可以將YouTxxx上的音樂檔案轉換至 MP3, MP4, iPhone, iPad, Android, PSP, 手機的格式。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 11:48:19免費將YouTxxx 轉換至 MP3, MP4, iPhone, iPad, Android, PSP, 手機. 比任何線上服務更快更安全! 無需註冊, 無限制. 絕對精確. 受1億用戶信任.




免費Linkman Lite 8.98書籤管理

※ 語言:英文※ 免費軟體2017/7/17 下午 11:41:05這是一個適用於IE及Netscape瀏覽器的書籤管理工具軟體，他十分好用，可排序，轉換，或是轉成 HTML 格式等。其內建了一個包括 2500 個網址的資料庫。計支援有以下相關瀏覽器"Internet Explorer 7.x-9.x, Netscape 3.x-7.x, Mozilla 1.x, Firebird 0.x, Opera 4.x-7.x, Avant Browser, Neoplanet, Netcaptor, MyIE2, SlimBrowser




Linkman Pro 8.99書籤管理

※ 語言:英文※ 共享軟體2017/7/17 下午 11:39:44這是一個適用於IE及Netscape瀏覽器的書籤管理工具軟體，他十分好用，可排序，轉換，或是轉成 HTML 格式等。其內建了一個包括 2500 個網址的資料庫。計支援有以下相關瀏覽器"Internet Explorer 7.x-9.x, Netscape 3.x-7.x, Mozilla 1.x, Firebird 0.x, Opera 4.x-7.x, Avant Browser, Neoplanet, Netcaptor, MyIE2, SlimBrowser




StartEd 5.60 Lite啟動管理

※ 語言:多國語言※ 共享軟體2017/7/17 下午 11:38:30有些軟體在開機時會自動啟動，但我們卻不一定需要它們自動啟動，因為這會造成開機的緩慢。而 StartEd 則是一個非常實用的啟動管理工具。讓我們可以將這些不必要的啟動項目從自動啟動清單裡移除，或者停用，甚至是直接移除。StartEd 還可以偵測木馬，也允許我們備份還原啟動設定。




StartEd 5.60 Pro啟動管理

※ 語言:多國語言※ 共享軟體2017/7/17 下午 11:37:27有些軟體在開機時會自動啟動，但我們卻不一定需要它們自動啟動，因為這會造成開機的緩慢。而 StartEd 則是一個非常實用的啟動管理工具。讓我們可以將這些不必要的啟動項目從自動啟動清單裡移除，或者停用，甚至是直接移除。StartEd 還可以偵測木馬，也允許我們備份還原啟動設定。




Cacheman 10.10 Build 13記憶體管理

可以幫我們自動調節記憶體使用量、應用程式執行優先權，讓我們使用軟體時可以更快。

※ 語言:多國語言※ 共享軟體2017/7/17 下午 11:35:33Outertech 的系統工具 Cacheman對 Windows 的系統加速，提供了最好的方法。 Cacheman優化幾個快捷，藉由動態改變執行的優先順序，來管理電腦記憶體、優化註冊表設定和加快個人電腦。自動的優化能力，讓Cacheman適合初學者和中級用戶，但它的強大和多功能的特性也適合電腦專家。Cacheman提供了單鍵自動化優化功能，它可以檢查您的電腦和用於最佳設定的自動化和系統的調整，來加快PC的反應速度和穩定性。藉由選擇單一設定的方式，您的電腦可以對特定需求加速。個別自動優化裝置包括遊戲電腦、筆記本電腦、上網機、伺服器、最大的穩定性、 ...




PowerArchiver 2017 RC2 17.00 32-bit/64-bit 可攜式版解/壓縮工具

支援 ZIP、RAR 以及其他數種壓縮檔格式的解 / 壓縮軟體。

※ 語言:多國語言※ 共享軟體2017/7/17 下午 11:32:11PowerArciver 是一款擁有優越的 ZIP 格式支援能力的解壓縮軟體，它可以 100% 安全地保護我們的重要資料，並且更支援了目前最新的 7-ZIP 壓縮檔格式，更支援了其他數種常見的壓縮檔式，例如：ZIP、RAR、LZH、CAB、ACE、ARJ……等。更可完整的與 Windows 檔案總管做結合，讓我們解壓縮檔案，只要使用滑鼠右鍵的功能選單，就能完成一切的動作。




PowerArchiver 2017 RC2 17.00 32-bit/64-bit解/壓縮工具

支援 ZIP、RAR 以及其他數種壓縮檔格式的解 / 壓縮軟體。

※ 語言:多國語言※ 共享軟體2017/7/17 下午 11:29:45PowerArciver 是一款擁有優越的 ZIP 格式支援能力的解壓縮軟體，它可以 100% 安全地保護我們的重要資料，並且更支援了目前最新的 7-ZIP 壓縮檔格式，更支援了其他數種常見的壓縮檔式，例如：ZIP、RAR、LZH、CAB、ACE、ARJ……等。更可完整的與 Windows 檔案總管做結合，讓我們解壓縮檔案，只要使用滑鼠右鍵的功能選單，就能完成一切的動作。




免費Paint.NET 4.0.16影像處理

免費，但是功能介面卻和 Photoshop 相近的影像處理軟體。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 11:26:16根據傳言，這是一套將來微軟要用來取代其原本內建的「小畫家」。不過它跟目前大家熟知的「小畫家」，其兩者間的功能可說是天壤之別。乍看之下，Paint.NET 就如同一套極有專業水準的影像處理軟體，舉凡圖層的處理、濾鏡效果、圖片特效、圖片裁切……等多種功能。也因為如此，更有人說 Paint.NET 就像是 Adobe PhotoShop 的精簡版本。但 Adobe PhotoShop 是商業軟體，而 Paint.NET 則是開放原始碼的免費軟體。




推薦

免費Media Player Classic Home Cinema 1.7.13 (32-bit) 安裝版多媒體播放

支援 64 位元作業系統，完全免費的影音播放軟體。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 11:23:50Media Player Classic Home Cinema 是一款根據 Media Player Classic 為設計基礎的多媒體播放軟體。它修正了 Media Player Classic 許多問題，同時又支援 32 位元或 64 位元之作業系統，並且內建了多國語系。並且仍然保有著精簡、不佔資源…特色。




免費Media Player Classic Home Cinema 1.7.13 (32-bit) 免安裝版多媒體播放

支援 64 位元作業系統，完全免費的影音播放軟體。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 11:22:01Media Player Classic Home Cinema 是一款根據 Media Player Classic 為設計基礎的多媒體播放軟體。它修正了 Media Player Classic 許多問題，同時又支援 32 位元或 64 位元之作業系統，並且內建了多國語系。並且仍然保有著精簡、不佔資源…特色。




免費Media Player Classic Home Cinema 1.7.13 (64-bit) 安裝版多媒體播放

支援 64 位元作業系統，完全免費的影音播放軟體。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 11:20:44Media Player Classic Home Cinema 是一款根據 Media Player Classic 為設計基礎的多媒體播放軟體。它修正了 Media Player Classic 許多問題，同時又支援 32 位元或 64 位元之作業系統，並且內建了多國語系。並且仍然保有著精簡、不佔資源…特色。




免費Media Player Classic Home Cinema 1.7.13 (64-bit) 免安裝版多媒體播放

支援 64 位元作業系統，完全免費的影音播放軟體。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 11:18:41Media Player Classic Home Cinema 是一款根據 Media Player Classic 為設計基礎的多媒體播放軟體。它修正了 Media Player Classic 許多問題，同時又支援 32 位元或 64 位元之作業系統，並且內建了多國語系。並且仍然保有著精簡、不佔資源…特色。




Ignition 2.22.0.69燒錄軟體

※ 語言:多國語言※ 共享軟體2017/7/17 下午 10:50:01CopyToDVD 外掛程式 - Ignition，支援 650/700 MB 光碟、自定大小(超燒)，可以在最佳化後的光碟自動建立資料夾或包含光碟檔案索引的 TXT 文字檔，能夠加入一個群組的檔案(自動播放、編碼程式...)，搭配 CopyToDVD 燒錄光碟。




K-ML 4.11.443群組發信

群組發信、電子報發送軟體，可以用做網路行銷。

※ 語言:多國語言※ 共享軟體2017/7/17 下午 10:46:51個人電子報發報平臺 - K-ML，可以製作個人的電子報訂閱/退訂網頁(PHP+HTM)，讓網友透過您的網頁加入或退出您的電子報發送名單，具備 HTML 電子報的編輯/發送功能、附加檔傳送功能。




免費HDDExpert 1.14.3.30 安裝版磁碟工具

檢查你的硬碟健康狀況，提早預防硬碟老化或壞掉。

※ 語言:英文※ 免費軟體2017/7/17 下午 10:45:42HDDExpert 可以提供傳統硬碟或較新的 SSD 固態硬碟的基本資訊，例如：型號、快取、序號、容量、溫度……等，同時它也可以檢查硬碟的健康狀態，讓我們可以提早留意硬碟是否老壞或者是即將損壞，雖然這些資訊僅供參考使用，不過它們仍然是具參考價值。




免費HDDExpert 1.14.3.30 免安裝版磁碟工具

檢查你的硬碟健康狀況，提早預防硬碟老化或壞掉。

※ 語言:英文※ 免費軟體2017/7/17 下午 10:44:39HDDExpert 可以提供傳統硬碟或較新的 SSD 固態硬碟的基本資訊，例如：型號、快取、序號、容量、溫度……等，同時它也可以檢查硬碟的健康狀態，讓我們可以提早留意硬碟是否老壞或者是即將損壞，雖然這些資訊僅供參考使用，不過它們仍然是具參考價值。




免費KFK 3.19.1.54 免安裝版檔案合併分割工具

分割你的大檔案，有利於分裝至數個儲存裝置上，也有利用網路的傳輸。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 10:42:56可將較大的檔案分割作較小的檔案，然後再將他們組合。當你想要把較大的檔案儲存在軟碟時，這是一個很有用的工具。他也支援拖曳功能。




免費KFK 3.19.1.54 安裝版檔案合併分割工具

分割你的大檔案，有利於分裝至數個儲存裝置上，也有利用網路的傳輸。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 10:42:01可將較大的檔案分割作較小的檔案，然後再將他們組合。當你想要把較大的檔案儲存在軟碟時，這是一個很有用的工具。他也支援拖曳功能。




免費SUMo 5.3.0.363 免安裝版應用工具

幫你檢查電腦上安裝的軟體，是不是有更新的版本。

※ 語言:英文※ 免費軟體2017/7/17 下午 10:40:22SUMo 可以讓我們電腦上安裝的軟體，保持在最新的版本，因為它可以幫我們檢查軟體是不是有更新的版本。它與軟體內建的自動更新功能不太一樣，因為它可以讓我們在尚未執行軟體之前，就先檢查軟體是否有更新的版本。




免費VideoInspector 2.12.1.141 免安裝版多媒體工具

可以幫你檢查影片是否有安裝合適的解碼器，並引導你下載，讓你可以順利播放。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 10:39:08你的多媒體檔案無法正常開啟或播放嗎?，若排除你的檔案已損毀的因素，多半是你的電腦中沒有安裝可撥放該多媒體檔案的正確音訊編碼器 Codec，以致無法正常播放出該影片。VideoInspector 可以幫你找出該多媒體影片檔案的音訊編碼器 Codec 是哪一種，還可以帶你連線到網站上去下載正確的音訊編碼器 Codec ，如此便可以不必擔心影片無法播放了。




免費VideoInspector 2.12.1.141 安裝版多媒體工具

可以幫你檢查影片是否有安裝合適的解碼器，並引導你下載，讓你可以順利播放。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 10:38:15你的多媒體檔案無法正常開啟或播放嗎?，若排除你的檔案已損毀的因素，多半是你的電腦中沒有安裝可撥放該多媒體檔案的正確音訊編碼器 Codec，以致無法正常播放出該影片。VideoInspector 可以幫你找出該多媒體影片檔案的音訊編碼器 Codec 是哪一種，還可以帶你連線到網站上去下載正確的音訊編碼器 Codec ，如此便可以不必擔心影片無法播放了。




PhotoToFilm 3.6.1.95影像轉檔

可以將你的照片轉換成影片。

※ 語言:多國語言※ 共享軟體2017/7/17 下午 10:36:50PhotoToFilm 可以讓我們將手邊的照片，製作成影片，讓我們也能用影片的方式來觀看照片。它會自動幫我們在各照片上加入簡單的動態效果，也會自動加上文字，通常是在各照片上加入照片的檔名，當然我們也可以另外加入音樂檔，讓我們的影片不會是有影無聲。




免費SUMo 5.3.0.363 安裝版應用工具

幫你檢查電腦上安裝的軟體，是不是有更新的版本。

※ 語言:英文※ 免費軟體2017/7/17 下午 10:35:29SUMo 可以讓我們電腦上安裝的軟體，保持在最新的版本，因為它可以幫我們檢查軟體是不是有更新的版本。它與軟體內建的自動更新功能不太一樣，因為它可以讓我們在尚未執行軟體之前，就先檢查軟體是否有更新的版本。




免費KCleaner 3.2.6.89 安裝版磁碟清理

可以自動地幫你刪除、清理電腦上用不到、沒必要的垃圾檔案。

※ 語言:多國語言※ 免費軟體2017/7/17 下午 10:33:45KCleaner 可以自動地幫我們清除電腦上不必要的檔案，例如：清空資源回收桶、清理軟體的安裝快取、清理軟體的快取檔案、記錄檔或者暫存檔案……等。預設情況會以全自動模式執行，也就是說它可以在背景默默地運作，我們完全不需擔心或在意啥時應該執行 KCleaner。


瀏覽更多...







免費軟體


最新更新


軟體教學






























「軟體王-資訊網站」版權所有 Copyright©2016 Jan. (Web V3.0) 
Homepage : http://www.softking.com.tw


				本站所有作業系統的圖示，僅代表該軟體適用的作業系統，其商標權均屬原公司所有，不屬本公司所有。
            

				本站所有軟體下載的檔案，本站均不會加以修改或編譯，其軟體版權均屬原軟體公司及原創作者所有，不屬本公司所有。
            



-Ver.3.0B..-...-.R.--



































微軟的軟體測試方法[轉載] | Huan-Lin 學習筆記 on DotBlogs - 點部落


























Huan-Lin 學習筆記 on DotBlogs
主站及最新文章請至 http://huan-lin.blogspot.com/










2008-04-23
   

微軟的軟體測試方法[轉載]

16304


0

軟體開發


檢舉文章





摘要:微軟的軟體測試方法[轉載]

Jeff WangJeffwang@microsoft.comBizTalk Server微軟有限公司（一）       國內近年來關於軟體測試的問題和討論越來越活躍。但從總體上說交流軟體測試技術的多，而探討軟體測試方法的少。這裡的「技術」指的是具體的戰術問題，比如 說如何使用某種工具來解決某一特定測試問題，或是某一型別軟體有哪些測試手段等等。而這裡的「方法」指的是宏觀的戰略問題，或是叫方法論，這包括從軟體測 試的概念或理念，到企業軟體品質控制體系；從軟體測試的程序，到測試團隊的設定及其職責的界定等等。作為測試人員，熱衷於「技術」討論和交流是一件可喜可 賀的事。從中可以感覺到軟體測試在中國迅速發展的開端和潛力。但是作為企業的管理決策者，是否也應該以同樣的熱情來思考「方法」問題呢？特別是當一個軟體 企業的軟體測試從無到有，或是當企業已有一定的軟體測試的投入，但發現其實效並不顯著，甚至由於測試的引入而帶來了新的管理上的混亂。這個時候方法論的思 考，更有利於發現問題的根源。即便是一個基層的測試人員，當積累了一定的技術經驗後，也應該不時從日常的具體工作中走出來，在一個較高層次上進行回顧總結 和借鑒，並試著提出一些最佳化和改進的措施，這無論對專業上還是對事業上的成長都是非常有意義的。微軟在軟體測試方面有很多值得一提的經驗，在此我想以我 個人的體會和思考，同大家一同進行一些探討。      這裡有一點須要特別說明，儘管微軟的方法已被微軟的實踐多次證明是成功的，非常有效的，但這並不意味著這些方法在中國的軟體企業中有廣泛的可行性。一種方 法是否可行還受到很多其它因素的影響，比如企業型別（微軟是生產平臺軟體和泛用軟體產品的企業），企業管理體制，企業文化等等。所以我的目的只是給大家一 些思路和借鑒。 兩類經典的軟體測試方法      在具體介紹微軟的軟體測試方法之前，我想首先從概念，或理念的層面上來理解究竟甚麼是軟體測試，目的是從中匯出微軟測試方法的理論根源。傳統上認為軟體測試的方法從總體上分為兩類。第一類測試方法是試圖驗證軟體是「工作的」，所謂「工作的」就是指軟體的功能是按照預先的設計執行的；而第二類測試方法則是設法證明軟體是「不工作的」。      提出第一類方法的代表人物是軟體測試領域的先驅Dr. Bill Hetzel（代表論著《The Complete Guide to Software Testing》），他曾於1972年6月在美國的北卡羅來納大學組織了歷史上第一次正式的關於軟體測試的論壇。他首先在1973年給軟體測試一個這樣的 定義：「就是建立一種信心，認為程式能夠按預期的設想執行。Establish confidence that a program does what it is supposed to do. 」後來在1983年他又將定義修訂為：「評價一個程式和系統的內容屬性或能力，並確定它是否達到預期的結果。軟體測試就是以此為目的的任何行為。Any activities aimed at evaluating an attribute or capability of a program or system. 」在他的定義中的「設想」和「預期的結果」其實就是我們現在所說的使用者需求或功能設計。他還把軟體的品質定義為「符合要求」。      第一類測試可以簡單抽像地描述為這樣的程序：在設計規定的環境下執行軟體的功能，將其結果與使用者需求或設計結果相比較，如果相符則測試通過，如果不相符 則視為Bug。這一程序的終極目標是將軟體的所有功能在所有設計規定的環境完全執行，並通過。在軟體行業中一般把第一類方法奉為主流和行業標準。1990 年的IEEE/ANSI標準將軟體測試進行了這樣的定義：「就是在既定的狀況條件下，執行一個系統或組建，觀察記錄結果，並對其某些方面進行評價的程序。 The process of operating a system or component under specified conditions, observing or recording the results, and making an evaluation of some aspect of the system or component (IEEE/ANSI, 1990 [Std 610.12-1990]」這裡所謂「既定的狀況」也可理解為需求或設計。      儘管如此，這一方法還是受到很多業界權威的質疑和挑戰。代表人物是Glenford J. Myers（代表論著《The Art of Software Testing》）。他認為測試不應該著眼於驗證軟體是工作的，相反應該首先認定軟體是有錯誤的，然後去發現盡可能多的錯誤。他還從人的心理學的角度論 證，將 「驗證軟體是工作的」作為測試的目的，非常不利於測試人員發現軟體的錯誤。於是他於1979年提出了他對軟體測試的定義：「就是以發現錯誤為目的而執行程 式的程序。The process of executing a program or system with the intent of finding errors.」 這就是軟體測試的第二類方法，簡單地說就是驗證軟體是「不工作的」，或是說是有錯誤的。他甚至極端地認為，一個成功的測試必須是發現Bug的測試，不然就 沒有價值。這就如同一個病人（假定此人確有病），到醫院做一項醫療檢查，結果各項指標都正常，那說明該項醫療檢查對於診斷該病人的病情是沒有價值的，是失 敗的。我並不完全同意這一看法。第二類軟體測試方法在業界也很流行，受到很多學術界專家的支援。大家熟悉的Ron Patton在《軟體測試》（ 中文版由機械工業出版社出版，具說此書是目前國內測試新手入門的經典教材）一書的第10頁，有一個明確而簡潔的定義：「軟體測試員的目標是找到軟體缺陷， 盡可能早一些，並確保其得以修復。」有些軟體企業以Bug數量來作為考核測試人員業績的一項指標，其實就是接受了這樣的方法。 兩類方法的優劣對比      雖然軟體測試總的目的是為了軟體產品的品質，但很明顯這兩類測試方法在具體目標、或指導思想上截然相反。由此也決定了它們在思路、程序和測重點上有很大的 差別，並各有利弊的。第一類測試方法以需求和設計為本，因此有利於界定測試工作的範疇，更便於部署測試的側重點，加強針對性。這一點對於大型軟體的測試， 尤其是在有限的時間和人力資源情況下顯得格外重要。而第二類測試方法與需求和設計沒有必然的關聯，如果計劃管理不當，測試活動很容易丟失重點，走入歧途。 第一類測試方法可以與軟體的架構和軟體開發的計劃相配合，使軟體測試活動逐層次的展開，從而使軟體的功能和品質有計劃地逐步完善和提高（關於測試的層次問 題，我會在今後的討論中專門介紹）。第二類測試方法不具備這種程序的漸進性。第一類測試方法的缺點是缺乏靈活性，不利於測試人員主觀能動性的發揮，正像 Myers先生所說，不容易找到軟體的錯誤（Bug）。而這方面正是第二類測試方法的長處。 微軟的原則        正是因為認識到兩類測試方法各有利弊，微軟在軟體測試活動中將兩類方法結合起來，以第一類測試方法為基礎和主要線索，階段性地運用第二類測試方法。 微軟的第一類測試       微軟的第一類測試總體上說分為三個步驟進行：審核需求和設計—〉設計測試—〉實施執行測試。前文已述，第一類測試是以需求和設計為本來驗證軟體的正確性。 大家很自然的想到，需求和設計本身也有正確性的問題。依據不正確的需求和設計不可能開發出正確的軟體產品，測試也將是徒勞的。因此驗證需求和設計是微軟進 行第一類測試的第一步。有必要指出的是，這裡所說的需求和設計具體說來它一般包括：（1）由專案經理根據使用者要求（資訊來源於市場部門，使用者支援部門 等等）而編輯的需求字串（Requirement Specification）；（2）由專案經理根據需求字串而編輯的功能設計字串（Functional Design Specification）；（3）由開發人員根據功能字串而編輯的實施設計字串（Implementation Design Specification）。微軟的測試人員要參與所有這些字串的審核。作為測試人員，審核重點是檢查字串對使用者需求定義的完整性、嚴密性和功能設計 的可測性。同時這種審核對於測試人員也是一種熱身活動，使他們盡早地進入技術和業務狀態。第二步，測試人員要根據已審核通過的需求和設計編製測試計劃，設 計測試用例。在前面提到的三種字串中，功能設計字串是主要依據。原因很簡單，這類測試關心的是軟體是否能正確地實作功能，而不是這些功能如何被具體實施 的。從這裡大家可以看出這是典型的「黑盒測試」。確實微軟的測試主要是從使用者角度進行的黑盒測試。這一步的完成就意味著「測試計劃」和「測試用例設計」 兩個字串的完成。「測試計劃」 字串主要闡述測試的範疇、領域、方法、工具、資源和計劃時間表等等。「測試用例設計」字串要列出測試用例、每個用例的設定、執行步驟和預期結果。測試的這 兩個字串也要被專案經理和開發人員審核。這樣經過各種相互的審核，大家對專案形成了基本的共識。第三步的實施執行測試是整個開發程序中最長最複雜的一個階 段。從總體上說就是將上一步設計的測試用例按計劃付諸實施的程序。這包括編輯自動化測試程式、反覆執行自動化測試程式，也包括階段性執行手動測試用例。這 一階段的測試必須在周密的計劃下進行，在前面我已提到，這正是第一類測試的特點和長處。這種計劃性首先秉持在開發和測試的相互協調配合，根據產品的架構和 功能模組的依賴關係，按照專案的總體計劃共同推進。從測試的程序來看，總是先執行或執行簡單用例，然後再複雜用例；先驗證單一的基本功能，再綜合的端到端 的功能；先發現解決錶面的，影響面大的Bug，再深層的，不容易重現的Bug。因此隨著專案開發和測試的處理序，產品的功能不斷完善，品質不斷提高。這裡 有一點要特別指出，有很多測試用例是要反覆執行的，特別是基本的自動化測試每一天，每一個Build上都要執行。儘管這些測試大多數情況下都是通過的，很 少再發現新的Bug，但其價值是顯而易見的，就是為了防止品質回歸。可見Myers的理論在這裡是不適用的。這一階段測試人員還有一項繁瑣但卻很重要的工 作，就是對已有的測試用例的維護。比如通常以下兩種情況下要新增一些測試用例，一是對於當初測試設計不周全的領域，二是對於外部的Bug（比如從Beta 客戶報告來的），沒有被現有測試用例所覆寫。當產品的功能設計出現更改時（在微軟這是常事），所涉及的測試用例當然也要相應地修改。 微軟的第二類測試      微軟的第二類測試是階段性的，常常根據需要而帶有隨機性和突擊性。對於這類測試，在微軟有一個專門的名稱：「Bug Bash（Bug大掃除）」。 Bug Bash通常發生在專案開發各階段（微軟叫里程碑）的末期，比如Beta版發佈前，劃出一個專門的時間段（通常1-3天），在這工作階段會議所有參與專案 的人員，集中完全精力，運用各方面的知識，盡完全智慧來搜尋專案的Bug。這是一個非常有意思的活動，但要組織好這樣的活動並非易事。一般有以下要點： （1）儘管這是一個測試活動，但參與者並不僅限於測試人員。專案經理，開發人員甚至於高層管理人員都應參加，如同全民動員。目的是要集思廣益；（2）要鼓 勵各部門，領域交叉搜索，因為新的思路和角度通常有助於發現更多的Bug；（3）為調動積極性，增強趣味性，可以適當引入競爭機制，比如當活動結束時，評 出發現Bug最多，發現最嚴重Bug的個人，給以物質和精神獎勵。（4）可以分專題展開，比如安全性、使用者界面可用性、國際化和本地化等等。微軟的第二 類測試除了Bug Bash外，經常還有一些專業性的測試，最典型的是針對安全性攻擊測試。一般會邀請公司內部，或業界的專家來搜尋產品的安全漏洞。 以上我從傳統軟體測試概念的角度，介紹了微軟的原則和兩類傳統測試方法的具體做法，及其側重點。這其實僅僅是一個基礎，一個很原始的基礎。軟體測試在微軟 軟體產品開發中的作用、地位遠不是這些原始的方法所能達到的，也不是傳統軟體測試概念所涵蓋的。微軟在軟體測試方面有很多特有的做法，和概念上的突破，比 如「軟體測試的資訊服務功能」、「以使用者為中心的宏觀品質體系」、「分級測試」、「專案的品質管制系統」、「Bug三方會審」、「測試自動化」和「軟體 測試的軟硬體—部門、團隊、人和基礎設施」等等。這些我會在以後的討論中分專題進行介紹。 （二）      我在前一篇「微軟的軟體測試方法」中介紹了微軟的兩類基本測試方法，其基本思想大家應該是比較熟悉的，因為它們還只是傳統的軟體測試方法的綜合。所以單從 形式上，它並沒有秉持出對傳統框架的突破。但是從另一個層面來考察微軟軟體測試時，你會對一些基本的事實感到驚訝。比如，「微軟的測試人員和開發人員數量 大致相等或略多」，「微軟的產品成本中測試大約占40%以上」等等。人們會有疑問，僅僅是作為功能驗證和搜尋Bug的測試能消耗這麼大量的資源嗎？有必要 付出如此大的代價嗎？應該有理由相信，微軟作為一個軟體企業，其每一份投入都是有意義的，因此也可斷定微軟在軟體測試方面的努力一定超出傳統測試方法的範 疇。歷史回顧      為了更好的理解微軟體測試在方法和理念上的突破，我想首先回顧一下軟體開發和軟體測試的發展歷史，並從中揭示其必然性。Edward Kit 在他的暢銷書「Software Testing In The Real World : Improving The Process（1995， ISBN: 0201877562）」中將整個軟體開發歷史分為三個階段：第一個階段是60年代及其以前，那時軟體規模都很小、複雜程度低，軟體開發的程序隨意。開發人員的Debug程序被認為是唯一的測試活動。其實這並不是現代意義上的軟體測試，當然一階段也還沒有專門測試人員的出現。      第二個階段是70年代，這個階段開發的軟體仍然不複雜，但人們已開始思考開發流程問題，並提出「軟體工程Software Engineering」的概念。但是這一階段人們對軟體測試的理解僅限於基本的功能驗證和Bug搜尋，而且測試活動僅出現在整個軟體開發流程的後期，雖 然測試由專門的測試人員來承擔，但測試人員都是行業和軟體專業的入門新手。      第三個階段是80年代及其以後，軟體和IT行業進入了大發展。軟體趨向大型化。與之相應，人們為軟體開發設計了各種複雜而精密的流程和管理方法（比如 CMM和MSF），並將「品質」的概念融入其中。軟體測試已有了行業標準（IEEE/ANSI ），它再也不是一個一次性的，而且只是開發後期的活動，而是與整個開發流程融合成一體。軟體測試已成為一個專業，需要運用專門的方法和手段，需要專門人才 和專家來承擔。測試與開發的融合      在這一歷史發展程序中，最值得註意的是測試與開發流程融合的趨勢。人們對這種融合也許並不陌生。比如測試活動的早期展開，讓測試人員參與使用者需求的驗 證，參加功能設計和實施設計的審核。再比如測試人員與開發人員的密切合作，隨著開發進展而逐步實施單元測試、模組功能測試和系統整合測試。的確這些都是測 試與開發融合的表現形式，而且初期的融合也只反映在這個層次上。90年代以後，軟體的規模和複雜程度迅速提高，這種形式上的融合也迅速走向更深層次，更具 實際意義。具體地說這種融合就是整個軟體開發活動對測試的依賴性。傳統上認為，只有軟體的品質控制依賴於測試，但是現代軟體開發的實踐證明，不僅軟體的品 質控制依賴於測試，開發本身離開測試也將無法推進，專案管理離開了測試也從根本上失去了依據。在微軟，測試的確有這樣的地位和作用。這就是為什麼微軟在軟 體測試上有如此大的投入。開發對測試的依賴      現代軟體開發，特別是大型軟體開發通常會遇到以下兩個問題：（1）在開發初期，如何能夠展開大規模團隊，群體齊頭並進，而同時保持開發的有序性。從而有效利用資源，縮短開發週期。（2）在開發後期，如何解決深層次的Bug，如何面對設計更改，而能夠保證產品的品質不出現或少出現回落。對於小型簡單的軟體，這兩個問題也存在，但不突出，而且容易解決。但對於複雜的大型軟體的開發，這兩個問題常常會成為難以逾越的障礙。 通常大型專案的功能豐富，但架構、層次也會相當複雜。穩 妥的開發方式是，一次投入少量的人員，逐層開發，逐層穩定。但這種方式顯然資源利用率低，開發週期長，不能滿足現代軟體和IT行業高速發展、瞬息萬變的需 要。因此大型專案需要大型團隊。在微軟，產品開發團隊（主要包括開發、測試和專案管理）一般都有百人以上規模，有些產品甚至上幾千人 （Windows2000的開發部門曾有3000多人）。這樣大規模的人力資源作用在一個動態的，內部相互洽詢的系統中，若沒有有效的協同，其混亂是不可 避免的。試想，有兩個開發人員，分別在開發兩個不同的功能模組，其相互有依賴關係。為了相互協調，他們可以隨時進行當面討論。如果這種關係發生在五個開發 人員和五個功能模組之間，這種協調就只能通過定期的會議來進行。而一個大型專案，會有許許多多這樣的關係，而且很多時候這種關係有著不確定性和不可預見 性。當一個開發人員編輯一段新的程式碼或對已有程式碼進行改動和調整時，他（或她）常常無法確定，或無法完全確定究竟有哪些相關的模組會受到影響，以及在 什麼請況下這種影響會帶來什麼結果。因為系統的複雜性已遠遠超出了人的邏輯思維、技能和經驗所能力及的範疇。因此這種傳統的協調手段是遠不能滿足需要的。      在微軟，這種協調是通過測試來實作的。具體來說就是：每日建造+自動化測試。關於每日編譯和自動化測試，我將來會作專門介紹，這裡簡單的說就是每天都建造 一個新版本，每個版本都要執行通過一定量的自動測試用例，以檢驗當天工作的品質。這裡所說的品質當然有一般意義上品質的概念，但同時它也反映專案在開發程 序中的整體協調性。      自動測試的最大優點在於它的高度可重複性。一個理想的自動測試系統能夠讓人隨時、方便和迅速的執行大量的測試用例。因此一個開發人員可以通過檢查當天的自 動測試結果來分析前一天程式碼的品質（事後檢查），也可以在當天存入程式碼前，先執行自動測試以進一步確存檔存盤入程式碼的品質（事前檢查）。在 微軟，每日建造都是在午夜開始，完成後緊接著就是全面的自動測試，到早晨上班時間之前就會把結果自動通過e-mail等方式傳送出來。開發人員上班後的第 一件事往往就是檢查測試結果。如果沒有問題就會開始新的工作。如果有測試有用例沒有通過，開發人員則必須協同測試人員一起立刻找出原因，解決後才能開始新 的程式碼。有時一個小的失誤會引起大面積的測試用例失敗，很大一部分開發團隊會受到影響。為盡量避免這種情況，要求開發人員在存入程式碼之前先在自己的個 人建造版本上執行一定量的自動測試，完全通過後在存入。如開發人員沒有按照這樣的要求，而擅自存入品質不高的程式碼而造成大量測試失敗，這種不負責任的行 為是要受到嚴厲批評的。從這一程序可以看出，開發人員依賴測試來保證開發工作的品質，使開發整體地協調地向前推進。      當開發進入後期階段，儘管專案已總體成型，開發人員也會不時遇到一些技術上的挑戰。比如一些Bug的解決涉及對專案深層次結構的調整；再比如由於客戶回饋 的意見造成設計的修改。每一次這樣的修改和調整事實上都是對一個穩定系統的破壞，如果處理不當往往一個Bug的修改會產生很多新的Bug，就像一系列聯鎖 的惡性重複。很多專案工期的延誤都是這樣造成的。要避免或至少將這種破壞減少到最低限度，開發人員首先需要知道這種破壞的影響面。在這裡單靠開發人員自身 的邏輯思維、技能和經驗是遠遠不夠的，自動測試再一次成為一種有效的工具。往往開發人員會制定不止一個方案，對每個方案上都執行一遍同樣一套自動測試用 例，然後比較結果，選出最佳方案。自動測試在這方面所起的作用不僅在產品的開發程序中，它還延續到產品發佈後。產品支援部門在為客戶提供應急解決方案時也 要依賴自動測試。管理對測試的依賴      在微軟，軟體專案管理的主要線索就是Bug的管理，其中最直接具體的管理活動就是「Bug三方討論會（Bug Triage）」。會議一般由專案管理Program Manager（簡稱PM）來主持，有開發人員和測試人員參加（所以叫三方會議）。會上對每個新產生的Bug進行討論，並決定（1）是否接受這個Bug； （2）Bug的嚴重層級和優先等級別；（3）Bug由誰來負責，是由測試提供進一步詳細資訊，還是交由開發人員解決，以及大致的解決方案等等。會議還要對 老的Bug檢查解決進度。這種討論會常常會發生爭論，要求測試人員具有足夠的技術基礎和使用者經驗，來捍衛產品的品質。可以說專案開發到了某一階段後就是 由這種Bug的管理所驅動的。這其中的原動力來自測試。 專案管理中一項非常重要但也十分困難的工作是衡量專案的進度，包括判斷專案的狀態，確定專案是否能預期完成。這方面，測試提供了兩個非常重要的參數，一個 是Bug數量的趨勢，另一個是測試結果的趨勢。 Bug趨勢就是將每天新產生的Bug數和每天被解決的Bug數標成一個趨勢圖表。一般在專案的開始階段新生Bug數曲線會呈上升趨勢，到專案中後期被解決 Bug數曲線會趨於上升，而新生Bug數曲線應下降，到專案最後，兩條曲線都趨向於零。PM會持續觀察這張圖表，確保專案健康發展，同時通過分析預測專案 Bug趨於零的時間。在一定的歷史經驗的基礎上分析使用這一圖表會得到很多有價值的資訊，比如說，可分析開發和測試在人力資源的配比上是否恰當，可以分析 出某個嚴重的Bug所造成的專案品質的波動。      每天的自動測試結果同樣可以形成類似的圖表。它同樣非常有助於瞭解目前專案的品質狀況，開發測試進度。 由測試產生的這些資料不僅在專案開發程序中為專案管理提供有效的依據，而且也是產品通過發佈的必要條件。在微軟，每個產品都要經過評審才能通過發佈。前面 介紹的幾個圖表是發佈評審的重要內容，如果從圖表中發現臨評審前還出現過較大的品質波動，評審人員一定會對此提出質疑。 因此軟體專案管理依賴軟體測試提供其基本的管理段落。 可以說，現代大型軟體開發程序中開發和管理對測試的依賴性是測試與開發流程融合的一個根本因素。從另一個角度看，測試與開發流程融合決不僅僅是簡單的時間 上的同步，更不是雙方空間上的接近，而是這種內在的依存關係的外在表現。開發對測試的這種依賴性對測試和測是人員提出了更高的要求。在理念上，軟體測試已 遠不僅僅只是軟體功能的驗證和Bug的搜尋；在具體方法上，自動測試和測試工具的使用已成為基本的要求。在微軟，測試不僅使用一些泛用的工具，每一個產品 還有專門開發的專用工具庫，測試的程式碼量常常超過專案本身的程式碼量。      一個軟體企業要提高其軟體開發的能力，特別是針對大型軟體的大規模的快速開發能力，在測試方面對傳統理念和方法進行突破是必要的。微軟的實踐就是一個很好的印證。



迴首頁













 





贊助商連結



































The Deadline: 《軟體測試專案實作：技術、流程與管理》筆記




































































The Deadline




「把每一天，都過得像是從未來回來回味一樣，去享受它。就當作是我那特別又平凡的生活的最後一天。」

「我們能做的，就是盡其所能珍惜這一趟不凡的人生旅程。」

























































































2012年11月7日 星期三







《軟體測試專案實作：技術、流程與管理》筆記





一、軟體實作方法論

1.測試的策略：

（1）靜態測試：不測試程式本身，而直接尋找程式中可能存在的缺陷或評估程式碼品質的行為。主要是在單元測試行為中，對技術、設計文件進行評核，程式無法執行或需要對原始程式進行規範符合性檢查時該使用這種策略。

（2）動態測試：運作被測程式，輸入測試資料，檢查運作結果與預期結果的差異，從而判斷系統中是否存在缺陷的過程。


2.動態測試的測試技術：

（1）黑箱測試：測試人員完全不考慮程式內部的邏輯結構和內部特性，只依據程式的需求規格說明書，檢查程式的功能是否符合它的功能性說明的測試方法。主要是在系統測試階段時採用。

（2）白箱測試：使用被測程式內部如何工作的資訊，允許測試人員對程式內部邏輯結構及有關資訊來設計和選擇測試案例，對程式的邏輯路徑進行測試。其測試基於覆蓋全部程式碼、分枝、路徑、條件。

（3）灰箱測試：基於被測試程式邏輯結構的基礎上，從系統功能介面上設計測試案例。通常是作為黑箱測試的補充或在黑箱發現缺陷以後，回到原始程式碼分析原因確認問題時採用。


3.測試的階段：

（1）單元測試：為最小單位的測試。在單元測試行為中，各獨立單元模組在與系統其他模組隔離的情況下進行測試，檢查每個程式模組是否實現了規定的功能。

（2）整合測試：是在單元測試的基礎上將已經通過測試的單元模組按照設計要求組裝成系統或子系統進行測試的活動。測試著重在各模組、各子系統之間介面上的缺陷。

（3）系統測試：透過整合測試的軟體，同其運作環境、資料和使用者結合在一起，在實際或模擬實際環境下，對系統進行全面的測試。目的在於通過與系統需求規格書進行比較，發現軟體與系統定義不符合的地方。

（4）驗收測試：為最後一個測試行為。它是以使用者為主的測試，由使用者設計測試案例，使用實際資料進行測試。


4.測試的方法：

（1）功能測試：檢查軟體的功能是否符合規格說明書上的需求。

（2）效能測試：檢察系統是否實現了規定的效能指標要求。


5.測試的實施組織劃分：

（1）開發者測試（α 測試）：開發者透過檢測和提供客觀證據，證實軟體的實現是否滿足規定的需求。主要是在系統交付給第三方測試或驗收測試之前進行的活動。

（2）使用者測試（β 測試）：在使用者的應用環境下，透過使用檢測軟體來驗證是否符合自己預期的需求。

（3）第三方測試（外包測試）：軟體發展方和使用者方之間的測試團隊進行的測試行為。


6.測試的其他概念：

（1）人工測試：由測試人員來執行測試案例，然後根據實際的結果和預期的結果進行比較，並記錄測試結果。

（2）自動化測試：透過重播錄製或編寫的自動化腳本，驅動系統運行的測試行為。

（3）回歸測試：軟體在修改以後再次運作之前，為尋找錯誤而執行程式曾用過的測試案例，以測試缺陷是否再次出現的行為。

（4）煙霧測試：軟體版本交付後，對其重要的部分先進行大概的測試，檢查主要功能是否正確，再進行後面的測試。


7.軟體測試模型請參考「軟件測試過程管理實踐 」




二、軟體品質和缺陷報告

1.規範需求需包括：

（1）使用者可能認為我們理解或遺漏的。

（2）行業規範。

（3）電腦領域的規範和習慣。

（4）客戶對電腦技術的限制。


2.外部品質與內部品質模型的六種屬性：

（1）功能性：


適合
準確
互動
保密安全
功能依從


（2）可靠性：


成熟
容錯
易回復
可靠依從


（3）易用性


吸引
易學
易理解
易操作
易用依從


（4）效率性：


時間特性
資源利用
效率依從


（5）維護性：


穩定
易分析
易改變
易測試
維護依從


（6）可攜性：


適用
相容
易安裝
易替換
可攜依從



3.使用者品質模型的四種屬性：

（1）有效性

（2）生產率

（3）安全性

（4）滿意度


4.缺陷報告應填寫的元素：

（1）缺陷摘要

（2）缺陷所在的子系統（模組）

（3）缺陷位置

（4）缺陷類型、原因

（5）缺陷狀態

（6）詳細描述

（7）嚴重程度

（8）緊急程度

（9）附件

（10）發現行為

（11）發現途徑

（12）測試案例編號

（13）提交的版本

（14）提交的循環週期

（15）提交日期


5.缺陷處理後要填寫的三項資訊：

（1）修復的版本

（2）修復人

（3）拒絕者


6.缺陷的六種狀態：

（1）New：預設值，測試工程師填寫一個新缺陷報告時。

（2）Open：測試團隊組長對缺陷進行審查後，將缺陷狀態從「New」改為「Open」，並在一定的時間內指派給對應的開發工程師。

（3）Fixed：當缺陷被修復並通過了驗證測試，開發工程師將缺陷狀態從「Open」改為「Fixed」。

（4）Pending：當缺陷由於各種原因無法修復時，開發工程師或專案經理將缺陷狀態從「Open」改為「Pending」。處在此狀態的缺陷將等待條件具備時再進行修復。

（5）Closed：當缺陷在一個新建版本中完成了驗證測試時，測試工程師將狀態從「Fixed」改為「Closed」。

（6）Reopen：當缺陷驗證失敗時，測試工程師會將狀態從「Fixed」改為「Reopen」。當以前已經關閉的缺陷又在測試過程中出現時，測試工程師會將狀態從「Closed」改為「Reopen」。




三、文件審查和測試需求分析

1.業務規格需求說明書為整個軟體生產活動的依據，其審查項目包括：

（1）個業務功能和效能指標的描述是否清晰、明確。

（2）同需求描述之間是否存在矛盾和衝突。

（3）業務功能描述是否有遺漏。

（4）業務需求是否可以測量。

（5）業務功能描述是否會和行業規則、企業規範；國家法律規範、政策等發生衝突。

（6）需求中計算公式是否明確，公式中各因數是否明確。

（7）計算是否有精度要求。

（8）多角色和多使用者的系統角色、權限等是否合適。

（9）其引用的文件中是否正確且文件中是否有相應敘述。


2.概要設計文件為描述功能設計、資料結構、資料目錄、效能指標等的文件，其審查項目包括：

（1）設計是否涵蓋了業務需求。

（2）功能模組設計和內外介面之間的資料交換是否明確。

（3）資料結構或類別圖設計是否明確。

（4）資藥庫邏輯結構和物理結構設計描述是否正確，有無遺漏。

（5）應用邏輯設計、網路設計、安全設計是否正確。 


3.安裝部署文件為描述系統的部署，其審查項目包括：

（1）文件閱讀者為維護人員，所以要註意技術描述而非業務描述。

（2）開發團隊使用的一些術語或縮寫詞語要有解釋說明。

（3）部署中的硬體設備要與上線設備一致。

（4）部署應用系統所需要的作業系統、支援軟體等要確定的版本要求和配置參數要求。

（5）文件中的截圖要與系統實際上線環境中的系統介面、操作一致。

（6）有條件時應該對照部署手冊進行實際部署測試。


4.使用者手冊為產品最終的規範，其審查項目包括：

（1）按照手冊描述的操作步驟來操作程式。要確認手冊中的描述是正確的，不要出現導致使用者錯誤操作的情況。

（2）手冊中的建議操作應做重點驗證。建議應該是使用者選擇的操作，所以要按步驟去驗證使用者依照建議所做的操作，測試人員應嘗試更多的可能性。

（3）檢查每條陳述。測試人員需要對每條陳述進行檢查。

（4）檢查圖表、截圖是否與發佈的版本一致。

（5）對業務術語和縮寫詞要進行必要的解釋。使用者手冊中不應該出現閱讀者可能不熟悉的專業術語和縮寫詞。

（6）像使用者一樣使用樣例和示例，按步驟去驗證每個樣例或示例。

（7）尋找容易誤導使用者的內容。應盡早標示出如意被人誤解的內容。


5.系統功能測試需求的六大分類：

（1）業務功能測試需求。

（2） 可靠性測試需求。

（3）安全性測試需求。

（4）易用性測試需求。

（5）可攜性測試需求。

（6）可維護性測試需求。


6.測試工作的依據首先是業務需求規格說明書，所以首先應該把需求從中提取出來，再把業務需求分解為測試需求，每個業務需求對應一條或多條測試需求。




四、測試設計

1.測試案例是為了驗證受測系統的某一品質子屬性而設計的。共有四個基本要素：

（1）案例描述：測試的目的和預期的結果。

（2）測試資料：執行測試案例時所載入的輸入資料。

（3）執行步驟：測試案例執行時所要進行的操作佇列。

（4）預期結果：測試案例執行完後所期望系統提供的結果。


2.測試案例的設計方法－等價類劃分：

等價劃分是把系統某個輸入資料集合劃分成若干部分，然後從每個部份中選取少數代表性資料作為測試案例的輸入。

步驟：

（1）為每個等價類別限定一個唯一的編號。

（2）設計一個新的測試案例，使其盡可能多地覆蓋尚未覆蓋的有效等價類（對於程式的規格說明書來說是合理的、有意義的輸入資料構成的集合）。重複這一步，最後使得所有有效等價類均被測試案例所覆蓋。
（3）設計一個小的測試案例，使其只覆蓋一個無效等價類（對於程式的規格說明書來說是不合理的、無意義的輸入資料構成的集合）。重複這一步，使所有無效等價類均被覆蓋。

3.測試設計階段的工作包括：

（1）把測試需求轉化為測試案例。

（2）補充完善的測試需求。

（3） 完善的測試策略。

（4）測試條件、設備、環境的準備。




五、做好專案測試計劃

1.測試計畫包含的要素：

（1）測試目標和範圍。

（2）測試資源。

（3）進度計畫。

（4）測試約束條件。

（5）測試循環週期。

（6）測試策略。

（7）專案風險。

（8）測試約定。 


2.進行測試策略的三步驟：

（1）確定測試需求。

（2）評估專案風險並確定測試優先順序。

（3）確定測試策略。




六、單元測試及結果測試

1.語法涵蓋：設計若干測試案例，執行受測程式，使得每一條可執行語法至少被執行一次。


2.判定（分支）覆蓋：設計若干測試案例，執行受測程式，使程式中每個判斷的邏輯為真和邏輯為假至少被執行一次。


3.條件覆蓋：設計足夠多的測試案例，執行受測程式，使程式中判斷的每個條件的每個可能取值至少被執行一次。


4.判定－條件覆蓋：設計足夠多的測試案例，執行受測程式，使程式中判斷的每個條件的每個可能取值至少執行一次，並且每個可能的判斷結果也至少被執行一次。


5.條件組合測試：設計足夠多的測試案例，執行受測程式，使程式中每個判斷的所有可能的條件取值組合至少被執行一次。 


6.路徑測試：設計足夠多的測試案例，覆蓋受測物件中的所有可能路徑。


7.單元測試的步驟：

（1）計畫：確定測試需求，制定測試策略，確定測試所用資源，建立測試任務的時間表。

（2）設計：設計單元測試模型，制定測試方案，制定具體的測試案例，建立可再使用的測試腳本。

（3）執行：執行測試案例，對單元模組進行測試，驗證測試的結果並記錄測試過程中出現的缺陷。

（4）評審：對單元測試的結果進行評審。主要進行測試完備性評估。



七、產品整合測試

1.產品整合測試的重點：

（1）在把各個模組 / 子系統連接起來的時候，跨模組介面的資料是否會遺失。

（2）一個功能模組 /子系統是否會對另一個功能 / 子系統模組產生不利的影響。

（3）各個子功能 / 子系統模組累加起來，是否能達到預期的功能。

（4）全域資料結構是否有問題。

（5）單個模組的誤差是否會累加放大到不能接受的程度。


2.煙霧測試的重點：

（1）整個系統是否會實現全部主要功能。如果沒有實現，這些未實現的功能是否會給系統其他部分造成很大的影響。

（2）著重已經實現功能的品質，透過簡單執行主要業務流程，分析功能完成品質。

（3）看看是否有具體的實現，而不要被系統功能功能表和視窗所迷惑。


3.整合測試流程：

（1）測試計畫：確認測試物件、範圍，分析測試需求，測試策略、方法和出、允入準則，估算工作量，估算所需資源。

（2）測試設計：設計測試案例、測試資料、測試環境部署等。

（3） 測試執行：執行案例，記錄測試過程日誌，提交缺陷並追蹤缺陷處理流程，測試案例維護。

（4）測試總結：發現評估整合測試、測試報告。


4.整合測試設計需考量的要點：

（1）考慮支援本系統執行而需要的測試環境及測試環境與生產環境的差別。

（2）測試案例的執行策略。

（3）測試案例運行需要的外部條件。


5.整合測試報告應包括的內容：

（1）測試案例執行情況分析。

（2）整合測試需求符合程度分析。

（3）缺陷分析。

（4） 測試過程分析。




八、專案功能測試

1.專案經理在功能測試執行之前的準備工作：

（1）完成對功能測試計畫的評審。

（2）完成對功能測試案例的評審。

（3）測試環境建置完成，且通過審查。

（4）功能測試需要的測試資料和結果記錄形式準備完成。

（5） 系統中的參數配置等已準備好。




九、專案效能測試

1.測試允入準則：

（1）效能測試計畫撰寫完成，且通過評審。

（2）與業務人員溝通，選擇常見交易和混和業務比例。

（3）整個系統功能趨於穩定。

（4）測試環境搭建完成，且通過驗收。

（5）測試環境應用部署完成，並驗證可用性。

（6）效能測試腳本和測試資料準備結束。

（7） 預期效能指標確定。


2.測試允出準則：

（1）校能測試完成，系統達到效能測試指標。

（2）校能測試完成，若未達到效能測試指標，則返回最佳化處理。

（3）滿足上述兩個條件之一，且系統效能報告評審通過，則退出效能測試。



十、客戶驗收測試和測試報告評核

1.測試報告的內容：

（1）目的。

（2）測試環境。

（3）測試實際進度和計畫進度對比。

（4）測試版本。

（5）測試結果。
  
（6）落差分析。

（7）測試有效性分析。

（8）輸入文件。

（9）遺留缺陷分析。

（10） 缺陷清單。


2.撰寫測試報告的註意事項：

（1）在測試報告的文字中只是描述問題、事情或過程等，不要出現帶有明顯感情色彩的字眼。

（2）提供明確的資訊，而不要出現不確定的詞語。

（3） 測試報告的每一個資料都要有測試結果進行驗證，且是經過多次測試驗證的資料，是經得起推敲的資料，不同地方的資料要一致。




十二、測試專案管理

1.專案工作量評估模型－專案經驗模擬法：

根據公司以前所作的類似專案，所累積的經驗或歷史資料來估算工作量。

步驟：

（1）在公司的知識庫中搜索類似的專案，獲得類似專案的資訊。
  
（2）把目前專案與類似專案進行比較，找出差異性。

（3）對差異性進行分析，找出目前專案的特點。

（4）對目前專案進行評估。

（5）最後統計出總體工作量，請相關的主管、專案經理、測試專家參與討論，確定最後的工作量。


2.專案工作量評估模型－WBS估算法：

將專案或產品分解為實際的工作，然後分別對各個工作進行時間估算，最終求和統計得出專案或產品的測試工作量。


單元測試的步驟：

（1）如果有系統詳細設計說明書，則依據詳細說明書中劃分的模組來計算劃分的單元模組數量﹔若沒有該文件，確定是否可透過其他文件估算單元模組的數量。

（2） 確定單元測試審核中每個活動的工作量。


產品整合測試的步驟：

（1）把整個系統分解成子系統，確定每個子系統的介面數量。

（2）對每兩個子系統之間含有介面的子系統進行評估，需要建構多少測試案例覆蓋介面，也要考慮介面之間的測試方案。

（3） 需要考慮整個整合測試所用的工作量。


系統功能測試的步驟：

（1）把整個系統中的各子系統分解成需求點 / 功能點，在各功能點上確定運算元素，確定功能點的劃分密度。

（2）統計出所有的需求點為整個系統中的功能需求總數，再考慮測試中實際方案的工作量，是否考慮自動化測試、是否需要建構大量基礎資料等。

（3）需要考慮整個系統功能測試所用的工作量。


系統效能測試的步驟：

（1）把整個系統中的效能需求點整理出來，包括功能測試之外的所有測試行為。

（2）評估每個效能點需要的工時，形成整個系統效能測試的總工時。 


3.專案工作量評估模型－Delphi 法：

要求有多種相關經驗的人參與，互相說服對方。 

（1）專案協調人和各測試專家和專案經理介紹專案規格和估計表格。

（2）專案協調人召集小組會，各測試專家和專案經理討論與規模相關的因素。

（3）各測試專家匿名填寫迭代表格。

（4）專案協調人整理出一個估計總結，以迭代表格的形式送回給測試專家。

（5）專案協調人召集小組會，討論較大的估計差異。

（6）測試專家複查估計總結，並在迭代表格上提交另一個不記名估計。

（7）重複步驟4~6，直到達到一個最低和最高估計基本一致。




張貼者：



林維展




於

下午3:56











以電子郵件傳送這篇文章BlogThis！分享至 Twitter分享至 Facebook分享到 Pinterest



標籤：
讀書心得














較新的文章


較舊的文章

首頁




訂閱：
張貼留言 (Atom)
















Facebook

林維展












Google+



總瀏覽量
















文章分類



每日晨摘
(667)


讀書心得
(338)


每日反省
(120)


雜
(95)


工作週記
(23)


歌詞翻譯
(22)


講座心得
(22)


每日人資案例
(17)


DIVA
(13)


佳文分享
(13)


影片心得
(11)


每日晚摘
(11)


課堂筆記
(7)


考照筆記
(6)


CTF-Write-ups練習
(3)


一個人的旅行
(3)


實習心得
(3)


疑難排解
(3)


CVE研究
(2)


Mobile 漏洞分析
(1)


OWASP Mobile Security Testing Guide Android
(1)


PHP 安全攻防
(1)


文章彙整
(1)


滲透測試
(1)













人力資源










DDI Resources













HR Daily Advisor













HR Toolbox













HR職涯隨筆













jeddah的部落格













中華人事主管協會













中華人力資源管理協會













亞太教育訓練網













人力資源管理的世界













人力資源管理經驗分享













人資不管的部落格













人資長的部落













凌帠的管理世界













徐傑的HR之路













祝康偉的職場相談室













經理人分享













萬惡的人力資源主管部落格



















公開課程










CICIstudy













Code School













Codecademy













Coursera













edX













HARVARD - Computer Science













TED













Udacity













新浪公開課程













網易公開課程



















國外部落格










Alex's Tech Thoughts













Blanchard LeaderChat













Blog Of Impossible Things













Bokardo













Daggle













Dan Schawbel













David B. Lerner













Fred Wilson













Guy Kawasaki













Harley Hahn













Joel on Software













Kippt













LUXr : the Lean UX Company













Michael Arrington













notes.unwieldy













Paul Graham













Pinboard













Romy Misra













Seth Godin













SoftTechVC













Steve Blank













THINK OUTSIDE IN













Tom Allen's Projects













Venture Hacks













Vinicius Vacanti



















網路趨勢與創業










#AltDevBlogADay













36氪













Advertising Age













App Annie Blog - App Store Analytics & Insights













Atwood Liu的走馬燈













Bloomberg













Channel 9













CNET













CSDN













Duncan Teng 鄧勝薰













Forbes













Hacker News













Inside 網路趨勢觀察













IT人













MMDays













MR JAMIE













Mr. 6













Norika.紀香













Peter Chou 胡思亂想













ReadWriteWeb













Slate













Smashing Magazine Feed













SocialBeta













SoLoMo Team













Squad Network













TECH2IPO創見













TechCrunch













Techmeme













TechOrange













The Hacker News













The Next Web













The Verge













VC Cafe













Venture Two Cents 險而議見













『Aaron 的創業心得』













上方網













中國企業家網













中國大學生創業網













伯樂在線













創投網













創業幫













創業幫 - 打造無敵商業計畫書













創業者每天要看的21條新聞













孫慶新博客













數位時代













有米開發者服務博客













林文傑 onsalekine的網路及行銷新聞搜集













林文傑 onsaleking













愛範兒













生意信息網博客













科學人雜誌













網路集客力













虎嗅網













銷售圈博客













雷鋒網













麻省理工—科技創業













黛博拉看日本



















品牌行銷










ZEALS 熱情先決













凱書













品牌人X我













廣告小妹













硬塞腦













米卡的行銷放肆













鮪魚星球人



















領導管理










gipi的學習筆記













The MIX













丁菱娟部落格













世界經理人













何飛鵬：社長的筆記本













司徒達賢教授論壇













杜書伍部落格



















網頁、程式設計










ACM Queue













Cocoa Is My Girlfriend













Codecademy













CSS 語法教學













DZone Refcardz













gslin













InfoQ













iOS - Code4App













iOS - MKBlog













iOS - Ray Wenderlich













iOS - 彼得潘的App異想世界













iOSLib













JavaScript - 熱血漢誌













Joomla!123-圖解架站教學網













jQuery - 夢想天空













KingKong Bruce記事













mr.mu













mrkt 的程式學習筆記













Peter's Playground













PHP100













PHP: 正確之路













Pragmatic Bookshelf













Ruby on Rails - ihower













Ruby on Rails - XDite













Ruby on Rails - 小蟹













Ruby on Rails - 林士淵













Smashing Magazine Feed













SQL語法教學













THE Linunx Command Line 中文版













搞笑談軟工













毒樂園













老趙點滴 - 追求編程之美













輕鬆談軟工













陳鍾誠



















UI / UX 設計










1stwebdesigner













Column Five Media













Desiring Clicks













Handy UI













HPX Party













Infogr.am













iOS - pttrns













MoonMonster













St. Threath













UCD大社區













UICloud













UX map













UX Myths













Visual.ly













ㄇㄞˋ點子靈感創意誌













草監網路













蔡志浩



















資訊化圖表










Chart Porn













Cool Infographics













Data Mining













DataViz













Fast Company













FlowingData













HistoryShots













Infographic Post













Infographics news













Information Aesthetics













Simple Complexity













The Art of Information













Visual Complexity



















新聞










Business Insider













CNN













Gawker













New York Times













Newser













NORTHSTAR













Reuters













The Economist













USATODAY













WOBI



















雜誌週刊










Businessweek













Cheers快樂工作人













Financial Times













哈佛商業評論













商業周刊













天下雜誌













數位時代













程序員













經理人雜誌













華爾街日報













遠見雜誌



















其他










ACM-ICPC Contest Council for Taiwan













Read for Joy













Recently Uploaded Slideshows













vgod's blog













[ 小黑宅 ]













清大彭明輝教授













資安見聞錄




















本 著作 係採用創用 CC 姓名標示-相同方式分享 3.0 台灣 授權條款授權.



















































軟體測試 - MBA智庫百科









 
 















軟體測試

出自 MBA智庫百科(http://wiki.mbalib.com/)


目錄

1 什麼是軟體測試
2 軟體測試的特點[1]
3 軟體測試的目的
4 軟體測試的分類
5 軟體測試的要求[2]
6 軟體測試的內容[2]
7 軟體測試的步驟[2]
8 軟體測試的過程[1]
9 參考文獻


[編輯] 什麼是軟體測試 
　　軟體測試指的是軟體產品在投放市場前，對於軟體產品所進行的需求的分析，設計的規格和編碼等內容的覆審，是確保軟體產品質量的關鍵性步驟。

[編輯] 軟體測試的特點[1] 
　　在實際的操作過程當中軟體測試難度比較大，而且環節也比較複雜。同時它還具有比較可觀的經濟性。隨著軟體的大規模化會有不斷增長的複雜的測試要求等待測試工程師去完成。
　　它是一個微妙的、高技術含量的測試工作。測試過程中出現差錯就會考慮不周到產生不必要的誤差。這種誤差可能造成軟體徹底的崩潰。常見的問題根源可以有以下兩種分析。
　　1.完全測試是不現實的
　　測試軟體的過程中。不可能完完全全的檢測到所有的漏洞和不足，在實際工作中，往往不能做到全面而且徹底的檢測。我們採取相應的手段和方法來完成儘可能多的測試數據和軟體結構。
　　在人們考慮的所有情況下，為了保證其穩定性，就會讓所有執行的代碼全部進行測試，但是這種方式也存在一定的問題，比如大量的輸入，大量的輸出以及執行的路程比較複雜，都會引起最終的測試效果。
　　2.軟體測試的風險性
　　軟體測試的具體目的合理的軟體測試可以節省大量的時間人員和資源，但是軟體測試過程中存在著很大的困難和風險。盡人皆知，軟體測試有很多種風險。可以分為環境不達標、人員技術不夠和管理時間混亂。風險表現為測試環境不到位和測試時間和人員冗餘太多。在控制軟體測試的風險時候，開發人員採取以下方法：與用戶相互協商，降低對優先順序不高的特性和功能，將以後的冗餘的功能去除，增加測試人員和測試工具；控制軟體發佈的時間，時間允許的情況下，推遲軟體發佈的時間，刪除影響風險發生的不必要的功能和環境；增加測試資源，通過事先準備好的所有條目，設置好測試環境，按照列出的條目逐個逐個的進行檢查和測試。要想真正的迴避風險是不能的，必須制定一個合理的測試項目的管理方案，針對常見的風險進行分類彙總，建立防患於未然和預防為主的管理意識。

[編輯] 軟體測試的目的 
　　軟體測試的具體目的決定著如何來組織進行測試工作。通常情況下軟體測試工作的目的主要有：
　　一是為發現程式的錯誤從而進行測試，
　　二是測試用以證明軟體的程式存在錯誤，並非證明該程式不存在錯誤；
　　三是好測試其功能在於可以發現以前沒有發現的一些錯誤等等。因此，必須關註測試的具體目的，進行測試用例的選擇時要遵循經濟性原則。

[編輯] 軟體測試的分類 
　　軟體測試通常可以分為黑盒式測試與白盒式測試兩種類型。黑盒式測試就是將軟體系統當作黑盒子而不去考慮相關程式內在的邏輯，按照需求規格的說明書要求對程式功能進行檢查，看能否達到功能說明的要求。白盒式測試就是允許實施測試的人員根據程式內部的邏輯結構和相關信息進行測試用例的設計與選擇，測試程式邏輯的路徑。按照前後的過程分類，測試步驟可分成：單元測試，組裝(集成)測試，確認測試及系統測試等。

[編輯] 軟體測試的要求[2] 
　　1.客觀性
　　對軟體測試和軟體中的錯誤必須持客觀的態度，避免先入為主，儘量讓第三方或者獨立的部門進行測試，這樣既能以揭露軟體中錯誤的態度工作，也能不受發現的錯誤的影響。經濟上的獨立性使測試有更充分的條件按測試要求去完成。
　　2.專業性
　　軟體測試是技術含量很高的工作，既要有軟體相關知識，還要具備相關管理能力，這就需要有專業隊伍，並經過大量的測試實踐。專業化分工是提高測試水平、保證測試質量、充分發揮測試效應的必然途徑。
　　3.權威性
　　由於專業優勢，獨立測試工作形成的測試結果更具信服力，而測試結果常常與軟體的質量評價聯繫在一起，專業化的獨立測試機構的評價更客觀、公正和具有權威性。
　　4.資源保證
　　獨立測試機構的主要任務是進行獨立測試工作，這使得測試工作在經費、人力和時間等方面更有保證，不會因為開發的壓力而減少對測試的投入，進而降低測試的有效性。可以避免開發單位側重軟體開發而對測試工作產生不利的影響。

[編輯] 軟體測試的內容[2] 
　　軟體測試主要工作內容是驗證和確認。驗證是保證軟體正確地實現了一些特定功能的一系列活動，即保證軟體做了你所期望的事情。驗證確定軟體生存周期中的一個給定階段的產品是否達到前階段確立的需求的過程；驗證程式正確性的形式證明，即採用形式理論證明程式符號設計規約規定的過程；評市、審查、測試、檢查、審計等各類活動，或對某些服務或文件等是否和規定的需求相一致進行判斷和提出報告。
　　確認是一系列的活動和過程，目的是想證實在一個給定的外部環境中軟體的邏輯正確性。即保證軟體以正確的方式來做了這個事件：靜態確認，不在電腦上實際執行程式，通過人工或程式分析來證明軟體的正確性；動態確認，通過執行程式做分析，測試程式的動態行為，以證實軟體是否存在問題。軟體測試的對象不僅僅是程式測試，軟體測試應該包括整個軟體開發期間各個階段所產生的文檔，如需求規格說明、概要設計文檔、詳細設計文檔，當然軟體測試的主要對象還是源程式。
　　軟體測試，按照測試過程可分為單元測試、集成測試、確認測試及系統測試等；按照測試內容分可分為功能測試、性能測試、界面測試、鏈接測試等。

[編輯] 軟體測試的步驟[2] 
　　(1)測試計劃。根據用戶需求報告中關於功能要求和性能指標的規格說明書，定義相應的測試需求報告，即制訂黑盒測試的最高標準；同時，適當選擇測試內容，合理安排測試人員、測試時間及測試資源等。
　　(2)測試設計。將測試計劃階段制訂的測試需求分解、細化為若幹個可執行的測試過程，併為每個測試過程選擇適當的測試用例。
　　(3)測試開發。建立可重覆使用的自動測試過程。
　　(4)測試執行。執行測試開發階段建立的自動測試過程，並對所發現的缺陷進行跟蹤管理。測試人員應本著科學負責的態度，一步一個腳印地進行測試。
　　(5)測試評估。結合量化的測試覆蓋域及缺陷跟蹤報告，對於應用軟體的質量和開發團隊的工作進度及工作效率進行綜合評價。

[編輯] 軟體測試的過程[1] 
　　軟體的測試過程根據階段的不同可以分為以下幾種測試階段：
　　(1)單元測試：這個測試過程是測試的最初階段，測試的主要對象就是單元。通過單元的測試可以將每個模塊的的性能摸查清楚。在實際的操作過程中為了提高測試的有效性，一般採用多種單元測試的方式，比如最常使用的就是選取白盒的測試方法。
　　(2)集成測試：也稱組裝測試。這一步測試是在單元測試過程之後來進行，屬於測試的關鍵環節。各個測試結束的模塊進行綜合分析，組裝成比較大的模塊進行系統集成分析測試。各個系統之間的介面和連接代碼可以被檢測和分析，最常見的方式就是黑盒測試。
　　(3)確認測試：這個測試階段是軟體測試的比較核心的一個模塊，這一測試過程是發生在集成測試之後的測試過程，這一測試過程被用來模擬軟體的功能和參數以及某些特點能不能實現使用者的特殊要求通過確認測試可以確定用戶的工作開展與否。
　　(4)系統測試：也稱為產品測試。確認測試在滿足用戶的要求之後，系統測試要進行檢測實際環境和軟體能夠很好的結合協調工作。這種測試過程，有必要進行相應的硬體平臺搭建和模擬模擬實驗。與此同時，相應的軟體系統和客戶應該參與進來進行測試和評估。綜合可以說，如果軟體測試通過以上幾種測試最終達到了系統測試，那麼這個產品基本就符合要求了。
　　(5)驗收測試：測試過程的最後一個階段。這一階段主要檢測軟體安裝之後，用戶能否使用該軟體以及軟體的所有功能。軟體和硬體能夠使用戶放心使用和持續運行是檢驗驗收效果的關鍵。軟體設計者也應該參與這一步的測試和分析。

[編輯] 參考文獻 

↑ 1.0 1.1 張宇.淺析軟體測試及其發展展望(A).理論廣角.2014,1
↑ 2.0 2.1 2.2 胡宇翔.軟體測試的若幹問題探析(A).科教導刊(電子版).2014,1



取自"http://wiki.mbalib.com/zh-tw/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95"

本條目對我有幫助1  分享到：














   如果您認為本條目還有待完善，需要補充新內容或修改錯誤內容，請編輯條目。

本條目相關文檔
 軟體測試 7頁 軟體測試基礎-游戲軟體測試 37頁 軟體測試的藝術 114頁 軟體測試工程師 154頁 軟體測試合同 2頁 軟體測試員 1頁 軟體測試工程師 1頁 軟體測試計劃模板 6頁 《軟體測試》專輯前言 2頁 軟體測試培訓講義 138頁更多相關文檔

本條目相關資訊
我的程式員生涯，遇到過這十個問題 2017年4月7日
本條目由以下用戶參與貢獻
Mis銘,Lin,Tracy,寒曦. 頁面分類: 軟體 





評論(共0條)提示:評論內容為網友針對條目"軟體測試"展開的討論，與本站觀點立場無關。
發表評論﻿請文明上網，理性發言並遵守有關規定。




 




導航


首頁
文檔
百科
商學院
資訊
培訓
幫幫




個人工具


用戶登錄創建新帳號 









搜索



 
 

全球最大的中文經管百科，由121,994位網友共同編寫而成，共計413,665個條目








 
首頁
 
管理
 
營銷
 
經濟
 
金融
 
人力資源
 
咨詢
 
財務
 
品牌
 
證券
 
物流
 
貿易
 
商學院
 
法律
 
人物
 
分類索引
 




查看

條目討論編輯簡體中文繁體中文 


工具▼


鏈入頁面
鏈出更改
上載文件 特殊頁面 可列印版
永久鏈接 













導航


最新資訊
最新評論
最新推薦
熱門推薦
編輯實驗
使用幫助
創建條目
隨便看看












本周推薦
最多推薦



垃圾人定律工作計劃6W2H分析產品定位五步法最大笨蛋理論手錶定律自我暗示拿鐵因數發散思維工作分解結構PPP模式 

蘑菇管理定律猴子管理法則情緒ABC理論100個最流行的管理辭彙21天效應破窗效應懶螞蟻效應SWOT分析模型墨菲定律踢貓效應 

以上內容根據網友推薦自動排序生成









x



	   最後更改11:30, 2015年10月21日.	  
智庫首頁 - 
百科首頁 - 
關於百科 -
	   客戶端 -
	   人才招聘 -
	   廣告合作 - 
權利通知 -
	   聯繫我們 -
	   免責聲明
 - 友情鏈接

©2006-2017 MBAlib.com, All rights reserved. 


 



