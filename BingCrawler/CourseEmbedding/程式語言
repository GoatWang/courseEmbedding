


程式語言 - 維基百科，自由的百科全書































 







程式語言

維基百科，自由的百科全書
(已重新導向自 程式語言)

					前往：					導覽，					搜尋






本條目需要補充更多來源。（2017年2月10日） 
請協助添加多方面可靠來源以改善這篇條目，無法查證的內容可能會因為異議提出而移除。 

















中國大陸
程序設計語言、編程語言


臺灣
程式設計語言、程式語言


港澳
程序設計語言、編程語言






程式設計語言中的經典語句：
Hello World。


程式語言（英語：programming language），是用來定義電腦程式的形式語言。它是一種被標準化的交流技巧，用來向電腦發出指令。一種電腦語言讓程式設計師能夠準確地定義電腦所需要使用的資料，並精確地定義在不同情況下所應當採取的行動。
最早的程式語言是在電腦發明之前產生的，當時是用來控制提花織布機（英語：Jacquard loom）及自動演奏鋼琴的動作[1]。在電腦領域已發明瞭上千不同的編程語言，而且每年仍有新的編程語言誕生。很多編程語言需要用指令方式說明計算的程式，而有些編程語言則屬於宣告式編程，說明需要的結果，而不說明如何計算。
程式語言的描述一般可以分為語法（英語：Syntax (programming languages)）及語義。語法是說明程式設計語言中，哪些符號或文字的組合方式是正確的，語義則是對於編程的解釋[2]。有些語言是用規格檔案定義，例如C語言的規格檔案也是ISO標準中一部份，2011年後的版本為ISO/IEC 9899:2011[3]，而其他語言（像Perl）有一份主要的程式語言實現（英語：Programming language implementation）檔案，視為是參考實現（英語：reference implementation）。



目錄


1 概論
2 特點

2.1 資料和資料結構
2.2 指令及流程控制
2.3 參照機制和重用


3 功能

3.1 實體的傳輸連結
3.2 應用程式的發展


4 使用

4.1 量測各程式語言的使用量


5 歷史
6 參見
7 參考文獻
8 延伸閱讀
9 外部連結



概論[編輯]
程式語言原本是被設計成專門使用在電腦上的，但它們也可以用來定義演算法或者資料結構。正是因為如此，程式設計師才會試圖使程式代碼更容易閱讀。
程式語言往往使程式設計師能夠比使用機器語言更準確地表達他們所想表達的目的。對那些從事電腦科學的人來說，懂得程式設計語言是十分重要的，因為在當今所有的計算都需要程式設計語言才能完成。
目前發明瞭許多的程式語言，程式語言本身可能修改以符合新需求，或是和其他的程式語言結合使用，儘管人們多次試圖創造可以符合所有需求的通用程式語言，但以「符合所有需求」的標準來看，這些嘗試都失敗了[來源請求]。之所以有那麼多種不同的程式語言存在的原因是，編寫程式的初衷其實也各不相同；新手與老手之間技術的差距非常大，而且有許多語言對新手來說太難學；還有，不同程式之間的執行成本（runtime cost）各不相同。
有許多用於特殊用途的語言，只在特殊情況下使用。例如，PHP專門用來顯示網頁；Perl更適合文字處理；C語言被廣泛用於作業系統和編譯器的開發（所謂的系統編程）。[4]
高階語言的出現使得電腦程式設計語言不再過度地依賴某種特定的機器或環境。這是因為高階語言在不同的平臺上會被編譯成不同的機器語言，而不是直接被機器執行。最早出現的程式語言之一FORTRAN的一個主要目標，就是實現平臺獨立。
雖然大多數的語言既可被編譯又可被解譯，但大多數僅在一種情況下能夠良好執行。在一些編程系統中，程式要經過幾個階段的編譯，一般而言，後階段的編譯往往更接近機器語言。這種常用的使用技巧最早在1960年代末用於BCPL，編譯程式先編譯一個叫做「0代碼」的轉換程式（representation），然後再使用虛擬器轉換到可以執行於機器上的真實代碼。這種成功的技巧之後又用於Pascal和P-code，以及Smalltalk和二進位碼，在很多時候，中間過渡的代碼往往是解譯，而不是編譯的。
如果所使用的翻譯的機制是將所要翻譯的程式代碼作為一個整體翻譯，並之後執行內部格式，那麼這個翻譯過程就被成為編譯。因此，一個編譯器是一個將人可閱讀的程式文字（叫做原始碼）作為輸入的資料，然後輸出執行檔（object code）。所輸出的執行檔可以是機器語言，由電腦的中央處理器直接執行，或者是某種模擬器的二進位代碼。
如果程式代碼是在執行時才即時翻譯，那麼這種翻譯機制就被稱作直譯。經直譯的程式執行速度往往比編譯的程式慢，但往往更具靈活性，因為它們能夠與執行環境互相作用。
特點[編輯]
每一種程式設計語言可以被看作是一套包含語法、詞彙和含義的正式規範。
這些規範通常包括：

資料和資料結構
指令及流程控制
參照機制和重用
設計哲學

程式語言不成文規定：

識別元（Identifier）命名常規

大多數被廣泛使用或經久不衰的語言，擁有負責標準化的組織，經常會晤來創造及發布該語言的正式定義，並討論擴充功能或貫徹現有的定義。
資料和資料結構[編輯]
現代電腦內部的資料都只以二元方式儲存，即開-關模式（on-off）。現實世界中代表資訊的各種資料，例如名字、銀行帳號、度量以及同樣低端的二後設資料，都經由程式設計語言整理，成為高端的概念。
一個程式中專門處理資料的那個系統被稱為程式語言的型態系統（type system）；對型態系統的研究和設計被稱為型態理論（type theory）。語言可以被分為靜態型態系統（statically typed systems），例如C++和Java，和動態型態系統（dynamically typed systems），例如Lisp，JavaScript，Tcl和Prolog。前者可被進一步分為包含宣告型態（manifest type）的語言，即每一個變數和函式的型態都清楚地宣告，或type-inferred語言（例如MUMPS，ML）。
大多數語言還能夠在內建的型態基礎上組合出複雜的資料結構型態（使用陣列，列表，堆疊，檔案等等）。物件導向語言（Object Oriented Language，又譯作「物件導向語言」）允許程式設計師定義新的資料型態，即物件（objects），以及執行於該物件的函式（functions）和方法（methods）。
除了何時以及如何確定運算式和型態的聯繫，另外一個重要的問題就是語言到底定義了哪些型態，以及允許哪些型態作為運算式的值。諸如C程式語言之類的低端語言允許程式命名記憶體位置、記憶體區域以及編譯時的常量；ANSI C甚至允許運算式返回結構值（struct values）。功能性的語言一般允許變數直接使用執行時計算出的值，而不是指出該值可能儲存的記憶體位址。
常見的資料結構：

陣列
記錄
連結串列
堆疊
佇列
樹
圖
堆
雜湊

指令及流程控制[編輯]
一旦資料被確定，機器必須被告知如何對這些資料進行處理。較簡單的指令可以使用關鍵字或定義好的語法結構來完成。不同的語言利用序列系統來取得或組合這些語句。除此之外，一個語言中的其他指令也可以用來控制處理的過程（例如分支、迴圈等）。
參照機制和重用[編輯]
參照的中心思想是必須有一種間接設計儲存空間的方法。最常見的方法是通過命名變數。根據不同的語言，進一步的參照可以包括指向其他儲存空間的指標。還有一種類似的方法就是命名一組指令。大多數程式設計語言使用宏呼叫、過程呼叫或函式呼叫。使用這些代替的名字能讓程式更靈活，並更具重用性。
功能[編輯]
程式語言可透過機械、電腦來達成與完成人類需求的演算、功能與目的。
實體的傳輸連結[編輯]
透過低階程式語言或高階程式語言，將實體間接達成傳輸連結或控制實體。
應用程式的發展[編輯]
高階程式語言可發展多功能的應用程式軟體，如：作業系統、工程計算機軟體、轉檔軟體、燒錄軟體、播放軟體、網頁設計…等。
使用[編輯]
程式語言已超過上千種，大部份用在計算領域[5]。 程式語言和其他人類使用的語言在精準度和完整性上有很大的差異。
人們在用自然語言溝通時，內容可以不明確，甚至小的錯誤，而聽的人仍然可能理解說的人想要說的內容。但電腦不同，電腦「只做被告知要做的事」，無法理解程式設計者想要寫的程式。語言的定義、編程以及編程輸入的組合需完整定義程式執行時的外部特性。另一方面，演算法的概念可以表示為虛擬碼，是交織有自然語言和程式碼的程式語言，和其他人溝通時使用，此時就不一定要那麼精確。
程式語言提供定義片段資料的結構化機制，以及在資料中需自動進行的運算或是轉換。程式設計者利用程式語言提供的抽象化來表示計算的相關概念，這些概念則是由許多最簡單元素（稱為語言基元（英語：language primitive））的集合所組成[6]。程式設計就是指利用語言基元來撰寫新的程式，或是將舊程式改寫，配合新的應用或是新的環境。
電腦程式語言可能是以批次處理任務的方式執行，中間不需和使用者互動，也有可能是由用戶在直譯器中指定執行特定的的程式。若某一程式語言的是目的是在某一應用軟體（如Unix shell）或其他命令列介面執行其他程式，此程式語言會稱為手稿語言。
量測各程式語言的使用量[編輯]
很難去比較哪一種程式語言的使用量最大，而且「使用量」一詞也很難定義。某一種程式語言可能需要較多的時間進行開發，另一種程式語言可能產生的程式碼較長，第三種程式語言可能在CPU中執行的時間較長。有些語言在特定的領域仍十分受歡迎，例如COBOL在公司的資料中心仍相當常用，多半是在大型計算機上執行[7][8]，Fortran常用在科學及工程應用，C語言常用在嵌入式應用及作業系統中等。
有許多不同的量測方式不同程式語言使用的程度，不同的量測方式也有其各自的誤差：

計算徵才廣告中提到各程式語言的次數[9]。
計算教授或描述各程式語言書籍賣出的數量[10]。
佔計各程式語言目前仍在使用程式碼的長度，不過可能會低估一些公開搜尋不容易找到的程式語言[11]。
利用搜尋引擎計算找到不同程式語言的次數。

langpop.com在2013年整理了不同網站的資料，提出十大最受歡迎的語言如下：C語言、Java、PHP、JavaScript、C++、Python、Shell指令碼、Ruby、Objective-C及C♯.[12]。
歷史[編輯]
主條目：程式語言歷史
1940年代當電腦剛剛問世的時候，程式設計師必須手動控制電腦。當時的電腦十分昂貴，唯一想到利用程式設計語言來解決問題的人是德國工程師康拉德·楚澤。
幾十年後，電腦的價格大幅度下跌，而電腦程式也越來越複雜。也就是說，開發時間已經遠比執行時間寶貴。
於是，新的整合、可視的開發環境越來越流行。它們減少了所付出的時間、金錢（以及腦細胞）。只要輕敲幾個鍵，一整段代碼就可以使用了。這也得益於可以重用的程式代碼庫[13]。
參見[編輯]


程式設計語言列表
編譯器、直譯器
Hello World程式
手稿語言
程式設計
電腦科學、基本的電腦科學主題列表
教育程式語言
文學編程
程式語言理論
虛擬碼
軟體工程、軟體工程主題列表




電腦程式設計主題



參考文獻[編輯]


^ Ettinger, James (2004) Jacquard's Web, Oxford University Press
^ 語言系統簡介. .nuu.edu.tw. [2014-06-05]. 
^ C++語言漫談 (PDF). [2014-06-05]. 
^ MXL
^ HOPL: an interactive Roster of Programming Languages. Australia: Murdoch University. [1 June 2009]. This site lists 8512 languages. 
^ Abelson, Sussman, and Sussman. Structure and Interpretation of Computer Programs. [3 March 2009]. 
^ Georgina Swan. COBOL turns 50. computerworld.com.au. 2009-09-21 [2013-10-19]. 
^ Ed Airey. 7 Myths of COBOL Debunked. developer.com. 2012-05-03 [2013-10-19]. 
^ Nicholas Enticknap. SSL/Computer Weekly IT salary survey: finance boom drives IT job growth. Computerweekly.com. [2013-06-14]. 
^ Counting programming languages by book sales. Radar.oreilly.com. 2 August 2006 [3 December 2010]. 
^ Bieman, J.M.; Murdock, V., Finding code on the World Wide Web: a preliminary investigation, Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation, 2001
^ Programming Language Popularity. langpop.com. 2013-10-25 [2014-01-02]. 
^ Steven R. Fischer,. A history of language,. Reaktion Books,. 2003,. ISBN 186189080X.  請檢查|date=中的日期值 (幫助)


延伸閱讀[編輯]


Abelson, Harold; Sussman, Gerald Jay. Structure and Interpretation of Computer Programs 2nd. MIT Press. 1996. 
Raphael Finkel: Advanced Programming Language Design, Addison Wesley 1995.
Daniel P. Friedman, Mitchell Wand, Christopher T. Haynes: Essentials of Programming Languages, The MIT Press 2001.
Maurizio Gabbrielli and Simone Martini: "Programming Languages: Principles and Paradigms", Springer, 2010.
David Gelernter, Suresh Jagannathan: Programming Linguistics, The MIT Press 1990.
Ellis Horowitz (ed.): Programming Languages, a Grand Tour (3rd ed.), 1987.
Ellis Horowitz: Fundamentals of Programming Languages, 1989.
Shriram Krishnamurthi: Programming Languages: Application and Interpretation, online publication.
Bruce J. MacLennan: Principles of Programming Languages: Design, Evaluation, and Implementation, Oxford University Press 1999.
John C. Mitchell: Concepts in Programming Languages, Cambridge University Press 2002.
Benjamin C. Pierce: Types and Programming Languages, The MIT Press 2002.
Terrence W. Pratt and Marvin V. Zelkowitz: Programming Languages: Design and Implementation (4th ed.), Prentice Hall 2000.
Peter H. Salus. Handbook of Programming Languages (4 vols.). Macmillan 1998.
Ravi Sethi: Programming Languages: Concepts and Constructs, 2nd ed., Addison-Wesley 1996.
Michael L. Scott: Programming Language Pragmatics, Morgan Kaufmann Publishers 2005.
Robert W. Sebesta: Concepts of Programming Languages, 9th ed., Addison Wesley 2009.
Franklyn Turbak and David Gifford with Mark Sheldon: Design Concepts in Programming Languages, The MIT Press 2009.
Peter Van Roy and Seif Haridi. Concepts, Techniques, and Models of Computer Programming, The MIT Press 2004.
David A. Watt. Programming Language Concepts and Paradigms. Prentice Hall 1990.
David A. Watt and Muffy Thomas. Programming Language Syntax and Semantics. Prentice Hall 1991.
David A. Watt. Programming Language Processors. Prentice Hall 1993.
David A. Watt. Programming Language Design Concepts. John Wiley & Sons 2004.


外部連結[編輯]

開放式目錄計劃中和Computer Programming Languages相關的內容
開放式目錄計劃中和程式語言相關的內容
Syntax Patterns for Various Languages
電腦高階程式語言的發展歷程資訊圖










閱
論
編


程式語言分類






按平臺




.NET框架平臺語言



C++/CLI
C#
F#
IronPython
IronRuby
J#
Visual C#
VB.NET
Small Basic








Java虛擬機器上的語言



Java
Jython
JRuby
JScheme（英語：JScheme）
Groovy
Kawa（英語：Kawa）
Scala
Clojure
Kotlin








iOS蘋果手機平臺上的語言



Swift
Objective-C








Android手機平臺上的語言



Java








Fire OS（英語：Fire OS）手機平臺上的語言



Java








Windows Phone手機平臺上的語言



C#











按家族




C/C++語言



C
C++
Turbo C++
Borland C++
C++ Builder - C++/CLI
Visual C++元件擴充功能
Objective-C
Visual C++








BASIC語言




有行號



BASIC
BASICA
GW-BASIC
ETBASIC
GVBASIC








無行號



QBASIC
QuickBASIC
True BASIC
Turbo BASIC
PowerBASIC
FreeBasic
DarkBASIC
Visual Basic
Gambas
VB.NET
VBScript
VBA
REALbasic
Small Basic











Pascal/Delphi語言



Pascal
Turbo Pascal
Object Pascal
Free Pascal
Delphi
Lazarus











按範式




聲明式




函數式




Lisp家族



LISP
Scheme
Common Lisp
Clojure
Racket








ML家族



ML
Standard ML
OCaml
F#











Haskell
Scala
Erlang
Elixir
Clean
Miranda
Logo











邏輯式



Prolog











命令式




結構化




程序式



BASIC
Fortran
C
Pascal
Go








物件導向



Smalltalk
Java
C#
Objective-C
C++
Eiffel
Python
Ruby
Rust
Swift











非結構化







COBOL














超編程




泛型




模板



C++
D











Ada
C#
Delphi
Eiffel
Java
Swift
Visual Basic .NET











反射化



C#
ECMAScript
Java
Perl
PHP
Python
R
Ruby














手稿語言







Lua
Perl
PHP
Python
Ruby
ASP
JSP
Tcl/Tk
VBScript
AppleScript
AAuto（基於Lua）








ECMAScript衍生語言



ActionScript
CoffeeScript
Dart
DMDScript
ECMAScript
JavaScript
JScript
TypeScript








Shell語言



sh
bash
sed
awk
PowerShell
csh
tcsh
ksh
zsh











專業工具語言




科學與統計計算



FORTRAN
SAS
MATLAB
Scilab
GNU Octave
R
S-Plus（英語：S-Plus）
Mathematica
Maple
Julia








GPU用著色器語言



Cg
GLSL
HLSL








資料庫相關程式語言



xBase（英語：xBase）

Clipper
Visual FoxPro


SQL

PL/SQL
T-SQL
SQL/PSM（英語：SQL/PSM）


LINQ
XQuery（英語：XQuery）








置標語言




SGML家族




XML家族



XML
SVG
XML Schema
XSLT
XHTML
MathML
XAML
SSML











SGML
HTML














Curl











工業與輔助設計



AutoCAD











其它



組合語言
ALGOL
APL/J
Falcon
Forth
Io
MUMPS（英語：MUMPS）
PL/I
PostScript
REXX
SAC
Self
Simula
















閱
論
編


電腦語言分類









架構描述語言
硬體描述語言
標記語言
建模語言（英語：Modeling language）
程式語言
查詢語言
規約語言
樣式表語言（英語：Style sheet language）
模板語言
轉換語言（英語：Transformation language）
















閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。











權威控制



LCCN: sh85107313
GND: 4047409-4
BNF: cb13318353n（資料）
NDL: 00569224












 
						取自 "https://zh.wikipedia.org/w/index.php?title=編程語言&oldid=44047976"					
3 個分類：程序設計語言人工語言計算機技術隱藏分類：引文格式1錯誤：日期自2017年2月需補充來源的條目拒絕當選首頁新條目推薦欄目的條目自2017年2月有未列明來源語句的條目含有英語的條目包含規範控制信息的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AfrikaansAlemannischአማርኛAragonésالعربيةمصرىঅসমীয়াAsturianuAzərbaycancaتۆرکجهБашҡортсаBoarischŽemaitėškaБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBrezhonegBosanskiᨅᨔ ᨕᨘᨁᨗCatalàMìng-dĕ̤ng-ngṳ̄کوردیČeštinaЧӑвашлаCymraegDanskDeutschZazakiΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiFrançaisGaeilgeGalegoעבריתहिन्दीHrvatskiHornjoserbsceMagyarՀայերենInterlinguaBahasa IndonesiaInterlingueIlokanoIdoÍslenskaItaliano日本語La .lojban.Basa JawaქართულიTaqbaylitҚазақшаភាសាខ្មែរ한국어КыргызчаLatinaLëtzebuergeschLumbaartLietuviųLatviešuОлык марийМакедонскиമലയാളംМонголमराठीBahasa MelayuMirandésမြန်မာဘာသာPlattdüütschनेपालीNederlandsNorsk nynorskNorsk bokmålOccitanਪੰਜਾਬੀPolskiپنجابیPortuguêsRomânăРусскийРусиньскыйСаха тылаScotsSrpskohrvatski / српскохрватскиසිංහලSimple EnglishSlovenčinaSlovenščinaShqipСрпски / srpskiBasa SundaSvenskaதமிழ்తెలుగుТоҷикӣไทยTagalogTürkçeТатарча/tatarçaУкраїнськаاردوOʻzbekcha/ўзбекчаTiếng ViệtWinarayმარგალურიייִדישYorùbáBân-lâm-gú粵語 
編輯連結 





 本頁面最後修訂於2017年4月18日 (週二) 16:55。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 








C 程式語言教學













程式語言將成另一種全民語言，8 個國內外網站教你如何自學寫程式 | T客邦 - 我只推薦好東西













































Menu
T客邦


T客邦集團網路


T17
T客邦
DIGIPHOTO
MF變型男
玩車特區
電腦王
透視鏡




登入
註冊
 訂閱










加入粉絲團
















Close【8月開課】Raspberry Pi 3樹莓派寵物小車實作，從GPIO到OpenCV影像辨識，打造會看的自走車，一天學會



相關文章




          免費學寫基礎程式，「Hour of Code」又有新課程可以學
        
 


          2015 臺大黑客松成果全紀錄，各國的高手都做了些什麼？
        
 


          僅487byte，破記錄的最小西洋棋程式
        
 


          科技考古：史上首位程式設計師是女性，首個程式團隊也是六個女生
        
 


          在美國，寫什麼程式收入最高？答案是：Java
        
 











程式語言將成另一種全民語言，8 個國內外網站教你如何自學寫程式




Wendy
發表於 2014年10月17日 13:00


收藏此文





Twitter
Plurk























程式語言、程式設計、Java、C++ 這些聽起來很專門的用語，在未來都會是學習趨勢，就像 20 世紀大家開始學英文一樣，在許多國家很多小孩從小就開始學習程式語言，而台灣相對來說比較慢開始有這個觀念，這裡我們就整理了 8 個自學網站，讓你從零開始學習。




為什麼要學程式語言？
上個月 Google 等幾家科技大廠還有學術界（UC Berkely、Lead the Way）的專家討論，如何讓更多的人能夠一起參與未來？關鍵在於「數位素養」（digital literacy），什麼是數位素養？就是懂得運用電腦及網路資源來定位、組織、理解、估價和分析訊息的能力，雖然說「懂得運用」這四個字的定義非常模糊，但不可否認的，學習程式語言是培養數位素養的一種方式，只要擁有就能跑在其他人之前。

▲ 數位素養其實包含多種能力，包含有效溝通、批判性思考⋯等等
過去學習程式語言都被認為是要「解決問題」，讓程式跑的更快，所以矽谷的工程師們不斷想要突破，但是 Google 暑期程式設計課程的主管 Carol Smith 及UC Berkeley 教授 Armando Fox 都認為學習程式語言應該是要讓工具「為你所用」，創造自己的工具，讓工具做你想要的事。
另外，軟體工程師也在美國 Business Insider 的 「2014 百大最佳工作」拿下第一名，平均年薪 90,060 美金（約 270 萬台幣），而第二名的電腦系統分析師也有79,680美金，工作機會也日漸增多，是炙手可熱的職位。而程式語言百百種，Javascript、Java、Python、C、C++，學哪一種賺最多呢？美國的 msgooroo 網站則分析了 2014 上半年超過 150 萬則的人才招募廣告，發現奪下收入最高與需求量最大的程式語言是 Java，也許這個可以成為你學寫程式的理由。

▲ 學程式語言不再是工程師的專利了
要從哪一種程式語言開始？
就像上一段說的，程式語言有很多種，要從哪一種開始學習比較好，這個問題因每個人的需求還有對自己的期許都有不同，如果你是想要學習網頁設計，自己架設網站，那麼 HTML、CSS、jQuery 這三種前端的基本語言要先學會；如果是想要成為 app 的開發者，在 Android 系統上要懂 Java，在 iOS 系統上則是要會 Objective – C。前三種的入門門檻較後面兩者來的低。
Mashable 整理的「10 個必學程式語言」中也還有其他語言，列出來給大家參考：

C 語言：最古老且廣泛使用的程式語言，影響後面許多語言（如：C++、Objective-C、Java、C#），用於操作系統上，可以作為入門。
C++：C 語言的進階版，Firefox 及 Adobe 系列都是由這個語言構成，也用於系統軟體、應用程式軟體、遊戲。可以獨立於 C 語言學習。
PHP：用於網頁開發，Wordpress、Facebook 就是用 PHP 建構的。與 HTML 相較是後端的語言。
Python：物件導向、直譯式的高階程式語言，用於網站以及行動 App 等，Instagram、Pinterest、Google、Yahoo! 皆使用 Python 開發而成。 


▲ 看起來很複雜，其實拆開後慢慢學習也會懂！
 
不管選擇哪一種，建議大家都依照自己平常使用的需求或是興趣選擇。往下一頁看哪裡可以學到這些程式語言。

上一頁 1 2 3 下一頁



Shares

Facebook
LINE
Twitter
Google+











Facebook

馬上按讚 加入T客邦 3C 科技


        標籤：新聞, coding, 程式語言, 程式設計, 自學, 好用






Plurk 分享
 


Twitter 分享
 


Google+ 分享
 




更多3C新消息，快來加入T客邦粉絲團

Facebook T客邦的臉書基地
Facebook T客邦 3C 科技
Plurk T客邦玩科技
Twitter @techbang
Google+ T客邦粉絲團




上一則LINE for iPad 版本，讓 iPhone 及 iPad 同時登入不打架
下一則想要隨處都可站著工作？試試紙做的可攜式站立工作台

你可能有興趣的文章







免費學寫基礎程式，「Hour of Code」又有新課程可以學
還記得不久之前我們介紹了八個好用的自學程式語言網站嗎？現在你又多了一個選項了喔！而且還是由 A...

 




2015 臺大黑客松成果全紀錄，各國的高手都做了些什麼？
經歷四十小時的馬拉松 Hacking，第三屆 2015 臺大黑客松終於8/23圓滿落幕。這項一...

 








僅487byte，破記錄的最小西洋棋程式
西洋棋的棋盤由64個黑白相間的網格與32顆棋子組成，2位棋士分別操作國王、皇后、城堡、騎士、主...

 




科技考古：史上首位程式設計師是女性，首個程式團隊也是六個女生
在我們的既定印象裡，所謂的「程式設計師」或是「電腦工程師」都是男生的職業，相關的科系（資工系、...

 




在美國，寫什麼程式收入最高？答案是：Java
大家對於工程師的印象不外乎是高收入還有熬夜加班到爆肝，不過是不是真的每種程式語言的工程師都能有...

 


next


你也可能喜歡這些文章



更多相關文章








使用 Facebook 留言










我要推





      1. 
      ATMJin （發表於 2014年10月17日 14:09）

      
引用回覆
檢舉



      其實比較想要冷門一點的語言譬如說Fortran或MATLAB之類的熱門的語言隨便找就有很多學習資源了
    








我要推





      2. 
      ulyssesric （發表於 2014年10月17日 15:07）

      
引用回覆
檢舉



      > 如果你還有其他推薦的網站也不妨在下麵回應和大家分享。當然是 stackoverflow.com教科書、投影片、線上課程都只是新兵中心，當你真的來到戰場上，你需要不是教戰守則，而是眾多老鳥教導你如何活下來。
    








我要推





      3. 
      Jono Bacon （發表於 2014年10月17日 16:05）

      
引用回覆
檢舉



      人人都可以學寫程式就像每個人都可以學煮菜一樣, 食譜也是到處找都有, 但煮的好不好吃可不是看食譜照煮就可以了
    








我要推





      4. 
      幽理之刻 （發表於 2014年10月17日 23:06）

      
引用回覆
檢舉



      ※ 引述《Jono Bacon》的留言：> 人人都可以學寫程式就像每個人都可以學煮菜一樣, 食譜也是到處找都有, 但煮的好不好吃可不是看食譜照煮就可以了以前找不到食譜，現在比較多食譜了
    








我要推





      5. 
      Jono Bacon （發表於 2014年11月05日 16:14）

      
引用回覆
檢舉



      ※ 引述《幽理之刻》的留言：> ※ 引述《Jono Bacon》的留言：> > 人人都可以學寫程式就像每個人都可以學煮菜一樣, 食譜也是到處找都有, 但煮的好不好吃可不是看食譜照煮就可以了> > 以前找不到食譜，現在比較多食譜了但現在人做菜有以前人好吃嗎? 食譜多不代表人人都可以當食神啊
    








我要推





      6. 
      Brian Hu （發表於 2015年2月24日 18:51）

      
引用回覆
檢舉



      這個網站是中文的，給想要自學程式設計的朋友參考~http://www.gocoding.today/






發表回應

          （請先登入會員方可留言。)
      


謹慎發言，尊重彼此。按此展開留言規則

留言板發文規則：
請註意！留言要自負法律責任，相關案例層出不窮，請慎重發文！

請勿一文多貼灌水洗板或發表無意義字串，違者直接刪除留言。
請勿張貼廣告，不允許任何形式的商業廣告行為，包含頭像、簽名檔等。
禁止發表非官方所舉辦的團購性質活動，違者直接刪除留言。
發言時請勿涉及人身攻擊、侮辱、色情或其他有違社會善良風俗之內容，違者直接刪除留言。
嚴禁發表討論破解軟體、註冊碼、音樂、影片、軟體複製等違反智慧財產權之留言。
請尊重他人之文章著作權，轉載者請標明來源。
















最愛排行榜



1
史上最致命字型！微軟 Calibri 字型涉入巴基斯坦政治醜聞案，甚至可能將導致巴基斯坦總理下臺


2
「不規則」螢幕，iPhone 8 實機照曝光


3
擁有11年歷史的經典播放器 Media Player Classic  Home Cinema宣佈停止更新：因為沒錢繼續下去 


4
你家電視盒常看的影集都找不到了嗎？中國A站、B站影片資源全被下架，日劇日影內容幾乎全滅


5
故宮博物院宣佈釋出7萬張文物圖檔免費下載，商業使用也OK！


6
小米發表旗下最小、最便宜的小米電視4A 32吋版，台幣不到五千元可入手


7
這個人玩比特幣賺了2500萬美元，現在他開始環遊世界


8
日本網友瘋傳【真。艦隊 Collection】，橫須賀港全日本重要軍艦幾乎一次集結







評測文章





【鏡頭評測】散景之皇完整解析 Sony FE 100mm F2.8 STF GM OSS （附與 135mm STF 比較）
 



【iOS 11 Public beta 2 功能實測】iPhone 控制中心大更新、錄製螢幕更方便
 



耳機界的超級小鋼炮！DIKE DEB500真無線藍牙耳機，傳遞優質震撼聽感
 



幾大要點，教你如何挑選最適合的防盜包
 



更多評測文章 »




歷史上的今天





大還要更大，Sony、華碩、小米、華為、OPPO 五款 6 吋以上大螢幕規格比較
 



周永明又上臺發表了一款新的VR產品，只是這次他代表的不是HTC
 



還在聽天天動聽、蝦米、網易雲音樂？7月過後中國音樂平臺能聽的歌將越來越少
 



4K世代 手機記憶卡錄影不跳格-UHS-I U3高速卡紛紛上市，實測點破規格迷思
 



Android 架構之亂，x86 挑戰 ARM 大軍，效能、相容性、續航力完全測試 
 







最新活動





輕巧帶著走，讓每一刻都成為音符相伴的那一刻！Soundmatters Mōment 一週試用心得出爐！
 



【課程】LinkIt 7697物聯網應用實作，串接MCS雲服務、全新開發工具好上手、自製APP與硬體互動
 



【驚喜包公佈】超限額體驗日本無時差血拚團 GO ～ Buyee 讓你一鍵享受零時差購物。爽買一波再帶 PS4 回家大玩特玩唷！
 



【課程】Raspberry Pi 3樹莓派寵物小車實作，從GPIO到OpenCV影像辨識，打造會看的自走車，一天學會
 



更多活動 »





業界動態


G-SHOCK & BABY-G 2017 Denim Series 全新丹寧對錶 迎接浪漫七夕情人節 甜蜜破「錶」最佳獻禮
Western Digital推出新款My Passport™ Ultra可㩗式硬碟 讓消費者輕鬆備份數位生活
台灣Panasonic創造員工有感的幸福職場
科技新櫃裝修攻略！ 電視櫃與電視牆比例到底該怎麼抓? 原來最好的比例是…
創意無限延伸 十銓科技推出多埠USB充電座『方塊充』WD02
扭力大師 MT-09強悍登場

更多動態 »





T客邦 3C 科技粉絲團






header
home




















程式語言









































Developer Network
Developer Network
Developer




登入




MSDN 訂閱




取得工具





















































很抱歉。您所要求的內容已遭移除。將會在 1 秒內自動重新導向。





設計分散式應用程式
規劃分散式應用程式

選擇工具和技術





選擇工具和技術
程式語言




程式語言




程式語言

















設計工具 

基礎結構技術 

安全性模型 

程式語言 

資料存取技術 

分散式應用程式的通訊 

Visual Studio 中的 XML 



TOC

 
摺疊目錄
展開目錄




本文件已封存並已停止維護。



本文件已封存並已停止維護。

程式語言



                Visual Studio .NET 2003
            




  選擇程式語言要依據您的語言使用經驗以及您所建置之應用程式的範圍而定。小型的應用程式通常只使用一種語言來建立，但使用多種語言來開發大型應用程式並不是件稀奇的事。 例如，如果您正在使用現有的 XML Web Service 來擴充應用程式，您可能會使用只需花費很少或不需花費程式設計功夫的指令碼語言。如果是主從式應用程式，您可能會選擇最習慣使用的單一語言來設計整個應用程式。如果是新的企業應用程式，因為需要有為數眾多的開發人員小組來建立可跨多重遠端站台而部署的元件與服務，那麼最佳的選擇可能是依據開發人員的技術與長期維護的期望來使用數種語言。 .NET 平臺程式設計語言 (包含 Visual Basic .NET、Visual C#、Managed Extensions for C++，以及各種廠商的許多其他程式語言)，是經由一組常用的統一類別來使用 .NET Framework 的服務與功能。.NET 的統一類別提供了一致性的方法以存取平臺功能。如果您學會使用類別庫，就會發現所有工作都會依循相同的制式架構。您將不再需要學習與操控不同的 API 架構以撰寫應用程式。 在大部分情況下，您都可以有效的使用所有 Microsoft 程式語言。然而，每一個程式語言都有其相對強勢之處，您應該會想要瞭解每一個語言獨特的功能。下列章節會協助您選擇開發應用程式時，所需的正確程式語言。 Visual Basic .NET Visual Basic .NET 是 Microsoft 的 Visual Basic 語言的新世代產品。您可以使用 Visual Basic 來建置 .NET 應用程式，包括 Web 服務與 ASP.NET Web 應用程式，既快速又容易。Visual Basic 建立的應用程式是建置在 Common Language Runtime 的服務之上，並充分利用 .NET Framework 的優勢。 Visual Basic 有許多新的與改善的功能，例如繼承、介面與多載化 (Overloading)，讓它成為強大的物件導向程式語言。其他新的語言功能還包括無限制執行緒 (Free Threading) 和結構化例外處理 (Structured Exception Handling)。Visual Basic 可和 .NET Framework 與 Common Language Runtime 完全整合在一起，以提供語言互通性 (Interoperability)、記憶體回收、增強安全性以及改良的版本控制支援。Visual Basic 支援單一繼承並建立 Microsoft Intermediate Language (MSIL)，作為對機器碼編譯器的輸入。 Visual Basic 相對上是比較容易學習與使用的，並且 Visual Basic 在過去十年間已經成為成千上萬個開發人員的程式語言選擇。學會使用 Visual Basic 可以應用在很多方面，例如可在 Visual Studio 中撰寫巨集，並可在如 Microsoft Excel、Access 與 Word 等應用程式中提供程式設計功能。 Visual Basic 提供一些常用之專案類型的原型 (Prototype)，包括：

 Windows 應用程式。 類別庫。 Windows 控制項程式庫。 ASP.NET Web 應用程式。 ASP.NET Web 服務。 Web 控制項程式庫。 主控台應用程式。 Windows 服務。  如需詳細資訊，請參閱 Visual Basic 語言與使用巨集自動執行重複的動作。 Visual C# .NET Visual C# (發音成 C Sharp) 是專門為了快速而輕鬆的建立 .NET 應用程式 (包括 Web 服務與 ASP.NET Web 應用程式) 而設計的一套程式語言。使用 Visual C# 寫成的應用程式是建置在 Common Language Runtime 的服務之上，並充分利用 .NET Framework 的優勢。 C# 是一種簡單、優雅、型別安全、物件導向式的語言，是 Microsoft 新近開發的程式語言，可用於建置各種類型的應用程式。任何熟悉 C 以及相似語言的人，會發現改用 C# 並沒有什麼問題。C# 的設計是要將快速的開發方法帶給 C++ 的程式設計人員，而不需犧牲 C 與 C++ 的強大性與控制性。因為繼承這樣的傳統，C# 對 C 與 C++ 之間擁有很高的相似性，使得熟悉這些語言的開發人員很快就能使用 C# 來提高生產力。C# 提供內建程式碼信任機制以得到高層級的安全性、記憶體回收與型別安全。C# 支援單一繼承並建立 Microsoft Intermediate Language (MSIL)，作為對機器碼編譯器的輸入。 C# 可和 .NET Framework 與 Common Language Runtime 完全整合在一起，以提供語言互通性、記憶體回收、增強安全性以及改良的版本控制支援。C# 簡化並現代化了 C 與 C++ 的一些比較複雜的方面，特別是命名空間 (Namespace)、類別、列舉型別 (Enumeration)、多載化與結構化例外處理。C# 還排除了 C 與 C++ 的一些功能，例如巨集、多重繼承與虛擬基底類別 (Virtual Base Class)。對於目前的 C++ 開發人員而言，C# 提供了強大、高生產力的另一個語言選擇。 Visual C# 提供一些常用之專案類型的原型，包括：

 Windows 應用程式。 類別庫。 Windows 控制項程式庫。 ASP.NET Web 應用程式。 ASP.NET Web 服務。 Web 控制項程式庫。 主控台應用程式。 Windows 服務。  如需詳細資訊，請參閱 Visual C# Standard 版功能與 C# 語言教學課程。 Visual C++ .NET Visual C++ .NET 是 Microsoft Visual C++ 語言的新世代產品。Visual C++ 一直是建立高效能 Windows 與全球資訊網 (World Wide Web) 應用程式的最佳語言。 Visual C++ 提供一些重要的程式庫來協助您撰寫應用程式，包括 Active Template Library (一組用於 COM 物件的範本式 C++ 類別)、ATL Server 程式庫 (一組用於建立 Web 應用程式、Web 服務以及其他伺服器應用程式的原生 C++ 類別) 與 Microsoft Foundation Classes (MFC，支援寫給 Windows API 之應用程式的一組類別)。 Visual C++ 提供一些常用之專案類型的原型，包括：

 Active Template Library (ATL) 專案。 ATL Server 專案。 ATL Server Web 服務。 自訂精靈。 延伸預存程序 DLL。 Makefile 專案。 ASP.NET Web 服務。 類別庫 (.NET)。 主控台應用程式 (.NET)。 Windows 控制項程式庫 (.NET)。 Windows Form 應用程式 (.NET) Windows 服務 (.NET) Microsoft Foundation Classes (MFC) ActiveX 控制項。 MFC 應用程式。 MFC DLL。 MFC ISAPI 擴充程式 DLL。 Win32 專案。  如需詳細資訊，請參閱 Visual C++ 與 Visual C++ .NET Standard 版。 Managed Extensions for C++ 如果您正在建立新應用程式或元件，您可以使用目前的 C++ 知識，以 Managed Extensions for C++ 來撰寫 Managed 程式碼。使用 Managed Extensions 時，您可以取得 Common Language Runtime 所提供的支援與服務等益處 (例如記憶體管理、跨程式語言的整合、程式碼存取安全性以及物件的自動存留期控制)。 Managed Extensions for C++ 也提供了簡單的方式，以便將現有的應用程式整合至 .NET Framework。例如，您可能需要將一些 Unmanaged 程式碼移植至 .NET。因為您已經有先前編譯的靜態、連結程式庫、DLL 與各種 Unmanaged C++ 類別，您可以直接將現有的 Win32 程式碼編譯成 .NET 應用程式。然後，當時間許可時，您還可以利用 Managed 程式碼重新建置元件。 如需詳細資訊，請參閱 Managed Extensions for C++ 程式設計。 Transact-SQL Transact-SQL 是用來儲存、修改與擷取 Microsoft SQL Server 關聯式資料庫中資訊的原生語言。您也可以使用 Transact-SQL 來建立資料庫以及儲存在資料庫中的任何物件，例如資料表、資料行、觸發程序 (Trigger)、索引鍵、索引、檢視、預存程序和函式。Visual Studio 編輯器與 Visual Database Tools 所提供的設計工具，可完全支援 Transact-SQL。  註意   Visual Database Tools 也可以連接至 Oracle 資料庫。當您使用 Oracle 資料庫時，Visual Database Tools 可以正確地處理 Oracle 的特定SQL 語法。如需詳細資訊，請參閱 Oracle 資料庫。 如需詳細資訊，請參閱 SQL Server 2000 與 Visual Database Tools。 指令碼語言 當具有 Internet 功能的應用程式獲取技術上的註目時，與分散式運算環境有關聯之程式設計問題的解決方案也持續在開發。一般來說，指令碼語言並不是什麼新技術，但一些很有用的指令碼語言是最近才開發的。使用這些新的指令碼語言，您就可以輕鬆的在本機桌面上或遠端主控臺中執行指令碼，以處理系統管理工作與程式事件。 Windows Script Host Windows Script Host (WSH) 是 32 位元 Windows 平臺上，與語言無關的指令碼環境。使用 WSH，Microsoft 提供 VBScript、JScript 與 JScript .NET 指令碼引擎。這些指令碼語言可以用於 Web 伺服器的 ASP 網頁、用於在 Internet Explorer 中執行的 HTML 網頁，以及用於 Windows 98 與 Windows 2000 上的 Windows Script Host 指令碼引擎中。 WSH 可以使用任何指令碼語言，來自動化伺服器上的系統管理工作。例如，系統管理員可以撰寫 VBScript 以建立新的虛擬目錄，然後當 WSH 在背景運作時，從命令列執行此指令碼檔案，以便在網站上建立新的虛擬目錄。此外，系統管理員可以針對多個網站或多個實體伺服器，撰寫單一指令碼。 協力廠商有提供其他語言 (例如 Perl、TCL、REXX 與 Python) 的 ActiveX 指令碼引擎。 如需詳細資訊，請參閱 Windows Script Host。 VBScript Microsoft Visual Basic Scripting Edition (VBScript) 是 Microsoft Visual Basic 的子集  如果您曾經用過 Visual Basic，就會覺得它看起來很熟悉。然而，卻不是完全相同。因為 VBScript 的設計是專門讓您用在 Internet Explorer (IE) 瀏覽器中，所以它沒有包含通常是屬於指令碼範圍外的功能，例如檔案存取與列印。不過，搭配 VBScript 使用 FileSystem 物件來操作檔案倒是很常見。 VBScript 將 Active Scripting 帶到各種環境中，包括 IE 中的 Web 用戶端指令碼以及在 Microsoft Internet Information Services (IIS)、Microsoft Internet Security and Acceleration Server (ISA) 與 Sun Solaris 中的 Web 伺服器指令碼。VBScript 是一種快速、可攜式並且解譯過的物件導向式指令碼語言，可處理直接內嵌於 HTML 網頁中的原始程式碼。您可以使用 VBScript 將智慧功能與互動功能加入 WSH、ASP 與 HTML 網頁中。 就像 JScript 一樣，VBScript 會使用 Windows Script 和主應用程式溝通。使用 Windows Script 時，瀏覽器與其他主應用程式不需要在每一個指令碼元件中使用特殊的整合程式碼。Windows Script 會啟用主機來編譯指令碼，取得和呼叫進入點，並管理開發人員可用的命名空間。 VBScript 是一種型別鬆散的語言。型別鬆散的意思是說您不需要明確地宣告變數的資料型別。實際上，您也無法在 VBScript 中明確地宣告資料型別。此外，在許多情況下，VBScript 會在需要時自動執行轉換作業。例如，如果您將數字加入包含文字 (字串) 的項目中，數字就會轉換成文字。 如需詳細資訊，請參閱《VBScript User's Guide》。IE、IIS 與 ISA 都有提供 VBScript，或者您也可以從 Microsoft Windows Script 技術網站 (http://www.microsoft.com/taiwan/products/develop/scripting/default.asp) 下載 VBScript。 JScript Microsoft JScript 是專為 Web 網頁指令碼而設計的程式語言。JScript 符合 ECMA 262 語言規格。JScript 是專門用於 Internet 的強大指令碼語言。就像 VBScript 一樣，JScript 是一種解譯的、物件導向式的指令碼語言，可處理直接內嵌於 HTML 網頁中的原始程式碼。JScript 可在 Internet Explorer 與 Netscape 瀏覽器上執行。 就像 VBScript 一樣，JScript 也是使用 Windows Script Host 與主應用程式溝通。使用 Windows Script Host ，瀏覽器與其他主應用程式不需要在每一個指令碼元件中使用特殊的整合程式碼。Windows Script Host 會啟用主機來編譯指令碼，取得和呼叫進入點，並管理開發人員可用的命名空間。 JScript 是一種型別鬆散的語言。型別鬆散的意思是說您不需要明確地宣告變數的資料型別。實際上，您也無法在 JScript 中明確地宣告資料型別。此外，在許多情況下，JScript 會在需要時自動執行轉換作業。例如，如果您將數字加入包含文字 (字串) 的項目中，數字就會轉換成文字。 如需詳細資訊，請參閱 JScript。 JScript .NET JScript .NET 是 Microsoft 實作 ECMA 262 語言的新世代產品，是和 ECMAScript 第 4 版一起開發的。它是專門設計在 Common Language Runtime 內執行，以管理程式碼的執行，並提供可讓開發程序更簡易的服務。使用 JScript .NET 時，您可以使用的功能有：跨程式語言的整合、跨程式語言的例外處理、增強的安全性、版本控制與部署支援、元件互動的簡化模型以及偵錯與分析服務。 JScript .NET 將傳統 JScript (可以完全回溯相容) 的現有功能組和 Common Language Runtime 以及類別式語言的最佳功能結合在一起，為您提供了所有的優點。JScript .NET 改良的功能包括真實編譯的程式碼、具型別和不具型別的變數、類別 (具有繼承、函式多載化、屬性存取子等等)、封裝、跨程式語言支援以及存取 .NET Framework。 如需詳細資訊，請參閱 JScript .NET 的新功能。 可延伸標記語言 (XML) XML 提供描述結構式資料的格式，讓您可以有精確的內容宣告以及跨多種平臺的有用之搜尋結果。XML 是依據目的來定義資訊與資料，而不是依據其表現方式，這樣數個應用程式就可以用可促進多樣化的應用程式重新使用與擴充性的方式來使用資訊與資料。XML 是日漸重要的中繼標記語言，很適合在 Internet 上使用。  重要的是您必須知道 .NET Enterprise Servers 的各種產品都支援 XML 作為資料交換格式。例如，SQL Server 2000 的 SQL XML 功能讓 .NET 應用程式可以用 XML 文件的方式，來取得資料庫的查詢結果，而不是取得關聯式結果集。作為 .NET 平臺的重要技術，XML 正開啟了用戶端與提供者 Web 式服務的新世代。 XML 並不是 HTML 的替代方案。雖然兩者都是標記語言，它們卻以互補的方式在運作。HTML 的強勢之處是在資訊的顯示方面，而 XML 則是描述資訊的優異方法。XML 的強勢之處，有部分是由於它能將使用者介面與所顯示資料分開的能力，如先前所述，這樣就能達到跨平臺的效能。 在分散式應用程式架構中，XML 的訊息功能可讓您以標準傳輸機制，輕易地透過防火牆並在異質性系統之間移動資料。無論您的應用程式需要的是什麼  匯入、匯出、資料交換、與其他應用程式的互通性 (例如 Office 2000 或 Exchange 2000)、剖析、修改、資料存取、資料儲存  XML 都是很好用的資料交換格式。Visual Studio .NET 提供一些很好的工具，可以與 XML 以及您最愛的程式語言搭配使用。 如需詳細資訊，請參閱 Visual Studio 中的 XML。 Visual J++ Microsoft 提供 Java User Migration Path to Microsoft .NET (JUMP to .NET ─ 「跳」至 .NET)，作為可讓程式設計人員將 Java 語言專案保留、增強與轉換至 Microsoft .NET 平臺上的一組技術與服務。若使用 JUMP to .NET，在將應用程式與元件擴充至 .NET 平臺上時，您還可以繼續利用現有 Visual J++ 技術與原始程式碼的優勢。如果您熟悉 Visual J++ 語言，就可以用它來建立新的 .NET 應用程式，或是使用自動化轉換工具將現有的程式碼，輕鬆地遷移至新的 C# 語言。  如需詳細資訊，請參閱 Microsoft Visual J++ 網站 (http://msdn.microsoft.com/visualj/jump/default.asp)。 其他語言 Microsoft 和許多公司合作，將他們的程式語言帶到 .NET 平臺。除了 Microsoft 所提供的語言之外，還有許多以 .NET 平臺為目標的其他語言，包括：

 COBOL for Microsoft .NET。 Perl for Microsoft .NET。 Eiffel for Microsoft .NET。 Python for Microsoft .NET。 Pascal for Microsoft .NET。 Mercury for Microsoft .NET。 Mondrian for Microsoft .NET。 Oberon for Microsoft .NET。 Salford FTN95 (Fortran) for Microsoft .NET。 SmallTalk for Microsoft .NET。 Standard ML for Microsoft .NET。 Dyalog APL for Microsoft .NET。  如需詳細資訊，請洽詢相關程式語言廠商。 請參閱 決策圖表 | Visual Basic 語言 | Visual C# 語言 | Visual C++ | JScript .NET 的新功能 | Visual Studio 中的 XML  


顯示:

受繼承
        

受保護
        







列印

匯出 (0)
            







列印

分享
            













本文內容




















本頁對您有幫助嗎？
是
否





其他意見反應？


剩餘 1500 個字元

提交
略過此項







謝謝！
我們非常感謝您提供的意見反應。










© 2017 Microsoft













Java 程式語言教學






















哪種程式語言才有未來？ | iThome





















移至主內容















































 










程式人｜林信良


 

哪種程式語言才有未來？
 面對該選擇哪種程式語言才有未來這樣的問題，我也只能說，射飛鏢決定就是！

 






 
按讚加入iThome粉絲團









 




 
文/林信良
|
2015-04-24發表
  

 









 想跨入程式設計領域的新人，幾乎都會想問這個問題：「哪種程式語言才有未來？」
走過比較多路的前輩們會說，語言不是重點，當然這是經驗談，不過對新人來說，這有點像是屁話，畢竟總還是要個起頭，別說新人了，正在這個領域的開發者，老實說也有不少人，無時不刻地思考著這個問題。
畢竟研究一門語言需要時間與心力，哪個人不希望自己的投入的成本能夠回收？誰不希望選擇的語言能發光發熱？
相中有未來的語言？
有沒有可能相中一門有未來的語言？有的！老實說，當初決定轉換跑道的我，在2000年左右就「運氣」不錯地相中了Java這個語言，雖不算是很早就投入Java，但當時正值網際網路興起、Java生態圈百花齊放、話題不斷的時間點，雖然網路泡沫重創當時Java的主子──Sun公司，但至少2000年到2005左右的這段時間，Java仍算是一段不錯的榮景，我就是在這段時間搭上了順風車，在Java這塊領域有了點名氣，即使後續Sun走下坡、Java發展停頓，然而，畢竟一門熱門的語言不會馬上失去舞臺，後續仍是靠著Java繼續混口飯吃。
那麼，該怎麼相中一門有未來的語言？現在有不少程式語言趨勢的統計，分別從不同變因來排行各個程式語言，這似乎是個用來選擇語言的參考依據，最保守的方式，是選擇各排行榜中都佔有前幾名席位的語言，就算它後來運氣不好地走下坡了，至少仍會有一定的需求，如果要刺激一點，想選個高風險、高報酬的語言來投資，那就看看上升趨勢最猛的，接下來就「賭」它能一直持續突進了！
不過相對來說，依照排行榜選擇語言，仍是比較保守的作法，也會因此而錯失了那些目前不被青睞、靜待翻身的語言。例如古老的Ruby語言，由於電腦效能不斷提升，以及大家對Java生態圈中各種臃腫框架的厭惡，加上《Beyond Java》中大力推棒Ruby與Rails，造就了Ruby這門程式語言的榮景；幾乎是同時地，Google的Gmail等線上應用程式積極運用了JavaScript，令開發者重新看待這門史上被誤會最大的語言，使得JavaScript鹹魚翻身，其應用更進一步橫跨前後端，甚至嵌入式系統，後續生態圈出現百花齊放的盛況，比之當年Java，可說是有過之而無不及。
就算是盛極一時而後衰退的語言，也有重新復甦的可能呢！由於多核心運算的興起、大數據（Big data）的話題，使得平行運算日益受到重視，而適合平行運算的函數式典範逐漸受到青睞，後來決定重新加入Lambda的Java 8，目前看來已經得到不少開發者的肯定，甚至之前號稱可取代Java的Scala，現在也有了Java 8會減少其存在必要性的聲音出現，想到當初決定研究一下函數式，總還是覺得自己「運氣」真好！
程式語言的未來是指什麼？
只要你能回顧歷史，總能說出個前因後果，來解釋一門語言何以會興衰，這或許是許多想跨入程式設計領域的新人，會想從走過這段歷史的人身上詢問如何選擇的原因，然而問題在於，現在的你無法穿越至未來，以便回顧未來至現在這個時間點，不然，我也很想知道，接下來到底哪些語言會竄起，因為自己都沒辦法回答這個問題，面對選擇哪種程式語言才有未來這樣的問題，我也只能說，射飛標決定就是！
然而，如果你問我，為何當初相中Java這門語言，我就可以確切地告訴你原因，實際上，Java並不是我學習的第一門語言，在這之前，我摸過C、C++、VB、PHP等，後來會選擇潛心研究Java的原因有幾個，相關書籍文件多到讀不完，有集聚臺灣許多Java開發者的Javaworld@TW論壇可以交流，有開放原始碼的各式框架可以玩，我可以從這些要素中，盡情地擷取Java這門語言在程式開發上需要知道的資訊，不用擔心資訊匱乏的問題。
那麼，你說這門語言的未來呢？沒有想過嗎？說沒有是騙人的，現實面來說，我還是想過，現在選擇的Java將來能不能賺錢糊口，不過坦白說，這我比較不擔心，一個書籍文件如此多，討論人口如此多、開放原始碼如此多的語言，不可能沒有工作機會，唯一比較要擔心的，是自己的能力夠不夠格挑選工作的問題，至於後來能在這個語言上混出了些名聲，真的只能說是運氣，完全是在意料之外。
從方纔的現實面考量來說，對於初入程式設計領域的新人，一門有未來的語言，或許其實是指可以有工作機會，甚至有高薪工作機會的語言，如果是這樣，那麼隨便一個語言排行榜前十名，或者是坊間補習班課程中的程式語言，都有這個機會，如果只是指這樣的未來，那麼選擇哪種語言，跟運氣基本上已經沒有關係，努力的成份，反而才是最重要的了！
從興趣中選語言！
只是既然要努力，也就不要選擇一個自己都討厭的東西啃個半死，因此，選個自己有興趣的語言就是了。
造就你對一門語言有興趣的因素可能有幾個，也許是因為它可以寫你有興趣的手機App、網頁前後端、嵌入式，也許是最新經常看到這門語言的相關新聞，也許是FB的朋友中，有些人成天在講這個語言，甚至是發現到某語言，經常會舉辦XXX Girls這類引起你好奇心的活動，找幾個IT新聞網站，有空上去瀏覽幾個感興趣的標題，就能培養一下初步的概念。
實際上，秉持著一名程式設計師，每年都要學一種新語言想法的我，在選擇下一門想研究的語言時，多半也有著這樣的過程，這並非寄望將來它會發光發熱，有時甚至只是想多培養一些想法而去學一門語言（此時，常會戲稱純學身體健康的），當然，這也是基於興趣的一種選擇。
如果真的找不出興趣，那麼就暫且選擇一門自己看得順眼，且可以跨越多個領域的語言，像是Java、JavaScript、Python等，基本上，在手機App、網頁前後端、嵌入式等多個領域，都已看到相關應用，因此，可以將重點先擺在是否能掌握語言。
這因人而不同，有人愛Java的嚴謹，有人愛Python的簡明，有人愛JavaScript的自由，網路上有許多這類語言的快速教學，像是「learn x in y minutes」這網站可做初步參考。
使用一門可跨越多個領域的語言，其實就是在給自己一個機會，探索程式開發中各個領域，並從中熟悉語言、設計邏輯、摸索生態圈，甚至是培養出特定領域的領域知識。
不管你選擇哪一門語言做為開始，這首次的探索一定是很慢的，你可能在這中間找到自己喜愛的領域，因而重新選擇另一門擅長該領域的語言也沒有關係，就像不少人就在快速開發這塊揚棄了Java而選擇了Rails/Ruby，若能如此，或許已約略知道未來的方向。
語言不重要，到底是？
每當出現程式語言未來、重要性的討論時，總會有「語言不重要」的相關說詞出現，多半伴隨著領域知識才重要的講法出現，這通常是當事人解決問題的能力已經夠強大，而語言只佔能力中一小部份，甚至是有能力從數種語言選出最適合者，來解決問題，從解決問題需要的能力比例上來看，這樣的結論是沒有錯。
不過，對跨入程式開發的新人來說，還是得選擇一門合適的語言，而能說出語言不重要這樣的話，則是將來要努力達到的目標，這樣選擇哪個語言都會有未來，否則，單純只希望選到一門有未來的語言，希望機會可以多到爆，即使自己能力不足，也能輕鬆獲取機會，那真的就只能純賭運氣了！
 



作者簡介



 
 
 

林信良
因在網路上經營「良葛格學習筆記」（openhome.cc）而聞名，曾任昇陽教育訓練中心技術顧問、甲骨文教育訓練中心授權講師，目前為自由工作者，專長為技術寫作、翻譯與教育訓練。喜好研究程式語言、框架、社群，從中學習設計、典範及文化。閒暇之餘記錄所學，技術文件涵蓋C/C++、Java、Ruby/Rails、Python、JavaScript、Haskell等多個領域。

  

 
































 







 Advertisement


 




 

 

更多 iThome相關內容


  
 從貝茲曲線到曲面 

 程式、數學與Maker 

 投資組合與技能樹 

 算錢學問大 

 Reactive與Java 9 

 函式首要之務 
 
 






 







 

熱門新聞






 


英國Wi-Fi業者使壞，讓2.2萬名用戶無意中同意去掃流動廁所

2017-07-18
 
 






 


Google 兩步驟驗證將以手機提示取代簡訊

2017-07-17
 
 






 


【AI關鍵技術】三大熱門深度學習框架新進展

2017-07-19
 
 






 


硬體不相容，部份英特爾Atom裝置無法升級Windows 10 Creators Update

2017-07-18
 
 






 


災難！CoinDash首度發行貨幣當天就被駭，損失近700萬美元

2017-07-18
 
 






 


微軟亞洲研究院院長洪小文：越複雜越不管用，AI最適合封閉型的高重複性任務

2017-07-17
 
 






 


安撫使用者不滿情緒，Skype聯絡人狀態顯示功能回來了!

2017-07-17
 
 






 


南韓代管業者Nayana遭勒索軟體攻擊，與駭客達成協議將支付110萬美元贖金

2017-06-21
 
 






 


2017年AI開始普及化，技術競賽白熱化

2017-07-15
 
 






 


國際警方聯手關閉暗網市集AlphaBay

2017-07-17
 
 



 

專題報導




企業行動化管理解決方案採購大特輯 


AI 100（上） 


公有雲儲存服務大盤點 


富士通AI新戰略 


企業身分驗證雲端服務採購特輯 

更多專題報導
 

 









程式語言







電腦概論　　作業系統簡介　　程式語言簡介     演算法簡介   資料結構簡介


　　　　　　　　
　一、程式的角色
    程式的作用好比一齣戲的劇本，用來指示電腦(演員)的每一動作，當電腦藉由輸入
設備把程式讀入後，會儲存在主記憶體內，然後指令會依序被控制單元提取並解碼或翻
譯成電腦可以執行的信號，並把信號送到各個裝置上，以執行指令所指派的動作。

二、程式語言的種類
    由於電腦是由電子電路所構成，因此在它的內部世界中，只懂得兩種信號：1 或 0
；表示開或關，因此最早的電腦語言就完全是用 0 與 1 所寫成的，但人們不習慣把所
有的事情都用0 或 1來表示，於是就有組合語言、高階語言陸續產生，現在我們將這三
類程式語言，簡介如下：
(一) 機械語言(Machine Language)：最早期的電腦語言，用 0與1組合而成，直接被電
　　 腦所執行，不需翻譯，因此：
     1. 優點： 執行速度快，使用電腦資源少。
     2. 缺點： 難度高，可讀性低，相容性差。
　
(二) 組合語言(Assembly Language)：一種符號化的程式語言，可讀性比械語言高，須
　　 利用組譯程式 (Assembler) 來轉換成對應的機械語言，才能被電腦執行。
                          ┌──────┐
                          │ 組 譯 程 式│
           組合語言 ──→│(Assembler) │──→ 機械語言
                          └──────┘

(三) 高階語言(High Level Language)：以人類易學、易寫的文字或符號來表達的程式
　　 語言，高階語言所設計的程式，不能由電腦直接執行，必須經過一種翻譯程式轉換
　　 成機械語言才能進行執行。
                           ┌──────┐
           高階語言 ──→ │ 翻 譯 程 式│──→ 機械語言
                           └──────┘
     翻譯程式又可分為編譯程式 (Complier) 及直譯程式 (Interpreter) 兩種。

三、較常見的高階語言
        高階語言由於人們較容易看懂，發展至今至少已有一、二百種以上，我們無法
   一一介紹僅扼要列出幾種較具代表性語言，其特色如下：
    (1) FORTRAN：最早的高階語言，主要用於科學、工程的運算上。

    (2) COBOL：可處理多種不同模式的檔案適用於商用資料處理。
　
    (3) BASIC：有編譯式和直譯式兩種，語法簡單易學，適合於初學者。

    (4) PROLOG、LISP：為人工智慧上常用的語言。
    (5) PASCAL：為紀念法國數學家 Blaise Pascal 而命名，最具結構化語言。

    (6) C：兼具了高階語言方便、低階語言效率，可攜性高、富有彈性，適用在系統
　　　　　 程式撰寫上。

    (7)JAVA：程式架構像C++但是它拿掉了C++最困難的指標部份，它能發揮網路及多
　　　　　　 媒體的內建支援。
四、程式語言發展趨勢
    要使用機械語言、組合語言、高階語言來設計程式得受專業訓練，並非易事，為了
讓使用者更容易使用電腦來解決問題，近來已有電腦科學家推出所謂的第四代和第五代
語言，其目的是希望使用者能更便利與電腦溝通，其意義可圖示如下：

      人與機器間靠機器語                   人與機器間靠自然語
      言溝通，問題由人們                   言溝通，問題由機器
      描述細節來解決。                     自己解決。
            │                                      │
            │                                      │
            ↓                                      ↓
            ┌┬┬┬┬┬┬┬┬┬┬┬┬┬┬    ┬┬┬┐
            │  │  │  │  │  │  │  │....  │  │
            │      │      │      │              │
           第一代   第二代  第三代  第四代

        一般所謂的第四代語言(Foruth Generation Language，4GL)，是指不需要
        專門技術即可使用的套裝軟體，通常以句子或圖像(icon) 選擇所要的功能
    。例如，使用第四代語言的程式寫作者不必描述資料儲存的細節，及資料如何顯
    示在螢幕上和在機器中的情形，只有描述顯示在軟體上上的資料及它們的關係。
    製作的細節由軟體自動執行。所以，使用者不必知道使用的技術就能熟練地運用
    整個系統。
        第五代語言，又稱為自然語言(Natural Language)，其特性是提供使用者以
    一般的英文語句直接和電腦進行對話，向電腦發出問題，而不必考慮程式語法，
    使用起來更人性化、更方便。
回上一頁












[心得] 十年程式自學之路 « Huli's Blog






























 Huli's Blog 
 Learning by sharing  






Lidemy 鋰學院是一個為初學者而生的線上程式課程平臺，希望能以淺顯易懂的教學，帶領初學者更快速地入門程式設計。你可以直接到網站註冊，或者是追蹤 Lidemy 的粉絲專頁，就能搶先得知課程的最新消息



                
                  [心得] 十年程式自學之路
                

                

                
            

April  9, 2016
               |  Comments 



（原文發表於 ptt soft_job 版，調整排版之後轉在於此）
前言
從國中開始自學程式到現在，已經有十年了
所以我應該算是個資深的自學者吧XD
有滿多心得想跟大家分享
這篇主要是分享一些我認為初學者可以參考的學習方向
正文
首先，沒有最好的程式語言，只有最適合的程式語言。
程式語言本來就只是工具、只是手段，從來都不是重點
重點是：你的目的是什麼？你要解決的問題是什麼？
假設你今天想要寫一個網頁留言板（這邊只討論後端，不包含前端）
那你就不應該用 C 來寫，因為比起 C，php 會更適合
你可能會問：那 nodejs, rails, asp.net... 就不適合嗎？
如果你只是「單純想寫個網頁留言板」，其實上面這些都很適合
挑一個你最喜歡的就好
但如果你要解決的問題不一樣，就應該重新思考
例如說，「我想要超級快速的寫個網頁留言板」
你就應該用 rails，因為 rails 開發真的超級快，隨便打幾個 command，你的網頁就神奇的出現了！
「我想要很潮的網頁留言板！」
那你可以考慮 Go, Swift, Nodejs 等等
換個例子，若是你今天想要「研究電腦較底層的運作」
你應該要學 C，或是學組合語言
因為比起其他高階語言，這兩種絕對會讓你更瞭解底層到底在做什麼
其實以上這些只是想提醒你：不要為了學程式而學程式
程式只是手段、手段！重點在於目的！重點在於你想要透過程式，達成什麼樣的目標
（如果你真的只是純粹喜歡寫程式，當然也是可以啦XD）
所以，要想清楚你為什麼要學程式？
我的理由很簡單：
我覺得寫程式讓我很有成就感，只要幾天就可以寫出一個網頁
可以幫自己寫部落格系統、幫繫上寫投票網站之類的
儘管寫出來的東西可能不怎麼樣，但從無到有，是很感人的一件事
我永遠忘不了我用 VB 拉幾個按鈕出來，點下去就可以跑出文字的那瞬間，我有多感動
那是我第一支程式
無論是單純有興趣或是只想要轉職，以下的幾項建議是我覺得能幫助到你的
這幾點我「基本上」是按照順序列的，也就是一個完成之後再完成下一項
但也有些例外，是可以隨時都學的
1. 學英文
這個已經在版上講到爛掉
Q: 我該學什麼程式語言 A: 英文
為什麼？因為英文真的很重要！
聽說讀寫，至少讀要讀的懂，你才看的懂那些外國公司的 API 文件
發生問題的時候，才能去 stackoverflow 上面發問
講到提問，推薦這篇：提問的藝術
大家都會問問題，但有些問題不會有人想回答
像是隔空抓藥

我寫了一個網路通訊的程式，想要讓A手機跟B手機可以傳訊息，
  可是按了卻沒反應，怎麼辦？

或是排版爛的程式碼

String a="hello";
String bb= "world" ;  
for(int i=0;i<100;i++){
if(socket.alive){
socket.send(a);
}
}


一個好的問題，或是說，讓人看的懂得問題
應該要包含四點：
1. 目的（你的程式要達成什麼目的？）
2. 手段（你怎麼達成你的目的？）
3. 錯誤（在什麼場景下發生的什麼錯誤？）
4. 程式碼（有排版過的程式碼，拜託）
以上問題可以修正成：

我想要讓 A 手機跟 B 手機傳遞訊息，我用的是 java 的 socket
可是按下發送時
出現：java.net.SocketException: Connection refused: connect
想請問一下有可能是錯在哪裡？
部分程式碼：https://gist.github.com/xxxxxx

上面的問題還可以再修正、補充更多細節
但至少比剛開始那個好滿多的，會讓人比較想回答
程式碼一定要找適合的地方貼
不知道貼哪裡的話，google: 貼程式碼，就有一堆文章讓你參考
好，我們繼續回到學英文這點XD
英文不好的話，中文的教學資源其實也很多
尤其是簡體中文，有很多高質量或是新手教學文都很不錯
但畢竟較新的技術，或是較多人氣的地方用的還是英文
英文好的話絕對不吃虧，可以運用更多資源
2. 學會 google
別懷疑，這真的是超重要的能力
我時常覺得，會 google 就先贏一半了
現在網路資源這麼多，有時候發生你看不懂的 Error，完全沒頭緒
你就直接丟 google，就批哩啪啦一堆解法出現了
這時候除了很開心的 copy paste 以外，有一點很重要：「試著理解它」
若是不理解，你就只是個只會複製貼上的機器人，一點成長都沒有
至少要理解到兩點：為什麼有這問題、這個解法是如何解決的
關鍵字的使用也很重要
我在搜尋的時候很常利用空白分割，不讓語句太死
例如說你想找：程式入門教學
我會搜尋：程式 入門
想要找：在網頁上如何實作拖曳效果
我會搜尋：網頁 拖曳
google 的能力可以慢慢培養，搜尋多了你就會有那種感覺了
3. 學 scratch
我聽過這個很多次，但實際接觸才知道「真的很好用」
這個就是讓你用很簡單、很視覺化的方式來寫程式
你只要拖拉幾個拼圖、組合在一起，就可以寫出一隻可以動的程式
甚至是一個小遊戲！
隨堂測驗：你要怎麼開始學 scratch？
如果是我的話，就會搜尋：scratch 教學，或是 scratch 入門
這邊直接幫大家附上兩篇排名較前面的結果
scratch程式教學
Scratch 教學的第 1 堂課（1/5）適合親子共學的兒童程式設計入門
為什麼要學 scratch 呢？
前面有說到，每種程式語言都有不同的適合的場景
還有一點是，「每種程式語言，都有很大部分是相同的」
例如說：變數、函式、迴圈、條件判斷、陣列...
你學 C 有這些、Javascript 有這些、Swift 有這些
不管學哪種程式，都會碰到這些最基本的東西
無論是再複雜的程式，都是這些基本的東西組裝而成
從 scratch 來學這些基礎有兩個好處
1.不被語法限制
2.視覺化
scratch 裡面你幾乎不用打字，甚至可以看做是拼圖遊戲
你就把你想要的東西拼一拼，程式就寫完了
所以你學的是真正的「概念」，而不是語法
舉例來說，如果你學 C，你就要學：

for(int i=0; i<n; i++){
  printf("hi\n");
}


如果你學 python，就會是：

for x in range(n):
  print("hi\n")


（我不會寫 python，寫錯的話抱歉QQ）
但這兩者本質上是一樣的東西，都是迴圈，只是語法不同而已！
從 scratch 開始，可以讓你跳脫這些語法，只學那些精髓
你學完之後，看到 C 的這段就會知道：喔～這就是迴圈嘛
第二點，視覺化也是很重要的一項
儘管我程式寫了十年，我永遠忘不掉，我在迴圈那邊卡了多久
尤其時雙重迴圈，根本就是惡夢！
「我知道這邊是1到10的意思，但是第二層為什麼會這樣」
「為什麼這樣就可以印出九九乘法表？」
那時候我面對的是冷冰冰的程式碼，大概就是：

for(int i=1; i<=9; i++){
  for(int j=1; j<=9; j++){
    printf(...);
  }
}


儘管我現在來看，可以從排版跟大括號一眼看出「block」的概念
但十年前的我完全不行，完全不知道這段到底在幹嘛
可是 scratch 就不一樣了！
它直接用視覺化的拼圖的概念，讓你在迴圈裡面可以塞另外一塊拼圖
就可以明白為什麼雙重迴圈會是這樣了！
最後附上我修某堂課的 scratch 作業，大概花了兩個小時
就只是一個簡單的小遊戲：
https://scratch.mit.edu/projects/98049439/
4. 學著打指令（command line 操作）
「蛤？這是什麼？」
就是電影裡面看起來很帥的，底是全黑的畫面
螢幕上面滿滿的文字，一張圖都沒有
在 windows 就是 cmd，命令提示字元
在 mac 就是 terminal，終端機
假如你已經對上面介紹的 scratch 滿熟悉了
那你應該瞭解程式幾個基本概念
其中一個重要的概念是：寫程式其實就是在對電腦下指令
其實呢，你平常在做的事情，也是在對電腦下指令
但作業系統幫你包裝好了，所以你只要動動手指就可以
例如說你在網頁上按了重新整理，「我要重新整理」
換成程式大概就是：page.refresh();
或是：「點了前往 google.com 的連結」，window.open('google.com');
（這邊程式碼都隨便寫的，但意思有到就好）
我們所謂的 command line，就如同字面上這樣
是個「用文字對電腦下指令」的地方
像是 ls，就是 list 的意思，會把你「現在在的地方」的檔案都顯示出來
「現在在的地方是哪裡？」打 pwd，Print Working Directory
就會顯示出你現在在「電腦的哪個資料夾底下」
幫大家準備好幾個連結了：（關鍵字：終端機 教學）
OS X Lion 10.7 系統基礎教學系列 - 終端機基礎操作教學
介紹命令行(command-line)介面
Mac OS X Terminal 101：終端使用初級教程
Mac OS X Terminal 終端機常用語法教學
為什麼要學這個呢？因為工作上很大機會用的到
而且日常生活也很好用
有些功能你用 java 寫的要死要活，最後才發現原來電腦就有內建指令
我也是最近一年才開始熟悉這些指令的操作
才發現原來內建指令這麼好用
我認為對初學者，你要知道「有這樣一個東西」
並且瞭解：cd, ls, pwd, touch, mkdir, rm, cat, grep 這些指令
還有 > >> < | 這些符號在幹嘛，這樣就很足夠了
想更精進的可以去學怎麼寫 shell script
5. 學怎麼用 browser dev tool
chrome, firefox, safari, edge 都有一樣的東西，叫做開發者工具
為什麼要學會這個呢？因為你可以瞭解很多東西！
日常生活中，你其實一直在接觸網路的概念，只是你沒發覺而已
你平常看到的網頁，其實也只是一堆文字而已
那為什麼文字會變成畫面？因為瀏覽器幫你解析，按照一定的規則畫出來
你可以右鍵->檢查，就可以看到你滑鼠指的地方本來的文字是什麼
dev tool 可以講到一堆跟 web 有關的概念
get/post, ajax, status, css, js, html 等等
現成的好工具，不用嗎？
有興趣深入瞭解的，我會下的關鍵字：dev tool 入門
（只是目前應該很少文章是用 dev tool 教你學習網路概念，有點可惜）
6. 選你想走的領域精進
假設你上面都有確實做到，你現在應該對程式、對網路都不會太陌生了
這時候再來學專門的東西，我認為是事半功倍
為什麼？因為原本那些程式基礎你都可以跳過，你要學的只是語法
學程式學的應該是「心法、內功」，而不是錶面的限制
這樣就算換了一個你從沒看過的程式語言，你也會猜的到它在幹嘛
如果你這時候想要報名一些課程，那就去吧
版上有很多心得可以參考
不過要註意的是心態要正確
我之前寫過一篇文：那些「鹹魚翻身」的文章沒有告訴你的事
有些新聞會打著什麼「服務生學程式，年薪暴增 300 萬」之類的
不要輕易相信這些，很多這種案例都是因為在學程式以前已經有某項專長
再把自己的專長跟程式結合起來
這些案例大多數時候並不適合「沒有任何背景」的人參考
比起這些特殊的案例，版上很多文章都更有參考價值
版上很多心得文，看了就大概可以知道成效如何，出來的薪水如何
或是版上也很多徵才文，稍微看一下大概就能知道現在行情大概在哪裡
7. 寫文章記錄心得
可以開個 blog 寫寫自己的學習歷程、碰到的困難以及解法等等
為什麼要寫這個？
第一是加深印象，你解決一個問題下次再碰到時，你還記得怎麼解嗎？
我記憶力不太好，有時候過兩三個月會忘掉
但這時候就因為我有寫 blog 記錄起來，可以查的到以前自己怎麼解的
第二是增進功力
我要怎麼知道我真的瞭解一個東西？
我覺得寫下來，可以幫助你知道這點
例如說我今天要寫：git 入門教學
寫一寫發現自己不知道 rebase 在幹嘛，我就必須去查，查完之後寫在文章裡面
你寫的出來，你就一定懂這項技術
而且部落格是公開的，若有路人看到你寫錯，說不定還會來糾正你，你就又學到一課了！
第三是累積個人聲望
好的部落格對於求職絕對有加分效果
假設你今天是面試官
A 的履歷寫：精通 Javascript
B 的履歷寫：精通 Javascript，可參照我寫過的：深入 Javascript 原理系列文章
結果你跑去 B 的部落格看，真的寫了一系列深入的文章在研究
不用面試，你就知道 B 是個有真材實料的人
（前提是面試官會去看你 blog XDD）
8. 學資料結構跟演算法
就是俗稱的 Data Structures and Algorithm，DSA
假如你真的對這行很有興趣，想要一直待在這邊而且薪水越來越高的話
你就勢必要開始補足一些「自學的人通常不會有的本科系知識」
因為自學者通常都直接從 html, css, javascript, php, rails 等等的開始
甚至連資料結構跟演算法都沒聽過！有接觸而且實作過的更是少數
那為什麼要學這兩樣東西呢？
第一，增加自信
其實能力強，自信就會強
增加自信是因為，自學者通常也是非本科系的學生
可能會覺得自己跟本科系的實例有一段落差
這時候若是學了本科系在學的 DSA，就可以彌補這一段落差
以我的例子來說，我高中的時候就在接觸 DSA
打打比賽，寫一些 online judge 的題目
（可參考：Re: [請益] 請問國中生程式設計競賽入門）
到現在出社會找工作，就是因為我有這段經歷
所以我有自信我絕對不會差本科系太多，甚至會比一些很混的畢業生強
事實上也是如此，去面試的時候有間公司考我排序的問題
就是一些很基本的，說你知道哪些排序法，跟時間複雜度之類的
我答完之後他們說：我是目前面試的十幾個裡面，回答的最清楚的
（可參考：[心得] 15家中小型公司、新創公司面試心得分享）
自信在某些時候很重要，能夠為你帶來「打不倒的勇氣」
面試沒上，沒自信的人會覺得：一定是我太爛
有自信的人會覺得：是公司沒眼光
（前提是你的自信不是來自於自我感覺良好XD）
第二，增進對電腦底層的理解度
剛開始你可能只是個拿 30k 的小螺絲釘
但工作久了，可能變成 40k, 50k，甚至 100k
當你薪水變得愈高，要解決的問題也相對的更重要
DSA 是大公司的必備技能之一，題目可參考 leetcode
為什麼那些大公司面試要考這些？
如果不會二元樹反轉，就算是知名工程師也沒用？
（可參考：Google面試這次惹爭議了：雖然我們公司 90%的工程師都用你開發的工具，但我們還是不聘用你）
就如同我開頭所說的，重點在目的、在於要解決的問題
你在一家普通的台灣電商網站工作，需要會什麼？
你可能要會寫 php，因為要改進購物車，要改進物品上架系統
所以你根本不必懂 DSA，因為沒什麼太大的幫助
Google 要解決的問題是什麼？
可能是「排序 10 億個數字」、「阿發狗的下棋演算法」等等
從要解決的問題看來，你就知道為什麼 Google 面試時要考那些了
如果你要在技術上日漸精進，你遲早要碰到那些較底層的東西
這跟問題規模有很大的關係，假設你公司今天是做售票網站的
同時 100 個人搶，一般工程師都可以自己應付
同時 10000 個人搶，這就不一樣了，在伺服器上你可以能要多開幾台機器
要調整一些架構，而程式當然也要跟著調整
（延伸閱讀：賣秒殺票跟你想得不一樣、號稱推不倒的售票網站KKTIX，技術現況分享）
或是你會發現許多大公司，常常都會自己有一些專案
為什麼？因為市面上沒有符合他們需求的東西，所以要自己寫一個
像是 React 就是這樣
如果你沒修過 DSA，你怎麼可能實作出 virtual DOM diff 的演算法？
（延伸閱讀：深度剖析：如何實現一個 Virtual DOM 算法 ）
（以上對於大公司面試為什麼要考這些的那一段都只是我的推測
小弟本人沒那麼強，沒去面試過
如果有進去過的前輩願意跳出來說：才不是這樣！你根本推測錯了！
麻煩不吝推文或站內信指正，感謝）
附上兩篇跟我講的內容有點關係的
Re: [討論] 所以練acm都底有啥好處？
過早最佳化是萬惡的根源
最後，舉 vgod 那篇裡面引用到的一段：

如果以蓋大樓來形容這個概念，把砌磚作為一種技能，把蓋大樓作為一種知識
我想可以這麼講：如果你早就知道你喜歡砌磚，很會砌磚，就直接去砌磚吧。
如果你的夢想是蓋大樓，你要學的東西還很多，那讀大學是你最好的途徑。 
不是每個人都要蓋大樓，靠砌磚就可以賺錢了，砌的好還可以賺很多錢，大家搶著要。

如果你很會寫購物車，那其實在台灣你也可以接到很多電商客戶，錢包也是賺滿滿
但如果你是想進 Google, Facebook 那種大公司
或是想要思考規模更大的問題該如何解決
那就學 DSA 吧！
推薦這門 edx 上的課，對岸的清大的開放式課程
補充：其實不只 DSA，資工系會修到的那些課都很值得去修
像是計算機概論、計算機組織與結構、作業系統、組合語言等等
因為這些也是跟電腦底層有很深厚的關係，能懂這些絕對是好事
9. 分享
這點呼應我前面提過的寫 blog
分享從來都不是單向的，在我分享經驗給其他人的時候，我也得到許多回饋
尤其是教學！在教別人的時候，你才會更瞭解自己哪邊不太懂
我認為分享是一件很重要的事
取之於社會，用之於社會
我從以前就常看 soft_job 版，學到很多
為什麼學的到東西？就是因為很多前輩願意 po 文分享自己的經歷
因此我也決定哪天當我有能力，我也要出來 po 文分享
這樣才能有一個正向循環
我希望看我這篇文章有得到收穫的朋友，也可以記得這個道理
日後有心得記得在這裡 po 文分享XD
10. 推薦一些課程
我修過的線上課程其實不多，大多數都是零碎的片段知識
但我有一堂真的很推薦、很推薦的課：CS50
我寫的這篇文章有介紹這門課在幹嘛
因為篇幅有點長，所以就不貼上來了
但就是基本程式、底層、網路、資訊安全、資料結構都有教到！
如海洋般的程式課程：CS50
我上面說的：scratch, command line, dev tool 都是受到這門課的影響
他先教你 scratch，讓你理解程式基本概念，接著再教你 C
是的，初學者學 C 不太好，我原本也是這樣想
可是這門課幽默風趣，讓 C 不會這麼難，我有點改觀
總之這門課很「硬」，很扎實
但也因為他扎實，我相信你修完之後，保證很有收穫
我自己都覺得我十年跌跌撞撞學的東西，怎麼他 20 幾堂課就教完了XD
文章有點長，差不多該結尾了
我去年有在做免費程式教學
但較遺憾的是，其實大多數都是單純的問與答，比較少真的動手教程式
時間不太夠，我也不太曉得從哪個環節開始教
這邊有我寫下的心得與記錄
裡面我有寫了每個人的背景、問題以及我的回答
來找我的人大多都是新手，或許你可以參考看看
臺北免費程式教學心得分享
最後
如果你真的想修 cs50 這門課的話
我想開個 slack 或是社團之類的，有興趣的可以一起討論
我全部作業都有乖乖寫，所以碰到問題我都可以幫忙回答XD
社團網址：cs50中文討論區
另外，這幾年幫許多迷惘的初學者解惑，得出一點心得
規劃出一套我認為初學者很適合上的課程，能夠提升你的基礎知識與程式能力
目前正在 hahow 平臺上面預購，有興趣的可以參考：初心者的計概與 coding 火球術
感謝～




Comments


Please enable JavaScript to view the comments powered by Disqus.

comments powered by Disqus



                ← 如海洋般的程式課程：CS50
              

                [教學] Facebook Messenger API →
              




Recent Posts


自架論壇的解決方案：flarum, github issue, nodeBB, discourse


Lidemy 鋰學院：為初學者而生的線上程式課程平臺


自學、哲學、講學：我的程式之路（下）


自學、哲學、講學：我的程式之路（中）


自學、哲學、講學：我的程式之路（上）




Categories


Android  (23)


Javascript  (21)


網頁前端  (16)


網頁  (14)


旅遊  (19)


Corona-SDK  (10)


Titanium-SDK  (0)


jQuery  (1)


其他  (21)


設計  (2)


Ruby-On-Rails  (4)


Lua  (2)


翻譯  (0)


php  (2)


Highcharts  (1)


React  (2)


科技產品  (8)


Server  (5)


Database  (2)


Design-Pattern  (1)


DSA  (1)


MOOC  (3)


ALPHACamp  (23)


cs50  (2)


行銷  (3)


新加坡  (3)


我的程式之路  (3)























C++程式語言? | Yahoo奇摩知識+




















 









   ⌂首頁信箱新聞股市名人娛樂氣象運動App下載購物中心商城拍賣更多⋁知識+汽車機車電影字典遊戲旅遊理財房地產時尚美妝折扣城   Yahoo 奇摩知識+                        👤 登入    ✉ 信箱     ⚙ 服務說明    帳號資料 服務說明 意見回報        
















Yahoo奇摩知識+ 首頁











所有分類
 
健康
 
商業與財經
 
娛樂與音樂
 
家居與園藝
 
家庭與人際關係
 
寵物
 
懷孕與育兒
 
政治與政府
 
教育與參考
 
新聞與活動
 
旅遊
 
汽車與交通
 
消費電子產品
 
環境
 
社會科學
 
社會與文化
 
科學
 
美容與造型
 
藝術與人文
 
遊戲與休閒活動
 
運動
 
電腦與網際網路
 
食品與飲料
 
餐廳與小吃
 





世界Yahoo 








阿根廷





澳洲





巴西





加拿大





法國





德國





印度





印尼





義大利





馬來西亞





墨西哥







紐西蘭





菲律賓





魁北克





新加坡





香港





西班牙





泰國





英國與愛爾蘭





美國





越南





西班牙文







關於





關於 Yahoo奇摩知識+
社群指南
排行榜
點數與等級
部落格
如何安全地使用 Yahoo奇摩

 








 電腦與網際網路

 程式設計


 看另一則問題 










            C++程式語言?
        


1.請問C++程式語言和C語言到底是在幹麼的呢? 

2.這個暑假我想去學一個電腦課程,可是我不知道該如何抉擇是C++還是C語言? 

3.我想問一下,我物理.化學.生物都很強 請問有什麼電腦課程,可以讓我以後求職更有機會呢?(我是高中生) 

4.程式語言有什麼應用,那是在幹麼的?

更新: 
TO小祥 
所以學會C++之後,以後用什麼程式就能得心應手囉? 
可是我想知道他到底是在學啥,我希望有詳細一點的解釋





 
1 個人正在追蹤 


 
 5 個解答 
5


檢舉不當使用









您確定要刪除此解答嗎？
是
否












 









抱歉，似乎發生一些問題。



Trending Now





 

解答


評分


最新
最舊














最佳解答: 
             版主大大： 




1.請問C 程式語言和C語言到底是在幹麼的呢? 


　　早期是叫Ｃ語言，可在MS-DOS底下執行，其編寫出來的程式執行能力，介於高階語言與低階語言之間，檔案小，執行快，僅次於組合語言。 


　　後來C++ 出來，它的特色是軟體商提供很多的函式，不必再像過去的Ｃ語言所有程式都得自己寫，可利用廠商開發出來的函式來縮短程式的長度，但檔案變大，執行能力比Ｃ語言稍差。 




2.這個暑假我想去學一個電腦課程,可是我不知道該如何抉擇是C 還是C語言? 


你可以先學C ，再學VISUAL C。 


因為C 是Ｃ語言的延伸，觀念是一樣的，而VISUAL C是套裝軟體，有利於程式開發的時間縮短。 




3.我想問一下,我物理.化學.生物都很強 請問有什麼電腦課程,可以讓我以後求職更有機會呢?(我是高中生) 


我覺得現階段別想太遠，只要先學會任何一種程式語言觀念，將來要再研究其它程式語言，就會駕輕就手，而且每一種都有它的存在目的，不要想全部函蓋，到頭來什麼都不精。 




4.程式語言有什麼應用,那是在幹麼的?  

建構商用軟體、網頁、作業系統、控制介面軟體，方便管理資料存取、管理、分析、連結、控制．．．很多！ 





 參考資料： 
 自己 


Robert
 · 10 年前 





0
真讚



0
真遜





檢舉不當使用


意見





 




新增意見











送出












 · 剛才不久













                  發問者的評分
                















 C/C++ 都是程式語言的一種 
就像是中文或英文一樣 
只是聽的對象是電腦(說英文電腦也聽不懂) 
透過程式語言可以一口氣命令電腦做很多事情 

你平常所使用的軟體包括遊戲都是用程式語言寫出來的 
甚至 Windows 也是用程式語言寫的 

如果你以後想當軟體工程師 
C/C++ 算是很基本的東西 
如果你只是一般使用者的話不懂C/C++也不會有影響 

你的數理很強 
可以去圖書館借 C 語言的書 
其實不必去補習 
我也是高中自修程式的 
C++ 是 C 語言改良的 
基本語法都差不多差,最大別在物件導向概念 
但不表示 C 語言是被淘汰的 

至於要加強求職競爭力我會建議你把英文學好 
出路會比較廣 

 2007-06-23 17:34:06 補充： 
我補充一下好了... 
C 語言早期是從 Unix 開始流行的 
他本身有提供很多的函式庫 
因此並非所有的程式都得自己寫 
C++ 之所以出現是因為用 C 語言很難表達物件導向的概念 
而對於物件導向的理念有人贊成有人反對 
也很難說他到底好還不好 

其實廠商提供的函式庫中有用 C 寫的也有用 C++ 寫的 
甚至還有用組合語言寫的 
在使用上很少會刻意強調用 C 還是 C++





阿霧
 · 10 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久





















 1. 很多地方都會用到C/C++ 但是C 的用途還是最廣的.一般C/C++都是用來設計系統程式.如OS (windows OS, Linux .. ). Game. 等等. 甚至在某些cpu 上.你可用的程式語言可能就只有組語跟C  


2. 請不要去坊間的補習班學習C/C++ 程式語言. 大部份的都教不好.  讓你誤解C/C++ 的本質 

3. 數學要更強. 目前你才高中. 未來你想走什麼樣的路呢? 
想作什麼樣的工作. 單單只是問這樣的問題. 是沒辦法幫你回答的. 唯一的建議只有. 多學. 

4. 所有電腦軟體都要透過程式語言創做出來. 你說呢. 他有什麼應用. 太廣範了. 說也說不完.. 小到遙控器內的程式. 大到把太空梭射到太空去的程式.. 你家看 DVD 的機器內部也跑個程式. 您家的電冰箱. 控制溫度裡面也有程式. 車子的防盜系統. 車內ABS 控制系統. 太多了....  






什麼都沒有
 · 10 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久





















 你用的作業系統 XP 就是用 C＋＋ 寫出來的，Linux 作業系統也是用 C＋＋ 寫出來的，Vista 也是用 C＋＋ 寫出來的。 
沒有 C＋＋，你就沒有電腦遊戲可玩！ 
C＋＋ 的前身是 C 語言，C 語言是基礎，當然也可以直接學 C＋＋，只是你會看不懂 C 語言而已。 
C＋＋＝＞MFC 以及視窗程式 

C＋＋＝＞JAVA 物件導向程式（也可以直接學 JAVA）＝＞手機遊戲 

C＋＋＝＞Linux 作業系統 

C＋＋＝＞大學到研究所的模擬軟體（如：電子系所的模擬軟體 Matlab） 

C＋＋＝＞其他 .NET 程式設計（如：C＃，VB.net） 
（也可以直接學 VB 或 C＃） 

……噗啦噗啦。 
至於第三個問題…，JAVA 語言和 Linux 系統還是很熱門的項目。 






Big_John-tw
 · 10 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久





















 其實C++還是C語言 
選一個 學就可以了 
因為 我學過c java vb 
只要一個看的董 
其他  都是大同小異 
還有  你未來路還很長 
不一定現在就要找求職機會 
應該多學一點 
以後 你就會知道 
學而致用 
程式語言  敘述流程  讓電腦看董 你需要做什麼事情 
只是一個介面 
算是  你跟電腦溝通的橋樑吧





小祥
 · 10 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久















 

檢舉不當使用

 我認為此問題違反社群指南 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此問題違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此解答違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此解答違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此意見違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此意見違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消



 

你可能對以下搜尋感興趣：


防毒軟體為您抵擋病毒攻擊

日本旅遊讓你天天上網超方便

揉捏按壓在家輕鬆舒緩疲勞

海外代購超輕鬆












發問問題
通常可在幾分鐘內獲得解答！







展開»






詳細資料



詳細資料






現有問題




更多





請多詳述您的問題
上傳處理中




上傳失敗。 請上傳大於 100x100 像素的檔案
目前發生問題，請再試一次。
您只能上傳 PNG、JPG 或 JPEG 等類型的檔案。
您只能上傳 3GP、3GPP、MP4、MOV、AVI、MPG、MPEG 或 RM 等類型的檔案。
您只能上傳不超過 5 MB 的相片。
您只能上傳不超過 600 MB 的影片。
您只能上傳相片 (png, jpg, jpeg) 或影片 (3gp, 3gpp, mp4, mov, avi, mpg, mpeg, rm)。
您只能上傳相片或影片。
影片不應超過 <b>600mb/5 分鐘</b>
相片不應超過 <b>5mb</b>
影片不應超過 <b>600mb/5 分鐘</b>相片不應超過 <b>5mb</b>
  







解答問題


請問各位大大
在Console裡
怎麼寫出1~1000的費式數列?
要以Do /Loop Until呈現
謝謝~?



 

需高手指導，PCI Express windows driver in VC++ or MFC or Qt tool?



 

關於matlab矩陣問題 如果我隨機產生一個01矩陣例如：aa=round(rand(10,10))後 我想要將產生的aa某些座標強制為1，我該如何寫~~~ 感謝各位大大幫忙答覆~~~~~?



 

最優惠與便捷的線上訂房網站？



 


發燒問題




如何用EXCEL亂數產生210~230之間的亂數,間距為5
210、215、220、225---?

                  6 個解答
              

 

想自學遊戲設計，有什麼書籍是可以買來自己看的?

                  7 個解答
              

 

Dreamweaver做完為什麼是file:///C:/Users/.......，怎麼把它改掉?

                  5 個解答
              

 
更多問題





本人想學程式語言 但這方面什麼都不懂 什麼迴圈阿 函數之類的 請問有什麼方法可以入門程式語言嗎?

             5 個解答
         

 

誰能認真教我做出一個簡單的網站
稍微設計一點程式就好了
要交大學專題用的
可以一步一步交的
會給回饋?

             5 個解答
         

 

想請問去職訓局學程式設計 對就業上的幫助?

             7 個解答
         

 

  








服務條款


隱私權


RSS




















程式語言



程式語言






電腦的體積愈來愈輕巧，功能越來越強大，但是不管電腦如何變化，它的工作原理仍是靠簡單的0與1。要電腦幫我們工作，就必須給予電腦指令，這些指令的集合就是程式。
壹、程式語言簡介
電腦是一部機器，只要給予正確命令，就會按照命令的指示執行工作，然後將結果加以輸出，這些命令的組合即是所謂的程式語言(Programming  
        Language)，故程式語言是電腦使用者與電腦溝通之橋樑。
一、程式語言的分類
依階層、使用模式和應用的不同，可以將程式語言劃分為幾個類別範圍。
(一)依階層劃分
可以分為低階語言及高階語言，低階語言包含機器語言與組合語言。
1.機器語言
是指硬體內部所使用的語言，也是電腦唯一能直接辨識的語言，是由許多0、1組合而成。
2.組合語言
是最接近機器語言的程式語言，它是一種符號式語言，必須經過翻譯後，才能被電腦所接受。
3.高階語言
又稱編譯語言，係為各種應用程式而設計的語言，其文法比較接近日常生活用語，故簡單易記。一般常見的有BASIC、C、PASCAL等。
 (二)依使用模式劃分
  可以分為直譯式程式語言和編譯式程式語言。
1.直譯式程式語言
此種語言，系統可以將原始程式的指令逐一的翻譯並執行，不需要經過編譯，如BASIC、LOGO、HTML等。它的特點是修改程式及除錯，較為簡單容易。
2.編譯式程式語言
撰寫的原始程式，需要經過編譯器編譯之後，輸出為電腦中直接執行的目的程式，如C、C++、PASCAL...等。他的特點是再次使用只要執行目的程式，無須重新在編譯其原始程式。
(三)依應用劃分
可以分為一般用途與特殊用途使用的程式語言。
1.一般用途
指用於一般範圍的通用程式語言，如BASIC、PASCAL、C...等。
2.特殊用途
應用於特殊領域的程式語言，例如應用於商業的COBOL，工程的FORTRAN，網路的HTML或人工智慧領域的程式語言如LISP...等。
二、程式語言發展環境
隨著作業系統的發展，程式的開發環境也隨著變化。從最早的直譯式、編譯式的開發環境，演變為今日的視覺化開發環境。環境的改進，使得程式設計人員能更有效率的開發程式。
(一)直譯式開發環境
此種類型的發展環境，最主要的特色在於輸入的程式能立即地看到輸出結果，而不需再經過編譯的動作，而原始程式小，也是其特色之一。它必需透過開發環境才能執行程式，且程式的保密性不是很好，所以很少人用來開發軟體。但是對初學程式設計者而言，相當方便，例如GwBASIC、dBaseⅢPlus等等。
(二)編譯式開發環境
編譯式的開發環境是最常見的，使用者利用文書編輯器或是系統所附的程式編輯器，將程式鍵入之後，再利用編譯軟體對原始程式進行編譯後，產生可供系統執行的目的程式檔。
(三)視覺化開發環境
視窗作業系統的普及，使得視覺化開發環境成為主流。在這種環境下，使用者只需使用一隻滑鼠，在畫面上點、畫出需要的物件，瞭解每個物件的屬性及控制方式，再對該物件進行控制或設計，即能設計出軟體。例如Visual  
        Basic、Visual C++、Delhpi  
        …等等。
三、全球資訊網與程式設計
挾著網際網路蓬勃發展的全球資訊網（WWW），提供超媒體（Hypermedia）的資訊服務，為了讓超媒體資訊能更活潑、更具特色，許多大廠紛紛提供能結合首頁設計的程式語言，這類的程式語言，最有名的有Java、VB  
        Script。







