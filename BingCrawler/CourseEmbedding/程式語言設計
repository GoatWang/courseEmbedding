





程式語言將成另一種全民語言，8 個國內外網站教你如何自學寫程式 | T客邦 - 我只推薦好東西













































Menu
T客邦


T客邦集團網路


T17
T客邦
DIGIPHOTO
MF變型男
玩車特區
電腦王
透視鏡




登入
註冊
 訂閱










加入粉絲團
















Close【8月開課】Raspberry Pi 3樹莓派寵物小車實作，從GPIO到OpenCV影像辨識，打造會看的自走車，一天學會



相關文章




          免費學寫基礎程式，「Hour of Code」又有新課程可以學
        
 


          2015 臺大黑客松成果全紀錄，各國的高手都做了些什麼？
        
 


          僅487byte，破記錄的最小西洋棋程式
        
 


          科技考古：史上首位程式設計師是女性，首個程式團隊也是六個女生
        
 


          在美國，寫什麼程式收入最高？答案是：Java
        
 











程式語言將成另一種全民語言，8 個國內外網站教你如何自學寫程式




Wendy
發表於 2014年10月17日 13:00


收藏此文





Twitter
Plurk























程式語言、程式設計、Java、C++ 這些聽起來很專門的用語，在未來都會是學習趨勢，就像 20 世紀大家開始學英文一樣，在許多國家很多小孩從小就開始學習程式語言，而台灣相對來說比較慢開始有這個觀念，這裡我們就整理了 8 個自學網站，讓你從零開始學習。




為什麼要學程式語言？
上個月 Google 等幾家科技大廠還有學術界（UC Berkely、Lead the Way）的專家討論，如何讓更多的人能夠一起參與未來？關鍵在於「數位素養」（digital literacy），什麼是數位素養？就是懂得運用電腦及網路資源來定位、組織、理解、估價和分析訊息的能力，雖然說「懂得運用」這四個字的定義非常模糊，但不可否認的，學習程式語言是培養數位素養的一種方式，只要擁有就能跑在其他人之前。

▲ 數位素養其實包含多種能力，包含有效溝通、批判性思考⋯等等
過去學習程式語言都被認為是要「解決問題」，讓程式跑的更快，所以矽谷的工程師們不斷想要突破，但是 Google 暑期程式設計課程的主管 Carol Smith 及UC Berkeley 教授 Armando Fox 都認為學習程式語言應該是要讓工具「為你所用」，創造自己的工具，讓工具做你想要的事。
另外，軟體工程師也在美國 Business Insider 的 「2014 百大最佳工作」拿下第一名，平均年薪 90,060 美金（約 270 萬台幣），而第二名的電腦系統分析師也有79,680美金，工作機會也日漸增多，是炙手可熱的職位。而程式語言百百種，Javascript、Java、Python、C、C++，學哪一種賺最多呢？美國的 msgooroo 網站則分析了 2014 上半年超過 150 萬則的人才招募廣告，發現奪下收入最高與需求量最大的程式語言是 Java，也許這個可以成為你學寫程式的理由。

▲ 學程式語言不再是工程師的專利了
要從哪一種程式語言開始？
就像上一段說的，程式語言有很多種，要從哪一種開始學習比較好，這個問題因每個人的需求還有對自己的期許都有不同，如果你是想要學習網頁設計，自己架設網站，那麼 HTML、CSS、jQuery 這三種前端的基本語言要先學會；如果是想要成為 app 的開發者，在 Android 系統上要懂 Java，在 iOS 系統上則是要會 Objective – C。前三種的入門門檻較後面兩者來的低。
Mashable 整理的「10 個必學程式語言」中也還有其他語言，列出來給大家參考：

C 語言：最古老且廣泛使用的程式語言，影響後面許多語言（如：C++、Objective-C、Java、C#），用於操作系統上，可以作為入門。
C++：C 語言的進階版，Firefox 及 Adobe 系列都是由這個語言構成，也用於系統軟體、應用程式軟體、遊戲。可以獨立於 C 語言學習。
PHP：用於網頁開發，Wordpress、Facebook 就是用 PHP 建構的。與 HTML 相較是後端的語言。
Python：物件導向、直譯式的高階程式語言，用於網站以及行動 App 等，Instagram、Pinterest、Google、Yahoo! 皆使用 Python 開發而成。 


▲ 看起來很複雜，其實拆開後慢慢學習也會懂！
 
不管選擇哪一種，建議大家都依照自己平常使用的需求或是興趣選擇。往下一頁看哪裡可以學到這些程式語言。

上一頁 1 2 3 下一頁



Shares

Facebook
LINE
Twitter
Google+











Facebook

馬上按讚 加入T客邦 3C 科技


        標籤：新聞, coding, 程式語言, 程式設計, 自學, 好用






Plurk 分享
 


Twitter 分享
 


Google+ 分享
 




更多3C新消息，快來加入T客邦粉絲團

Facebook T客邦的臉書基地
Facebook T客邦 3C 科技
Plurk T客邦玩科技
Twitter @techbang
Google+ T客邦粉絲團




上一則LINE for iPad 版本，讓 iPhone 及 iPad 同時登入不打架
下一則想要隨處都可站著工作？試試紙做的可攜式站立工作台

你可能有興趣的文章







免費學寫基礎程式，「Hour of Code」又有新課程可以學
還記得不久之前我們介紹了八個好用的自學程式語言網站嗎？現在你又多了一個選項了喔！而且還是由 A...

 




2015 臺大黑客松成果全紀錄，各國的高手都做了些什麼？
經歷四十小時的馬拉松 Hacking，第三屆 2015 臺大黑客松終於8/23圓滿落幕。這項一...

 








僅487byte，破記錄的最小西洋棋程式
西洋棋的棋盤由64個黑白相間的網格與32顆棋子組成，2位棋士分別操作國王、皇后、城堡、騎士、主...

 




科技考古：史上首位程式設計師是女性，首個程式團隊也是六個女生
在我們的既定印象裡，所謂的「程式設計師」或是「電腦工程師」都是男生的職業，相關的科系（資工系、...

 




在美國，寫什麼程式收入最高？答案是：Java
大家對於工程師的印象不外乎是高收入還有熬夜加班到爆肝，不過是不是真的每種程式語言的工程師都能有...

 


next


你也可能喜歡這些文章



更多相關文章








使用 Facebook 留言










我要推





      1. 
      ATMJin （發表於 2014年10月17日 14:09）

      
引用回覆
檢舉



      其實比較想要冷門一點的語言譬如說Fortran或MATLAB之類的熱門的語言隨便找就有很多學習資源了
    








我要推





      2. 
      ulyssesric （發表於 2014年10月17日 15:07）

      
引用回覆
檢舉



      > 如果你還有其他推薦的網站也不妨在下麵回應和大家分享。當然是 stackoverflow.com教科書、投影片、線上課程都只是新兵中心，當你真的來到戰場上，你需要不是教戰守則，而是眾多老鳥教導你如何活下來。
    








我要推





      3. 
      Jono Bacon （發表於 2014年10月17日 16:05）

      
引用回覆
檢舉



      人人都可以學寫程式就像每個人都可以學煮菜一樣, 食譜也是到處找都有, 但煮的好不好吃可不是看食譜照煮就可以了
    








我要推





      4. 
      幽理之刻 （發表於 2014年10月17日 23:06）

      
引用回覆
檢舉



      ※ 引述《Jono Bacon》的留言：> 人人都可以學寫程式就像每個人都可以學煮菜一樣, 食譜也是到處找都有, 但煮的好不好吃可不是看食譜照煮就可以了以前找不到食譜，現在比較多食譜了
    








我要推





      5. 
      Jono Bacon （發表於 2014年11月05日 16:14）

      
引用回覆
檢舉



      ※ 引述《幽理之刻》的留言：> ※ 引述《Jono Bacon》的留言：> > 人人都可以學寫程式就像每個人都可以學煮菜一樣, 食譜也是到處找都有, 但煮的好不好吃可不是看食譜照煮就可以了> > 以前找不到食譜，現在比較多食譜了但現在人做菜有以前人好吃嗎? 食譜多不代表人人都可以當食神啊
    








我要推





      6. 
      Brian Hu （發表於 2015年2月24日 18:51）

      
引用回覆
檢舉



      這個網站是中文的，給想要自學程式設計的朋友參考~http://www.gocoding.today/






發表回應

          （請先登入會員方可留言。)
      


謹慎發言，尊重彼此。按此展開留言規則

留言板發文規則：
請註意！留言要自負法律責任，相關案例層出不窮，請慎重發文！

請勿一文多貼灌水洗板或發表無意義字串，違者直接刪除留言。
請勿張貼廣告，不允許任何形式的商業廣告行為，包含頭像、簽名檔等。
禁止發表非官方所舉辦的團購性質活動，違者直接刪除留言。
發言時請勿涉及人身攻擊、侮辱、色情或其他有違社會善良風俗之內容，違者直接刪除留言。
嚴禁發表討論破解軟體、註冊碼、音樂、影片、軟體複製等違反智慧財產權之留言。
請尊重他人之文章著作權，轉載者請標明來源。
















最愛排行榜



1
史上最致命字型！微軟 Calibri 字型涉入巴基斯坦政治醜聞案，甚至可能將導致巴基斯坦總理下臺


2
「不規則」螢幕，iPhone 8 實機照曝光


3
擁有11年歷史的經典播放器 Media Player Classic  Home Cinema宣佈停止更新：因為沒錢繼續下去 


4
你家電視盒常看的影集都找不到了嗎？中國A站、B站影片資源全被下架，日劇日影內容幾乎全滅


5
故宮博物院宣佈釋出7萬張文物圖檔免費下載，商業使用也OK！


6
小米發表旗下最小、最便宜的小米電視4A 32吋版，台幣不到五千元可入手


7
這個人玩比特幣賺了2500萬美元，現在他開始環遊世界


8
日本網友瘋傳【真。艦隊 Collection】，橫須賀港全日本重要軍艦幾乎一次集結







評測文章





【鏡頭評測】散景之皇完整解析 Sony FE 100mm F2.8 STF GM OSS （附與 135mm STF 比較）
 



【iOS 11 Public beta 2 功能實測】iPhone 控制中心大更新、錄製螢幕更方便
 



耳機界的超級小鋼炮！DIKE DEB500真無線藍牙耳機，傳遞優質震撼聽感
 



幾大要點，教你如何挑選最適合的防盜包
 



更多評測文章 »




歷史上的今天





大還要更大，Sony、華碩、小米、華為、OPPO 五款 6 吋以上大螢幕規格比較
 



周永明又上臺發表了一款新的VR產品，只是這次他代表的不是HTC
 



還在聽天天動聽、蝦米、網易雲音樂？7月過後中國音樂平臺能聽的歌將越來越少
 



4K世代 手機記憶卡錄影不跳格-UHS-I U3高速卡紛紛上市，實測點破規格迷思
 



Android 架構之亂，x86 挑戰 ARM 大軍，效能、相容性、續航力完全測試 
 







最新活動





輕巧帶著走，讓每一刻都成為音符相伴的那一刻！Soundmatters Mōment 一週試用心得出爐！
 



【課程】LinkIt 7697物聯網應用實作，串接MCS雲服務、全新開發工具好上手、自製APP與硬體互動
 



【驚喜包公佈】超限額體驗日本無時差血拚團 GO ～ Buyee 讓你一鍵享受零時差購物。爽買一波再帶 PS4 回家大玩特玩唷！
 



【課程】Raspberry Pi 3樹莓派寵物小車實作，從GPIO到OpenCV影像辨識，打造會看的自走車，一天學會
 



更多活動 »





業界動態


科技新櫃裝修攻略！ 電視櫃與電視牆比例到底該怎麼抓? 原來最好的比例是…
創意無限延伸 十銓科技推出多埠USB充電座『方塊充』WD02
扭力大師 MT-09強悍登場
EDIFICE推全新藍牙錶款EQB-501XD/EQB-501XDB 父親節型男老爸最佳首選
2017 Apple「APP移動應用創新賽」台灣總決賽 前五名優秀隊伍 晉級大中華區總決賽 冠軍受邀Apple年度盛會WWDC
繼承經典名作  全新「音樂藝術家」登場 Pioneer新款旗艦級SE-Monitor5密閉式耳機  

更多動態 »





T客邦 3C 科技粉絲團






header
home





















程式語言 - 維基百科，自由的百科全書































 







程式語言

維基百科，自由的百科全書
(已重新導向自 程式語言)

					前往：					導覽，					搜尋






本條目需要補充更多來源。（2017年2月10日） 
請協助添加多方面可靠來源以改善這篇條目，無法查證的內容可能會因為異議提出而移除。 

















中國大陸
程序設計語言、編程語言


臺灣
程式設計語言、程式語言


港澳
程序設計語言、編程語言






程式設計語言中的經典語句：
Hello World。


程式語言（英語：programming language），是用來定義電腦程式的形式語言。它是一種被標準化的交流技巧，用來向電腦發出指令。一種電腦語言讓程式設計師能夠準確地定義電腦所需要使用的資料，並精確地定義在不同情況下所應當採取的行動。
最早的程式語言是在電腦發明之前產生的，當時是用來控制提花織布機（英語：Jacquard loom）及自動演奏鋼琴的動作[1]。在電腦領域已發明瞭上千不同的編程語言，而且每年仍有新的編程語言誕生。很多編程語言需要用指令方式說明計算的程式，而有些編程語言則屬於宣告式編程，說明需要的結果，而不說明如何計算。
程式語言的描述一般可以分為語法（英語：Syntax (programming languages)）及語義。語法是說明程式設計語言中，哪些符號或文字的組合方式是正確的，語義則是對於編程的解釋[2]。有些語言是用規格檔案定義，例如C語言的規格檔案也是ISO標準中一部份，2011年後的版本為ISO/IEC 9899:2011[3]，而其他語言（像Perl）有一份主要的程式語言實現（英語：Programming language implementation）檔案，視為是參考實現（英語：reference implementation）。



目錄


1 概論
2 特點

2.1 資料和資料結構
2.2 指令及流程控制
2.3 參照機制和重用


3 功能

3.1 實體的傳輸連結
3.2 應用程式的發展


4 使用

4.1 量測各程式語言的使用量


5 歷史
6 參見
7 參考文獻
8 延伸閱讀
9 外部連結



概論[編輯]
程式語言原本是被設計成專門使用在電腦上的，但它們也可以用來定義演算法或者資料結構。正是因為如此，程式設計師才會試圖使程式代碼更容易閱讀。
程式語言往往使程式設計師能夠比使用機器語言更準確地表達他們所想表達的目的。對那些從事電腦科學的人來說，懂得程式設計語言是十分重要的，因為在當今所有的計算都需要程式設計語言才能完成。
目前發明瞭許多的程式語言，程式語言本身可能修改以符合新需求，或是和其他的程式語言結合使用，儘管人們多次試圖創造可以符合所有需求的通用程式語言，但以「符合所有需求」的標準來看，這些嘗試都失敗了[來源請求]。之所以有那麼多種不同的程式語言存在的原因是，編寫程式的初衷其實也各不相同；新手與老手之間技術的差距非常大，而且有許多語言對新手來說太難學；還有，不同程式之間的執行成本（runtime cost）各不相同。
有許多用於特殊用途的語言，只在特殊情況下使用。例如，PHP專門用來顯示網頁；Perl更適合文字處理；C語言被廣泛用於作業系統和編譯器的開發（所謂的系統編程）。[4]
高階語言的出現使得電腦程式設計語言不再過度地依賴某種特定的機器或環境。這是因為高階語言在不同的平臺上會被編譯成不同的機器語言，而不是直接被機器執行。最早出現的程式語言之一FORTRAN的一個主要目標，就是實現平臺獨立。
雖然大多數的語言既可被編譯又可被解譯，但大多數僅在一種情況下能夠良好執行。在一些編程系統中，程式要經過幾個階段的編譯，一般而言，後階段的編譯往往更接近機器語言。這種常用的使用技巧最早在1960年代末用於BCPL，編譯程式先編譯一個叫做「0代碼」的轉換程式（representation），然後再使用虛擬器轉換到可以執行於機器上的真實代碼。這種成功的技巧之後又用於Pascal和P-code，以及Smalltalk和二進位碼，在很多時候，中間過渡的代碼往往是解譯，而不是編譯的。
如果所使用的翻譯的機制是將所要翻譯的程式代碼作為一個整體翻譯，並之後執行內部格式，那麼這個翻譯過程就被成為編譯。因此，一個編譯器是一個將人可閱讀的程式文字（叫做原始碼）作為輸入的資料，然後輸出執行檔（object code）。所輸出的執行檔可以是機器語言，由電腦的中央處理器直接執行，或者是某種模擬器的二進位代碼。
如果程式代碼是在執行時才即時翻譯，那麼這種翻譯機制就被稱作直譯。經直譯的程式執行速度往往比編譯的程式慢，但往往更具靈活性，因為它們能夠與執行環境互相作用。
特點[編輯]
每一種程式設計語言可以被看作是一套包含語法、詞彙和含義的正式規範。
這些規範通常包括：

資料和資料結構
指令及流程控制
參照機制和重用
設計哲學

程式語言不成文規定：

識別元（Identifier）命名常規

大多數被廣泛使用或經久不衰的語言，擁有負責標準化的組織，經常會晤來創造及發布該語言的正式定義，並討論擴充功能或貫徹現有的定義。
資料和資料結構[編輯]
現代電腦內部的資料都只以二元方式儲存，即開-關模式（on-off）。現實世界中代表資訊的各種資料，例如名字、銀行帳號、度量以及同樣低端的二後設資料，都經由程式設計語言整理，成為高端的概念。
一個程式中專門處理資料的那個系統被稱為程式語言的型態系統（type system）；對型態系統的研究和設計被稱為型態理論（type theory）。語言可以被分為靜態型態系統（statically typed systems），例如C++和Java，和動態型態系統（dynamically typed systems），例如Lisp，JavaScript，Tcl和Prolog。前者可被進一步分為包含宣告型態（manifest type）的語言，即每一個變數和函式的型態都清楚地宣告，或type-inferred語言（例如MUMPS，ML）。
大多數語言還能夠在內建的型態基礎上組合出複雜的資料結構型態（使用陣列，列表，堆疊，檔案等等）。物件導向語言（Object Oriented Language，又譯作「物件導向語言」）允許程式設計師定義新的資料型態，即物件（objects），以及執行於該物件的函式（functions）和方法（methods）。
除了何時以及如何確定運算式和型態的聯繫，另外一個重要的問題就是語言到底定義了哪些型態，以及允許哪些型態作為運算式的值。諸如C程式語言之類的低端語言允許程式命名記憶體位置、記憶體區域以及編譯時的常量；ANSI C甚至允許運算式返回結構值（struct values）。功能性的語言一般允許變數直接使用執行時計算出的值，而不是指出該值可能儲存的記憶體位址。
常見的資料結構：

陣列
記錄
連結串列
堆疊
佇列
樹
圖
堆
雜湊

指令及流程控制[編輯]
一旦資料被確定，機器必須被告知如何對這些資料進行處理。較簡單的指令可以使用關鍵字或定義好的語法結構來完成。不同的語言利用序列系統來取得或組合這些語句。除此之外，一個語言中的其他指令也可以用來控制處理的過程（例如分支、迴圈等）。
參照機制和重用[編輯]
參照的中心思想是必須有一種間接設計儲存空間的方法。最常見的方法是通過命名變數。根據不同的語言，進一步的參照可以包括指向其他儲存空間的指標。還有一種類似的方法就是命名一組指令。大多數程式設計語言使用宏呼叫、過程呼叫或函式呼叫。使用這些代替的名字能讓程式更靈活，並更具重用性。
功能[編輯]
程式語言可透過機械、電腦來達成與完成人類需求的演算、功能與目的。
實體的傳輸連結[編輯]
透過低階程式語言或高階程式語言，將實體間接達成傳輸連結或控制實體。
應用程式的發展[編輯]
高階程式語言可發展多功能的應用程式軟體，如：作業系統、工程計算機軟體、轉檔軟體、燒錄軟體、播放軟體、網頁設計…等。
使用[編輯]
程式語言已超過上千種，大部份用在計算領域[5]。 程式語言和其他人類使用的語言在精準度和完整性上有很大的差異。
人們在用自然語言溝通時，內容可以不明確，甚至小的錯誤，而聽的人仍然可能理解說的人想要說的內容。但電腦不同，電腦「只做被告知要做的事」，無法理解程式設計者想要寫的程式。語言的定義、編程以及編程輸入的組合需完整定義程式執行時的外部特性。另一方面，演算法的概念可以表示為虛擬碼，是交織有自然語言和程式碼的程式語言，和其他人溝通時使用，此時就不一定要那麼精確。
程式語言提供定義片段資料的結構化機制，以及在資料中需自動進行的運算或是轉換。程式設計者利用程式語言提供的抽象化來表示計算的相關概念，這些概念則是由許多最簡單元素（稱為語言基元（英語：language primitive））的集合所組成[6]。程式設計就是指利用語言基元來撰寫新的程式，或是將舊程式改寫，配合新的應用或是新的環境。
電腦程式語言可能是以批次處理任務的方式執行，中間不需和使用者互動，也有可能是由用戶在直譯器中指定執行特定的的程式。若某一程式語言的是目的是在某一應用軟體（如Unix shell）或其他命令列介面執行其他程式，此程式語言會稱為手稿語言。
量測各程式語言的使用量[編輯]
很難去比較哪一種程式語言的使用量最大，而且「使用量」一詞也很難定義。某一種程式語言可能需要較多的時間進行開發，另一種程式語言可能產生的程式碼較長，第三種程式語言可能在CPU中執行的時間較長。有些語言在特定的領域仍十分受歡迎，例如COBOL在公司的資料中心仍相當常用，多半是在大型計算機上執行[7][8]，Fortran常用在科學及工程應用，C語言常用在嵌入式應用及作業系統中等。
有許多不同的量測方式不同程式語言使用的程度，不同的量測方式也有其各自的誤差：

計算徵才廣告中提到各程式語言的次數[9]。
計算教授或描述各程式語言書籍賣出的數量[10]。
佔計各程式語言目前仍在使用程式碼的長度，不過可能會低估一些公開搜尋不容易找到的程式語言[11]。
利用搜尋引擎計算找到不同程式語言的次數。

langpop.com在2013年整理了不同網站的資料，提出十大最受歡迎的語言如下：C語言、Java、PHP、JavaScript、C++、Python、Shell指令碼、Ruby、Objective-C及C♯.[12]。
歷史[編輯]
主條目：程式語言歷史
1940年代當電腦剛剛問世的時候，程式設計師必須手動控制電腦。當時的電腦十分昂貴，唯一想到利用程式設計語言來解決問題的人是德國工程師康拉德·楚澤。
幾十年後，電腦的價格大幅度下跌，而電腦程式也越來越複雜。也就是說，開發時間已經遠比執行時間寶貴。
於是，新的整合、可視的開發環境越來越流行。它們減少了所付出的時間、金錢（以及腦細胞）。只要輕敲幾個鍵，一整段代碼就可以使用了。這也得益於可以重用的程式代碼庫[13]。
參見[編輯]


程式設計語言列表
編譯器、直譯器
Hello World程式
手稿語言
程式設計
電腦科學、基本的電腦科學主題列表
教育程式語言
文學編程
程式語言理論
虛擬碼
軟體工程、軟體工程主題列表




電腦程式設計主題



參考文獻[編輯]


^ Ettinger, James (2004) Jacquard's Web, Oxford University Press
^ 語言系統簡介. .nuu.edu.tw. [2014-06-05]. 
^ C++語言漫談 (PDF). [2014-06-05]. 
^ MXL
^ HOPL: an interactive Roster of Programming Languages. Australia: Murdoch University. [1 June 2009]. This site lists 8512 languages. 
^ Abelson, Sussman, and Sussman. Structure and Interpretation of Computer Programs. [3 March 2009]. 
^ Georgina Swan. COBOL turns 50. computerworld.com.au. 2009-09-21 [2013-10-19]. 
^ Ed Airey. 7 Myths of COBOL Debunked. developer.com. 2012-05-03 [2013-10-19]. 
^ Nicholas Enticknap. SSL/Computer Weekly IT salary survey: finance boom drives IT job growth. Computerweekly.com. [2013-06-14]. 
^ Counting programming languages by book sales. Radar.oreilly.com. 2 August 2006 [3 December 2010]. 
^ Bieman, J.M.; Murdock, V., Finding code on the World Wide Web: a preliminary investigation, Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation, 2001
^ Programming Language Popularity. langpop.com. 2013-10-25 [2014-01-02]. 
^ Steven R. Fischer,. A history of language,. Reaktion Books,. 2003,. ISBN 186189080X.  請檢查|date=中的日期值 (幫助)


延伸閱讀[編輯]


Abelson, Harold; Sussman, Gerald Jay. Structure and Interpretation of Computer Programs 2nd. MIT Press. 1996. 
Raphael Finkel: Advanced Programming Language Design, Addison Wesley 1995.
Daniel P. Friedman, Mitchell Wand, Christopher T. Haynes: Essentials of Programming Languages, The MIT Press 2001.
Maurizio Gabbrielli and Simone Martini: "Programming Languages: Principles and Paradigms", Springer, 2010.
David Gelernter, Suresh Jagannathan: Programming Linguistics, The MIT Press 1990.
Ellis Horowitz (ed.): Programming Languages, a Grand Tour (3rd ed.), 1987.
Ellis Horowitz: Fundamentals of Programming Languages, 1989.
Shriram Krishnamurthi: Programming Languages: Application and Interpretation, online publication.
Bruce J. MacLennan: Principles of Programming Languages: Design, Evaluation, and Implementation, Oxford University Press 1999.
John C. Mitchell: Concepts in Programming Languages, Cambridge University Press 2002.
Benjamin C. Pierce: Types and Programming Languages, The MIT Press 2002.
Terrence W. Pratt and Marvin V. Zelkowitz: Programming Languages: Design and Implementation (4th ed.), Prentice Hall 2000.
Peter H. Salus. Handbook of Programming Languages (4 vols.). Macmillan 1998.
Ravi Sethi: Programming Languages: Concepts and Constructs, 2nd ed., Addison-Wesley 1996.
Michael L. Scott: Programming Language Pragmatics, Morgan Kaufmann Publishers 2005.
Robert W. Sebesta: Concepts of Programming Languages, 9th ed., Addison Wesley 2009.
Franklyn Turbak and David Gifford with Mark Sheldon: Design Concepts in Programming Languages, The MIT Press 2009.
Peter Van Roy and Seif Haridi. Concepts, Techniques, and Models of Computer Programming, The MIT Press 2004.
David A. Watt. Programming Language Concepts and Paradigms. Prentice Hall 1990.
David A. Watt and Muffy Thomas. Programming Language Syntax and Semantics. Prentice Hall 1991.
David A. Watt. Programming Language Processors. Prentice Hall 1993.
David A. Watt. Programming Language Design Concepts. John Wiley & Sons 2004.


外部連結[編輯]

開放式目錄計劃中和Computer Programming Languages相關的內容
開放式目錄計劃中和程式語言相關的內容
Syntax Patterns for Various Languages
電腦高階程式語言的發展歷程資訊圖










閱
論
編


程式語言分類






按平臺




.NET框架平臺語言



C++/CLI
C#
F#
IronPython
IronRuby
J#
Visual C#
VB.NET
Small Basic








Java虛擬機器上的語言



Java
Jython
JRuby
JScheme（英語：JScheme）
Groovy
Kawa（英語：Kawa）
Scala
Clojure
Kotlin








iOS蘋果手機平臺上的語言



Swift
Objective-C








Android手機平臺上的語言



Java








Fire OS（英語：Fire OS）手機平臺上的語言



Java








Windows Phone手機平臺上的語言



C#











按家族




C/C++語言



C
C++
Turbo C++
Borland C++
C++ Builder - C++/CLI
Visual C++元件擴充功能
Objective-C
Visual C++








BASIC語言




有行號



BASIC
BASICA
GW-BASIC
ETBASIC
GVBASIC








無行號



QBASIC
QuickBASIC
True BASIC
Turbo BASIC
PowerBASIC
FreeBasic
DarkBASIC
Visual Basic
Gambas
VB.NET
VBScript
VBA
REALbasic
Small Basic











Pascal/Delphi語言



Pascal
Turbo Pascal
Object Pascal
Free Pascal
Delphi
Lazarus











按範式




聲明式




函數式




Lisp家族



LISP
Scheme
Common Lisp
Clojure
Racket








ML家族



ML
Standard ML
OCaml
F#











Haskell
Scala
Erlang
Elixir
Clean
Miranda
Logo











邏輯式



Prolog











命令式




結構化




程序式



BASIC
Fortran
C
Pascal
Go








物件導向



Smalltalk
Java
C#
Objective-C
C++
Eiffel
Python
Ruby
Rust
Swift











非結構化







COBOL














超編程




泛型




模板



C++
D











Ada
C#
Delphi
Eiffel
Java
Swift
Visual Basic .NET











反射化



C#
ECMAScript
Java
Perl
PHP
Python
R
Ruby














手稿語言







Lua
Perl
PHP
Python
Ruby
ASP
JSP
Tcl/Tk
VBScript
AppleScript
AAuto（基於Lua）








ECMAScript衍生語言



ActionScript
CoffeeScript
Dart
DMDScript
ECMAScript
JavaScript
JScript
TypeScript








Shell語言



sh
bash
sed
awk
PowerShell
csh
tcsh
ksh
zsh











專業工具語言




科學與統計計算



FORTRAN
SAS
MATLAB
Scilab
GNU Octave
R
S-Plus（英語：S-Plus）
Mathematica
Maple
Julia








GPU用著色器語言



Cg
GLSL
HLSL








資料庫相關程式語言



xBase（英語：xBase）

Clipper
Visual FoxPro


SQL

PL/SQL
T-SQL
SQL/PSM（英語：SQL/PSM）


LINQ
XQuery（英語：XQuery）








置標語言




SGML家族




XML家族



XML
SVG
XML Schema
XSLT
XHTML
MathML
XAML
SSML











SGML
HTML














Curl











工業與輔助設計



AutoCAD











其它



組合語言
ALGOL
APL/J
Falcon
Forth
Io
MUMPS（英語：MUMPS）
PL/I
PostScript
REXX
SAC
Self
Simula
















閱
論
編


電腦語言分類









架構描述語言
硬體描述語言
標記語言
建模語言（英語：Modeling language）
程式語言
查詢語言
規約語言
樣式表語言（英語：Style sheet language）
模板語言
轉換語言（英語：Transformation language）
















閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。











權威控制



LCCN: sh85107313
GND: 4047409-4
BNF: cb13318353n（資料）
NDL: 00569224












 
						取自 "https://zh.wikipedia.org/w/index.php?title=編程語言&oldid=44047976"					
3 個分類：程序設計語言人工語言計算機技術隱藏分類：引文格式1錯誤：日期自2017年2月需補充來源的條目拒絕當選首頁新條目推薦欄目的條目自2017年2月有未列明來源語句的條目含有英語的條目包含規範控制信息的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AfrikaansAlemannischአማርኛAragonésالعربيةمصرىঅসমীয়াAsturianuAzərbaycancaتۆرکجهБашҡортсаBoarischŽemaitėškaБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBrezhonegBosanskiᨅᨔ ᨕᨘᨁᨗCatalàMìng-dĕ̤ng-ngṳ̄کوردیČeštinaЧӑвашлаCymraegDanskDeutschZazakiΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiFrançaisGaeilgeGalegoעבריתहिन्दीHrvatskiHornjoserbsceMagyarՀայերենInterlinguaBahasa IndonesiaInterlingueIlokanoIdoÍslenskaItaliano日本語La .lojban.Basa JawaქართულიTaqbaylitҚазақшаភាសាខ្មែរ한국어КыргызчаLatinaLëtzebuergeschLumbaartLietuviųLatviešuОлык марийМакедонскиമലയാളംМонголमराठीBahasa MelayuMirandésမြန်မာဘာသာPlattdüütschनेपालीNederlandsNorsk nynorskNorsk bokmålOccitanਪੰਜਾਬੀPolskiپنجابیPortuguêsRomânăРусскийРусиньскыйСаха тылаScotsSrpskohrvatski / српскохрватскиසිංහලSimple EnglishSlovenčinaSlovenščinaShqipСрпски / srpskiBasa SundaSvenskaதமிழ்తెలుగుТоҷикӣไทยTagalogTürkçeТатарча/tatarçaУкраїнськаاردوOʻzbekcha/ўзбекчаTiếng ViệtWinarayმარგალურიייִדישYorùbáBân-lâm-gú粵語 
編輯連結 





 本頁面最後修訂於2017年4月18日 (週二) 16:55。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 








C 程式語言教學









程式語言









































Developer Network
Developer Network
Developer




登入




MSDN 訂閱




取得工具





















































很抱歉。您所要求的內容已遭移除。將會在 1 秒內自動重新導向。





設計分散式應用程式
規劃分散式應用程式

選擇工具和技術





選擇工具和技術
程式語言




程式語言




程式語言

















設計工具 

基礎結構技術 

安全性模型 

程式語言 

資料存取技術 

分散式應用程式的通訊 

Visual Studio 中的 XML 



TOC

 
摺疊目錄
展開目錄




本文件已封存並已停止維護。



本文件已封存並已停止維護。

程式語言



                Visual Studio .NET 2003
            




  選擇程式語言要依據您的語言使用經驗以及您所建置之應用程式的範圍而定。小型的應用程式通常只使用一種語言來建立，但使用多種語言來開發大型應用程式並不是件稀奇的事。 例如，如果您正在使用現有的 XML Web Service 來擴充應用程式，您可能會使用只需花費很少或不需花費程式設計功夫的指令碼語言。如果是主從式應用程式，您可能會選擇最習慣使用的單一語言來設計整個應用程式。如果是新的企業應用程式，因為需要有為數眾多的開發人員小組來建立可跨多重遠端站台而部署的元件與服務，那麼最佳的選擇可能是依據開發人員的技術與長期維護的期望來使用數種語言。 .NET 平臺程式設計語言 (包含 Visual Basic .NET、Visual C#、Managed Extensions for C++，以及各種廠商的許多其他程式語言)，是經由一組常用的統一類別來使用 .NET Framework 的服務與功能。.NET 的統一類別提供了一致性的方法以存取平臺功能。如果您學會使用類別庫，就會發現所有工作都會依循相同的制式架構。您將不再需要學習與操控不同的 API 架構以撰寫應用程式。 在大部分情況下，您都可以有效的使用所有 Microsoft 程式語言。然而，每一個程式語言都有其相對強勢之處，您應該會想要瞭解每一個語言獨特的功能。下列章節會協助您選擇開發應用程式時，所需的正確程式語言。 Visual Basic .NET Visual Basic .NET 是 Microsoft 的 Visual Basic 語言的新世代產品。您可以使用 Visual Basic 來建置 .NET 應用程式，包括 Web 服務與 ASP.NET Web 應用程式，既快速又容易。Visual Basic 建立的應用程式是建置在 Common Language Runtime 的服務之上，並充分利用 .NET Framework 的優勢。 Visual Basic 有許多新的與改善的功能，例如繼承、介面與多載化 (Overloading)，讓它成為強大的物件導向程式語言。其他新的語言功能還包括無限制執行緒 (Free Threading) 和結構化例外處理 (Structured Exception Handling)。Visual Basic 可和 .NET Framework 與 Common Language Runtime 完全整合在一起，以提供語言互通性 (Interoperability)、記憶體回收、增強安全性以及改良的版本控制支援。Visual Basic 支援單一繼承並建立 Microsoft Intermediate Language (MSIL)，作為對機器碼編譯器的輸入。 Visual Basic 相對上是比較容易學習與使用的，並且 Visual Basic 在過去十年間已經成為成千上萬個開發人員的程式語言選擇。學會使用 Visual Basic 可以應用在很多方面，例如可在 Visual Studio 中撰寫巨集，並可在如 Microsoft Excel、Access 與 Word 等應用程式中提供程式設計功能。 Visual Basic 提供一些常用之專案類型的原型 (Prototype)，包括：

 Windows 應用程式。 類別庫。 Windows 控制項程式庫。 ASP.NET Web 應用程式。 ASP.NET Web 服務。 Web 控制項程式庫。 主控台應用程式。 Windows 服務。  如需詳細資訊，請參閱 Visual Basic 語言與使用巨集自動執行重複的動作。 Visual C# .NET Visual C# (發音成 C Sharp) 是專門為了快速而輕鬆的建立 .NET 應用程式 (包括 Web 服務與 ASP.NET Web 應用程式) 而設計的一套程式語言。使用 Visual C# 寫成的應用程式是建置在 Common Language Runtime 的服務之上，並充分利用 .NET Framework 的優勢。 C# 是一種簡單、優雅、型別安全、物件導向式的語言，是 Microsoft 新近開發的程式語言，可用於建置各種類型的應用程式。任何熟悉 C 以及相似語言的人，會發現改用 C# 並沒有什麼問題。C# 的設計是要將快速的開發方法帶給 C++ 的程式設計人員，而不需犧牲 C 與 C++ 的強大性與控制性。因為繼承這樣的傳統，C# 對 C 與 C++ 之間擁有很高的相似性，使得熟悉這些語言的開發人員很快就能使用 C# 來提高生產力。C# 提供內建程式碼信任機制以得到高層級的安全性、記憶體回收與型別安全。C# 支援單一繼承並建立 Microsoft Intermediate Language (MSIL)，作為對機器碼編譯器的輸入。 C# 可和 .NET Framework 與 Common Language Runtime 完全整合在一起，以提供語言互通性、記憶體回收、增強安全性以及改良的版本控制支援。C# 簡化並現代化了 C 與 C++ 的一些比較複雜的方面，特別是命名空間 (Namespace)、類別、列舉型別 (Enumeration)、多載化與結構化例外處理。C# 還排除了 C 與 C++ 的一些功能，例如巨集、多重繼承與虛擬基底類別 (Virtual Base Class)。對於目前的 C++ 開發人員而言，C# 提供了強大、高生產力的另一個語言選擇。 Visual C# 提供一些常用之專案類型的原型，包括：

 Windows 應用程式。 類別庫。 Windows 控制項程式庫。 ASP.NET Web 應用程式。 ASP.NET Web 服務。 Web 控制項程式庫。 主控台應用程式。 Windows 服務。  如需詳細資訊，請參閱 Visual C# Standard 版功能與 C# 語言教學課程。 Visual C++ .NET Visual C++ .NET 是 Microsoft Visual C++ 語言的新世代產品。Visual C++ 一直是建立高效能 Windows 與全球資訊網 (World Wide Web) 應用程式的最佳語言。 Visual C++ 提供一些重要的程式庫來協助您撰寫應用程式，包括 Active Template Library (一組用於 COM 物件的範本式 C++ 類別)、ATL Server 程式庫 (一組用於建立 Web 應用程式、Web 服務以及其他伺服器應用程式的原生 C++ 類別) 與 Microsoft Foundation Classes (MFC，支援寫給 Windows API 之應用程式的一組類別)。 Visual C++ 提供一些常用之專案類型的原型，包括：

 Active Template Library (ATL) 專案。 ATL Server 專案。 ATL Server Web 服務。 自訂精靈。 延伸預存程序 DLL。 Makefile 專案。 ASP.NET Web 服務。 類別庫 (.NET)。 主控台應用程式 (.NET)。 Windows 控制項程式庫 (.NET)。 Windows Form 應用程式 (.NET) Windows 服務 (.NET) Microsoft Foundation Classes (MFC) ActiveX 控制項。 MFC 應用程式。 MFC DLL。 MFC ISAPI 擴充程式 DLL。 Win32 專案。  如需詳細資訊，請參閱 Visual C++ 與 Visual C++ .NET Standard 版。 Managed Extensions for C++ 如果您正在建立新應用程式或元件，您可以使用目前的 C++ 知識，以 Managed Extensions for C++ 來撰寫 Managed 程式碼。使用 Managed Extensions 時，您可以取得 Common Language Runtime 所提供的支援與服務等益處 (例如記憶體管理、跨程式語言的整合、程式碼存取安全性以及物件的自動存留期控制)。 Managed Extensions for C++ 也提供了簡單的方式，以便將現有的應用程式整合至 .NET Framework。例如，您可能需要將一些 Unmanaged 程式碼移植至 .NET。因為您已經有先前編譯的靜態、連結程式庫、DLL 與各種 Unmanaged C++ 類別，您可以直接將現有的 Win32 程式碼編譯成 .NET 應用程式。然後，當時間許可時，您還可以利用 Managed 程式碼重新建置元件。 如需詳細資訊，請參閱 Managed Extensions for C++ 程式設計。 Transact-SQL Transact-SQL 是用來儲存、修改與擷取 Microsoft SQL Server 關聯式資料庫中資訊的原生語言。您也可以使用 Transact-SQL 來建立資料庫以及儲存在資料庫中的任何物件，例如資料表、資料行、觸發程序 (Trigger)、索引鍵、索引、檢視、預存程序和函式。Visual Studio 編輯器與 Visual Database Tools 所提供的設計工具，可完全支援 Transact-SQL。  註意   Visual Database Tools 也可以連接至 Oracle 資料庫。當您使用 Oracle 資料庫時，Visual Database Tools 可以正確地處理 Oracle 的特定SQL 語法。如需詳細資訊，請參閱 Oracle 資料庫。 如需詳細資訊，請參閱 SQL Server 2000 與 Visual Database Tools。 指令碼語言 當具有 Internet 功能的應用程式獲取技術上的註目時，與分散式運算環境有關聯之程式設計問題的解決方案也持續在開發。一般來說，指令碼語言並不是什麼新技術，但一些很有用的指令碼語言是最近才開發的。使用這些新的指令碼語言，您就可以輕鬆的在本機桌面上或遠端主控臺中執行指令碼，以處理系統管理工作與程式事件。 Windows Script Host Windows Script Host (WSH) 是 32 位元 Windows 平臺上，與語言無關的指令碼環境。使用 WSH，Microsoft 提供 VBScript、JScript 與 JScript .NET 指令碼引擎。這些指令碼語言可以用於 Web 伺服器的 ASP 網頁、用於在 Internet Explorer 中執行的 HTML 網頁，以及用於 Windows 98 與 Windows 2000 上的 Windows Script Host 指令碼引擎中。 WSH 可以使用任何指令碼語言，來自動化伺服器上的系統管理工作。例如，系統管理員可以撰寫 VBScript 以建立新的虛擬目錄，然後當 WSH 在背景運作時，從命令列執行此指令碼檔案，以便在網站上建立新的虛擬目錄。此外，系統管理員可以針對多個網站或多個實體伺服器，撰寫單一指令碼。 協力廠商有提供其他語言 (例如 Perl、TCL、REXX 與 Python) 的 ActiveX 指令碼引擎。 如需詳細資訊，請參閱 Windows Script Host。 VBScript Microsoft Visual Basic Scripting Edition (VBScript) 是 Microsoft Visual Basic 的子集  如果您曾經用過 Visual Basic，就會覺得它看起來很熟悉。然而，卻不是完全相同。因為 VBScript 的設計是專門讓您用在 Internet Explorer (IE) 瀏覽器中，所以它沒有包含通常是屬於指令碼範圍外的功能，例如檔案存取與列印。不過，搭配 VBScript 使用 FileSystem 物件來操作檔案倒是很常見。 VBScript 將 Active Scripting 帶到各種環境中，包括 IE 中的 Web 用戶端指令碼以及在 Microsoft Internet Information Services (IIS)、Microsoft Internet Security and Acceleration Server (ISA) 與 Sun Solaris 中的 Web 伺服器指令碼。VBScript 是一種快速、可攜式並且解譯過的物件導向式指令碼語言，可處理直接內嵌於 HTML 網頁中的原始程式碼。您可以使用 VBScript 將智慧功能與互動功能加入 WSH、ASP 與 HTML 網頁中。 就像 JScript 一樣，VBScript 會使用 Windows Script 和主應用程式溝通。使用 Windows Script 時，瀏覽器與其他主應用程式不需要在每一個指令碼元件中使用特殊的整合程式碼。Windows Script 會啟用主機來編譯指令碼，取得和呼叫進入點，並管理開發人員可用的命名空間。 VBScript 是一種型別鬆散的語言。型別鬆散的意思是說您不需要明確地宣告變數的資料型別。實際上，您也無法在 VBScript 中明確地宣告資料型別。此外，在許多情況下，VBScript 會在需要時自動執行轉換作業。例如，如果您將數字加入包含文字 (字串) 的項目中，數字就會轉換成文字。 如需詳細資訊，請參閱《VBScript User's Guide》。IE、IIS 與 ISA 都有提供 VBScript，或者您也可以從 Microsoft Windows Script 技術網站 (http://www.microsoft.com/taiwan/products/develop/scripting/default.asp) 下載 VBScript。 JScript Microsoft JScript 是專為 Web 網頁指令碼而設計的程式語言。JScript 符合 ECMA 262 語言規格。JScript 是專門用於 Internet 的強大指令碼語言。就像 VBScript 一樣，JScript 是一種解譯的、物件導向式的指令碼語言，可處理直接內嵌於 HTML 網頁中的原始程式碼。JScript 可在 Internet Explorer 與 Netscape 瀏覽器上執行。 就像 VBScript 一樣，JScript 也是使用 Windows Script Host 與主應用程式溝通。使用 Windows Script Host ，瀏覽器與其他主應用程式不需要在每一個指令碼元件中使用特殊的整合程式碼。Windows Script Host 會啟用主機來編譯指令碼，取得和呼叫進入點，並管理開發人員可用的命名空間。 JScript 是一種型別鬆散的語言。型別鬆散的意思是說您不需要明確地宣告變數的資料型別。實際上，您也無法在 JScript 中明確地宣告資料型別。此外，在許多情況下，JScript 會在需要時自動執行轉換作業。例如，如果您將數字加入包含文字 (字串) 的項目中，數字就會轉換成文字。 如需詳細資訊，請參閱 JScript。 JScript .NET JScript .NET 是 Microsoft 實作 ECMA 262 語言的新世代產品，是和 ECMAScript 第 4 版一起開發的。它是專門設計在 Common Language Runtime 內執行，以管理程式碼的執行，並提供可讓開發程序更簡易的服務。使用 JScript .NET 時，您可以使用的功能有：跨程式語言的整合、跨程式語言的例外處理、增強的安全性、版本控制與部署支援、元件互動的簡化模型以及偵錯與分析服務。 JScript .NET 將傳統 JScript (可以完全回溯相容) 的現有功能組和 Common Language Runtime 以及類別式語言的最佳功能結合在一起，為您提供了所有的優點。JScript .NET 改良的功能包括真實編譯的程式碼、具型別和不具型別的變數、類別 (具有繼承、函式多載化、屬性存取子等等)、封裝、跨程式語言支援以及存取 .NET Framework。 如需詳細資訊，請參閱 JScript .NET 的新功能。 可延伸標記語言 (XML) XML 提供描述結構式資料的格式，讓您可以有精確的內容宣告以及跨多種平臺的有用之搜尋結果。XML 是依據目的來定義資訊與資料，而不是依據其表現方式，這樣數個應用程式就可以用可促進多樣化的應用程式重新使用與擴充性的方式來使用資訊與資料。XML 是日漸重要的中繼標記語言，很適合在 Internet 上使用。  重要的是您必須知道 .NET Enterprise Servers 的各種產品都支援 XML 作為資料交換格式。例如，SQL Server 2000 的 SQL XML 功能讓 .NET 應用程式可以用 XML 文件的方式，來取得資料庫的查詢結果，而不是取得關聯式結果集。作為 .NET 平臺的重要技術，XML 正開啟了用戶端與提供者 Web 式服務的新世代。 XML 並不是 HTML 的替代方案。雖然兩者都是標記語言，它們卻以互補的方式在運作。HTML 的強勢之處是在資訊的顯示方面，而 XML 則是描述資訊的優異方法。XML 的強勢之處，有部分是由於它能將使用者介面與所顯示資料分開的能力，如先前所述，這樣就能達到跨平臺的效能。 在分散式應用程式架構中，XML 的訊息功能可讓您以標準傳輸機制，輕易地透過防火牆並在異質性系統之間移動資料。無論您的應用程式需要的是什麼  匯入、匯出、資料交換、與其他應用程式的互通性 (例如 Office 2000 或 Exchange 2000)、剖析、修改、資料存取、資料儲存  XML 都是很好用的資料交換格式。Visual Studio .NET 提供一些很好的工具，可以與 XML 以及您最愛的程式語言搭配使用。 如需詳細資訊，請參閱 Visual Studio 中的 XML。 Visual J++ Microsoft 提供 Java User Migration Path to Microsoft .NET (JUMP to .NET ─ 「跳」至 .NET)，作為可讓程式設計人員將 Java 語言專案保留、增強與轉換至 Microsoft .NET 平臺上的一組技術與服務。若使用 JUMP to .NET，在將應用程式與元件擴充至 .NET 平臺上時，您還可以繼續利用現有 Visual J++ 技術與原始程式碼的優勢。如果您熟悉 Visual J++ 語言，就可以用它來建立新的 .NET 應用程式，或是使用自動化轉換工具將現有的程式碼，輕鬆地遷移至新的 C# 語言。  如需詳細資訊，請參閱 Microsoft Visual J++ 網站 (http://msdn.microsoft.com/visualj/jump/default.asp)。 其他語言 Microsoft 和許多公司合作，將他們的程式語言帶到 .NET 平臺。除了 Microsoft 所提供的語言之外，還有許多以 .NET 平臺為目標的其他語言，包括：

 COBOL for Microsoft .NET。 Perl for Microsoft .NET。 Eiffel for Microsoft .NET。 Python for Microsoft .NET。 Pascal for Microsoft .NET。 Mercury for Microsoft .NET。 Mondrian for Microsoft .NET。 Oberon for Microsoft .NET。 Salford FTN95 (Fortran) for Microsoft .NET。 SmallTalk for Microsoft .NET。 Standard ML for Microsoft .NET。 Dyalog APL for Microsoft .NET。  如需詳細資訊，請洽詢相關程式語言廠商。 請參閱 決策圖表 | Visual Basic 語言 | Visual C# 語言 | Visual C++ | JScript .NET 的新功能 | Visual Studio 中的 XML  


顯示:

受繼承
        

受保護
        







列印

匯出 (0)
            







列印

分享
            













本文內容




















本頁對您有幫助嗎？
是
否





其他意見反應？


剩餘 1500 個字元

提交
略過此項







謝謝！
我們非常感謝您提供的意見反應。










© 2017 Microsoft






































	
    Java SE8程式語言設計
















This site requires javascript

                    為了能正常使用本網站
                    請您啟動瀏覽器的scripting設定
 
                    IE設定步驟
                    步驟一：工具/網際網路選項
                    步驟二：安全性/自訂等級
                    步驟三：指令碼處理，選擇啟用
                    關閉IE後再重新開啟IE，即可正常使用本網站。    
                

























課程介紹

課程查詢
課程進階查詢
說明會講座
申請重聽
Red Hat Internet Remote LAB線上申請
原廠介紹



Amazon Web Services

Adobe

Cisco 思科

Cloudera

EC-Council

EnterpriseDB

Guidance

(ISC)²

ITPreneurs

Microsoft 微軟

Oracle 甲骨文DB/BEA

Oracle 甲骨文Java/Solaris

PMI®

RedHat 紅帽

SGS

Salesforce

VMware

Veritas
Prometric
VUE





轉職培訓

恆逸轉職培訓網站
雲端虛擬化系統工程師就業認證養成班
互動式網站與Mobile App設計師養成班
智慧型手機應用程式設計實務班
微軟全方位網站程式設計師養成班
Java全方位Web程式設計師養成班
生產力4.0物聯網IoT智慧應用技術養成班
全省職訓補助專案課程


師資介紹

考試中心

考試最新訊息
各區考試中心
考試費用一覽表
國際認證考試報名流程
Prometric考試中心
VUE考試中心
Kryterion考試中心
報名Red Hat 認證考試
考試FAQ



關於恆逸

恆逸教育訓練中心介紹
臺北恆逸
新竹恆逸
臺中恆逸
高雄恆逸
原廠授權夥伴介紹
精誠資訊附設職訓中心介紹
精誠資訊附設職訓中心新竹分部介紹
精誠資訊附設職訓中心臺中分部介紹



企業服務

企業服務介紹
企業教育訓練點數
企業包班
場地租借
企業徵才



主題專區

恆逸轉職培訓網站
恆逸最新課程簡介
恆逸校園網站
恆逸學生網站
恆逸顧客證言網站
恆逸資訊安全網站
.NET程式開發 X 資料庫
廠商最新職缺


















 


首頁 > 課程查詢 > SL-275-SE8








Oracle - SL-275-SE8
Java SE8程式語言設計Java SE8 Programming

時數：30小時
費用：NT$ 49,700
點數：15.0




選擇查詢分區開課時間

臺北
新竹
臺中
高雄



            開課時間請洽詢業務
聯絡恆逸





 臺北 172755 班
                        
                        
2017/08/07 ~ 2017/08/11每週一二三四五09:00~16:30

報名





 臺北 172756 班
                        
                        
2017/10/16 ~ 2017/10/20每週一二三四五09:00~16:30

報名





 臺北 172757 班
                        
                        
2017/12/04 ~ 2017/12/08每週一二三四五09:00~16:30

報名





 高雄 172755ZK 班
                        

                        Live

2017/08/07 ~ 2017/08/11每週一二三四五09:00~16:30

報名







                點此展開更多課程時段
            



                點此收合列表
            





教材
Oracle原廠教材eKit
課程目標
本課程教您使用最新的Java SE 8來撰寫Java程式，課程內容涵蓋物件導向的概念以及Java進階語法，像是Lambda Expression、Design Pattern、JDBC連結資料庫、多執行序以及Fork-Join框架等與設計觀念，並為已熟悉電腦語言、程式設計的開發人員介紹如何利用Java語言及環境來開發Application。
適合對象

專門為已熟悉電腦語言程式設計的開發人員介紹如何開發Java Application
欲開發Android App者
想要瞭解Java程式語言的開發人員

預備知識

已熟悉電腦語言程式設計
會操作Windows作業系統
Java程式語言基礎語法
資料庫基礎概念
基礎SQL語法

課程內容

Java平臺與開發環境介紹
回顧Java語法及類別
封裝與繼承
Overriding Method
多型
static
Singleton Design Pattern
抽象類別、介面、巢狀類別
Lambda Expressions
集合(Collections)與泛型(Generics)
Builder Design Pattern
使用Lambda Expression走訪集合物件
使用Lambda Expression過濾集合物件
Lambda內建的Funtional Interface
使用Lambda操作資料
Exceptions 及 Assertions
Java Date/Time API
I/O基礎及NIO.2
並行(Concurrency)及Fork-Join框架
Parallel Streams
JDBC
Localization

備註事項
白天班課程含供餐服務




相關課程



關聯課程


UML Java物件導向應用程式分析與設計 

Java Web應用實戰營之電子商務購物網站開發實作 

開發Java EE應用程式 

Java設計模式 

使用JavaScript及HTML5開發Web應用程式 

Java EE6之利用JPA技術開發資料庫應用程式 

Java Servlet程式的開發與JSP技術 

Java EE 7之前端Web應用程式開發 

Java EE 7之後端伺服器應用程式元件開發 

Java EE 6之利用JSF技術開發Web應用程式 

Java SE8初階程式設計 

OCEJWCD Java Web 元件系統開發專家認證訓練課程 

OCPJP SE8 Java程式設計師認證課程 

Java EE6之使用JMS和EJB進行商業元件開發 

利用Mission Control與Flight Recorder進行Java效能調校 

Java SE 7之多樣化前端應用系統開發 

Java SE8程式語言設計 

Java EE 6之利用JAX-WS及JAX-RS技術開發Web Services 

Java視窗應用實戰營之購物系統管理開發實作 


















說明會資訊



臺北場次

日期：07/21(五)

                        打造微軟程式設計師職涯講座
                    
免費參加


日期：07/25(二)

                        PMP®國際專案管理師認證講座
                    
免費參加


日期：07/27(四)

                        PDU專案管理講座-群英會診我專案
                    
免費參加


日期：08/09(三)

                        Java Web程式設計師養成班講座
                    
免費參加


日期：08/11(五)

                        智慧型手機App開發養成講座
                    
免費參加


日期：08/16(三)

                        多媒體RWD設計師養成班講座
                    
免費參加




更多講座訊息












	網頁設計常見問題-請問網站要用那種程式語言開發比較好呢？















































































































































Oh My Shop









































































































































































































常見問題
網頁設計及網頁製作常見問答總覽



















                                    網站建置相關

                                    網站建置前需知







help

                                            請問網站要用那種程式語言開發比較好呢？
                                        

16322





目前市面上常見之網頁設計程式語言有Asp、Asp.Net、PHP…等，每種程式語言都可以製做出您想要的網站系統功能，至於要選擇那一種程式語言進行網站開發，理論上是取決於您所使用的網站空間是屬於什麼平臺，每種平臺有最適合使用的程式語言，例如您的網站空間使用微軟的Windows平臺，那麼當然建議您的系統開發可使用同為微軟開發的Asp或Asp.Net來進行製作，相容性及效能一定會優於Linux平臺；若您的網站空間使用Linux平臺的話，那當然就建議使用Linux專用的PHP程式語言來進行開發囉。
此外，如果您是選用Windows平臺的話，那麼會建議您使用Asp.Net程式語言，因為Asp.Net為微軟目前主推，繼Asp之後的程式語言，除了它支援物件導向之外，於網站效能及開發製作時間也較快，所以如果您若要使用Windows平臺來放置網站，建議您可以請設計公司採用Asp.Net來為您建置網站。


keyboard_backspace 回上頁





請選擇下方問題類別，查詢是否有您想諮詢的網頁設計問題。





網站建置相關66


網站建置前需知28
網頁設計資料準備事項5
網站建置相關費用5
網站改版註意事項3
網頁設計公司相關5
其它註意事項4
藝誠網頁設計相關16




網頁設計相關10


網頁設計基本觀念8
網頁設計實用技巧1
無障礙網頁設計1




網站空間相關10


網站空間基本觀念6
租用虛擬主機需知2
自行架設主機需知2




網域名稱(網址)相關16


網域名稱基本觀念12
網域名稱申請相關4




網路行銷相關26


網路行銷基本觀念6
SEO搜尋引擎優化8
PPC關鍵字廣告4
付費及交換連結2
活動網站相關2
部落格行銷2
E-Mail行銷相關1
置入性行銷相關1




網路金流相關8


網路金流基本觀念6
網路金流申請相關2




其它問題10


網站經營相關7
網站常見問題排除3









若您找不到想諮詢的網頁設計相關內容！歡迎您來信與我們聯絡，我們將由專人為您解決！
email















我們網站需要用到線上刷卡，請問套版及租用型的網站製...


我的網站一定要有網站地圖(SiteMap)的頁面嗎？


金流服務的手續費用，是怎麼認定的呢？


我想重新建罝新的網站，並且移至新的主機，但我已有舊...


我所購買要用於網站中的照片，是否有擁有權？


何謂「關鍵字點選付費廣告(PPC)」？


常見問題






線上詢價
線上專人諮詢





經濟部認可
技術服務機構





RSS 2.0訂閱
訂閱網站摘要









線上詢價
線上專人諮詢





藝鑫網路行銷
關鍵字行銷(SEO'PPC)社群行銷(FB'BLOG)





WRP
網站資源整合平臺









EZ Web
智慧型網站






WRP
資源整合網站






OO
網站達人






EZthink
藝鑫網路行銷






































藝誠科技
TEL 04-2230-1313 FAX 04-2230-9191
臺中網頁設計：藝誠網頁設計公司
藝誠網頁設計Facebook


營業時間
平日 09:00~18:00
(週末、國定假日休息)

404
臺中市北區
崇德路一段629號11樓之2




LINK

客服中心
WEBSITE







網站設計
SEO
網路行銷
網站建置
線上詢價
遊購網
相關連結

近期熱門搜尋：網路行銷‧毛巾批發‧產品包裝‧臺中室內設計



網頁設計
前端設計
程式設計


COPYRIGHT 2016 ⓒ EZTRUST TEGHNOLOGY CO.,LTD




























升學 電腦程式語言的科系 | Yahoo奇摩知識+




















 









   ⌂首頁信箱新聞股市名人娛樂氣象運動App下載購物中心商城拍賣更多⋁知識+汽車機車電影字典遊戲旅遊理財房地產時尚美妝折扣城   Yahoo 奇摩知識+                        👤 登入    ✉ 信箱     ⚙ 服務說明    帳號資料 服務說明 意見回報        
















Yahoo奇摩知識+ 首頁











所有分類
 
健康
 
商業與財經
 
娛樂與音樂
 
家居與園藝
 
家庭與人際關係
 
寵物
 
懷孕與育兒
 
政治與政府
 
教育與參考
 
新聞與活動
 
旅遊
 
汽車與交通
 
消費電子產品
 
環境
 
社會科學
 
社會與文化
 
科學
 
美容與造型
 
藝術與人文
 
遊戲與休閒活動
 
運動
 
電腦與網際網路
 
食品與飲料
 
餐廳與小吃
 





世界Yahoo 








阿根廷





澳洲





巴西





加拿大





法國





德國





印度





印尼





義大利





馬來西亞





墨西哥







紐西蘭





菲律賓





魁北克





新加坡





香港





西班牙





泰國





英國與愛爾蘭





美國





越南





西班牙文







關於





關於 Yahoo奇摩知識+
社群指南
排行榜
點數與等級
部落格
如何安全地使用 Yahoo奇摩

 








 健康

 心理健康


 看另一則問題 










            升學 電腦程式語言的科系
        


我現在高二了!! 

我目前有興趣的是 

學程式 

比較想往 

設計程式 

或設計遊戲方面的 

或設計外掛 遊戲外掛....等等的方面 

和類似 開心農場那種的 

因為畢竟現在的人 都比較常用電腦.遊戲 

目前比較看好這方面 或許這方面 往後會比較賺錢.... 



程式語言該讀哪科?? 

我目前就讀 微電腦修護科系 

若往後要考該科系 

我有幾間學校可選 公立 私立 

和科系名稱 

請瞭解升學這方面 

和程式語言設計的學生 

歡迎回答!!

更新: 
回 第一次約會 

微電腦修護 是屬於實用技能班 

若我想從事 

程式設計的科目 

該讀哪科？？ 

你講解的都是 遊戲設計 

有個問題 

若我想開啟dll檔的話 

該用何種軟體？？開啟 

若初階學程式設計 該用什麼程式？？ VB？？

更新 2: 
謝謝你的講解 

幫我看一下 

國立 夜間 

有這門科系的以及分數 

在麻煩你





 
追蹤 


 
 1 個解答 
1


檢舉不當使用









您確定要刪除此解答嗎？
是
否












 









抱歉，似乎發生一些問題。



Trending Now





 

解答














最佳解答: 
             四技二專來說，以"遊戲設計"為主軸的學校按照分數排下來 

雲科大    雲科大的數位媒體設計系 

龍華科大 遊戲設計系 

樹德科技大學   數位科技與遊戲設計系 

育達商業科技大學(原育達商業技術學院)多媒體與遊戲發展科學系遊戲設計組   

我個人只對龍華比較熟悉，畢竟他們有在電視上露過面，建議你到這些學校的BBS上看看有沒有作品發表。 

上面只有雲科大是國立，而且有些有類別限制，例如要設計類才能報考，詳情，建議你可以跟高三學長借推甄的書籍來看，上面會有今年度各大專院校的推甄名額。 

你的科系，我比較孤陋寡聞，還沒有聽過這個科系，我想你們科系應該是屬於電子類別?上面的都是電子類可以報考的，所以如果你不是電子類，像是樹德與育達科大也是有名額提供給商管類。 

重點整理 

第一，遊戲設計，會分為好幾個部門去分工，如動畫設計、人物控制等，建議你先想好自己喜歡的是遊戲設計的哪個部分?在去做專精。 


第二，遊戲設計是部分運用到程式語言去控制，兩方面科系學的，可是會有差異，遊戲設計上面有所介紹科系，像程式語言部分就是資訊工程系、電子工程系等，會比較著重於程式語言與邏輯方面的東西。 

遊戲設計系與資訊工程系，在學校所學方向是差很多的。只不過是部分東西會重疊，遊戲設計系是以設計遊戲而去學程式語言，資訊工程系則是以程式語言去發展未來可能性。 


希望對你有幫助 

 2010-01-11 18:43:32 補充： 
程式語言的話，就是資訊工程系、電子工程系。資訊工程系80%軟體、20%硬體，電子工程系60%硬體、40%軟體。資訊工程系主要就是在學邏輯性，跟告訴你現在有哪幾種程式語言，可以跟哪一方面做結合。 

 2010-01-11 18:43:50 補充： 
這是06年的四技二專登記分發最低錄取分數，本島國立四技二專就這幾間 

國立台灣科技大學 資訊工程系 四技 日間部 電子類：30名 634分  

國立臺北科技大學 資訊工程系 四技 日間部 電子類：24名 618分  

國立高雄應用科技大學 資訊工程系 四技 日間部 電子類：26名 585分  

國立虎尾科技大學 資訊工程系 四技 日間部 電子類：46名 569分  

國立臺中技術學院 資訊工程系 四技 日間部 電子類：30名 551分  

國立勤益技術學院 資訊工程系 四技 日間部 電子類：54名 537分 

 2010-01-11 18:43:54 補充： 
.dll，你必須使用二進制檢視軟體來開啟(如WinCV)，至於編輯的話，你必須看的懂 "機器語言"，並瞭解PE檔案格式每個欄位代表的意義，要是你想修改的話 先去把PE格式瞭解一下。 

 2010-01-13 13:37:52 補充： 
你要找的是資工系還是遊戲設計系?網路上直接在google搜尋就可以了，直接打98年四技二專登記分發分數，就可以查詢的到。 




 參考資料： 
 


第一次約會
 · 8 年前 





0
真讚



0
真遜





檢舉不當使用


意見





 




新增意見











送出












 · 剛才不久













                  發問者的評分
                







 

檢舉不當使用

 我認為此問題違反社群指南 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此問題違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此解答違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此解答違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此意見違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此意見違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消



 

你可能對以下搜尋感興趣：


改善你的失眠困擾

方便好攜帶輕鬆掌握血糖狀況

紓壓釋放所有的疲累

解決牙周問題重現美麗皓齒












發問問題
通常可在幾分鐘內獲得解答！







展開»






詳細資料



詳細資料






現有問題




更多





請多詳述您的問題
上傳處理中




上傳失敗。 請上傳大於 100x100 像素的檔案
目前發生問題，請再試一次。
您只能上傳 PNG、JPG 或 JPEG 等類型的檔案。
您只能上傳 3GP、3GPP、MP4、MOV、AVI、MPG、MPEG 或 RM 等類型的檔案。
您只能上傳不超過 5 MB 的相片。
您只能上傳不超過 600 MB 的影片。
您只能上傳相片 (png, jpg, jpeg) 或影片 (3gp, 3gpp, mp4, mov, avi, mpg, mpeg, rm)。
您只能上傳相片或影片。
影片不應超過 <b>600mb/5 分鐘</b>
相片不應超過 <b>5mb</b>
影片不應超過 <b>600mb/5 分鐘</b>相片不應超過 <b>5mb</b>
  







解答問題


男友成績比較差，我是前段班，平日每天都要上課到五點再六點補習到九點，六日也有特色團隊整天的訓練。他覺得我跟他愈來愈疏遠，我也很自責沒辦法陪他，該怎麼安慰他？



 

如何在相親中增加自信的方式.交友?



 

很討厭我妹 不知道該怎麼辦?



 

男人性功能障礙感覺很自卑怎麼辦?



 


發燒問題




男人性功能障礙感覺很自卑怎麼辦?

                  5 個解答
              

 

男人有陽痿症狀如何是好?

                  5 個解答
              

 

男人有陽痿症狀如何是好?

                  6 個解答
              

 
更多問題





桃園大有國小附近推薦身心科診所?

             5 個解答
         

 

怎麼治療心理性陽痿???

             4 個解答
         

 

如何才能快速的治好心理性陽痿?

             6 個解答
         

 

  








服務條款


隱私權


RSS




































程式語言教學誌







































































































程式語言教學誌



程式語言 C, C++, C#, Java, JavaScript, Objective-C, Perl, PHP, Python, Ruby, Swift與網頁標記語言 HTML, CSS 的教學部落格




















網頁



導論


G+ 專頁


G+ 社群


FB 粉絲團


FB 社團


Twitter


English Version


關於本站


意見提供或問題回報


C語言教材


C++入門指南


C++速查手冊


舊C++教材


C#教材


Java入門指南


舊Java教材


舊JavaScript教材


舊Objective-C教材


舊Perl教材


舊PHP教材


Python入門指南


舊Python教材


舊Ruby教材


舊Swift教材


HTML5快速導覽


CSS2.1快速導覽














































































































本站電子書

您可以在這些電子書店找到本站電子書： Google Play 圖書、 iBooks Store 、 HyRead 、 Readmoo 、 Pubu 。
《如何自學程式設計》入選 Google Play 台灣地區2016年度最佳書籍




































index - 程式語言教學誌導覽目錄





我們的生活幾乎與工業密不可分，從日常用品到門鈴、電梯、路燈、指示牌等等 .... 等等，這全都是工業化的製品。工業，藉由機器早已取代了大量的人力，齒輪是很多機器裡的基本組成元件之一 
 


大齒輪可以省力，小齒輪可以增加轉速，不同尺寸的齒輪相互巧妙的疊合，便可做出許許多多實用的機器來。利用齒輪的方式，我們需要瞭解齒輪間如何相互轉動的基本原理，也就是說，大小齒輪之間如何組合達到力矩平衡，齒輪的齒數、轉動的圈數、排列方式等等都得列入考量，這會是我們設計以齒輪為主要元件的機器前，所要先具備的知識。 


早期的計算機也有利用齒輪製造的，不過當電子技術發展日新月異的今天，絕大多數的電腦都已經由電子線路所取代。電子線路的優點在於只需考慮有電壓及沒有電壓兩種情況，有電壓時，值趨近於 1 ，反倒沒有電壓時，其值趨近於 0 ，這樣一來，電子線路的思考變成 010101 .... 的方式，這便是數位化的由來。 


0 與 1 構成二進位數字，就是說逢二就進位，以下為二進位數字與十進位數字對照表 
十進位二進位十進位二進位十進位二進位十進位二進位
00161000032100000 48110000
11171000133100001 49110001
21018100103410001050110010
31119100113510001151110011
410020101003610010052110100
510121101013710010153110101
611022101103810011054110110
711123101113910011155110111
8100024110004010100056111000
9100125110014110100157111001
10101026110104210101058111010
11101127110114310101159111011
12110028111004410110060111100
13110129111014510110161111101
14111030111104610111062111110
15111131111114710111163111111


ASCII 則是利用七位元的二進位所組成的編碼系統，例如 1100001 表示十進位數字的 97 ，在 ASCII 中則表示英文小寫字母 a 。類似的方式，有許多不同需求的編碼系統衍生出來，如 Unicode 、 JPEG 、 MIDI 等。  


電腦程式的主要工作就是處理編碼，不論把編碼形式儲存到檔案、傳送到輸出設備上，或是轉換成另一種編碼形式，這全都是電腦程式的功能。我們該如何寫程式呢？有許多不同的方法，最常見的就是準備好文字編輯器囉！ 

怎麼寫程式如何自學程式設計
如何自學程式設計 第二部分
使用文字編輯器寫程式 
整合開發環境 

程式語言與金庸小說中的絕世武功C 比之九陰真經，學會並掌握指標，天下無敵。
C++ 比之龍象般若功，有十三層，但修煉不易，無人超過第十層。
C# 比之彈指神通，高手運用手指的巧勁就能施展。
Java 比之獨孤九劍，敗中變化出的招式，不限平臺的 JVM 。
JavaScript 比之胡家刀法，六字訣變幻莫測，瀏覽器上都能運作。
Objective-C 比之六脈神劍，獨家不傳絕技。
Perl 比之龍爪手，少林正宗武學，幾乎 Linux 高手必備。
PHP 比之黯然銷魂掌，需要深厚內力才能使出。
Python 比之降龍十八掌，簡單卻威力強大。
Ruby 比之乾坤大挪移，這要用過了才會知道。
Swift 比之一陽指，六脈神劍的精髓，本來同樣是獨家不傳絕技，不過現在 open source 了。
程式語言自修指南1. 弄清楚程式語言能做什麼事情，也就是先瞭解程式語言的用途，技術面來說就是開發項目，像是桌上型電腦應用軟體、手機應用程式、遊戲或架設網站等等。
2. 弄清楚怎麼樣才能稱作一個程式，例如 Java 的可執行程式要有個 main() 方法， Python 的程式檔案都稱作模組。
3. 弄清楚程式的結構，也就是搞懂每個關鍵字的用途，基本上來說這就是邏輯的部份。
4. 弄清楚型態是什麼，型態跟變數有什麼關係，型態跟函數或方法又有什麼關係。
5. 最後，弄清楚程式庫是什麼，程式庫有什麼方便的地方。
程式設計解題指南1. 弄清楚輸入項目，以及輸入的方式，例如從命令列輸入或是從檔案、網頁或 GUI 輸入。
2. 弄清楚輸入的內容要用什麼資料結構儲存，例如 C 、 C++ 、 Java 等有陣列， Python 有串列等。
3. 弄清楚怎麼處理資料，是否需要計算，計算結果要儲存到哪裡。
4. 弄清輸出項目，也就是要輸出什麼，計算結果抑或某種演算法。
5. 弄清楚要怎麼輸出，以及輸出到什麼設備上，例如命令列、檔案、網頁或 GUI 等。
程式設計問問題指南1. 請說明程式的目的，例如要做什麼事情或計算出什麼結果。
2. 請說明自己的努力，自己寫了什麼東西或想要怎麼寫。
3. 請說明直譯器或編譯器提供的錯誤訊息，或是程式跑出哪些不如預期的結果。
4. 請提供排版過的程式原始碼，盡可能將程式碼張貼在分享網站上。
程式語言教材C 語言入門指南 V1.00 電子書
C 語言速查手冊電子書
舊 C 語言教材目錄 ＋
GCC(MinGW) 的下載
GCC(MinGW) 的安裝
GCC(MinGW) 於 MS-Windows 命令列路徑的設定
C 語言快速導覽
C 語言標準函數庫分類導覽
C 語言標準函數庫分類導覽 - 索引
C 語言初學教材
C 語言線上中文資源
C++ 入門指南 V2.00 電子書
C++ 速查手冊 V1.00 電子書
舊 C++ 教材目錄 ＋
C++ 入門指南
C++ 快速導覽
C++ 線上中文資源
C# 入門指南 V2.00 電子書
C# 速查手冊電子書
舊 C# 教材目錄 ＋
C# 入門指南
C# 快速導覽
C# 線上中文資源
Java 入門指南 V2.00 電子書 
Java 速查手冊電子書
舊 Java 教材目錄 ＋
JDK 的下載
JDK 在 MS-Winsdows 的安裝、設定
Java 入門指南
Java 快速導覽
Java API 分類導覽
Java 線上中文資源
舊 JavaScript 教材目錄 ＋
JavaScript 入門指南
JavaScript 快速導覽
HTML DOM 快速導覽
JavaScript 線上中文資源
Objective-C 入門指南 V2.00 電子書
Objective-C 速查手冊電子書
舊 Objective-C 教材目錄 ＋
Objective-C 入門指南
Objective-C 快速導覽
Objective-C 與 iOS 線上中文資源
Perl 入門指南 V2.00 電子書
Perl 速查手冊電子書
舊 Perl 教材目錄 ＋
Perl 入門指南
Perl 線上中文資源
PHP 入門指南 V2.00 電子書
PHP 速查手冊電子書
舊 PHP 教材目錄 ＋
PHP 入門指南
PHP 快速導覽
PHP 線上中文資源
Python 新手之旅 V1.10 (Google Play) ＋
單元 1 - Python 的資源
單元 2 - Python 的開發工具
單元 3 - Python 與數學
單元 4 - Python 與物件導向程式設計
單元 5 - Python 的測試、除錯與模組
單元 6 - Python 中豐富的標準模組庫
單元 7 - Python 有各式各類的開發應用
單元 8 - Pyhton 的模組庫管理及編譯成執行檔
Python 入門指南 V2.00 電子書 
Python 速查手冊電子書
舊 Python 教材目錄 ＋
Python 的下載、安裝
Python 於 MS-Windows 的命令列路徑設定
Python 入門指南
Python 3.1 快速導覽
Python 線上中文資源
Ruby 入門指南 V2.00 電子書
Ruby 速查手冊電子書
舊 Ruby 教材目錄 ＋
Ruby 的下載、安裝
Ruby 入門指南
Ruby 線上中文資源
Swift 入門指南 V1.00 電子書
Swift 速查手冊電子書

若您完全沒有電腦的基本概念，您可以先參考筆者另一份以 Python 2.5.2 為教學語言的 
電腦做什麼事

標記語言教材
HTML 5 入門指南 V2.00 電子書
HTML 5 速查手冊電子書
舊 HTML 教材目錄 ＋
HTML 5 快速導覽
HTML 4.01 快速導覽
HTML 線上中文資源
CSS 的一堂課 V1.00 電子書 (Google Play)
舊 CSS 教材目錄 ＋
CSS 2.1 快速導覽
CSS 線上中文資源

其他，關於本站所使用的語法高亮度 
SyntaxHighlighter 在 Blogger 的使用教學

如何自學寫作

The End




以電子郵件傳送這篇文章BlogThis！分享至 Twitter分享至 Facebook分享到 Pinterest


















標籤：
導覽









較舊的文章

首頁




訂閱：
文章 (Atom)

























搜尋此網誌




























E-mail 訂閱






























RSS 訂閱













連結到本站



kaichingc@gmail.com










































重要說明

本站教材的設計目標是以高中生到大一程度或程式設計的完全新手為主，尤其《入門指南》系列帶領讀者開發簡單的 GUI 軟體，簡言之目標為學習開發軟體的流程，其作為學習程式語言的第一本書，而非最後一本書，建議您完成《入門指南》後繼續找尋其他書籍研讀程式設計的技巧及程式語言的細節，語言細節部分也可先參考本站的《快速導覽》或《速查手冊》，謝謝。











本站電子書


Google Play Books 

如何自學寫作 V1.00
如何自學程式設計 V1.00
如何自學程式設計 第二部分 V2.00
C 的一堂課 V2.00
Python 的一堂課 V2.00
Python 新手之旅 V1.10
Python 入門指南 V2.31
C++ 入門指南 V2.21
C++ 速查手冊 V1.02
Java 入門指南 V2.11
Swift 入門指南 V1.21
HTML 的一堂課 V5.00
CSS 的一堂課 V1.00
EPUB 的一堂課 V1.00

iBooks Store

如何自學程式設計 V1.00
Python 的一堂課 V1.00
Python 新手之旅 V1.10
Python 入門指南 V2.31
C++ 入門指南 V2.21
C++ 速查手冊 V1.02
Java 入門指南 V2.11
Swift 入門指南 V1.21
EPUB 的一堂課 V1.10

Readmoo

如何自學寫作 V1.00
如何自學程式設計 V1.00
Python 新手之旅 V1.10
Python 入門指南 V2.30
C++ 入門指南 V2.20
C++ 速查手冊 V1.02
Java 入門指南 V2.10
Swift 入門指南 V1.02

HyRead

Python 的一堂課 V1.00H
Python 新手之旅 V1.00H
Python 入門指南 V2.00H
C++ 入門指南 V2.00H
C++ 速查手冊 V1.00H
Java 入門指南 V2.00H
Swift 入門指南 V1.00H

Pubu - PDF

如何自學程式設計 V1.00
Python 的一堂課 V1.00
Python 新手之旅 V1.10
Python 入門指南 V2.31
Python 入門指南 + 新手之旅
C++ 入門指南 V2.21
C++ 速查手冊 V1.02
C++ 入門指南 + 速查手冊
Java 入門指南 V2.11
Swift 入門指南 V1.21
程式語言入門指南四選二
程式設計入門套書：六本一次打包帶走

印客邦 - 紙本書

如何自學程式設計（合訂本） V2.00
C++ 入門指南 V2.30（附 C 的一堂課）
C++ 速查手冊 V1. 20
Java 入門指南 V3.00
Python 入門指南 V2.40（附 Python 的一堂課）
Swift 入門指南 V3.00


















































