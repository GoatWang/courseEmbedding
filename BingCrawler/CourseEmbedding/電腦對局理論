



	電腦對局導論 - 普及科學 | 誠品網路書店








































登入．    
    加入會員
．
會員專區．    訂單查詢．
    購物車．
    
客服專區


Hi, 訪客 您好!








首頁













中文書







文學





青少年文學





藝術





生活





圖文漫畫





科普





人文





社會科學





商業財經





語言考用





電腦





簡體書











外文書







文學





青少年文學





建築





藝術





設計





生活





人文





社科





商業行銷





語言學習





日文館











雜誌







中文雜誌





日文雜誌





MOOK





英文雜誌





其他語言雜誌











兒童







嬰幼兒





學齡前幼兒





圖畫書





文學類





知識類





語言學習





親子音樂





玩具





教具





兒童外文圖書館











CD







流行





電子





搖滾





爵士





古典





新世紀／世界





原聲配樂





有聲CD





LP





SACD／其他











DVD







電影DVD





光碟／其他





藍光BD











風格文具













生活雜貨













預購｜排行榜｜書展







預購商品區





書店排行榜





網路排行榜





誠品選書





精選書展











主題館







誠品設計商品





閱讀遊戲起步走





兒童外文圖書館





日文館





CAMBRIDGE 劍橋館





誠品知味






















站內搜尋
作者
出版社
ISBN





葉怡蘭紅茶經  

草東沒有派對  

Middle+林夕  

旅行節  

LaQ拼接積木  


團購專區支付寶說明



















首頁 〉中文書 〉科普 〉普及科學 〉電腦對局導論














































電腦對局導論










作者
 ／ 

徐讚昇/ 許舜欽/ 陳志昌/ 蔣益庭/ 陳柏年/ 劉雲青/ 張紘睿/ 蔡數真/ 林庭羽/ 範綱宇



出版社 ／ 國立臺灣大學出版中心

出版日期 ／ 2017/06/29

商品語言 ／ 中文/繁體

裝訂 ／ 平裝







定價 ／ NT$420

售價 ／ 9折, NT$ 378











※ 有庫存可銷售










































































△TOP










徐讚昇/ 許舜欽/ 陳志昌/ 蔣益庭/ 陳柏年/ 劉雲青/ 張紘睿/ 蔡數真/ 林庭羽/ 範綱宇


作品：




電腦對局導論









電腦對局導論




國立臺灣大學出版中心


NT$420

9折, NT$378





△TOP



















電腦對局導論 其它優惠/消息










































媒體推薦





得獎紀錄





內容簡介

研究電腦如何下棋、解謎題和進行對局是資訊科學中研究人工智慧的重要一支。電腦對局的研究課題多元且具挑戰性，又因入門的條件較低、成效評定方式明確，故吸引許多人投入研究。本書有系統地蒐集並整理相關文獻，歸納電腦對局之精華要義，有助於入門者學習參考，奠定基礎。

本書綜覽電腦對局研究，並特別註重演算法層次的引導式理解及討論，也描述演算法實作時所需的系統知識和技巧，兼顧理論和實際。

研究電腦對局，終極目標不只是希望電腦在對局上能贏人類，而是在達成這目的的過程中，深入瞭解相關知識及應用。因此，與其說研究者在鑽研如何讓電腦「變聰明」，不如說透過演算法，研究者激發腦力，從而開創新的科學和技術發展，便利人類的生活。

1. 國內外第一本專門介紹電腦對局程式設計理論和實作的專書。
2. 囊括古今中外相關軼事、筆記和研究，包羅萬象，蒐集齊全。
3. 超過60個演算法，詳細說明單人對局及雙人對局之細節。
4. 超過120張說明圖示，舉實例闡述困難的觀念。





作者介紹
■作者簡介徐讚昇（Tsan-sheng Hsu）
中央研究院資訊科學研究所研究員
國立臺灣大學資訊工程學系兼任教授
主要研究領域為演算法、圖論、資訊隱私及保護、資料密集運算和電腦對局理論及實作

許舜欽（Shun-Chin Hsu）
國立臺灣大學資訊工程學系退休教授
長榮大學資訊管理學系教授（2002-2017）
台灣電腦學會理事長（2010-）
主要研究領域為電腦對局理論及實作

陳志昌（Jr-Chang Chen）
中原大學應用數學系副教授

蔣益庭（Yi-Ting Chiang）
國立臺灣大學資訊工程學系博士

陳柏年（Bo-Nian Chen）
中央研究院資訊科學研究所博士後研究員（2012-2014）
財團法人資訊工業策進會智慧網通系統研究所專案經理

劉雲青（Yun-Ching Liu）
日本東京大學工學院博士

張紘睿（Hung-Jui Chang）
國立臺灣大學資訊工程學系博士候選人

蔡數真（Sue-Chen Tsai）
中央研究院資訊科學研究所研究助理

林庭羽（Ting-Yu Lin）
中央研究院資訊科學研究所研究助理

範綱宇（Gang-Yu Fan）
中央研究院資訊科學研究所研究助理





幕後故事





本書目錄

序一序二第1章　電腦對局研究概論1.1 前言1.2 智慧1.2.1 Turing測試1.2.2 延伸思考1.3 歷史1.3.1 18世紀的第一個西洋棋機器人1.3.2 西洋棋殘局自動機1.3.3 東方的相關研究1.4 學術研究1.4.1 早期（1970年之前）1.4.2 初期（1970～1980年）1.4.3 中期（1980～1990年）1.4.4 近期（1990年至今）1.5 對局遊戲1.5.1 對局分類1.5.2 複雜度1.5.3 研究新領域1.6 結語和本書結構1.7 練習題第2章　單人對局之基礎搜尋演算法2.1 前言2.1.1 概述2.1.2 本章常用名詞和定義2.2 暴力搜尋2.2.1 廣度優先搜尋2.2.2 廣度優先搜尋之改良：利用硬碟儲存佇列2.2.3 深度優先搜尋2.2.4 深度優先搜尋之改良：運用兩個堆疊2.2.5 深度優先搜尋之改良：限制搜尋的深度2.2.6 深度優先搜尋之改良：逐層加深2.2.7 深度優先搜尋之改良：深度限制及方向選擇2.2.8 雙向搜尋2.3 啟發式搜尋2.3.1 A*搜尋2.3.2 考量總花費門檻值之深度優先搜尋2.3.3 如何擇出良好著手2.3.4 逐層加深之深度優先及A*演算法的結合2.3.5 IDA*之應用2.4 結語2.5 練習題第3章　單人對局之進階搜尋演算法3.1 前言3.2 (n2－1)-puzzle問題3.3 15-puzzle之狀態空間3.3.1 基本性質3.3.2 盤面奇偶性不因移動改變3.3.3 延伸思考3.4 15-puzzle之解法3.5 樣式資料庫3.5.1 邊緣3.5.2 改良邊緣數3.6 24-puzzle之解法3.7 其他啟發式函數之設計3.8 結語3.9 練習題第4章　雙人對局概論4.1 前言4.2 本章常用名詞和定義4.3 1990年對局程式棋力估測4.4 雙人對局分類4.4.1 收斂型對局4.4.2 發散型對局4.4.3 連接型對局4.5 10或11路六貫棋4.5.1 基本性質4.5.2 策略盜用論點4.5.3 延伸思考4.6 其他相關議題4.6.1 對局複雜度4.6.2 先手優勢4.6.3 2000年對局程式棋力估測4.7 結語4.8 練習題第5章　由西洋棋論雙人對局程式之設計5.1 前言5.1.1 西洋棋棋規及相關知識5.1.2 西洋棋之對局複雜度5.2 審局函數5.2.1 完美審局函數5.2.2 近似審局函數5.2.3 審局函數之設計5.3 基於審局函數之搜尋策略5.3.1 A型策略5.3.2 B型策略5.4 對弈、棋風及策略之變化5.5 結語5.6 練習題第6章　Alpha-Beta切捨演算法與分析6.1 前言6.1.1 位置與搜尋樹6.1.2 樹節點編號法6.2 最小最大化搜尋演算法6.3 正反最大演算法6.4 Alpha-Beta切捨演算法6.4.1 改進的契機6.4.2 Alpha剪枝6.4.3 Beta剪枝6.4.4 深層Alpha-Beta切捨6.4.5 Alpha-Beta切捨演算法的實作6.4.6 搜尋順序與切捨之關係6.5 效能分析6.5.1 最佳可預期之狀況6.5.2 節點分類與節點間之關係6.5.3 最佳可預期狀況之效率分析6.5.4 平均狀況之效率分析6.5.5 完美排序與最佳排序6.6 Alpha-Beta搜尋的變形6.6.1 硬式失敗版6.6.2 軟式失敗版6.6.3 演算法F2與F3的比較6.7 結語6.8 練習題第7章　斥候與正反斥候7.1 前言7.2 斥候演算法7.2.1 基本概念7.2.2 如何TEST7.2.3 斥候演算法之結構7.3 斥候演算法的效能分析7.3.1 TEST成功與失敗對搜尋節點數的影響7.3.2 TEST演算法拜訪之節點數7.3.3 完美排序樹中斥候演算法所拜訪之節點數7.3.4 與Alpha-Beta切捨演算法之比較7.3.5 斥候演算法之效能分析7.4 斥候演算法之實作7.4.1 回顧Alpha-Beta切捨搜尋演算法7.4.2 正反斥候演算法：最小最大版7.4.3 正反斥候演算法7.4.4 延伸思考7.5 結語7.6 練習題第8章　同形表和其他的改進方法8.1 前言8.2 同形表8.2.1 同形表之更新規則8.2.2 加入同形表之正反斥候演算法8.3 Zobrist雜湊函數8.3.1 理論基礎8.3.2 雜湊函數之設計8.3.3 錯誤叢集8.3.4 使用時之參數設定8.4 動態調整搜尋區間大小8.5 著手排序之改進8.5.1 知識捷思法8.5.2 利用歷史資訊找出好的著手次序8.5.3 主要變化路徑8.5.4 否議表8.5.5 殺手捷思法8.5.6 歷史捷思法8.6 實驗數據8.7 動態調整搜尋深度8.7.1 虛手切捨8.7.2 較晚考慮著手之搜尋裁減8.8 動態搜尋延伸8.8.1 動態深度延伸8.8.2 寧靜搜尋8.9 結語8.10 練習題第9章 蒙地卡羅樹搜尋演算法9.1 前言9.2 簡易圍棋規則9.3 最初的演算法：MCSpure9.4 MCSpure之首要問題9.4.1 K臂吃角子老虎問題9.4.2 信賴上界9.4.3 以標準差修正信賴上界值9.5 MCSpure的第二個問題9.5.1 優先樹擴展9.5.2 蒙地卡羅最小最大化樹搜尋9.6 信賴上界的樹搜尋9.7 程式實作時之技巧9.8 結語9.9 練習題第10章　蒙地卡羅搜尋演算法的改進10.1 前言10.2 線上知識10.2.1 漸進式剪枝10.2.2 手順不羈法10.2.3 模擬數值快速估計法10.2.4 節點展開策略10.2.5 模擬退火法10.2.6 固定深度全展開10.2.7 各種方法的整合10.3 離線學習10.3.1 MM法與模擬平衡法10.3.2 擴展階段：類神經網路與深度學習10.4 結語10.5 練習題第11章　平行化對局樹搜尋11.1 前言11.2 平行化之評估11.2.1 Amdahl定律11.2.2 超線性加速11.3 共有記憶體之使用與管理11.4 平行化Alpha-Beta切捨設計11.4.1 主變化分割11.4.2 弟節點等候11.4.3 動態樹分割11.5 平行化蒙地卡羅樹搜尋設計法11.5.1 葉節點平行化11.5.2 根節點平行化11.5.3 整體同步之樹平行法11.5.4 局部同步之樹平行法11.5.5 延伸思考11.6 結語11.7 練習題第12章　開局和殘局知識庫12.1 前言12.2 開局庫12.2.1 開局庫之需求12.2.2 開局庫製作12.2.3 開局庫之建構方式12.3 中局使用之佈局12.4 建構大型殘局庫12.5 只使用主記憶體之回溯分析演算法12.5.1 反覆前向檢查12.5.2 分層反向傳遞與前向檢查12.5.3 反向傳遞與未知子節點計數法12.5.4 分層反向傳遞與未知子節點計數法12.6 使用主記憶體和磁碟之回溯分析演算法12.7 結語12.8 練習題第13章　進階研究課題13.1 前言13.2 圖形歷史交互作用13.3 對手模型13.4 隨機行為節點搜尋13.5 證明數搜尋13.5.1 二元值對局樹13.5.2 證明數與反證數13.5.3 多元值對局樹13.5.4 延伸思考13.6 結語13.7 練習題第14章　對局系統實作考量14.1 前言14.2 對局程式系統之研製14.2.1 資源使用技巧14.2.2 對局系統之製作14.3 實戰驗證分析14.4 結語14.5 練習題參考文獻中文索引英文索引





曲目








曲目





贈品說明




限量特裝





詳細資料
誠品26碼 ／2681472487001

ISBN 13 ／9789863502371  
ISBN 10 ／9863502375     
EAN ／9789863502371



頁數
／
420



開數
／
18K



裝訂
／
平裝



級別
／
無



語言
／
中文/繁體



成份
／








普及科學產品推薦





Flag's創客．自造者工作坊: 感測器智慧生活大應用

施威銘研究室

NT$999
9折, NT$899







城市自然小偵探: 田園老師的校外自然課

羅友徹

NT$450
79折, NT$356







數據運用的技術套書 (2冊合售)

羅伯．麥修斯/ 馬愷文

NT$770
75折, NT$578







不腦殘科學 2

PanSci泛科學專欄作者群

NT$260
85折, NT$221







數學偵探物語 (第3版)

李斯．哈斯奧

NT$230
85折, NT$196
























查看全台書店有無此商品




請選擇
基隆市
臺北市
新北市
桃園市
新竹市
新竹縣
苗慄縣
臺中市
南投縣
彰化縣
雲林縣
嘉義市
嘉義縣
臺南市
高雄市
屏東縣
台東縣
花蓮縣
宜蘭縣
澎湖縣
金門縣
連江縣

             





本日最熱商品



我們為何成為貓奴? 這群食肉動物不僅佔領沙發, 更要接管世界艾比蓋爾．塔克
樹, 記得自己的童年: 一位女科學家勇敢追尋生命真理的故事荷普．潔倫
跟著飛行員一起開飛機 (圖解版)中村寬治
飛機的構造與飛行原理 (圖解版)中村寬治
各類場所消防安全設備設置標準解說陳火炎
ARM Cortex-M0官方教材: 嵌入式系統設計入門Joseph Yiu
隱藏的邏輯: 掌握群眾行為的不敗公式布侃南
混凝土工程設計規範之應用 下 (土木404-100)中國土木水利工程學會混凝土工程委員會/ 中興工程顧問社/ 編
混凝土工程設計規範之應用 上 (土木404-100)中國土木水利工程學會混凝土工程委員會/ 編
數學女孩秘密筆記: 向量篇結城浩






本日最新中文書




New Type專用機完全Book


健美鍛鍊解剖書


軍裝．紳士服飾史 (圖鑑版)


Home Party來開一場派對吧! 我家的宴會只需要一樣東西, 就是驚喜!


全日本鐵道自由行


日本妖怪手繪帖


阿德勒談心理 2: 團體治療與冥想


出發! 東京自助旅行: 一看就懂旅遊圖解Step by Step


西班牙．葡萄牙


隱蔽搜查 3: 疑心







誠品網路電子報




























            手機版｜
            讀者意見箱｜廣告刊登｜策略聯盟｜網站使用條款｜隱私權政策｜禮券信託契約書｜個人資料保護法專區

        傳真：02-8789-8882
        Copyright©eslite.com All Rights Reserved. 本網站已依台灣網站內容分級規定處理














Theory of Computer Games (電腦對局理論) : Fall 2016 







Theory of Computer Games: Fall 2016

電腦對局理論


 徐讚昇 

研究員

 臺北市南港區 11529
研究院路
二段一二八號
 中央研究院資訊科學研究所 A24 號信箱
 E-mail: tshsu [AT] iis.sinica.edu.tw
Homepage: http://www.iis.sinica.edu.tw/~tshsu
TEL: +886-2-2788-3799 ext. 1701
FAX: +886-2-2782-4814



 Office hour: before or after class, or by appointment using email.
     classroom: Room 105, NTU CSIE building.
     助教
      
 張紘睿 (PhD student NTU CSIE)
      

 email:  changhungjui ((AT)) gmail ((DoT)) com
	 Office hours: Friday 3:20pm -- 4:10pm @ 106. 
      
 樂正 (Master student NTU CSIE)
      

 email: fenzhangs [{aT}] gmail ##doT## com
	 Office hours: Tuesday 1:20pm--2:10pm @ 106. 
      

  Syllabus
 Samples programs: TBA
 Requirements: 遲交每一天扣 10%, 抄襲(被抄襲)均不計分.
   
 Homeworks:
       
  HWK1
	   
 Solve a single-player game (puzzle): Nonogram.
	        Due date: 11:59pm, Nov. 18, 2016. 
	        Online submission  here

  HWK2
           
 Solve 8*8 Othello, a 2-player game, using a Monte-Carlo search engine.
	    Due date: 11:59pm, Dec. 15, 2016.
	    Online submission  here


 Mid-term exam: 2:20pm--5:20pm, Thursday, November 10, 2016.
       
      End of semester report: for those who are invited to make up
     scores when they seem to be falling behind the class or when the number
     of students in the class is no more than 16.
     
 due date: TBA
	  Pick a paper that is a reference in the slides, or a paper that is related to computer games.
	  Details are in 
	  Syllabus

 Final project: 
       
 The 10th NTU CSIE CUP of Computer Chinese Dark Chess competition.
	   Rules 
 Contest Information: 
  
 Date: 9:30AM--4:30PM, Thursday, January 19, 2017
     Place: TBA
     Reminder: Be sure to name your program.
      Photos
for the competition.
  Game records
for the competition.

 Documentations and source code due date: 9am, 1/20, 2017.
 Alg. required to be implemented: NegaScout, Transposition table (minimum requirements). Some more techniques are expected.
	    Online submission  here


 Slides:
Updated slides for a Thursday lecture will normally be available
the following Monday, however there is no guarantee.
Some slides and course materials for the years
 2007,
 2008,
 2009,
 2010,
 2011,
 2012,
 2013,
 2014
and
 2015
are available on-line.

I will revise the slides this year based on what I have taught
the previous years.
     
Syllabus and a brief overview
uploaded Sep. 22, 2016.
     Theory of computer games: an AI oriented introduction
uploaded Aug. 29, 2016.
      Basic single-player search algorithms
uploaded Nov. 4, 2016.
      Advanced single-player serach algorithms
uploaded Nov. 1, 2016.
     Survey of 2-player perfect information
     games
uploaded Nov. 14, 2016.
     C.E. Shannon's 1950 computer chess
     paper
uploaded Jan. 9, 2017.
     Alpha-beta pruning: Algorithms and
     analysis
uploaded Nov. 4, 2016.
     Scout and NegaScout
uploaded Dec. 12, 2016.
     Hash tables and other enhancements
uploaded Dec. 30, 2016.
     Monte-Carlo game tree search: Basics
uploaded Jan. 17, 2017.
     Monte-Carlo game tree search: Advanced techniques
uploaded Jan. 20, 2017.
     Parallel game tree search
Case study: Computer Chinese chess
Selected advanced topics
uploaded Jan. 9, 2017.
     Concluding remarks
uploaded Dec. 29, 2016.
     
 











































































































電腦對局理論 | qwerty











qwerty



QWERTY




























電腦對局理論





發表於

                2014-09-26
              
|



更新於

                2017-04-08
              


|



分類於


筆記




|








|



閱讀次數 



                  個人認為在資訊系學到最好的課，此外講義內容也很詳細(目前只寫到第八章)
              



Introduction學習電腦對局的用處
電腦愈聰明，對人類愈有用
電腦學得的技巧讓人學習

為何學棋局
容易辨別輸贏
規則簡單(先備知識少)


圖靈測試(Turing test)If a machine is intelligent, then it cannot be distinguished from a human

反過來利用的例子 - CAPTCHA(驗證碼): Completely Automated Public Turing test to tell Computers and Humans Apart
Wolfram Alpha
knowledge base of Siri



Problems  

Are all human behaviors intelligent?
Can human perform every possible intelligent behavior?→ Human Intelligence 和 Intelligence 並不完全相同

改變目標
From Artificial Intelligence to Machine Intelligence
machine intelligence: the thing machine can do better than human do


From imitation of human behaviors to doing intelligent behaviors
From general-purpose intelligence to domain-dependent Expert Systems

重大突破
1912 - End-Game chess playing machine  
~1970 - Brute Force    
1975 - Alpha-Beta pruning(Knuth and Moore)   
1993 - Monte Carlo  

無關：核心知識用少部分的核心知識(要記得的事物)推得大多數的知識Ex. 背九九乘法表推得所有多位數乘法建構式數學(X)  
對局分類研究遊戲之前的必要分析：分類
By number of players   

Single-player games
puzzles
Most of them are NP-complete
or the game will be not fun to play




Two-player games
Most of them are either P-SPACE-complete(polynomial space usage) or exponential-time-complete
PSPACE-complete can be thought of as the hardest problems in PSPACE, solution of PSPACE-complete could easily be used to solve any other problem in PSPACE




Multi-player games

By state information obtained by each player(盤面資訊是否完全)  

Perfect-information games
all players have all the information to make a correct decision


Imperfect-information games
some information is only available to selected players, for example you cannot see the opponent’s cards in Poker(不知對手的牌或棋子, Ex. 橋牌)



By rules of games known in advance(是否有特殊規則、是否知道對手的行動)  

Complete-information games
rules of the game are fully known by all players in advance


Incomplete-information games
partial rules are not given in advance for some players(Ex. 囚犯困境賽局)



definition of perfect and complete information in game theory
By whether players can fully control the playing of the game(是否受隨機性影響)    

Stochastic games
there is an element of chance such as dice rolls 


Deterministic games
players have a full control over the games



Example(not fully sure):  

perfect-information complete-information deterministic game: chinese chess, go    
perfect-information complete-information stochastic game: dark chinese chess, 輪盤(Roulette)    
perfect-information incomplete-information deterministic game: Prisoner’s Dilemma    
perfect-information incomplete-information stochastic game: ?    
inperfect-information complete-information deterministic game: ?    
inperfect-information complete-information stochastic game: monopoly, bridge   
inperfect-information incomplete-information deterministic game: battleship, bingo    
inperfect-information incomplete-information stochastic game: most of the table/computer games

Chap02 Basic Search Algorithms
Brute force
Systematic brute-force search  
Breadth-first search (BFS)  
Depth-first search (DFS)  
Depth-first Iterative-deepening (DFID)  


Bi-directional search


Heuristic search: best-first search  
A*  
IDA*





Symbol Definition
Node branching factor b
degree
number of neighbor vertexs of a node


Edge branching factor e
number of connected edges of a node


Depth of a solution d
最短深度, D 為最長深度
Root深度為0


If b and e are average constant number, e >= b(兩個點之間可能有多條線)

Brute-force searchUsed information  

initial state
method to find adjacent states
goal-checking method(whether current state is goal)  

Pure brute-force search program  

隨機走旁邊的一個點
不記憶走過的路
May take infinite time


Pure Random Algorithm 應用
驗證碼(e.g. 虛寶)
純隨機數



BFS(Breadth-First Search)deeper(N): 回傳與N相鄰的點record parent state and backtrace to Find the path 

Space complexity: $O(b^d)$ → Too big!
Time complexity: $O(b^{d-1} * e)$     

→ costs O(e) to find deeper(N), at most check b^(d-1) times(deeper(leaf) do not return new node)


Open list: nodes that are in the queue(candidate nodes)

Closed list: nodes that have been explored(assure not answer, can skip)
Need a good algorithm to check for states in deeper(N) are visited or not
Hash  
Binary search


not need to have because it won’t guarantee to improve the performance
if it is possible to have no solution, Need to store nodes that are already visited 


node： open list → check is goal or not, explore(deeper) → closed list

Property    

Always finds optimal solution
Do not fall into loops if goal exists(always “deeper”) 

Disk based algorithm
Solution for huge space complexity

disk: store main data
memory: store buffers


Store open list(QUEUE) in disk
Append buffered open list to disk when memory is full or QUEUE is empty


Store closed list in disk and maintain them as sorted
Merge buffered closed list with disk closed list when memory is full   
delay cheking: check node in the closed list or not before being taken from open list



Disk based algorithms
not too slow
read large file in sequence
queue(always retrieve at head and write at end)


sorting of data in disk
merge sort between disk list and buffer list




very slow
read file in random order(disk spinning)


系統為資源和效率(時間、空間、錢)的trade-off

DFS 

performance mostly depends on move ordering
If first choose the branch include the goal, find answer quick
get out of long and wrong branches ASAP!
implement next(current, N)
作用：列舉出N的所有鄰居
回傳下一個N的鄰居，目前列舉到current
next(null, N) -> return first neighbor of N




time complexity: $O(e^D)$
number of possible branches at depth D


space complexity: $O(D)$
Only need to store current path in the Stack



Property  

need to store close list (BFS: do not need to)
May not find an optimal solution
Can’t properly implement on disk
very huge closed list
Use data compression or bit-operation techniques to store visited nodes
Need a good heuristic to store the most frequently visited nodes to avoid swapping too often


need to check closed list instantly(BFS: can be delayed)


Can DFS be paralleled? Computer scientists fails to do so even after 30 years
Most critical drawback: huge and unpredictable time complexity

General skills to improve searching algorithmIterative-Deepening(ID) 逐層加深
inspired from BFS(BFS = BFID)
限制搜尋時的複雜度，若找不到再放寬限制
prevent worse cases

Deep First ID(DFID)     

限制深度 
找到解立即return 

time complexity using 二項式定理  
M(e, d) ~ $O(e^d)$ when e is sufficiently large
→ no so much time penalty to use ID when e is big enough


關鍵：設定初始限制和限制放寬的大小
always find optimal solution



Bi-directional search 

DFSdir(B, G, successor, i): DFS with starting states B, goal states G, successor function and depth limit i 
nextdir(current, successor, N): returns the state next to the state “current” in successor(N)
deeper(current, N) for forward searching
deeper(N) contains all next states of N


prev(current, N) for backward searching
prev(N) contains all previous states of N




Forward Search: store all states H
Backward Search: find the path from G(goal) to H at depth = limit or limit+1(for odd-lengthed solutions)  
also use the concept of iterative-deepening

Time complexity: $O(e^{d/2})$

the number of nodes visited is greatly reduced(compared with original $O(e^d)$)


Space complexity: $O(e^{d/2})$
Pay the price of storing state depth(H)


restrict
can’t assure to find optimal solution
need to know what the goals are 
bi-directional search is used when goal is known, only want to find path, like solving 15-puzzle





Heuristic(啟發式) searchDefinition: criteria, methods, or principles for deciding which is the most effective to achieve some goal→ By 經驗法則(so not always have optimal solution)  

先走最有可能通往答案的state(good move ordering)
best-first algorithm : like greedy   


The unlikely path will be explored further(pruning)  
Key: how to pick the next state to explore 
need simple and effective estimate function to discriminate    



Heuristic search – A*line 12: add all possible path that depth = depth + 1   

Open list: a priorty queue(PQ) to store paths with costs
Closed list: store all visited nodes with the smallest cost
Check for duplicated visits in the closed list only
A node is inserted if 
it has never been visited before
being visited, but has smaller cost






Given a path P
g(P) = current cost of P
h(P) = estimation of remaining path to goal(heuristic cost of P)
f(P) = g(P) + h(P) is the cost function


Assume all costs are positive, so there is no need to check for falling into a loop  
cost function所推測的cost不可超過實際的cost，否則不保證找到最佳解
if h() never overestimates the actual cost to the goal (called admissible可容許), then A* always finds an optimal solution
證明？




h(n)=0 : A* 等同 BFS
h(n)<目前節點到結束點的距離 : A* 演算法保證找到最短路徑, h(n)越小, 搜尋深度越深(代表花愈多時間)
h(n)=目前節點到結束點的距離 : A* 演算法僅會尋找最佳路徑, 並且能快速找到結果(最理想情況)
h(n)>目前節點到結束點的距離 : 不保證能找到最短路徑, 但計算比較快
h(n)與g(n)高度相關 : A* 演算法此時成為Best-First Searchhttp://blog.minstrel.idv.tw/2004/12/star-algorithm.html

Question:  

What disk based techniques can be used?
Why do we need a non-trivial h(P) that is admissible?
How to design an admissible cost function?

DFS with threshold
DFScost(N, f, threshold)
starting state N 
cost function f
cuts off a path if cost bigger than threshold 



DFS1: Use next1(current,N) find neighbors of N (in the order of low cost to high cost)DFS2: Use a priority queue instead of using a stack in DFScostIt may be costly to maintain a priority queue
IDA* = DFID + A*用A*的cost作為DFS的threshold 
Ex. 15 puzzleall posibilities: $16! \leq 2.1 \times 10^{13}$g(P): the number of moves made so farh(P): Manhattan distance between the current board and the goalManhattan distance from (i, j) to (i’, j’) is |i’ - i| + |j’ - j| (admissible)   
basic thought for a problemWhat you should think about before playing a game：

Needed to 
Find an optimal solution?
batch operations?
disk based algorithms?
Search in parallel?


Balancing in resource usage:
memorize past results vs efforts to search again(time and space)
The efforts to compute a better heuristic(time to think a heuristic?)
The amount of resources spent in implementing a better heuristic and the amount of resources spent in searching(complexity of heuristic function)


For specific algorithm
heuristic : How to design a good and non-trivial heuristic function?
DFS : How to get a better move ordering?



Can these techniques be applied to two-person game?
algorithm整理


Name
Time Complexity
Space Complexity
OptimalSolution
UseDisk
Description 




brute
$∞$
$O(1)$
No
No



BFS
$O(b^d)$
$O(b^{d-1} * e)$
Yes
Needed



DFS
$O(e^d)$
$O(d)$
No
NoNeed



Heuristic
N\A
N\A
Yes, if admissible
–
Ex. A*


BDS
$O(e^{d/2})$
$O(e^{d/2})$
No
Needed
DFS + bidiretional search 


DFID
$O(e^d)$
$O(d)$
Yes
NoNeed
DFS + ID


IDA*
N\A
N\A
Yes
N\A
DFID + A*



Chap03 Heuristic Search with Pre-Computed Databasesnew form of heuristic called pattern databases

If the subgoals can be divided
Can sget better admissible cost function by sum of costs of the subgoals


Make use of the fact that computers can memorize lots of patterns
使用已經計算過的 pattern 來做出更好、更接近real cost的heuristic function 



Using 15 puzzle as example  

State space can be divided into two subsets: even and odd permutations
$f_1$ is number of inversions in a permutation X1X2...XN 
inversion is a distinct pair Xi > Xj such that i < j(後面有幾個數比自己小) 
Example: 10,8,12,3,7,6,2,1,14,4,11,15,13,9,5 has 9+7+9+2+5+4+1+0+5+0+2+3+2+1 inversions


$f_2$ is the row number that empty cell is(空的那一格在哪一行)
f = $f_1$ + $f_2$
Slide a tile never change the parity    
Proof: skip(a lot of)



Solving Result

1-MIPS machine
30 CPU minutes in 1985 
using IDA* with Manhattan distance heuristic

Non-additive pattern databases
原本cost funtion為15片個別的distance之和，若能一次計算多片的distance？
linear conflict: 靠很近不代表步數少(如[2, 1, 3, 4]交換至[1, 2, 3, 4]並不只兩步)
有可能移成pattern時，反而使其他片遠離



Fringe(初級知識)
subset of selected tiles called pattern
tiles not selected is “don’t-care tile”, all looked as the same


If there are 7 selected tiles, including empty cell  
16!/9! = 57657600 possible pattern size





goal fringe: 選擇的方塊都和goal的位置一樣

precompute the minimum number of moves(fringe number) to make goal fringe
goal fringe: 找給定的選擇方塊，在任何pattern中，最小需要移動成最終目標的步數
We can solve it because the pattern size is relatively small


Pro’s
pattern size↑, fringe number↑, which means better estimation
because estimate number it is closer to the real answer    




Con’s    
Pattern with a larger size
consuming lots of memory and time
limited by source


not optimal



Property   

Divide and Conquer  


Reduce a 15-puzzle problem into a 8-puzzle 
魔術方塊 – 分成六面
Cannot easily combine
affect tiles that have reached the goal in the subproblem when solving the remains




Used as heuristic function(admissible)

More than one patterns
How to Find better patterns for fringes?
→ Can we combine smaller patterns to form bigger patterns?



For different pattern databases P1, P2, P3 …  

patterns may not be disjoint, may be overlapping
The heuristic function we can use is
$h(P_1, P_2, P_3 … ) = max{h(P_1),h(P_2),h(P_3) …}$



How to make heuristics and the patterns disjoint?  

patterns should be disjoint to add them together(see below)
Though patterns are disjoint, their costs are not disjoint
Some moves are counted more than once





f(P1) + f(P2) is admissible if  

f() is disjoint with respect to P1 and P2
both f(P1) and f(P2) are admissible

For Manhattan distance heuristic  

Each region is a tile
Divide the board into several disjoint regions


They are disjoint
only count the number of moves made by each region
doesn’t count cross-region moves





RefinementPartition the board into disjoint regions using the tiles in a region of the goal arrangement as a pattern只算每個region內的片所移動的步數和，作為新定義的fringe number如此一來，就可以將每個region的cost相加而保持admissible
Disjoint patternA heuristic function f() is disjoint with respect to two patterns P1 and P2 if  

P1 and P2 have no common cells
The solutions corresponding to f(P1) and f(P2) do not interfere each other

Revised fringe number f’(p): for each fringe arrangement F, the minimum number of fringe-only moves to make goal fringe
ResultSolves the 15 puzzle problem using fringe that is more than 2000 times faster than the previous result by using the Manhattan distance  

The average Manhattan distance is 76.078 moves in 24-puzzle    
The average value for the disjoint database heuristic is 81.607 moves in 24-puzzle   
only small refinement on heuristic function would make performance far better 

Other heuristics   

pairwise distance
partition the board into many 2-tiles so that the sum of cost is maximizedFor an $n^2 - 1$ puzzle, we have $O(n^4)$ different combinationsusing



What else can be done?
Better way of partitioning
Is it possible to generalize this result to other problem domains?
Decide ratio of the time used in searching and the time used in retrieving pre-computed knowledge
memorize vs compute



Chap 04 Two-Player Perfect Information Games Introductions
Conclusion: decision complexity is more important than state-space complexity   

trade-off between knowledge-based methods and brute-force methods
Domain: 2-person zero-sum games with perfect informationZero-sum means one player’s loss is exactly the other player’s gain, and vice versa.
DefinitionGame-theoretic value: the outcome of a game when all participants play optimallyGame-theoretic value for most games are unknown or are only known for some legal positions.



Type
Description  




Ultra-weakly solved
在初始盤面可知，遊戲中先行者或後行者誰有必勝、或必不敗之策略


Weakly solved
for the initial position a strategy has been determined to achieve the game-theoretic value(知道必不敗之策略為何)


Strongly solved
a strategy has been determined for all legal positions(任何合法情況都能知道最佳策略)



State-space complexity of a game: the number of the legal positions in a game(可能的盤面)Game-tree complexity(decision complexity) of a game: the number of the leaf nodes in a solution search tree(可能的走法)  
A fair game: the game-theoretic value is draw and both players have roughly equal probability on making a mistake.  

Paper-scissor-stone
Roll a dice and compare who gets a larger number

Initiative(主動): the right to move first  

A convergent game: the size of the state space decreases as the game progresses  
Example: Checkers  


A divergent game: the size of the state space increases as the game progresses  
Example: Connect-5 


A game may be convergent at one stage and then divergent at other stage.
Ex. Go, Tic-Tac-Toe



Threats are something like forced moved or moves you have little choices.Threats are moves with predictable counter-moves
Classification
Questions to be researchedCan perfect knowledge obtained from solved games be translated into rules and strategies which human beings can assimilate?Are such rules generic, or do they constitute a multitude of ad hoc recipes?Can methods be transferred between games?  
Connection gamesConnect-four (6  7)Qubic (4  4 * 4)Renju - Does not allow the First player to play certain moves, An asymmetric game.mnk-Game: a game playing on a board of m rows and n columns with the goal of obtaining a straight line of length k.Variations: First ply picks only one stone, the rest picks two stones in a ply. -> Connect 6. 
Hex (10  10 or 11  11)Exactly one of the players can win.solved on a 6 * 6 board in 1994.

Proof on exactly one player winAssume there is no winnerblue should totally block red at some place -> blue will connect!  
let R be the set of red cells that can be reached by chains from rightmost columnR does not contain a cell of the leftmost column; otherwise we have a contradictionlet N(R) be the blue cells that can be reached by chains originated from the rightmost column.N(R) must contain a cell in the top and bottom row , Otherwise, R contains all cells in the First/bottom row, which is a contradiction.N(R) must be connected. Otherwise, R can advance further. Hence N(R) is a blue winning chain.
Strategy-stealing argumentmade by John Nash in 1949後手無一般化的必勝法若後手有必勝法，則先手可以先隨機下一子(並無視之)，再照著後手的下法後手必勝的下法包含了第一手，則再隨機下一子，將其視為第一子限制：不能有和，下子不會有害，symmetric，history independent，
Assume the initial board position is B0f(B) has a value only when it is a legal position for the second player.rev(x): interchange colors of pieces in a board or ply x.always has exactly one winner  
Not SolvedChess DEEP BLUE beat the human World Champion in 1997Chinese chess Professional 7-dan in 2007ShogiClaimed to be professional 2-dan in 2007Defeat a 68-year old 1993 Meijin during 2011 and 2012
GoRecent success and breakthrough using Monte Carlo UCT based methods.Amateur 1 dan in 2010.Amateur 3 dan in 2011.The program Zen beat a 9-dan professional master at March 17, 2012  First game: Five stone handicap and won by 11 points  Second game: four stones handicap and won by 20 points

possible to use heuristics to prune tremendously when the structure of the game is well studied
Methods to solve gamesBrute-force methods  

Retrograde analysis(倒推)
Enhanced transposition-table methods(?)Knowledge-based methods  
Threat-space search and lambda-search
Proof-number search
Depth-First proof-number search
Pattern search
search threat patterns, which are collections of cells in a position
A threat pattern can be thought of as representing the relevant area on the boardRecent advancements  


Monte Carlo UCT based game tree simulation
Monte Carlo method has a root from statistic
Biased sampling
Using methods from machine learning
Combining domain knowledge with statistics


A majority vote algorithm

low state-space complexity have mainly been solved with brute-force methods.Nine Men’s Morris
low game-tree-complexities have mainly been solved with knowledge-based methods.by intelligent (heuristic) searching with help of databasesGo-Moku, Renju, and k-in-a-row games
The First player has advantages.Two kinds of positionsP-positions: the previous player can force a win.N-positions: the next player can force a win.
First player to have a forced win, just one of the moves that make P-position.second player to have a forced win, all of the moves must lead to(造成) N-positions
At small boards, the second player is able to draw or even to win for certain games.
Try to obtain a small advantage by using the initiative.The opponent must react adequately on the moves played by the other player.Force the opponent to always play the moves you expected.
Offsetting the initiative
一子棋 by 張系國 棋王 -> 先手優勢極大，隨著棋子增加，所需贏的步數就愈少。
讓子Ex. Go k = 7.5 in 2011
Enforce rules so that the first player cannot win by selective patterns.Ex. Renju
The one-move-equalization rule: one player plays an opening move and the other player then has to decide which color toplay for the reminder of the game.. Hex.. Second-player will win.
The First move plays one stone, the rest plays two stones each.Can’t prove it is fair
The first player uses less resource.For example: using less time.Ex. Chinese chess.
1990’s prediction at 20002000’s prediction at 2010
Chap 05 Computer chess programming by ShannonC.E. Shannon

1916 ~ 2001.
The founding father of Information theory.
The founding father of digital circuit design.

Ground breaking paper for computer game playing: “Programming a Computer for Playing Chess”, 1950.Presented many novel ideas that are still being used today.(太神啦！)  
Analysis
typical 30 legal moves in one ply(下子)  
typical game last about 40 moves  
will be 10^120 variations  


possible legal position(state space complexity) is roughly 10^43
CPU speed in 1950 is 10^6 per second current CPU speed is 10^9 per second, still not fast enough to brute force it

But it is possible to enumerate small endgames3~6 piece endgame roughly 7.75*10^9 positions  
Three phases of chess
Opening 
Development of pieces to good position


Middle
after opening until few pieces
pawn structure 


End game 
concerning usage of pawnsDifferent principles of play apply in the different phases



Evaluating Functionposition p, include board status, which side to move, history of moveshistory -> castling
Perfect evaluating function f(p):f(p) = 1 for a won position.f(p) = 0 for a drawn position.f(p) = -1 for a lost position.Perfect evaluating function is impossible for most games, and is not fun or educational.
Factors considered in approximate evaluating functions:

The relative values of differences in materials.
The values of queen, rook, bishop, knight and pawn are about 9, 5, 3, 3, and 1, respectively.
How to determine good relative values? Static values verse dynamic values?


Position of pieces
Mobility: the freedom to move your pieces.
at center , or at corner
Doubled rooks


Pawn structure: the relative positions of the pawns.
Backward pawn: a pawn that is behind the pawn of the same color on an adjacent file that cannot advance without losing of itself.
Isolated pawn: A pawn that has no friend pawn on the adjacent file.
Doubled pawn: two pawns of the same color on the same file
these three are all bad pawn
Passed pawns: pawns that have no opposing pawns to prevent
Pawns on opposite colour squares from bishop.


King safety.
Threat and attack.
Attacks on pieces which give one player an option of exchanging
Pins(小盯大) which mean here immobilizing pins where the pinned piece is of value not greater than the pinning piece
Commitments -> 需要保護其他子




Putting “right” coeffcients for diffferent factorsDynamic setting in practical situations.
evaluating function can be only applied inrelatively quiescent positions.
not in the middle of material exchanging.not being checked
max-min strategyIn your move, you try to maximize your f(p).In the opponent’s move, he tries to minimize f(p).
A strategy in which all variations are considered out to adefinite number of moves and the move then determined froma max-min formula is called type A strategy.
StalemateWinning by making the opponent having no legal next move.suicide move is not legal, and stalemate results ina draw if it is not currently in check.
Zugzwang(強制被動): In certain positions, a player is at a disadvantage if he is the next player to move.
Programming
- Special rules of games
- Methods of winning
- Basic data structure for positions.
- check for possible legal moves
- Evaluating function.
Forced variations(迫著)one player has little or no choices in playing
type B strategythe machine must 

examine forceful variations out as far as possible and evaluate only at reasonable positions
select the variations to be explored by some process
| 1 if any piece is attacked by a piece of lower value,
  g(P) =    /    or by more pieces then defences of if any check exists
\    on a square controlled by opponent.
 | 0 otherwise.
Using this function, variations could be explored until g(P)=0,


effective branching factor is about 2 to 3.Chinese chess has a larger real branching factor, but its average effective branching factor is also about 2 to 3.
“style” of play by the machine canbe changed very easily by altering some of the coeffcients andnumerical factors involved in the evaluating function
A chess master, on the other hand, has available knowledge of hundreds or perhaps thousands of standard situations, stockcombinations, and common manoeuvres based on pins, forks, discoveries, promotions, etc.In a given position he recognizes some similarity to a familiar situation and this directs his mental calculations along the lines with greater probability of success.
Need to re-think the goal of writing a computer program thatplays games.To discover intelligence:What is considered intelligence for computers may not be considered so for human.To have fun:A very strong program may not be a program that gives you the most pleasure.To Find ways to make computers more helpful to human.Techniques or (machine) intelligence discovered may be useful to computers performing other tasks
Chap 06 Alpha-Beta Pruning
standard searching procedure for 2-person perfect-information zero sum games
terminal position
a position whose (win/loss/draw) value can be know



Dewey decimal system杜威分類法 
Min-Max method假設持白子，數字為白子的evaluating function, 在下白子時，取分數最高(max)的，在下黑子時，取分數最低(min)的 
Nega-max method將下黑子的分數取負號(即為黑子的分數，因為是零和遊戲)這樣每一層都取最大分數即可
優點是實作較快，程式碼簡潔 
Alpha-Beta cut off
current search window(score bound) = [α, β]
If α > β, no need to do further search in current branch 
initial alpha = -∞, beta = ∞

 

只要發現對手有一種反擊方式，使結果比其他手的結果還差，就砍掉這一手(branch)
2.1 can cut off 2.x
before 2.1 , window = [15, ∞]
after 2.1 , window = [15, 10]


We want to choose the biggest value at root for lower bound, so 2.x is all cut off

 

只要對手發現自己有一種反擊方式，使結果比其他手的結果還差(α)，就砍掉這一手(branch)
1.2.1 can cut off 1.2.x
beofre 1.2.1 , 1 bound is [-∞, 10]
now 1.2 bound is [15, 10]


We want to choose smallest value at 1 for upper bound, 1.2.x is all cut off

可以砍所有子孫  

2.1.1 is cut off   
root bound = [15, ∞]
2.1.1 = [-∞, 7]



f = white move, find max to be lower bound, do beta cut offg = black move, find min to be upper bound, do alpha cut off
window變號，回傳的score也要變號t = -F(pi, -beta, -m)
Analysis for AB pruningdifferent move orderings give very different cut branches愈快找到最佳解，可以砍的branch愈多
critical nodes 一定會搜到(cut off之前至少需搜完一個子branch) 
perfect-ordering tree: 每個branch的第一個child就是最佳解Theorem: 若是perfect-ordering tree, AB pruning 會剛好走過所有 critical nodesProof:Three Types of critial nodes  

定義a_i = 第i層的node是第幾個child(杜威分類)
a_j = 第一個「不是第一個child」的node(如果有的話)
a_j-1 = a_j+1 = 1
小於j的node都是1
而且因為是critial node，所以a_j的child一定是1(其他會被砍掉)




a_l = the last layer


root and all node = 1(最左邊, 1, 1.1, 1.1.1 …)
l-j = even
j = l (type1 的全部兒子(除了最左邊))  
j < l (type3 的全部兒子)


l-j = odd
j+1 = l (type2.1 的第一個兒子)
j+1 < l (type2.2的第一個兒子)




We can calculate the least number of nodes to be searched  
when there’re some early terminate nodes l = even → x.1.x.1… = b0(q1b2)q3…            1.x.1.x… = (q0b1)(q2b3)…(q0b1 = 第一個孩子的全child，若無child，則為(1-qi)*0)
Perfect ordering is not always best when tree are not balanced → When “relative” ordering of children(not perfect order!) are good enough, there are some cut-off  
Theorem: 若知道所有的分數，就可以最佳化alpha-beta pruning(計算的點最少，cut最多)→ 不過如果能算出來就不用search了…
Variations of alpha-beta search
Fail hard alpha-beta cut(Original) : F2  
returned value in [α, β] 


Fail soft alpha-beta cut(Variation): F3  
Find “better” value when the value is out of the search window
m is the value in this branch(not related to α)
use max(m, alpha) to get window 


return original value m instead of α or β when cut off, which is more precise than fail-hard 
Failed-high 
return value > β


Failed-low
return value < α





Comparison  

fail-hard
return max{4000,200,v} 


fail-soft
return max{200,v} 


fail-soft provides more information when the true value is out of search window
can record better value to be used later when this position is revisited
F3 saves about 7% of time than that of F2 when a transposition table is used to save and re-use searched results
記錄F3傳回的值，可減少重複計算的時間，因為下一手的樹在下兩層，大部分node皆相同
if p1 is searched, p2 does not need to search again 





Questions
What move ordering is good?
search the best possible move first
cut off a branch with more nodes first


What is the effect of using iterative-deepening alpha-beta cut off?
How about searching game graph instead of game tree?
Can some nodes be visited more than once?

Pruning Techinique
Exact algorithms: by mathematical proof
Alpha-Beta pruning
Scout(in Chap07)


Approximated heuristics: pruned branches with low probability to be solution
in very bad position(盤面太差)
a little hope to gain back the advantage(無法逆轉)



Chap07 Scout and Proof Number Search
Suppose we get at least score s at the First branch
want to find whether second branch can get score over s or not



Is there a way to search a tree approximately? 
SCOUT
Invented by Judea Pearl in 1980
first time: search approximately
if there is better value, search again
first search can provide useful information in the second search 


TEST whether Tb can return score > v 
if p is max node → success with only one subbranch > v
if p is min node → success with all subbranches > v
If success, then search Tb. else, no need to search Tb


algorithm 
scout first branch and test other branch
if test success, update the value by scout this branch


recursive procedure
Every ancestor of you may initiate a TEST to visit you
will be visited at most d times(= depth)







Time Complexity  

not guarantee(but most of the time) that the visited nodes number are less than alpha-beta
may search a branch two times
may pay many visits to a node that is cut off by alpha-beta


TEST: Ω(b^(d/2))
but has small argument and will be very small at the best situation 
if the first subbranch has the best value, then TEST scans the tree fast
move ordering is very important




Comparison
alpha-beta
cut off comes from bounds of search windows(by ancestors)


scout
cut off from previous branches’ score(by brothers)





Performance  

SCOUT favors “skinny” game trees
Show great improvements on depth > 3 for games with small branching factors
On depth = 5, it saves over 40% of time


AB + scout gets average 10~20% improvement than only AB

Null(Zero) window search    

Using alpha-beta search with the window [m,m + 1]
result will be failed-high or failed-low


Failed-high means return value > m + 1
Equivalent to TEST(p; m;>) is true


Failed-low means return value < m
Equivalent to TEST(p; m;>) is false


Using searching window is better than using a single bound in SCOUT

 

depth < 3 → no alpha-beta pruning → return value is exact value(no need to search again)
first-time search → do null window search(scout)
research → do normal window a-b pruning

Refinements  

Use information from previous search
When a subtree is re-searched, restart from the position that the value is returned in first search


Change move ordering
Reorder the moves by priority list



Proof Number Search
binary valued game tree    

2-player game tree with either 0 or 1 on the leaves

and-or tree: min → and, max → or


most proving node for node u

node that if its value is 1, then the value of u is 1


most disproving node for node u

node that if its value is 0, then the value of u is 0


proof(u): minimum number of nodes to visit to make u = 1

disproof(u): minimum number of nodes to visit to make u = 0

If value(u) is unknown, then proof(u) is the cost of evaluating u  

If value(u) is 1, then proof(u) = 0
If value(u) is 0, then proof(u) = ∞
proof number can be calculate by search childrens 
disproof number → reverse calculate method of proof number



Usage  

find child u that have min{proof(root); disproof(root)}
if we try to prove it
pick a child with the least proof number for a MAX node
pick any node that has a chance to be proved for a MIN node


if we try to disprove it
pick a child with the least disproof number for a MIN node
pick any node that has a chance to be disproved for a MAX node


used in open game tree or an endgame tree because some proof or disproof number is known
1 → proved to win, 0 → proved to lose 
or used to achieve sub-goal in games




Proof-Number search algorithm  

keep update number by bottom-up
compare proof number and disproof number of root


find the leaf to prove or disprove

Multi-value game tree  

value in [0, 1]
$proof_v(u)$: the minimum number of leaves needed to visited to make u >= v
proof(u) = $proof_1(u)$


$disproof_v(u)$: the minimum number of leaves needed to visited to make u < v
disproof(u) = $disproof_1(u)$


use binary search to set upper bound of the value 

Chap08 Monte-Carlo Game Tree Searchoriginal ideasAlgorithm $MCS_{pure}$  

For each possible next move
play this move and then play a lot of random games(play every moves as random)
calculate average score


Choose move with best score

Original version: GOBBLE in 1993  

Performance is not good compared to other Go programs(alpha-beta)


Enhanced versions
Adding the idea of minimax tree search
Adding more domain knowledge
Adding more searching techniques
Building theoretical foundations from statistics, and on-line and off-line learning
results
MoGo
Beat a professional human 8 dan(段) with a 8-stone handicap at January 2008
Judged to be in a “professional level” for 9 x 9 Go in 2009


Zen
close to amateur 3-dan in 2011
Beat a 9-dan professional master with handicaps at March 17, 2012
First game: Five stone handicap and won by 11 points
Second game: four stones handicap and won by 20 points









Disadvantage  

average score search != minimax tree search
$MCS_{pure}$ prefer right branch, but it’s min value is low 



First Refinement: Monte-Carlo based tree searchIntuition   

Best First tree growing
Expand one level of best leaf(which has largest score) 


if number of simulations is not enough, it can’t be a good simulation
on a MIN node, if not enough children are probed for enough number of times, you may miss a very bad branch
take simulation count into consideration



 
Second Refinement: UCT
Effcient sampling  
Original: equally distributed among all legal moves
Biased sampling: sample some moves more often than others


Observations

Some moves are bad and do not need further exploring
Need to consider extremely bad luck sitiation
e.g. often “randomly” choose bad move and get bad score






K-arm bandit problem 

Assume you have K slot machines each with a different payoff, i.e., expected value of returns ui, and an unknown distribution
Assume you can bet on the machines N times, what is the best strategy to get the largest returns?


Ideas
Try each machine a few, but enough, times and record their returns
For the machines that currently have the best returns, play more often later
For the machines that currently return poorly, give them a chance sometimes to check their distributions are really bad or not





UCB: Upper Confidence Bound  

Meaning
For a MAX node, Wi is the number of win’s for the MAX player
For a MIN node, Wi is the number of win’s for the MIN player
When N is approaching logN, then UCB is nothing but the current winning rate plus a constant
When N getting larger, UCB will approachthe real winning rate


Expand for the move with the highest UCB value
only compare UCB scores among children of a node
It is meaningless to compare scores of nodes that are not siblings


Using argument c to keep a balance between
Exploitation: exploring the best move so far
Exploration: exploring other moves to see if they can be proved to be better 


alternative
consider the variance of scores in each branch 



UCT: Upper Confidence Bound for Tree  

Maintain the UCB value for each node in the game tree
Pick path such that each node in this path has a largest UCB score among all of its siblings
Pick the leaf node in the path which has been visited more than a certain amount of times to expand



Usable when the “density of goals” is suffciently large  

When there is only a unique goal, Monte-Carlo based simulation may not be useful

new MCT algorithm(with UCT) 
Implementation hints
When to use Monte-Carlo
huge branching number 
cannot easily compute good evaluating function
Mostly used in Go, Bridge(?)

Rule of Go(圍棋)  

Ko(打劫): 不能有重複盤面
可以跳過，不能下自殺步
Komi: 先手讓子

Implementation  

partition stones into strings(使用共同氣的子) by DFS
check empty intersection is an eye or not(check neighbors and limits)

Domain independent refinementsMain considerations   

Avoid doing un-needed computations
Increase the speed of convergence
Avoid early mis-judgement
Avoid extreme bad cases

Refinements  

Progressive pruning  
Cut hopeless nodes early


All moves at first(AMAF)
Increase the speed of convergence


Node expansion
Grow only nodes with a potential


Temperature
Introduce randomness


Depth-i enhancement
With regard to Line 1, the initial phase, exhaustively enumerate all possibilities



Progressive pruningEach move has a mean value m and a standard deviation σ  

Left expected outcome ml = m - rd * σ
Right expected outcome mr = m + rd * σ

rd is argument


A move M1 is statistically inferior to another move M2 if M1.mr < M2.ml

Two moves M1 and M2 are statistically equal if M1.σ < σe and M2.σ < σe and no move is statistically inferior to the other
σe is argument which called standard deviation for equality



Remarks  

only compare nodes that are of the same parent
compare their raw scores not their UCB values
If you use UCB scores, then the mean and standard deviation of a move are those calculated only from its un-pruned children


prune statistically inferior moves after enough number of times of simulation

This process is stopped when  

there is only one move left
the moves left are statistically equal
a maximal threshold(like 10000 multiplied by the number of legal moves) of iterations is reached

Two different pruning rules  

Hard: a pruned move cannot be a candidate later on
Soft: a move pruned at a given time can be a candidate later on if its value is no longer statistically inferior to a currently active move
Periodically check whether to reactive it



Arguments  

Selection of rd  
The greater rd is
the less pruned the moves are
the better the algorithm performs
the slower at each play


Selection of σe 
The smaller σe is
the fewer equalities there are
the better the algorithm performs
the slower at each play


rd plays an important role in the move pruning process
σe is less sensitive

Another trick is progressive widening or progressive un-pruning

A node is effective if enough simulations are done on it and its values are good


We can set threshold on whether to expand the best path, for exmaple
enough simulations are done
score is good enough



All moves at first(AMAF)
score is used for all moves the same player played in a random game
in this example, after simulate r→v→y→u→w, w which  has parent v and u which has parent r will be updated, too 


Advantage
speeding up the experiments


Drawback
not the same move - move in early game is not equal to late game 
Recapturing
Order of moves is important for certain games(圍棋)
Modification: if several moves are played at the same place because of captures, modify the statistics only for the player who played first 





Refinement: RAVE    

Let v1(m) be the score of a move m without using AMAF
Let v2(m) be the score of a move m with AMAF
Observations
v1(m) is good when suffcient number of simulations are starting with m
v2(m) is a good guess for the true score of the move m
when approaching the end of a game
when too few simulations starting with m





Rapid Action Value Estimate (RAVE)  

revised score $v3(m) = a \times v1(m) + (1-a) \times v2(m)$
can dynamically change a as the game goes
For example: a = min{1, Nm/10000}, where Nm is simulation times start from m
This means when Nm reaches 10000, then no RAVE is used


Works out better than setting a = 0(i.e. pure AMAF)



Node expansion
May decide to expand potentially good nodes judging from thecurrent statistics
All ends: expand all possible children of a newly added node
Visit count: delay the expansion of a node until it is visited a certain number of times
Transition probability: delay the expansion of a node until its \score” or estimated visit count is high comparing to its siblings
Use the current value, variance and parent’s value to derive a good estimation using statistical methodsExpansion policy with some transition probability is much better than the \all ends” or \pure visit count” policy


ReferenceTSHsu講義 2014年版




















          Please enable JavaScript to view the
          comments powered by Disqus.















            文章目錄
          

            本站概覽
          




HCL






              RSS
            





                  
                  GitHub
                













My Main Page


My First Blog -- qwerty


My Second Blog -- wysiwyg







1. Introduction1.1. 學習電腦對局的用處1.2. 為何學棋局1.3. 圖靈測試(Turing test)1.4. 改變目標1.5. 重大突破1.6. 無關：核心知識1.7. 對局分類2. Chap02 Basic Search Algorithms2.1. Symbol Definition2.2. Brute-force search2.3. BFS(Breadth-First Search)2.3.1. Disk based algorithm2.3.2. Disk based algorithms2.4. DFS2.5. General skills to improve searching algorithm2.5.1. Iterative-Deepening(ID) 逐層加深2.5.2. Bi-directional search2.6. Heuristic(啟發式) search2.6.1. Heuristic search – A*2.7. DFS with threshold2.8. IDA* = DFID + A*2.9. basic thought for a problem2.10. algorithm整理3. Chap03 Heuristic Search with Pre-Computed Databases3.1. Non-additive pattern databases3.2. More than one patterns3.3. Disjoint pattern3.4. Result3.5. What else can be done?4. Chap 04 Two-Player Perfect Information Games Introductions4.1. Definition4.2. Classification4.3. Strategy-stealing argument5. Chap 05 Computer chess programming by Shannon5.1. Analysis5.2. Three phases of chess5.3. Evaluating Function6. Chap 06 Alpha-Beta Pruning6.1. Dewey decimal system6.2. Min-Max method6.3. Nega-max method6.4. Alpha-Beta cut off6.5. Analysis for AB pruning6.6. Variations of alpha-beta search6.7. Questions6.8. Pruning Techinique7. Chap07 Scout and Proof Number Search7.1. SCOUT7.2. Proof Number Search8. Chap08 Monte-Carlo Game Tree Search8.1. original ideas8.2. First Refinement: Monte-Carlo based tree search8.3. Second Refinement: UCT8.3.1. Implementation hints8.4. When to use Monte-Carlo8.5. Domain independent refinements8.5.1. Progressive pruning8.5.2. All moves at first(AMAF)8.5.3. Node expansion9. Reference










0%







































臺大課程地圖






















首頁
共同必修課程

國文
外文
體育
服務學習
進階英語


通識課程

文學與藝術領域
歷史思維領域
世界文明領域
哲學與道德思考領域
公民意識與社會分析領域
量化分析與數學素養領域
物質科學領域
生命科學領域


院系所課程

文學院
理學院
社會科學院
醫學院
工學院
生物資源暨農學院
管理學院
公共衛生學院
電機資訊學院
法律學院
生命科學院
牙醫專業學院
獸醫專業學院
其他教學單位


其他全校性課程

軍訓
共同選修
新生專題
寫作教學
基本能力課程


English．英文版



課程名稱：【電腦對局理論】


當學期所開設課程



課號
班次
課名
學分數
全半年
授課教師
時間(教室)



往年所開設課程



開課年度
課號
班次
課名
學分數
全半年
授課教師
時間(教室)


99-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資105) 


99-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資105) 


98-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資310) 


98-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資310) 


97-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資310) 


97-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資310) 


96-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資105) 


96-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資105) 


105-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四789 (資105) 


105-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四789 (資105) 


104-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四789 (資105) 


104-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四789 (資105) 


103-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678


103-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678


102-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資110) 


102-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資110) 


101-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資110) 


101-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資110) 


100-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資310) 


100-1
CSIE5138

電腦對局理論
3
2
徐讚昇
四678 (資310) 










Copyright 2008 臺灣大學 National Taiwan University
10617 臺北市羅斯福路四段一號　No. 1, Sec. 4, Roosevelt Road, Taipei, 10617 Taiwan(R.O.C)
電話 (Phone)：+886-2-3366-2388轉308,607　　傳真號碼 (Fax)：+886-2-2362-6282
















電腦對局導論 – TreeMall書城



















 


TreeMall　|　會員中心　|　加入會員　|　訂單查詢　|　購物車結帳　|　Q&A




書名
作者
出版社
書碼


































首頁 

				
					
					> 博客來書城
					
					
				
				
				> 電腦資訊
				
			








 




行銷企管





財經投資





文學





小說





社會人文





史地





法律/政治/軍事





哲學





傳記





電腦





應用科學





自然科學





語言學習





考試用書





專業書





心理勵志





宗教





醫療保健





休閒娛樂





觀光旅遊





飲食生活





漫畫





家庭百科/親子





童書/青少年叢書





文學小說





商業理財





藝術設計





人文史地





社會科學





自然科普





心理勵志





醫療保健





飲食





生活風格





旅遊





宗教命理





親子教養





童書/青少年文學





輕小說





漫畫





語言學習





考試用書





電腦資訊





專業/教科書/政府出版品

























電腦對局導論
Computers and Classical Board Games: An Introduction






作 者：徐讚昇,許舜欽,陳志昌,蔣益庭,陳柏年,劉雲青,張紘睿,蔡數真,林庭羽,範綱宇


出版社：國立臺灣大學出版中心


ISBN：9789863502371


出版日期：2017年06月29日



語言別：繁體中文



										原價：420 元    
										優惠價：78折 
										328元 


















內容簡介





研究電腦如何下棋、解謎題和進行對局是資訊科學中研究人工智慧的重要一支。電腦對局的研究課題多元且具挑戰性，又因入門的條件較低、成效評定方式明確，故吸引許多人投入研究。本書有系統地蒐集並整理相關文獻，歸納電腦對局之精華要義，有助於入門者學習參考，奠定基礎。

本書綜覽電腦對局研究，並特別註重演算法層次的引導式理解及討論，也描述演算法實作時所需的系統知識和技巧，兼顧理論和實際。

研究電腦對局，終極目標不只是希望電腦在對局上能贏人類，而是在達成這目的的過程中，深入瞭解相關知識及應用。因此，與其說研究者在鑽研如何讓電腦「變聰明」，不如說透過演算法，研究者激發腦力，從而開創新的科學和技術發展，便利人類的生活。

本書特色

1. 國內外第一本專門介紹電腦對局程式設計理論和實作的專書。
2. 囊括古今中外相關軼事、筆記和研究，包羅萬象，蒐集齊全。
3. 超過60個演算法，詳細說明單人對局及雙人對局之細節。
4. 超過120張說明圖示，舉實例闡述困難的觀念。







運送及保固說明






										寄送時間：完成付款後 7   個工作天內送達(不含週六、日及國定假日。部份預購、特別訂製商品除外）
										送貨方式：透過宅配或是郵局送達，特殊商品將由原廠專人為您送達(註記於商品文案中)。消費者訂購之商品若經配送兩次無法送達，再經本公司以電話與E-mail均無法聯繫逾三天者，本公司將取消該筆訂單，並且全額退款。 
										送貨地址：請註意！本公司所提供的產品配送區域僅限於台灣本島且請勿為郵政信箱。
										售後服務：若產品本身瑕疵或運送過程導致新品瑕疵，到貨7日內可更換新品。
										關於退貨：依照消費者保護法規定，TreeMall購物消費者均享有商品到貨七天猶豫期之權益。但退回商品必須是全新狀態且完整包裝(保持商品、附件、包裝、廠商紙箱及所有附隨文件或資料之完整性)，否則恕不接受退訂。但針對商品性質特殊，一經拆除下列所載之包裝，即不接受退貨：

書籍、雜誌必須是全新狀態(包括但不限於已被讀者簽名、註記….等)與完整包裝(商品、附件、內外包裝、隨貨文件、贈品等)。
化妝品、清潔保養用品等耗損性商品之內裝部分，包括但不限於瓶蓋、封口、封膜等接觸商品內容之包裝部分。
個人用品之商品實際包裝部分。
軟體(如電腦軟體、程式等)、影音商品(如錄音帶、錄影帶、CD、VCD、DVD等)及相機之商品實際包裝部分（即除運送用之包裝外一切包裝）。
手藝商品(如縫紉、銀黏土)之實際包裝部分（即除運送用之包裝外一切包裝）。

										退換貨需知：為縮短您退貨及退款作業時間，可以先行至會員中心-訂單查詢填寫「退換貨申請」本網站即可以提供最快速的處理服務，或者亦可與TreeMall購物客服中心聯繫 TEL：0800-039-866 轉2或3，我們將有專人為您處理退換貨事宜。退回之商品必須是全新狀態且完整包裝 (包含發票、所有產品、附件、耗材、內外包裝、及所有附隨文件或資料之完整)，否則恕不接受退貨。 
純點兌換所提供之商品或服務均不可退還或更換其他商品（非不可抗力之因素損壞除外）。
										申請兌換、換購之商品或服務停止提供時，國泰世華銀行或神坊資訊有權變更商品或服務項目，另代以其他等值之類似商品或服務。  




































































		TreeMall由神坊資訊股份有限公司經營管理 非經本公司書面同意,請勿任意轉載網站內容 法務部調查局為穩定國內物價，避免不肖份子囤積商(貨)品獲利，特成立【舉報商品囤積免付費電話0800-007-007】， 盼民眾多加利用 TreeMall網路客服中心，本公司將於24小時內回覆或撥打客服電話：0809-060-699(此為商品諮詢專線，無法提供電話訂購)，電話客服時間每週一至週五早上9:30~晚上18:00。


神坊資訊│ 隱私權政策│ 合作廠商 │ 徵人啟事









國立臺灣大學-雲端計算趨勢學程[課程規劃]







 
 
 






首頁




設立宗旨




設置辦法




如何申請




授課師資




課程規劃




組織成員




地理位置




文件下載




錄取名單




活動照片




聯絡我們




Q & A



  


  









課程名稱



課號



教授





虛擬實境



CSIE7633



歐陽明





系統效能評估



CSIE5023



周承復





資訊理論與編碼技巧



CSIE7624



李明穗





網路資訊檢索與探勘



CSIE5137



鄭卜壬





圖形分析辨認



CSIE5079



洪一平





雲端運算特論



CSIE7324



蘇雅韻





資訊科技與創新 
										(資訊管理系)



IM5034



莊裕澤





資料庫系統



CSIE4240



徐宏民





機器學習



CSIE5043



林軒田





資料庫系統



CSIE4240



朱浩華





多媒體資訊分析與檢索



CSIE5130



徐宏民





數位影像處理



CSIE5612



洪一平





資訊安全 
										(資訊管理系)



IM5011



蔡益坤





人工智慧



CSIE5400



許永真





自然語言處理



CSIE5042



陳信希





個人通訊服務



CSIE5015



林風





電腦對局理論



CSIE5138



徐讚昇





嵌入式作業系統實作



CSIE7313



薛智文





普及計算



CSIE7643



朱浩華





資訊與歷史資料分析



CSIE5653



項


										潔





資訊檢索與擷取



CSIE5460



陳信希





生醫資料探勘演算法



CSIE7725



歐陽彥正





多媒體安全



CSIE5135



吳家麟





社群網路分析



CSIE5155



林守德





無線多媒體系統研究



CSIE7524



吳曉光





資料庫系統設計



CS7243



郭大維





雲端運算及行動平臺



CS5158



廖世偉





嵌入式多核心系統與軟體



CS5151



洪士灝




回上頁





 







[評價] 100-1 徐讚昇 電腦對局理論 | PTT 鄉民日報

























首頁
B98902hw












[評價] 100-1 徐讚昇 電腦對局理論
作者 jennya
看板 B98902hw
時間
                
                    2012-08-22 09:29:30
                
            
 ★ 本文是否可提供其他同學轉作其他非營利用途？（須保留原作者 ID）
         （是／否／其他條件）：是



      ★ 若滿分五分，則私心推薦幾分？

       3分  其實我想給7分!!!>\\\\\\< 每次上完都超幸福的一門課阿!!
為了怕選課人數太多只好給超不誠實的3分囉 =3=
★ 課程大綱

      課程網站 (改一下網址就可以看前幾年的~東西都還在)
      http://www.iis.sinica.edu.tw/~tshsu/tcg2011/index.html

      Theory of computer games: an AI oriented introduction
      Single-agent search (I)
      Single-agent serach (II)
      Survey of 2-player perfect information games
            以上都是一些會用到的名詞的介紹
      C.E. Shannon's 1950 computer chess paper
            現在computer gaming的現況
      Alpha-beta pruning: Algorithms and analysis
            重頭戲! AI會用到的search~ 滿好玩的
      Scout and NegaScout
            另一個煩人的演算法~XD 也是重頭戲
      Enhancements to alpha-beta search
      Parallel alpha-beta based game tree search
            就是在講平行的部分
      Monte-Carlo game tree search
            另外一個重點 蒙地卡羅~ 但是這已經到學期末了...所以我沒學好XD
      Case study: Computer Chinese chess
            因為project要做暗棋所以講了一些暗棋的部分
      Concluding remarks
            期末總結&感言~例如說感謝jessica1338大大幫忙修投影片之類的~XD





★ 上課方式(投影片或是板書、老師教學風格、是否英語授課)

      老師上課超有趣的!!! >\\\\\<  我個人超喜歡 XDD

      第一次上課以後就覺得一定要繼續留下來!!!! XDDD (本來想修莊永裕的同時段的課

      然後就上了一學期讓我超幸福的課 >\\\\\\\\< (jessica1338表示:有這麼誇張嗎)


      雖然很難講到底是哪種有趣~

      不過我還是硬描述一下好了~

      所謂的"有趣"應該是偏向"健談"或"很有台風"的那種~

      不是那種很有梗常常可以讓全班爆笑的

      是那種言談很順暢~穿插一點小幽默 讓你不太會睡著的~

      如果可以去聽第一次上課的話

      大概就是像那樣了~

      之後的每堂課也都是像那樣~不會變low也不會變high~XD


      老師上課是用非常文字的投影片~XD

      在我上面給的課程網站連結裡有全部的投影片可以下載

      有興趣的可以自己載來看

      還滿有他個人風格的XDDD

      如果很在意一定要有精美投影片的可能就不太適合了~

      但至少我個人很愛這樣的風格 XDDDD

      因為讀&印的時候很清楚 不會有奇奇怪怪的圖片/顏色


      老師的教學風格部分~

      因為是偏小班教學~所以他當然喜歡cue人~

      不過也不是每個人都會被cue

      會被cue的大概就是

      太高調的人(ex. 坐在第一排的我 =  =)

      或是會圍棋的人XDDD (大概因為圍棋是目前少數大家都知道又還沒被解的遊戲)

      所以不喜歡被點到發言的~也不用太在意啦~

      然後會圍棋的快去修~老師會好好愛護你的!!!(?)


      ★ 評分標準

      一個coding小作業 (15%)
                期中考 (25%)
               報paper (20%)
           期末project (30%)
             課堂參與  (10%)

      ★ 作業內容及方式

      * coding小作業

        挑一個單人遊戲 然後寫他的AI

        各種單人遊戲都可以~~(要先寄給老師問過)

        像我是寫開關燈 有人寫bloxorz (http://www.miniclip.com/games/bloxorz/en/

        這個作業要寫code、document，還要準備投影片demo給全班看

        等於算是有點小project

        可是我是覺得算輕鬆啦~~

        然後demo給全班看~因為全班人不多~所以也滿歡樂的~XD

      * 報paper

        一開始說是報paper但是後來沒時間所以就只要寫paper report給老師就可以了

        其實也不難~

        我最後趕deadline好像花一個小時就把他寫完了...

        不過這好像也是我期末總成績中的敗筆Q^Q

      * 期末project

        寫暗棋的AI

        GUI有已經寫好的可以用

        只要寫演算法相關的code就可以了~~

        但是我們這年的GUI有點難用 + 範例code有點弱 =  ="

        所以有一點點麻煩...但是還是可以用啦~~

        然後期末project原本是訂在期末考前一周

        但是因為老師有太多教不完 就變成延後到期末考後一周

        所以寫的時間應該算滿多的~


      (以上作業皆為一人喔 所以擔心團體作業的可以不用怕)

      (但是如果修課人數變多的話~變成雙人作業~也是有可能的事)


      ★ 考試風格及題型

      期中考


      openbook, 投影片什麼書面的都可以帶進去

      那時候把所有參考論文都印了...結果最後根本沒用到=  ="

      (老師還一直說~會考哦~~ 可是我根本不知道哪裡有考 =  =)

      總之假如到時候有要期中考 參考論文就別印了吧~會浪費紙良心不安= ="

      要不然可以來跟我要~~!!


      題目滿多的 連寫考卷超快的jessica1338大大都寫不完

      第一大題是名詞解釋 可是不是那種背的

      然後後面是有好幾題alpha-beta-search還有其他search的演練

      如果可以訓練快速把這個畫完的話 有可能可以寫完整份考卷XD


      然後好像滿分也不是100分的樣子

      ★ 其它(會不會點名、需要什麼基礎、老師的個性)

      * 還是要去比較好 老師人都認識 他可能會偷偷扣分XDD

      * 基礎:會coding就好 語言也不限! 你要用什麼語言都可以哦 會跑就可以

      * 老師人很好啊 都會跟大家聊天~~不過也不是那種爛好人之類的~

        他應該會跟你講說

        "你再這麼混我就要把你當掉囉~要不要考慮停修阿:D" 之類的XD


      ★ 個人修課心得及總結

      因為我很喜歡這門課阿所以當然推薦!!

      個人總結是一門loading不重 上課很有趣 可以學到東西的課

      聽很多人說修課內容跟AI有一大部分重疊(我沒修過AI所以不知道)

      所以如果和AI一起的話 應該loading就會更輕一些(期中考範圍重疊之類的)


      但是也不是一門涼課!!

      還是需要花時間的

      coding不太行又無法花時間寫出一個東西的 就不建議了~

      老師是會一個一個看code給分的 而且東西也要demo給大家看 所以混不了


      老師曾經說他喜歡教少人一點 小班一點的課

      所以我超怕PO了這個評價文以後就會很多人跑去修 然後老師就恨我了XDDD

      所以以下兩個重點

      (1) 想混的拜託不要去 老師一定不會手下留情會把你當掉 所以不要去占名額

      (2) 假如第一周上課當天很多人的話~請千萬不要提到我的名字~

          千萬不要唷~~~!!!XDD 一切請盡量提到jessica1338大大~~XDDD


      對了最後補上不重要的一點

      話說這門課的男女比超美

      曾經一度在上課前五分鐘的時候 男女比達到女生比男生多的境界 超猛的

      光是我們那時候修課的B98就有4個女生欸! (課堂人數才十幾二十幾人)

      不知道今年還會不會呢~~

--
※ 發信站: 批踢踢實業坊(ptt.cc)
◆ From: 140.112.221.4
※ 編輯: jennya          來自: 140.112.221.4        (08/22 09:30)
※ 編輯: jennya          來自: 140.112.221.4        (08/22 09:31)






1F推jenny2921:這篇可以獲得1000P~ 08/22 09:50
2F推jessica1338:3分好低喔 教授要哭哭惹XD 08/22 10:49
3F→jennya:這肯定就是你不夠宅所以沒有發現我給這個分數的真意~~XDD 08/22 10:50
4F→jennya:教授不會哭啦~~~XDDD 08/22 10:50
5F推jessica1338:我懂惹XD 08/22 10:56
6F推lachu:什麼意思啊? 08/22 13:39
7F推s864372002:倒數第四行是元氣用法嗎XD？ 08/22 19:51
8F→jennya:是褒意@@ 08/22 19:53

















PTT 熱門討論

[情報] Darren Collison to Pacers 2yr 20M


[新聞] 華麗現身！李燕見趙駿亞爺爺　心機陳珮?,


[問卦] 女友懷孕


[發錢] 騎士迷祝福勇士奪冠/順便來猜猜吧~


[LIVE] 天亮mlb [email protected]


[分享] 中華職棒六月投打突出者


[LIVE] 中日韓職棒







[閒聊] 反對海外網購免稅額 的連署


[閒聊] 男生看韓劇


[情報] 今日二軍先發


[閒聊] 其實也沒啥好說的 恭喜騎士，加油勇士


高雄哪家生魚片丼飯最好吃？


[問題] 備審資料不夠豐富就很難上好大學嗎？


[新聞] 號召全球公祭劉曉波　擺空椅舉三指默哀


[新聞] 涉「辱台」實況主拍道歉片　要求媒體撤


[外絮] 勇士制服組對於選秀跟小AI合約的意見....


[問題] 夏特有中文版遊戲推薦？


Fw: [問卦] 護士這詞哪裡貶抑啊


Re: [情報] 蝦皮年中慶抽折扣碼


[分享] 林子偉的飛撲


[討論] 是女生愛生氣還是男生不貼心


[新聞] 防彈Jimin被爆熱戀瑟琪！　網揪「情侶對


Re: [新聞] 韋傑理:台灣「海洋國家」本不同於中國


[閒聊] 韓劇最驚嚇到的瞬間(翻轉)


[問題] 什麼原因讓htc照相技術突飛猛進？


[問卦] 新加坡到底是進步還是落後





[公告] 高雄洲際賽門票轉讓集中區


Re: [新聞] 股利所得 擬採20%單一稅率


[新聞] 基層反彈！一例一休太僵化引民怨　蔡英


Re: [問卦] 張雨生影響力真的有這麼大？


[閒聊] 梅長蘇是不是過譽了？


[新聞] 《偶像學校》根本韓版《黑澀會》! 這些


Re: [討論] G4騎士要如何取勝


[新聞] 李登輝：蔣宋美齡要求不得撤換郝柏村報告


[新聞] 《絕地求生》開發者:未來的五年，我們已


[新聞] 曾陶鎔連續7打席三振 追平聯盟最慘紀錄


Re: [討論] 為何那麼多人討厭LBJ?


[公告] 地表最強演唱會 臺北站售票實況區


[LIVE] 七日的王妃 EP10


[ＦＢ] 楊雅晴 TED 演講全文：「親愛的女生，你


[分享] M-Benz 17年式 E250 AMG line 開箱


[分享] 關於兄弟第三指名陳柏豪


[閒聊] 乃木神社★１８４


[新聞] 市政滿意墊底　柯Ｐ牽拖市民水準太高


[數據] 2017/06/28(三)盤勢數據


[活動] 02/18（六）額板推文猜歌送P幣 第15題


[新聞] 怒撕報紙！郭台銘：東芝競標案是科技業大


[菜單] 120k 模擬器多開實況機 最後定案


Re: [新聞] 棄7年公職生涯　林於凱投入時力拼年改































