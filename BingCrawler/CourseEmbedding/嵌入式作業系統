


嵌入式系統 - 維基百科，自由的百科全書































 







嵌入式系統

維基百科，自由的百科全書


					前往：					導覽，					搜尋






本條目不符合維基百科的品質標準，需要完全重寫。 
請在討論頁中討論相關議題，並參考更優秀條目寫作指南。 











Soekris net4801,適用於網路應用程式


嵌入式系統（Embedded System），是一種嵌入機械或電氣系統內部、具有專一功能和實時計算效能的電腦系統。[1][2]嵌入式系統常被用於高效控制許多常見裝置，被嵌入的系統通常是包含數位硬體和機械部件的完整裝置，例如汽車的防鎖死煞車系統。相反，通用電腦如個人電腦則設計靈活，可以智慧型處理各式各樣的運算情況，以滿足廣大終端用戶不同的需要。
現代嵌入式系統通常是基於微控制器（如含整合記憶體和/或外設介面的中央處理單元）的，但在較複雜的系統中普通微處理器（使用外部儲存晶片和外設介面電路）也很常見。通用型處理器、專門進行某類計算的處理器、為手持應用訂製設計的處理器等，都可能應用到嵌入式系統。常見的專用處理器有數位訊號處理器。
嵌入式系統的關鍵特性是處理特定的任務，因此工程師能對其進行最佳化，以降低產品的體積和成本，提升可靠性和效能。
嵌入式系統的物理形態包括便攜裝置如計步器、電子手錶和MP3播放器，大型固定裝置如交通燈、工廠控制器，大型複雜系統如混合動力汽車、磁共振成像裝置、航空電子裝置等。它們的複雜度低至單晶片，高至大型底盤或外殼內安裝有多個部件、外設和網路。



目錄


1 嵌入式系統例項
2 歷史
3 特性

3.1 使用者介面
3.2 嵌入式系統的處理器

3.2.1 嵌入式主機板
3.2.2 ASIC和FPGA解決方案


3.3 外圍裝置
3.4 工具
3.5 偵錯
3.6 作業系統
3.7 啟動

3.7.1 內部自檢


3.8 可靠性體系


4 嵌入式軟體架構的類型

4.1 控制迴圈
4.2 非搶先式任務
4.3 搶先式定時器
4.4 搶先式任務
4.5 微內核與外內核
4.6 虛擬機器
4.7 檢查點計算
4.8 辦公用（單核心）作業系統
4.9 Exotic custom作業系統


5 外部連結
6 常見的嵌入式作業系統
7 業界常見的開源嵌入式軟硬體系統



嵌入式系統例項[編輯]
嵌入式系統通常應用於消費類、烹飪、工業、自動化、醫療、商業及軍事領域。

電信系統

從網路級的電話交換機到手機終端都部署了大量嵌入式系統。

消費類電子

包括PDA、MP3播放器、行動電話、遊戲機、數字攝錄影機、DVD播放器、全球衛星定位系統接收器和印表機。

家居應用

微波爐、洗衣機和洗碗機中採用了嵌入式系統，帶來靈活性、效率和功能；高階暖通空調系統採用聯網的恆溫器更精確、高效地按天或季度控制溫度；智慧型家居使用嵌入式裝置進行感知、控制，通過有線和無線網路控制燈光、溫濕度、安全、音影片、監控等。

交通系統

安全要求相當高的飛機中採用了先進的航空電子裝置，如慣性導航系統、全球衛星定位接收器； 各種電機——直流無刷電機、異步電機和直流電機中使用了電氣/電子電機控制器； 汽車、電動車、混合動力汽車越來越多地採用嵌入式系統來節能減排； 其他汽車安全系統，包括防抱死制動系統、電子穩定控制系統、牽引力控制系統、自動四驅系統。

醫療裝置

使用嵌入式裝置進行生命體徵監測，電子聽診器放大聲音，各種醫療成像系統（正電子發射電腦斷層掃描、單光子發射電腦化斷層顯像、電腦斷層掃描、核磁共振成像）進行非入侵式內部檢查； 醫療裝置內的嵌入式系統通常採用工業電腦。

嵌入式系統應用在交通、消防、安防、醫療和生命攸關係統中，由於這些系統能夠與駭客等隔離，因而更可靠。在消防安全中，經過設計，系統能在高溫環境下持續工作。出於安全需要，嵌入式系統可以自給自足，能夠處理切斷了電氣和通訊系統的情況。
WSN領域的發展，促使一種新型的微型無線裝置微塵迅速普及。人們可以通過資訊監測和控制系統感知並作用於物理世界的無數事物。微塵採用微製造技術，通過先進的IC設計技術，將無線子系統與尖端的傳感器結合；從而讓人們可以通過資訊監測和控制系統感知並作用於物理世界的無數事物。這些微塵是完全自給自足的，在需要更換電池或充電前通常可以工作數年。
利用嵌入式Wi-Fi模組，原先利用串列埠進行通訊的裝置可以輕鬆啟用無線通訊功能。
歷史[編輯]
MIT儀器研究室的查爾斯·斯塔克·德雷珀開發的阿波羅制導電腦是現代嵌入式系統的雛形之一。在專案初期，它被看成風險最高的部分，原因是為了減小尺寸和重量，它採用了當時最新研發的單片積體電路。
第一款大批次生產的嵌入式系統是1961年發布的民兵I飛彈內的D-17自動制導電腦。當民兵II飛彈在1966年開始生產的時候，D-17升級成一種新型電腦，其中首次大量使用了積體電路。僅這個專案就將與非門模組的單價從1000美元降低至3美元，低到可用於商業產品。
由於二十世紀六十年代的這些早期應用，不僅嵌入式系統的價格降低了，同時處理能力和功能也獲得了巨大的提高。以第一款單晶片英特爾4004為例，它是為計算機和其他小型系統設計的，但仍然需要外部記憶體和外圍晶片。1978年，國家工程製造商協會發布了可編程單晶片的「標準」，涵蓋了幾乎所有以電腦為基礎的控制器，如單板機、數控裝置，以及基於事件的控制器。
隨著微控制器和微處理器的價格下降，消費品也可以更換掉基於按鈕的模擬器件，如分壓計和可變電容，採用微處理器讀取開關或按鈕訊號。
到了二十世紀八十年代早期，記憶體、輸入輸出部件整合到處理器內，產生了單晶片。在採用通用電腦占用的成本太高昂的應用中，單晶片取而代之。
較低成本的單晶片編程後可取代很多獨立部件，這種嵌入式系統通常比傳統解決方案更複雜，但這些複雜性多數體現在單晶片自身。嵌入式系統需要的外圍元件很少，多數設計工作集中在軟體，而軟體原型的建立及測試與設計、建立新的不使用嵌入式處理器的電路相比速度更快。
特性[編輯]
區別於可以執行多重任務的通用型電腦，嵌入式系統是為某些特定任務而設計的。有些系統則必須滿足實時性要求，以確保安全性和可用性；另一些系統則對效能要求很低甚至不要求效能，以簡化硬體、降低成本。
嵌入式系統並不總是獨立的裝置。許多嵌入式系統由嵌入較大裝置的小計算部件組成，提供較通用的功能。例如吉他機器人採用嵌入式系統來調弦，但總的來說它的設計目的絕不是調弦而是演奏音樂；車載電腦作為汽車的一個子系統存在，提供導航、控制、車況反饋等功能。
為嵌入式系統編寫的程式稱為韌體，儲存在唯讀記憶體或快閃記憶體晶片內，執行在有限的硬體資源上：小容量記憶體，小鍵盤或螢幕甚至沒有。
使用者介面[編輯]
嵌入式系統使用者介麵包括了從沒有使用者介面而只專註於單一任務、到類似於現代桌面作業系統的複雜圖形化使用者介面的各類介面。
簡單的嵌入式裝置使用按鈕、LED、圖形或數字LCD和簡單的選單系統。
較高端的嵌入式系統使用圖形螢幕，配合輕觸感應或屏邊按鈕使用，可使占用空間最小並提供靈活性：按鈕的含義隨螢幕顯示的內容而改變，而且指向想要的選項進行操作就能實現選擇。手持系統通常採用螢幕加操縱桿按鈕作為觸控裝置。
有些系統通過串行通訊介面（如RS-232、USB、I2C等）或網路連線遠端提供使用者介面。這種方式的優勢在於：擴充功能了系統的效能、削減了螢幕的成本、簡化了BSP，可以在PC上構建豐富的使用者介面。例如執行在嵌入式裝置平臺（如IP攝錄影機或路由器）上的嵌入式網路伺服器，它無需安裝客製軟體，而是在連到裝置的PC端的網路瀏覽器中顯示使用者介面。
嵌入式系統的處理器[編輯]
嵌入式處理器大概可分為兩類。一類是普通微處理器：使用獨立的積體電路記憶體和外設。另一類是單晶片：具有片上外設，降低了功耗、尺寸和成本。嵌入式系統的軟體是為某種應用客製的，而不是像個人電腦那樣的由終端用戶安裝的商品，因此可以使用各種不同的基本CPU架構：既有範紐曼型架構也有不同程度的哈佛結構；既有RISC也有非精簡指令集處理器；字長從4位元到64位元甚至更高，當然最典型的仍然是8/16位元。多數架構由幾家不同的公司生產，使用了大量不同的變數和類型。
嵌入式系統也會使用通用型微處理器，但比單晶片需要更多外圍電路。
嵌入式主機板[編輯]
PC/104和PC/104+是小型、小批次嵌入式強固系統的標準之一，大多基於x86架構；通常比標準PC要小，而比多數簡單的8/16位元嵌入式系統要大；使用MSDOS、Linux、NetBSD，或實時嵌入式作業系統如MicroC/OS-II、QNX、VxWorks。有時這些主機板也會使用非x86處理器。
在某些應用中，小巧、高效並非主要關註點，因而可以使用與x86型PC主機板相容的部件。VIA EPIA系列板卡則可以彌補這個空缺，它相容PC但是高度整合、體積較小，或提供其他對嵌入式工程師很有吸引力的特性。這種方法的好處是低成本商品也可以使用通用的軟體開發工具。用這種方法構建的系統仍然是嵌入式系統，因為它嵌入在較大的裝置中、用於滿足單一用途。例如ATM和電子遊戲機，它們都包含了針對各自應用的代碼。
多數嵌入式主機板都不是圍繞PC設計的，也不使用ISA或PCI匯流排。如果採用SoC處理器，用標準匯流排連線分立元件就不是上策，此外軟硬體開發環境都可能會很不一樣。
一種常用的設計模式是採用小型系統模組——也許只有商務卡片大小，容納高密度的BGA晶片如ARM處理器和外設、用於儲存的外部快閃記憶體、作為記憶體的DRAM。模組廠商通常會提供啟動軟體和作業系統選項，一般包括Linux和一些實時作業系統。這些模組由熟悉專業測試方法的組織大批次生產，配合較小批次的、帶特殊應用外設的客製主機板使用。
ASIC和FPGA解決方案[編輯]
SoC是一種常見的為超大批次嵌入式系統設計的可配置陣列。它在單個晶片內包含了多處理器、乘法器、快取和介面，形成一個完整的系統；通過專用積體電路或現場可編程門陣列來實現。
外圍裝置[編輯]
嵌入式系統通過外設與外部通訊：

串行通訊介面：RS-232、RS-422、RS-485等
同步串行通訊介面：I2C、SPI、ESSI等
USB
多媒體卡：SD卡、CF卡等
網路：乙太網、LonWorks等
現場匯流排：CAN匯流排、LIN匯流排、PROFIBUS等
定時器：PLL、捕獲比較模組和時間處理單元
分立IO：GPIO
模擬-數字/數字-模擬轉換(ADC/DAC)
偵錯介面：JTAG、ISP、ICSP、BDM埠、BITP、DP9埠等

工具[編輯]
同典型的電腦程式員一樣，嵌入式系統設計人員也使用編譯器、連結器和偵錯程式開發嵌入式系統軟體。然而，他們也使用一些大多數程式設計師不熟悉的工具。
軟體工具的來源有如下幾種：

專註於嵌入式系統市場的軟體公司
從GNU軟體開發工具移植（參見交叉平臺編譯）
有些情況下，如果嵌入式處理器與普通個人電腦處理器很近似的話也可以使用個人電腦開發工具

嵌入式系統設計人員也使用一些不為普通電腦程式員所熟悉的軟體工具：

一個常用工具是「電路內部仿真器」（ICE，in-circuit emulator）或者是最新設計中的嵌入式偵錯程式。這個偵錯工具是開發嵌入式程式的基本技巧。它代替微處理器或者嵌入微處理器內部，提供了在系統中快速呼叫和偵錯試驗代碼的便捷工具。一個焊點通常就是一個插入系統的特殊電路，通常使用一臺連結到這些焊點的個人電腦作為偵錯介面。
連結器通常是各種各樣。對於大多數商業編程來說，連結器幾乎是事後才考慮的部分，預設設定也從來不變。與此相反，嵌入式連結器有完整、複雜的命令列語言是很普通的。經常有不同類型的記憶體，分別儲存特殊的代碼和資料。單獨的資料結構能夠放在特殊的位址，這樣軟體能夠很方便地存取對映到記憶體的控制暫存器。嵌入式連結器經常有用於減小代碼大小和執行時間的外部最佳化工具。例如，他們可能移動子程式的位置以使用較小的呼叫和跳轉指令。它們經常帶有管理資料疊加（英語：data overlays）和band switch（英語：band switch）技術的特性，這些技術是在嵌入式軟體經常使用的擴充功能廉價CPU的方法。
另外一個常用的工具是一個在程式中添加代碼和或者CRC的工具程式（經常是自己寫的），使用這個工具嵌入式系統能夠在執行程式之前先進行程式資料檢查。
為數位訊號處理開發軟體的嵌入式程式設計師經常使用MathCad或者Mathematica這樣的數學工具進行數學仿真。
一些較少使用的工具有將資料檔案轉換成代碼的工具，使用這種工具就可以在程式中包含任意類型的資料。
少數一些專案為了特殊的可靠性或者數位訊號處理要求使用同步程式語言（英語：Synchronous programming language）。

一些程式語言為嵌入式系統編程提供了一些特殊支援。

對於C語言，ISO/IEC TR 18037:2005定義了

指定的位址空間
指定的儲存類
基本輸入輸出的硬體尋址



偵錯[編輯]
偵錯通常使用內部電路仿真器或者其他一些能夠在微控制器微碼（microcode）內部產生中斷的偵錯程式。微碼中斷讓偵錯程式能夠在只有CPU工作的硬體中進行操作，基於CPU的偵錯程式能夠從CPU的角度來測試和偵錯電腦的電路。PDP-11開創了這種特性的先河。
開發人員能夠仍然使用斷點、單步執行以及高階語言進行偵錯，在許多的偵錯工具上都有這種能力。另外開發人員在偵錯實時事件順序的時候需要記錄、使用簡單的記錄工具。
首先遇到這種問題的個人電腦和大型電腦程式設計師經常在設計優先級和可行方法的時候感到困惑。指導、代碼審查和非個人風格（egoless（英語：egoless））的編程是值得推薦的。
隨著嵌入式系統變得越來越複雜，更高層次的工具和作業系統逐漸移植到可行的裝置上。例如，蜂窩電話、個人數字助理和其他的消費用電腦需要一些從個人或者這些電子裝置製造商之外的公司購買或者提供的一些重要軟體。在這些系統中，需要如Linux、OSGi或者Java這樣的開放編程環境，這樣第三方軟體提供上才能夠在大規模的市場上銷售軟體。
大多數這樣的開發環境都有一個執行在個人電腦上的參考設計，這種軟體的絕大部分都可以在傳統的個人電腦上開發。然而，從開放環境移植到專用的電子裝置和電子裝置的驅動程式開發通常仍然是傳統的嵌入式系統軟體工程師的工作。在有些情況下，the engineer works for the integrated circuit manufacturer, but there is still such a person somewhere.
作業系統[編輯]




使用Windows XP的網際網路收費電話


嵌入式系統經常沒有作業系統、專用的嵌入式作業系統（經常是實時作業系統）或者指定程式設計師移植到這些新系統。
啟動[編輯]
嵌入式系統帶有啟動代碼，通常它禁止中斷、設定電子裝置參數、測試電腦（RAM、CPU和軟體），然後開始應用程式執行。許多嵌入式系統從短暫的掉電狀態取消復原，經常重起而不進行最近的自檢。在十分之一秒內重起是常見的現象。
許多設計人員發現LED在指示錯誤狀態上非常有用，它們可以幫助進行故障處理。一個常用的機制是在復位的時候點亮電子裝置所有的LED以表明供電和LED正常工作；然後在進行加電自檢時由軟體改變LED的狀態；在此之後，軟體用這些LED指示操作過程中的正常或者故障狀態。這可以讓技術人員、工程師和用戶瞭解系統的狀態。一個有趣的例外是電度表（electric power meters（英語：electric power meters））和其他一些大街上的東西，閃爍的指示燈是為了吸引註意力或者表示損壞狀態。
內部自檢[編輯]
許多嵌入式系統都有一定程度或者一定數量的內部加電自檢，自檢有幾種類型：

電腦檢查：檢查CPU、RAM和程式記憶體。通常一加電就開始這些檢查，在一些安全性非常重要的系統中，通常周期性地在安全時間間隔內進行自檢，或者經過一段時間就進行自檢。
外圍裝置檢查：仿真輸入和讀入資料或者測量輸出資料。有大量的通訊、模擬和控制系統都有這些非常廉價的檢查。
電源檢查：通常測試每個供電電路，也可能檢查電池或者主電源輸入。通常供電部分的負載都很重，並且少有餘量，所以這項檢查很有意義。
通訊檢查：驗證從相連單元接收到的簡單訊息，例如在網際網路上使用ICMP訊息「ping」。
電纜檢查：將線連結到待檢查的電纜上指示針進行檢查。如電話這樣的同步通訊系統經常使用「同步」測試。電纜檢查成本很低，當單元部分有插頭的時候這項檢查尤其重要。
裝備檢查：一個系統在安裝時經常需要進行調整，這項檢查就向安裝人員做出狀態指示。
消耗檢查：檢查系統所消耗的東西、在預量太低時發出警告。最常見的例子是汽車的油量表，最複雜的例子可能是維持化學反應物詳細狀態的自動醫學分析系統。
執行檢查：檢查用戶關心的系統執行狀態。顯然，在系統執行時必須進行這項檢查，這方面的檢查包括飛機上的導航儀器、汽車的速度表和磁碟的指示燈等。
安全檢查：在'安全時限'內進行檢查確保系統仍然可靠。安全時限通常小於能夠產生損害的最小時間。

可靠性體系[編輯]
根據人們需求的不同，可靠性也有不同的定義，有意思的是，可靠性的類型卻相對較少，相似可靠性類型的系統，使用相似類型的內在檢查和取消復原方法：

系統非常不安全或者無法修理。這包括太空系統、水下電纜、導航燈塔、鑽孔系統，非常奇怪的是還包括汽車和大規模生產產品。總的來說，嵌入式系統檢測各個子系統、線上切換到冗餘部分或者工作在「limp模式」提供部分的功能。大規模生產的消費產品如汽車、個人電腦或者印表機也屬於這個類別，這是因為與購買的費用相比維修費用高昂、維修人員又路途遙遠。
系統不能安全地停止執行。這包括飛機導航、反應控制系統、重要的化學工廠安全控制、鐵路訊號、單發動機飛機的發動機，如上所述，但是「limp模式」較難容忍，通常需要操作員選擇備份系統。
系統停機時將會造成大量的金錢損失。這些包括電話交換機、工廠控制、橋樑和電梯控制、資金轉移、市場開發、自動銷售和服務等，這些系統通常有一些運轉/不運轉測試，它們通常帶有線上冗餘或者使用替換系統和人工過程的limp模式。
系統不安全的時候不能操作。同上面的情況類似，系統的執行將會造成大量的金錢損失。醫療裝置、帶有發動機這樣的熱備份的飛行器、化學工廠控制、自動股票交易、遊戲系統等。測試可能是五花八門，但是出錯時能夠做的就是停止整個系統。

嵌入式軟體架構的類型[編輯]
常用的嵌入式軟體架構有幾種不同的基本類型。
控制迴圈[編輯]
在這種設計中，軟體有一個簡單的循環，這個循環調用各個子程式，每個子程式管理硬體或者軟體的某一部分。中斷通常用來設置標記或者更新軟體其他部分能夠讀取的暫存器。
系統使用簡單的API來完成允許和禁止中斷設置。如果處理得當的話，它能夠在巢狀子程式中處理巢狀調用，在最外面的中斷允許巢狀中恢復前面的中斷狀態。這種方法是實作Exokernel的一個最簡單的方法。
通常在循環中有一些子程式使用周期性的即時中斷控制一組軟體定時器，當一個定時器時間到的時候就會執行相應的子程式或者設置相應的標誌。
任何可能發生的硬體事件都應該有軟體定時器的支援，硬體事件大概每萬億次出現一次錯誤，對於現代的硬體來說大概是一年發生一次，對於以百萬計大規模生產的裝置來說，遺漏一個軟體軟體定時器在商業上可能是災難性的。
有時測試軟體運行一組基於軟體的安全定時器，它們周期性地複位硬體中的軟體看門狗。如果軟體錯過一個事件，安全定時器軟體將會捕捉到它。如果安全定時器出錯，看門狗硬體將會複位系統。
可以使用指向每個狀態機函式的指標實作狀態機，函式可以用C++、C或者組合語言等實作。變化的狀態將不同的函式放到指標中，每次循環運行時都會執行函式指標。
許多設計人員建議每個循環讀一次輸入輸出裝置、並且儲存得到的結果，這樣可以保證邏輯過程的在一致的參數上運行。
許多設計人員喜歡將狀態機設計成每個狀態僅僅檢查一到兩項內容，通常是檢查硬體事件和軟體定時器。
設計人員建議多級狀態機應該讓低層狀態機早於高層狀態機運行，這樣高層就能夠根據正確的資訊運行。
如內部燃燒控制這樣的複雜功能通常根據多維表格進行處理，代碼通常進行查表處理而不進行複雜的計算，為了減小表格的大小以及成本軟體可以在條目之間進行差值運算。
在最小的微控制器中，尤其是只有128位元組堆疊的8051中，控制環允許好的連結器使用靜態分配的資料覆蓋本地變數。在這種機制中，離子程式調用樹末端越近的變數得到的記憶體位址越高。當開始一個新的分支的時候，它的變數可以在以前分支遺棄的空間中進行重新分配。
簡單控制迴圈的一個主要缺點是它無法保證響應特定硬體事件的時間。
細心的設計可以很容易地保證中斷不會被長時間禁止，這樣中斷代碼就可以在非常精確的時間運行。
控制環的另外一個主要缺陷是增加新的特性的時候會變得複雜。需要花費很長時間的演算法必須小心地進行分解以使得每次只有一小部分在主循環中運行。
這種系統的優勢是它的簡單性，並且在很小的軟體上，循環執行地很快幾乎沒有人關心它是不可預測的。
它的另外一個優勢是這種系統保證運行軟體的質量，無法將不好的運行結果歸咎為其他的作業系統。
非搶先式任務[編輯]
非搶先式任務系統非常類似於上面的系統，只是這個迴圈是隱藏在API中的。我們定義一系列的任務，每個任務獲得自己的子程式棧；然後，當一個任務空閒的時候，它呼叫一個空閒子程式（通常呼叫「暫停」、「等候」、「交出（yield（英語：yield））」等等）。
帶有類似屬性的架構都帶有一個事件佇列，有一個迴圈根據佇列列表中的一個域確定刪除時間和呼叫子程式。
這種架構的優點和缺點都非常類似於控制環，只是這種方法添加新的軟體更加簡單，只需要簡單地編寫新的任務或者將它添加到佇列直譯器中。
搶先式定時器[編輯]
使用上面的任何一種系統，但是添加一個按照定時器中斷執行子程式的定時器系統，這樣就給系統添加了嶄新的能力，這樣定時器子程式第一次能在一個有保證的時間內執行。
另外，代碼第一次能夠在非預期的時間存取自己的資料結構。定時器子程式必須要象中斷子程式一樣進行處理。
搶先式任務[編輯]
使用上面的非搶先式任務系統，從一個搶先式定時器或者其他中斷執行。
這樣系統就突然變得很不一樣了。任何一個任務的代碼都有可能損害其他任務的資料&emdash;所以它們必須進行切缺的切分。對於共享資料的存取必須使用一些同步策略進行控制，如訊息佇列、訊號燈或者非阻塞同步機制。
經常在這一步開發組織就會購買一套實時作業系統。如果一個組織缺少能夠編寫作業系統的人才或者作業系統將要在幾個產品之上，這可能是一個明智的選擇。這通常要將開發計劃增加六到八周，and forever after programmers can blame delays on it.
微內核與外內核[編輯]
這種方法試圖將系統組織得比單核心更易於配置，而同時提供類似的特點。
微內核是實時作業系統的一個邏輯發展，通常的組織方式是作業系統內核分配記憶體並且將CPU在不同的執行緒之間進行切換。用戶模式的行程實現如檔案系統、用戶介面等主要的功能。
微內核在二十世紀五十年代開始首次嘗試，但是由於電腦在任務間切換以及在任務間交換資料速度非常緩慢，所以人們放棄了微內核而鍾情於MULTICS和UNIX風格的大內核。總體上來說，微內核在工作切換以及任務間通訊速度快的時候是比較成功的，在速度慢的時候是失敗的。
外內核通過使用普通的子程式呼叫獲得的通訊效率很高，硬體以及系統中的軟體都是程式設計師能用也能擴充功能的。資源內核（可能是庫的一部分）分配CPU時間、記憶體以及其他資源。如多工、網路以及檔案系統這樣的大內核特性通過代碼庫來提供。庫可以進行動態的連線、擴充功能或者共享。不同的應用甚至可以使用的不同的庫，但是所有的資源都來自於資源內核。
虛擬機器[編輯]
一些航空電子系統使用幾個商用電腦。這樣更進一步，每個電腦都在模擬它們自身的幾個副本，重要的程式同時在幾個電腦上執行並且進行投票控制（vote）。
模擬環境的優點就是即使一個電腦出現故障，軟體的不同常式能夠遷移到正常工作的軟體分割，表決的票數並不受影響。
通常虛擬軟體執行在電腦的用戶模式下，它捕捉、模擬硬體存取和不在用戶模式下執行的指令。
檢查點計算[編輯]
另外一種常用的機制是兩個電腦計算for a bit，然後將它們的計算結果報到那個點上。如果一個電腦的計算是nut，它就會被關閉。
辦公用（單核心）作業系統[編輯]
這種系統通常在沒有系統經費的嵌入式專案中流行，但是從這篇文章的多個作者來看，這通常是不正確的，它們的邏輯是：

作業系統是經過特殊封裝的重用代碼庫。如果這些代碼有用，設計人員就會節省時間和金錢，否則它們就是無用的。
商務系統的作業系統沒有嵌入式硬體的介面。例如，如果要用Linux寫一個馬達控制器或者電話交換機，絕大部分的實際控制操作都是IOCTL呼叫，同時，正常的讀、寫和查詢介面都是無用的。所以作業系統對於實際的開發妨礙很大。
大多數的嵌入式系統不處理辦公事務，所以辦公作業系統的大部分代碼都被浪費了。例如，絕大多數的嵌入式系統從來都不使用檔案系統或者螢幕，所以檔案系統和圖形化使用者介面部分就是浪費的，這些不用的代碼只會影響系統的可靠性。
辦公用作業系統保護硬體不讓用戶程式操作，這就嚴重地妨礙了嵌入式開發工作。
作業系統必須移植到嵌入式系統上，也就是說，硬體驅動程式無論如何都必須重寫，這也是作業系統最難的部分，所以使用這樣的作業系統幾乎沒有功效。
作業系統真正有用、可移植的特性是小段代碼。例如，一個基本的TCP/IP介面大約有3000行代碼，另外的一個例子是大約同樣大小的簡單檔案系統。如果設計需要這些代碼，能夠使用少於嵌入式系統開發10%的經費就能完成，不需要支付版權費用，只需要簡單地重寫就可以了。如果系統這些代碼有足夠的通用性，嵌入式系統雜誌封面的後面通常有公司銷售沒有版權費的C語言實現代碼。

然而許多工程師並不認同這一點，嵌入式Linux越來越受到人們的歡迎，尤其是在無線路由器和全球定位系統這樣的功能強大的嵌入式系統中。其中有下麵一些原因：

有現成的移植到普通嵌入式晶片的實現代碼。
它們允許重用公開獲得的裝置驅動程式、網頁伺服器、防火牆或者其他代碼。
開發系統能夠從許多特性組合開始，在發布的時候可以剔除不需要的功能，從而節約所消耗的記憶體。
許多工程師認為在用戶模式執行應用程式更為可靠、更容易偵錯，所以開發過程更容易、代碼更易於移植。
許多嵌入式系統沒有控制系統那樣對於實時性的嚴格要求，對於許多應用來說如嵌入式Linux這樣的系統的回應速度就已經足夠了。
要求更快的回應速度，而不是可靠性的特性，通常放到了硬體上。
許多實時作業系統都針對每件產品收取費用，當產品是消費品時，這項費用是巨大的。

Exotic custom作業系統[編輯]
一些系統需要安全、及時、可靠或者高效的特性，上面的架構卻無法達到，構建這樣的系統有一些廣為人知的技巧：

僱傭一個真正的系統程式設計師。他們的花費很小，但是能夠節約數年的偵錯以及相關的收入損失。
RMA（rate monotonic analysis），可以用來評估一組任務能否在特定的硬體系統下執行，在最簡單的形式下，設計人員保證最快完成的任務有最高的優先級，平均來說CPU至少有30%的空閒時間。
和諧的任務能夠高效地最佳化CPU。基本上來說，設計人員保證每件工作都是從heartbeat timer開始工作的。在實時作業系統上很難這樣做，因為它們在等候輸入輸出裝置的時候通常就會切換任務。
剛好有兩個優先級（通常是執行和禁止中斷）的系統不能出現高優先級任務等候低優先級任務釋放訊號燈或者其他資源的優先級倒置問題，
有監視器（monitor）的系統不能出現死結。監視器鎖住一段代碼禁止中斷和其他搶先任務。如果這個監視器只用於一小段快速執行的代碼，系統可能工作正常。如果能夠證明監視器API在所有情況下都能夠完整執行，例如僅僅禁止中斷，那麼就不會產生系統掛起的情況。

這就意味著使用兩個優先級和監視器的系統是安全、可靠的，因為它們沒有死結和優先級倒置的問題。如果監視器能夠執行到結束，那麼就永遠不會掛起。如果使用和諧的任務，可能還會相當高效。然而，RMA無法描述這些系統，優先級最好也不要到處都有，其中包括作業系統和硬體。
外部連結[編輯]

即時操作系統如何工作（英）
嵌入式系統門戶（英）
視窗嵌入開發者中心（英）
嵌入系統與VLIW處理器（英）
嵌入式C++ 首頁（英）
QNX首頁（英）
LynuxWorks嵌入式系統首頁（英）
嵌入式系統討論群、書籍、職缺、與其他林林總總（英）
嵌入式軟體設計（英）
擁有嵌入式系統研發社團的大學列表（英）
嵌入式系統編程（英）
EE概要 - 電機工程與嵌入系統編程（英）
DeviceTools - 給內嵌裝置開發者的工具與矽片（英）
Embedian（英）
內嵌計算工業的紀錄雜誌（英）
內嵌白皮書、下載、公司、新聞、文章（英）
內嵌系統疑難排解 - 一個概述從基版醞釀、製造、到後勤的問題。（英）
Working across Multiple Embedded Platforms跨平臺嵌入式系統。（英）

常見的嵌入式作業系統[編輯]
參見嵌入式作業系統

Android
Firefox OS
iPhone OS
uC/OS II
FreeRTOS
uCLinux
VxWorks
pSOS
Nucleus
PalmOS
Windows CE
Windows XP Embedded
Windows Vista Embedded
嵌入式Linux
ECOS
QNX
Lynx
Symbian
Arm-Linux
RT-Thread

業界常見的開源嵌入式軟硬體系統[編輯]



無作業系統
有作業系統 +弱GUI
有作業系統 + GUI介面


8/16位元處理器


ardunio開發板（軟硬體全套，開源，目前較熱門）
各家單晶片公司提供參考設計(如Ateml等)




Arduino開發板（軟硬體全套，開源，目前較熱門）
Ethernut/nutos專案（軟硬體配套，開源，偏重電腦網路）
UcosII作業系統(軟體，開源但商業版本需要license費)
FreeRTOS作業系統（軟體，商業公司提供的開源版本，也售賣對應的商業版本）
Keil RTX51 Real-Time Kernel（開源，Keil軟體內建需要license）


/


32位元處理器
/


Ethernut/nutos專案（軟硬體配套，開源，偏重電腦網路）
eCos作業系統（軟體，開源，優點是可以客製化RTOS）
uClinux作業系統（軟體，開源，有對應的硬體板uCsimm專案）
FreeRTOS作業系統（軟體，商業公司提供的開源版本，也售賣對應的商業版本）
Keil RTX Real-Time Kernel（開源，Keil軟體內建需要license）
RT-thread作業系統（軟體，開源，國內開發,有簡單GUI）




Android作業系統
Beagle board專案（軟硬體配套，開源）
Raspberry Pi 專案（軟硬體配套，開源）












閱
論
編


單晶片






總論



單板機
特殊功能暫存器（英語：Special function register）








架構



8051
ARM
AVR
PIC
C166（英語：C166）
TriCore（英語：TriCore）
FR-V（英語：FR-V）
MC6800








家族系列





4位元




TLCS-47（英語：Toshiba TLCS）









8位元




AVR
PIC（8-bit）
COP8
MCS-48（英語：Intel MCS-48）
英特爾MCS-51
Z8（英語：Zilog Z8）
eZ80（英語：Zilog eZ80）
飛思卡爾68HC08（英語：HC08）
飛思卡爾68HC11（英語：HC11）
H8
PSoC
東芝TLCS（英語：TLCS-870）
XC800系列（英語：XC800）









16位元




C166
CR16/CR16C
H8S
MSP430
PIC（16位元）
R8C
東芝TLCS-900
XC 2000
XE166









32位元




Am29000
CRX
富士通FR
FR-V
H8SX
MPC5xx
PIC（32位元）
TLCS-900
TriCore
英飛凌XMC4000
英飛凌AURIX
V850
應用級ARM核心列表











介面





編程




電路線上串列燒錄編程（ICSP）
系統線上燒錄編程（英語：In-system programming）（ISP）
程式和除錯介面（PDI）
高電壓串列編程燒錄（HVSP）
高電壓並列編程燒錄（HVPP）
Bootloader
ROM
aWire









除錯




debugWIRE
Joint Test Action Group（JTAG）
In-circuit debugging（ICD）
In-circuit emulator（ICE）
In-target probe（ITP）











模擬器



gpsim








列表



Common microcontrollers
By manufacturer

Freescale
Intel










參見



嵌入式系統
可程式邏輯控制器













權威控制



LCCN: sh87006632
GND: 4396978-1
BNF: cb12410613b（資料）
NDL: 01064710









^ Michael Barr. Embedded Systems Glossary. Neutrino Technical Library. [2007-04-21]. 
^ Heath, Steve. Embedded systems design. EDN series for design engineers 2. Newnes. 2003: 2. ISBN 978-0-7506-5546-0. An embedded system is a microprocessor based system that is built to control a function or a range of functions. 





 
						取自 "https://zh.wikipedia.org/w/index.php?title=嵌入式系統&oldid=44183591"					
分類：嵌入式系統隱藏分類：維基百科需要重寫的條目含有英語的條目包含規範控制信息的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源維基教科書 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AlemannischالعربيةAzərbaycancaБългарскиCatalàČeštinaDanskDeutschEnglishEspañolEestiفارسیSuomiFrançaisעבריתहिन्दीMagyarBahasa IndonesiaItaliano日本語한국어Lietuviųമലയാളംမြန်မာဘာသာNederlandsNorsk nynorskNorsk bokmålPolskiPortuguêsRomânăРусскийSrpskohrvatski / српскохрватскиSimple EnglishSlovenčinaСрпски / srpskiSvenskaதமிழ்ไทยTürkçeУкраїнськаاردوTiếng Việt 
編輯連結 





 本頁面最後修訂於2017年4月30日 (週日) 05:39。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 









嵌入式作業系統 - 維基百科，自由的百科全書






























 






嵌入式作業系統

維基百科，自由的百科全書


					前往：					導覽，					搜尋

嵌入式作業系統是嵌入式系統的作業系統。它們通常被設計非常緊湊有效，拋棄了運行在它們之上的特定的應用程式所不需要的各種功能。嵌入式作業系統多數也是實時作業系統。
嵌入式作業系統包括：

嵌入式Linux
Windows CE
Windows XP Embedded
Windows Vista Embedded
VxWorks
uCOSII
QNX
FreeRTOS
ENEA OSE

還有訂製版的NetBSD和FreeDOS等。
參見[編輯]

嵌入式圖形界面



嵌入式作業系統



Linux | uClinux | RTLinux | ARMLinux | Windows CE | Windows XP Embedded | Windows Vista Embedded | VxWorks | uCOSII | eCos | QNX | FreeRTOS | Symbian | PalmOS | pSOS | ThreadX | Rtems | INTEGRITY | OSE | Nucleus | 更多... |







 
						取自 "https://zh.wikipedia.org/w/index.php?title=嵌入式操作系統&oldid=25343965"					
分類：嵌入式作業系統 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


العربيةEnglishFrançais日本語한국어LietuviųNederlandsNorsk bokmål 
編輯連結 





 本頁面最後修訂於2013年3月9日 (週六) 05:42。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 









Wiki - 課程進度與開放資源





















成大資工 Wiki


所有頁面
分類
隨機頁面
最近活動
上傳檔案

本頁面

頁面原始檔
可列印版本
刪除本頁




登入 / 註冊帳號
登出 









搜尋
前往


LaTeXConTeXtTexinforeSTMarkdownCommonMarkPlain textMediaWikiOrg-modeICMLTextileAsciiDocMan pageDocBookDZSlidesSlidyS5EPUBODTDOCXRTF 













viewedithistorydiscuss

課程進度與開放資源


Instructor: Jim Huang (黃敬群) <jserv.tw@gmail.com>

Facebook 粉絲專頁 (不要擔心提了笨問題，這就是專門和學生互動的)

討論區: https://www.facebook.com/groups/system.software2016/
共筆: https://embedded2016.hackpad.com
課程信箱: <embedded.master2015@gmail.com>
參考硬體平臺: STM32, STMicroelectronics

嵌入式作業系統設計與實作 (Spring 2016)






Week
Date
Subject
Assignment




#1
Feb 23
2016q1 Overview
= 2016q1: Homework1 =


#2
Mar 1
2016q1:基本能力鑑定測驗
-


#3
Mar 8
Code Review
= 2016q1: Homework2 =


#4
Mar 15
Synchronization and POSIX Threads
-


#5
Mar 22
Object-Oriented Programming & Thread
= 2016q1: Homework3 =


#6
Mar 29
Threading and ARM
= 2016q1: Homework4 =


#7
Apr 5
停課一次 / Embedded Linux Conference


#8
Apr 12
ARM architecture
= 2016q1: Homework5 =


#9
Apr 19
OS Scheduling


#10
Apr 26
分組報告(A)


#11
May 3
分組報告(B)


#12
May 10
作業系統發展回顧 + 即時 Linux 的工業應用


#13
May 17
分組報告(C)


#14
May 24
中斷、排程，多核心處理


#15
May 31
分組報告(D)


#16
Jun 7
分組報告(E)


#17
Jun 14
分組報告(F)


#18
Jun 21
分組報告(G) + 期末總結



進階嵌入式系統設計與實作 (Fall 2015)






Week
Date
Subject
Assignment




#1
Sep 18
2015q3 Overview
= 2015q3: Homework1 ; 2015q3: Ext1 =


#2
Sep 25
2015q3:基本能力鑑定測驗
-


#3
Oct 2
ARM Architecture and Optimization Concepts
= 2015q3: Homework2 ; 2015q3: Homework3 =


#4
Oct 9
國定假日
-


#5
Oct 16
Compilers + Calling Convention
= 2015q3: Homework4 =


#6
Oct 23
專題演說
= 2015q3: Homework5 =


#7
Oct 30
Code Review
= 2015q3: Homework6 =


#8
Nov 6
C Programming + ARM
= 2015q3: Homework7 =


#9
Nov 13
From Hello to Preemptive Scheduler
= 2015q3: Homework8 =


#10
Nov 20
From ARM core to Peripherals
= 2015q3: Homework9 =


#11
Nov 27
STM32 + Peripherals
= 2015q3: Homework10 =


#12
Dec 4
Peripherals: GPIO ADC
QA: GPIO, QA: ADC


#13
Dec 11
; Peripherals: SPI; uVisor
QA: SPI


#14
Dec 18
課程公告; Peripherals: USART, Flash, I2C
QA: USART, QA: Flash, QA: I2C


#15
Dec 25
專題演說
QA: USB


#16
Jan 1
Happy New Year!
*


#17
Jan 8
Code Review / 作業回顧
*


#18
Jan 15
Software Quality + Security Issues
*



嵌入式作業系統設計與實作 (Spring 2015)






Week
Date
Subject
Assignment




#1
Feb 24
2015q1 Overview
*


#2
Mar 3
2015q1:基本能力鑑定測驗
Lab 38: ARM Cross-Development Environment


#3
Mar 10
ARM Architecture + OS Concepts
Lab 39: FreeRTOS


#4
Mar 17
ARM Exceptions/Interrupts
Lab 40: Scheduling


#5
Mar 24
Embedded Linux Conference 2015
Lab 41: 基礎觀念訓練


#6
Mar 31
ARM and RTOS: Part I
確認 Lab 38, Lab 39, Lab 40, Lab 41 均充分完成


#7
Apr 7
ARM and RTOS: Part II
Lab 42: Mini ARM OS


#8
Apr 14
From Hello to Preemptive Scheduler
Lab 42: Mini ARM OS


#9
Apr 21
Kernel Concepts and Threading
Lab 43: Runtime Behavior


#10
Apr 28
2015q1:Group Presentation(1)
*


#11
May 5
2015q1:Group Presentation(2)
*


#12
May 12
2015q1:Group Presentation(3)
*


#13
May 19
2015q1:Group Presentation(4)
*


#14
May 26
2015q1:Group Presentation(5)
*


#15
Jun 2
2015q1:Group Presentation(6)
*


#16
Jun 9
2015q1:Group Presentation(7)
*


#17
Jun 16
2015q1:Group Presentation(8)
*


#18
Jun 23
2015q1:Group Presentation(9)
*



進階嵌入式系統開發與實作 (Fall 2014)






Week
Date
Subject
Assignment




#1
Sep 18
2014q3 Overview
Lab 31: ARM Environment


#2
Sep 25
ARM Architecture (cont)
Lab 32: QEMU + FreeRTOS


#3
Oct 2
ARM Architecture (cont2)
Lab 33: GDB + FreeRTOS


#4
Oct 9
ARM Architecture and Interface
Lab 34: Buffer overflow


#5
Oct 16
Hardware Concepts Review
Lab 35: STM32F429


#6
Oct 23
Code Review for Lab 32-33
Lab 35: STM32F429


#7
Oct 30
Code Review + ELF
Lab 36: ELF


#8
Nov 6
Interrupt/Exceptions + RTOS
Lab 37: Memory allocation


#9
Nov 13
2014q3:Group Presentation (1)
-


#10
Nov 20
2014q3:Group Presentation (2)
-


#11
Nov 27
2014q3:Group Presentation (3)
-


#12
Dec 4
2014q3:Group Presentation (4)
-


#13
Dec 11
2014q3:Group Presentation (5)
侯捷 C++ 底層技術課程分享


#14
Dec 18
2014q3:Group Presentation (6)
-


#15
Dec 25
2014q3:Group Presentation (7)
-


#16
Jan 1
Happy New Year!
-


#17
Jan 8
2014q3:Group Presentation (8)
-


#18
Jan 15
2014q3:Group Presentation (9)
-


#18
Jan 17
期末展示
-



嵌入式作業系統設計與實作 (Spring 2014)






Week
Date
Subject
Assignment




#1
Feb 18
Overview: Embedded Systems and OS
Lab 25


#2
Feb 25
ARM Architecture Evolution
Lab 26


#3
Mar 4
Case: Quadcopter
Lab 27


#4
Mar 11
Assignment Review
Lab 28


#5
Mar 18
ARM Cortex-M + RTOS Concepts
Lab 29


#6
Mar 25
ARM I/O, Interrupt, Exception
Lab 30


#7
Apr 1
春假
:


#8
Apr 8
Advanced OS Design issues
:


#9
Apr 15
Group Presentation (a)
:


#10
Apr 22
Group Presentation (b)
:


#11
Apr 29
Group Presentation (c)
:


#12
May 6
Group Presentation (d)
:


#13
May 13
Group Presentation (d)
:


#14
May 20
Group Presentation (f)
:


#15
May 27
Group Presentation (g)
:


#16
Jun 3
Group Presentation (h)
:


#17
Jun 10
Talk: 雲、端、架構
:


#18
June 17
Group Presentation
:


#18
Jun 21
期末成果展示
:



進階嵌入式系統開發與實作 (Fall 2013)






Week
Date
Subject
Assignment




#1
Sep 17
Overview: Embedded in our world
Lab 19: QEMU


#2
Sep 23
ARM Architecture and SoC
Lab 20: GNU Toolchain


#3
Oct 1
Operating Systems for Embedded
Lab 20: GNU Toolchain


#4
Oct 8
ARM: Instructions
Lab 21: RTOS (1)


#5
Oct 15
ARM: Toolchain and Peripherals
Lab 22: RTOS (2)


#6
Oct 22
ARM: Interrupts and Exceptions
Lab 23: RTOS (3)


#7
Oct 29
Code Review
-


#8
Nov 5
Code Review + Group Presentation(1)
Lab 24: Hardware


#9
Nov 12
3D Printer + Group Presentation(2)
-


#10
Nov 19
Group Presentation(3)
-


#11
Nov 26
Speech + Group Presentation(4)
-


#12
Dec 3
Group Presentation(5)
-


#13
Dec 10
Group Presentation(6)
-


#14
Dec 17
Group Presentation(7)
-


#15
Dec 24
Group Presentation(8)
-


#16
Dec 31
Group Presentation(9)
-


#17
Jan 7
Group Presentation(10)
-


#18
Jan 12
期末展示
-



嵌入式作業系統設計與實作 (Spring 2013)






Week
Date
Subject
Assignment




#1
Feb 19
課程介紹 + 期初考


#2
Feb 26
Embedded Operating System Concepts
Lab 8 : GNU Toolchain + RTOS (Sol 8)


#3
Mar 5
RTOS Characteristics
Lab 9 : Multitasking programming (Sol 9)


#4
Mar 12
從火星探測號談 scheduling
Lab 10 : Priority Inversion (Sol 10)


#5
Mar 19
ARM Architecture Intro
Lab 11: Build RTOS for ARM (Sol 11)


#6
Mar 26
ARM Architecture Intro + 月考
Lab 12: RTOS Visualization (Sol 12)


#7
Apr 2
春假



#8
Apr 9
ARM and Assignment Review
Lab 13: ARM Programming with GNU Toolchain (Sol 11)


#9
Apr 16
I/O, Interrupt, Exception (ARM)
Lab 14: OS and BSP Porting (Sol 14)


#10
Apr 23
RTOS Evaluation
Lab 15: Benchmarking concepts


#11
Apr 30
Case Study: Train control + 月考
Lab 15: Validation and benchmarking


#12
May 7
Tickless scheduling
Lab 16: Hardware Enablement


#13
May 14
Embedded Kernel Design Review
Lab 17: Tickless scheduling for ARM hardware


#14
May 21
Embedded Kernel Design Review-2
Lab 18: OS Evaluation for ARM


#15
May 28
Automotive Linux Summit (Spring) +月考



#16
Jun 4
Open Discussion



#17
Jun 11
The End




進階嵌入式系統開發與實作 (Fall 2012)






Week
Date
Subject
Assignment




#1
Sep 18
Overview: Embedded - Why and How
Lab 1: QEMU


#2
Sep 25
ARM Architecture (Basic)
Lab 2: GNU Toolchain + QEMU/ARM


#3
Oct 2
Realtime Operating System (Basic)
Lab 2s: GNU Toolchain + QEMU/ARM


#4
Oct 9
Timer, Interrupt, Exception in ARM
Lab 3: GNU Toolchain + RTOS


#5
Oct 16
RTOS Design and Implementation
Lab 4: RTOS for MCU


#6
Oct 23
Code review of Lab assignments
Lab 5: RTOS modifications


#7
Oct 30
Peripherals and hardware interface
Lab 6: Hardware


#8
Nov 6
Embedded Linux Conference Europe
分組準備與討論


#9
Nov 13
Group Presentation (1)
分組準備與討論


#10
Nov 20
Group Presentation (2)
Lab 6: Hardware + Unit Test


#11
Nov 27
Group Presentation (3)
Lab 6: Hardware + On-Chip Debugger


#12
Dec 4
Group Presentation (4)
Lab 7: On-Chip Debugger + semihosting


#13
Dec 11
Group Presentation (5)
Hack!


#14
Dec 18
Group Presentation (6)
Hack!


#15
Dec 25
Group Presentation (7)
Hack!


#16
Jan 1
Happy New Year - 2013
N/A


#17
Jan 8
Final project review (and vote)
N/A


#18
Jan 15
Make Your Own System (and profit)
DONE


embeddedarmstm32rtoskernellinuxncku




Please enable JavaScript to view the comments powered by Disqus.




本站所有內容，除另有標註外，採用創用 CC 姓名標示-相同方式分享 3.0 台灣 授權條款授權
	

說明
Powered by gitit
Customized by CrBoy














何謂嵌入式系統




何謂嵌入式系統？
嵌入式系統的定義
根據英國電機工程師協會的定義，嵌入式系統為控制、監視或輔助設備、機器或甚至工廠運作的裝置。它具備了下列的特性： 
  
通常執行特定功能，與一般桌上型辦公設備或資料庫伺服系統有很大的區別。 
    以微電腦與周邊構成核心，其規模可由如8051單晶片到先進的x86晶片系統不等。 
    嚴格的時序與穩定度要求，例如在機器控制上，稍有不慎則可能失去控制，釀成災害。 
    全自動操作循環，例如斷電時的緊急處理，使復電後仍能回復原有的狀態。 
  嵌入式系統幾乎涵蓋所有微電腦控制的裝置，例如個人電腦中的磁碟機或光碟機的伺服控制與資料存取介面等。在美國工程發展的歷史上，1949年由J.  
  Presper Eckrt及John Mauchly完成的BINVAC ( BINary Automatic Computer )  
  ，其中一項目的為操控長程飛彈，1944年由Jay W. Forrest 開始的WHIRLWIND計劃 ( 於1951年完成 )，則製作出全美第一臺即時電腦  
  ( real-time computer  
  )，其目的為指揮軍用飛行器的訓練設備。我們可以說，嵌入式系統設計的技術發展與微電腦技術的演進是相輔相成的，其中嵌入式系統的需求刺激，更是微電腦今日成功的主要動力。
您如果想要知道世界上頂尖的嵌入式系統設計族群在說甚麼語言，或是目前熱衷於追求甚麼，請參閱Embedded System Programming。
嵌入式系統設計的等級
嵌入式系統的設計可說是小規模的系統整合，較偏重於技術層面，不若系統整合，往往人的整合因素取決系統的成敗。以今日電子資訊的版圖而言，嵌入式系統的設計概分為幾個層次。我們以製作一個MP3  
  Player/Recorder來說明。假設此一裝置包含MP3壓縮/解壓縮技術，MP3資料儲存及讀取，音樂撥放與錄音，以及使用者介面四大部分。之所以取此例子，是因為音樂不能間斷，因此有一定程度的時序要求。  
  
以現有的MP3壓縮/解壓縮晶片為主軸。此時所設計的微電腦，大部分的時間在作資料儲存及搬運的動作，其目的在〝服侍〞該MP3晶片及收集使用者命令。雖有即時性需求。但只要時間來得及就夠，微電腦本身無須複雜。  
 
    以韌體實現MP3功能。這時候設計的變化就相當多了。簡單的設計是使用如  1.  
    之Master-Slave架構，以一計算功能較強的晶片執行MP3計算。進一步的設計是使用單晶片。完全以韌體作到所述的四項功能。  
    MP3韌體實現的差異。由於MP3並無規範如何執行壓縮及解壓縮。因此韌體的實現端看設計者的功力，如程式最佳化、定點數與浮點數的問題，以及可否運用一些技巧簡化計算流程等。註意嵌入式系統設計並非重新發明輪子，但必須遵守工程設計的原則──以最少的資源達到最大的效能。  
 
    是否使用即時多工核心。雖說這樣的一個小裝置牽涉的工作不多，但各項工作間有一定程度的interlock，也就是時序與優先權的關係。使用多工核心的目的，是將CPU資源的分配，與實際工作內容分開，並利用核心將韌體模組化，便於維護及管理。  
 
    是否朝SOC ( System On Chip )  
    的方向發展。由於ASIC的設計製造日趨成熟，嵌入式系統的整合功能，在一定生產規模下，也可是ASIC的一部份，由於ASIC的設計彈性及初期成本仍不如使用微電腦，因此目前在較複雜概念系統的實現上，仍有些困難。  
    由這一例子可見，嵌入式系統的設計包含核心技術部分及整合部分。核心技術為其靈魂，但整合部分為其肉體。沒有核心技術實現能力，則沒有競爭力﹔缺乏有效的整合，則造成無謂的時間及成本的浪費，同樣的沒有競爭力。我們說一個人有三頭六臂，一組好的嵌入式系統設計團隊，就是要具備三頭六臂。
網路世代下的嵌入式系統
人們或許忙著註意網際網路對人的生活及消費行為的革命。但網路的發達將使幾乎所有具備微電腦的設備變成名符其實的嵌入式系統。想像一下你家裡的電冰箱微電腦系統與網路超級市場的電腦連線，在牛奶不足的時候自動訂貨﹔又如實際一點的，我們已經可以透過同步網路，使相距數百公尺的兩顆伺服馬達同步運轉。  
  從嵌入式系統的設計上，這意味著我們將可以輕易的透過網路，實現並行處理的功能。也同時代表嵌入式的特定功能，將因網路的發達而可隨時更改 ( 如工業機台的遠端維修與更新 )。  
  從許多微控制器將網路功能 ( 不一定是乙太網路 )  
內建的趨勢看，嵌入式系統設計工程師若不具備網路的觀念，將無法趕上這一波的革命•••
嵌入式系統的管家──即時多工核心
即時多工核心 (real-time multi-tasking kernel) 是即時多工作業系統(Real-time Multi-tasking  
  Operating System, 簡稱 RTOS)  
  的心臟部分。它主要負責的工作是掌管CPU時間的分配，記憶體的管理，以及作業系統下各工作之間的連繫。講到作業系統，一般人通常習慣於微軟的作業平臺。但以專業的眼光來看，微軟的作業平臺並非RTOS，對大多數的嵌入式應用而言是不夠的。其次，作業系統的一般設計理念是針對一般性的使用，因此附加許多如檔案系統模組等，使其大小動輒上百Mb。這對需精簡有效的嵌入式系統而言是龐大負擔。因此直接取即時多工作業系統的核心來整合是最直接的辦法。事實上除了微軟的作業平臺外，其他大部分即時多工作業系統均已具有scalable的功能，也就是說視應用需求，該系統大小可由數百Kb至數百Mb。  
 
  以Intel系列晶片而言，目前成長最快的非微軟作業系統首推Linux，由於是免費且open  
  source，已有數個團隊將其核心修改以具備real-time能力。同時熟悉其安裝程序及核心運作機制後，可將其縮小至數百Kb還具備網路功能。對嵌入式系統而言，無疑是最理想的作業平臺。至於非Intel系列晶片，其即時多工核心目前仍為百家爭鳴(相信未來也是)，根據經驗，由於非Intel系列晶片嵌入式系統硬體變化太大，無法有一個即時多工核心敢號稱不用修改即可任意安裝使用。因此嵌入式系統設計團隊必須有能力修改或甚至創造即時多工核心，以強化競爭力。本實驗室於1995年即出版全台灣第一本以C/C++建構即時多工核心的專書。並實際在PC上實現此核心。同時亦針對德州儀器公司TMS320系列DSP晶片撰寫實用之micro  
  kernel。
後PC時代的來臨
不容諱言的，由於個人電腦(PC)的強勢發展，在80與90年代，只要是稍微複雜的系統如工業控制器或甚至POS(point-of-sale)等，沒有人不會想到用PC為整合平臺。這個潮流下，對嵌入式系統的發展有兩個重要的限制，一是Intel系列晶片的倚賴，其次是微軟作業平臺的遷就(compromise)。許多嵌入式系統的發展均以具創意的小規模市場為起點，在"西瓜效應"下，很難抵抗潮流的強大壓力。像是近親繁衍般，Intel系列晶片與微軟作業平臺不斷製造出來的應用，就像同一家族的後代，長相相似。從技術的發展來說，這往往是創意的殺手。  
  這不是單就使用習慣與資源而言，想像有一個人設計了一種非微軟、非Intel的嵌入式系統，雖然具有創意，但由於其市場規模無法與個人電腦相比，其使用的作業系統，微處理器及週邊晶片，甚至整個電路板的成本，均較為昂貴。因此在後續發展上，前途暗淡。現實一點的會說，這個人是傻子，螳臂如何擋車？  
 
  事實上世界上存在許多這種傻子，而後PC時代的來臨，當Intel與微軟的組合不再是壟斷性的解決方案時，絢爛的嵌入式系統，才算誕生。這些傻子，不論是作業系統提供者(如 Linux, QNX, Psos, OS9, VRTXoc, JAVA等等)，微晶片製造商(如 java  
  chip, DSP)，研發單位，技術服務，甚至名不見經傳的garage company，都將有大展身手的機會。  
  但由於PC-based的仰賴已深，短期內當你打開一個嵌入式系統，仍然會發現Intel的標誌，而其Flash ROM內燒錄的是Windows  
  CE。但在更開放，更公平的競爭環境下，未來期待是百家爭鳴的時代，也使嵌入式系統設計的技術更上一層樓。




嵌入式系統導覽: 常見的嵌入式作業系統有那些？  





Next
Previous
Contents

2. 常見的嵌入式作業系統有那些？  
2.1 DOS

微軟一開始選用了派特森的Q-DOS " QUICK AND DISK OPERATING SYSTEM " 為基礎然後再擴充功能而成 MS-DOS , 主要是採用由IBM 提供的使用8088 微處理器的電腦作開發平臺, 它是以16 位元組單人單工作業系統。
由於系統陽春所以特別適合一些功能簡單裝置使用，例如：LED 看版 ( 附圖 1 )。



附圖 1


 
2.2 Windows CE

雖然微軟 Windows 系統已經稱霸了 PC Desktop 環境。但是對於嵌入式系統這塊大餅，微軟也是垂涎已久，桌上型的 Windows 桌業系統對於嵌入式系統來說自然是太過於肥大的產物，於是微軟推出精簡版的 Windows CE 作為進攻嵌入式系統的主力。目前主要應用於 PDA 上頭，但是跟微軟一系列 Windows 系統一般，Windows CE也承襲了原有的缺點：耗系統資源、不穩定、效率不佳..等等。毛病實在太多，後來將整個架構重新改寫後推出 Windows CE 3.0 版，或稱為 Pocket PC。改版之後的確改進了不少缺點。
Windows CE 可應用於 PDA 、WebPAD、Thin Client等等。底下附圖 2 是採用 Windows CE 為作業系統的 SIMPad (西門子公司所有)。



附圖 2


 
2.3 Palm

由 Palm Computing 公司的嵌入式作業系統，目前最大的應用在 PDA ，是市場佔有率最高的 PDA 作業系統，Palm 作業系統架構非常簡潔，因為少去了很多功能，如記憶體管理、多工..等等，使得 Palm 可以非常不耗系統資源，硬體需求低，連帶的整體耗電量便可壓縮到非常低，因此採用 Palm 作業系統的 PDA 都有待機時間長的優點。附圖 3 為最新 Palm m505 機種。



附圖 3


 
2.4 EPOC

由英國手持裝置大廠 Psion 所開發，常用於 PDA 與手機結合的場合。最有名的例子 Nokia 9110 ( 附圖 4 )系列手機，它就是採用 EPOC 系統。



附圖 4


 
2.5 著名的嵌入式即時系統    

即時系統是嵌入式系統裡頭非常重要的一環，很多人都誤以為即時系統執行速度非常快的系統，事實上不然，所謂即時代表的意義是『即時反應』，一般多人多工作業系統如：Windows 、 UNIX ，在上面執行的軟體都一起分享 CPU ，因為 CPU 速度快，所以我們感覺好像可以同時執行多支軟體，其實在系統內部的同一時間內都只有一個程式在執行，每個軟體都必須排隊，而且規定只能用一小段時間後就要換下一位，但是因為 CPU 速度夠快，很快又可以被執行到，所以人們感覺並不會很明顯軟體是一段一段在執行。
這是一般所謂的非即時性的作業系統運作模式，而即時作業系統具有立即反應而且不能讓出資源的特性，例如汽車的 ABS 煞車系統，如果不採用能夠立即反應的即時系統，後果可就不堪設想。而這類的應用多半多屬體積小、功能簡單的地方，所以也算是嵌入式系統。
QNX 的 QNX OS 、WindRiver 的 VxWorks、Microware 的 OS9、pSOS 等等，都是有名的嵌入式即時系統公司。
2.6 Linux

耶？ Linux 不是都用來做伺服器嗎？不然就是 Cluster，怎麼會跟嵌入式系統扯上關係？不要懷疑，Linux 除了對伺服工作應付自如外，嵌入式系統也難不倒 Linux。
那麼究竟 Linux 有怎樣獨特的能耐，可以想變大就變大想縮小就縮小？又用 Linux 來發展嵌入式系統有什麼優點？請看底下介紹。


開放原始碼、模組化設計
Linux 採用 GPL 授權，除了把原始碼公開以外，任何人都可以自由使用、修改、散佈，而 Linux 核心本身採模組化設計，讓人很容易增減功能，例如我的平臺並不需要藍芽的功能，我只要不把這項功能加入，有需要就加入，不需要就刪除，由於這樣的高的彈性，我們可以調校出最適合我們硬體平臺的核心出來。
相較於 Linux ，Windows 是走封閉原始碼路線，所以我們完全無法得知或修改它的核心部份。另外因為是採用 GPL 授權自然就沒有什麼權利金或保密協定的約束。

穩定性夠
Linux 不屬於任何一家公司，但是它的開發人員卻是全世界最多的，每天在全球都有無數的人參與 Linux Kernel 的改進、除錯、測試，這樣嚴苛的條件造就了穩定度高的 Linux 。 
就因為如此，Linux 雖不是商業的產物但是品質卻不遜於商業產品。

網路功能強大
Linux 的架構是參造 UNIX 系統而來，因此 Linux 也承襲了 UNIX 強大的網路功能。在這個每樣事情都講求網路的時代下，只能說是 Linux 大放異彩 的年代。未來可能家裡的電冰箱、冷氣、電視機都會連上網路，如何增加這些家電的網路功能，Linux 可以替他們辦到。

跨平臺
Linux 一開始是基於 Intel 386 機器而設計，但是隨著網路的散佈，各式各樣的需求湧現，因此就有許多工程師致力於各式平臺的移植，造成了 Linux 可以在 x86、MIPS、ARM/StrongARM、PowerPC、Motorola 68k、Hitachi SH3/SH4、Transmeta..等等平臺上運作的盛況。這些平臺幾乎涵蓋了所有嵌入式系統所需的 CPU，因此選擇 Linux 就可以把更多的硬體平臺納入考量的範圍。
嵌入式環境不如 x86 PC 那樣單純，嵌入式環境所採用的 CPU 架構之多，使用 Linux 作開發，就等於有更多硬體的選擇，硬體成本是商業公司考量的一大重點，選擇多自然可以找到最合適的硬體，對於公司的競爭力是有極大的幫助。

應用軟體眾多
自由軟體世界裡有個很大的特色就是軟體超級多，而且幾乎都是符合 GPL 標準，換句話說，大家都可以自由取用，因為這些軟體多半是由工程師業餘空暇時間所發展，而且不以營利為性質，所以並不能擔保這些軟體完全沒有 BUG ，但是仍舊有許多殺手級的軟體出現，大家熟知的 KDE 與 GNOME 便是很好的證明，當然與嵌入式系統較為相關如：gcc 編譯器、Kdevelop ( 附圖 5 )整合式開發環境..等等。
通常我們都會先在 PC 端造出模擬出嵌入式的環境，並直接在上頭開發，因此用的工具也都與開發一般 Desktop 軟體類似，良好的工具能夠增加開發的速度。 




附圖 5


 

選擇多樣
如果公司有能力可以自己實作 Linux 嵌入式系統，因為程式碼全部都開放在那裡，您可以隨心所欲的設計出自己想要的 Embedded Linux 系統，但是有更多的公司的業務重點不在於此，這時候您也可以選擇購買商業版的 Embedded Linux 系統，像是有名的 Redhat 公司、Lineo、MontaVista..等等，這些都是商業的 Linux 公司，購買他們的產品就可以得到完整的服務。因此商業或非商業全都在於您的需求。


2.7 自行開發系統    

當然您也可以自行開發系統，嚴格控制硬體，但是相對的必須投註更大的成本在於研
發系統上，原則上如果目標簡單明確只是一些基本的 I/O 控制，例如：跑馬燈。便適合自己開發，但是如果系統過於複雜則必須審慎評估自行研發的難度與時程的控管。

Next
Previous
Contents




嵌入式系統 | Yahoo奇摩知識+




















 









   ⌂首頁信箱新聞股市名人娛樂氣象運動App下載購物中心商城拍賣更多⋁知識+汽車機車電影字典遊戲旅遊理財房地產時尚美妝折扣城   Yahoo 奇摩知識+                        👤 登入    ✉ 信箱     ⚙ 服務說明    帳號資料 服務說明 意見回報        
















Yahoo奇摩知識+ 首頁











所有分類
 
健康
 
商業與財經
 
娛樂與音樂
 
家居與園藝
 
家庭與人際關係
 
寵物
 
懷孕與育兒
 
政治與政府
 
教育與參考
 
新聞與活動
 
旅遊
 
汽車與交通
 
消費電子產品
 
環境
 
社會科學
 
社會與文化
 
科學
 
美容與造型
 
藝術與人文
 
遊戲與休閒活動
 
運動
 
電腦與網際網路
 
食品與飲料
 
餐廳與小吃
 





世界Yahoo 








阿根廷





澳洲





巴西





加拿大





法國





德國





印度





印尼





義大利





馬來西亞





墨西哥







紐西蘭





菲律賓





魁北克





新加坡





香港





西班牙





泰國





英國與愛爾蘭





美國





越南





西班牙文







關於





關於 Yahoo奇摩知識+
社群指南
排行榜
點數與等級
部落格
如何安全地使用 Yahoo奇摩

 








 電腦與網際網路

 軟體


 看另一則問題 










            嵌入式系統
        


(a)什麼是嵌入式系統? 
(b)嵌入式系統與微處理機的差異是? 



請知道的大大幫我解答一下~~謝謝





 
2 個人正在追蹤 


 
 2 個解答 
2


檢舉不當使用









您確定要刪除此解答嗎？
是
否












 









抱歉，似乎發生一些問題。



Trending Now





 

解答














最佳解答: 
             標　　題：何謂嵌入式 

嵌入式系統最初是為了工業電腦而設計，在資訊產品普及與數位家電興起後，嵌入式系統已逐漸普及到我們日常生活中，從資訊家電、網路產品，到可攜式裝置，都看得到它的蹤跡。嵌入式系統的特色之一是不需要很多外接的零配件，能在小面積元件上完成特定功能，具有穩定、小尺寸等特點。  

過去嵌入式系統較難普及的原因，是積體電路集成度和製程水平尚無法突破。但是現在人們已經可以生產出大量低成本的微型矽元件，並以此為基礎發展出了許多可編程邏輯和微處理／控制器，這些元件可以用軟體技術來實現或更改硬體功能，搭配特定的作業系統或用戶介面，可以實現許多新型態應用，如PDA、STB、上網機等。  

我們將基於這些元件的設計稱為嵌入式系統設計。這些設計得益於半導體製程的進展、硬體平臺性能的提升、複雜演算法的實現，以及更多先進的電子自動化設計工具。可以說，嵌入式系統讓EDA工具獲得了更大的發展，各種針對嵌入式應用的工具如編譯、佈局佈線、合成、模擬、測試、驗證、編程等工具不斷在自動化與智慧化方面獲得提升。  

另外，嵌入式系統也同時帶動了一批運用HDL(硬體描述語言)進行各種積體電路功能模塊設計的公司，進而延伸出了專用IP內核這個產業。這些IP內核採用HDL來描述其功能和架構，在經過驗證後，便成為不同功能的IP內核。目前IP產業正迅速成長，而為了加速設計，這些IP廠商也提出了‘可再使用’IP的設計觀念，為設計人員提供更多選擇。  

在軟體發展部份，為了配合嵌入式系統，業界已發展出多種嵌入式作業系統（Embedded Operation System）。這些即時作業系統的功能強大，儘管其內核比起PC作業系統來說非常小，但它能作為設計人員的開發平臺，代表性的作品有微軟的Win CE、NT Embedded；Linux、Palm OS等。  

嵌入式系統的涵蓋面非常廣泛，EEdesign此次嘗試收集了部份嵌入式系統的元件與開發軟體，以及部份相關技術文件及業界資訊，希望能為正面對嵌入式系統設計挑戰的工程師們提供一些幫助！ 




 參考資料： 
 Network 


snow
 · 11 年前 





0
真讚



0
真遜





檢舉不當使用


意見





 




新增意見











送出












 · 剛才不久













                  發問者的評分
                















 其實，真正的Linux嵌入式系統工程師，要知道的東西很多。 
例如： 
1. 撰寫、修改、移植載入啓動程式(bootloader): 類似PC的BIOS 
2. 修改、移植Embedded Linux: 要在設備中使用的作業系統 
3. 撰寫bootloader的驅動程式及Linux的驅動程式 
4. 撰寫進入Embedded Linux的應用程式(如上網的IE瀏覽器) 
5. 要知道外接設備如何接到開發板的那些腳位，並撰寫驅動程式及應用程式(如: WebCam, 4x4矩陣式鍵盤, 外接2個以上的螢幕...) 
建議你可以參考【提華設計】有比較完整的實作。 
www.tifa.tw





Amos
 · 8 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久















 

檢舉不當使用

 我認為此問題違反社群指南 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此問題違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此解答違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此解答違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此意見違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此意見違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消



 

你可能對以下搜尋感興趣：


好背好搭的後背包

揉捏按壓在家輕鬆舒緩疲勞

海外代購超輕鬆

高效率學習程式設計












發問問題
通常可在幾分鐘內獲得解答！







展開»






詳細資料



詳細資料






現有問題




更多





請多詳述您的問題
上傳處理中




上傳失敗。 請上傳大於 100x100 像素的檔案
目前發生問題，請再試一次。
您只能上傳 PNG、JPG 或 JPEG 等類型的檔案。
您只能上傳 3GP、3GPP、MP4、MOV、AVI、MPG、MPEG 或 RM 等類型的檔案。
您只能上傳不超過 5 MB 的相片。
您只能上傳不超過 600 MB 的影片。
您只能上傳相片 (png, jpg, jpeg) 或影片 (3gp, 3gpp, mp4, mov, avi, mpg, mpeg, rm)。
您只能上傳相片或影片。
影片不應超過 <b>600mb/5 分鐘</b>
相片不應超過 <b>5mb</b>
影片不應超過 <b>600mb/5 分鐘</b>相片不應超過 <b>5mb</b>
  







解答問題


Booking com 線上訂房系統有中文介面嗎,好用嗎?



 

日本對遊戲軟件有分級制度嗎？



 

為什麼我安裝在手機裡的字體不能用？
之前還可以，可是現在就不行了
我是用愛字體下載的?



 

我想請問一下~~我現在想買新電腦~~
想同時安裝XP和WIN7~兩種系統軟體~~
電腦安裝硬體如下~~我應該大部份都使用WIN7~~偶爾會用XP~~請問電腦可以裝嘛??會跑的順嘛??



 


發燒問題




男人陽虛怎麼辦???

                  4 個解答
              

 

電腦看影片為何會斷斷續續的?

                  5 個解答
              

 

WELCOME色情視窗關不掉 求解QQ?

                  4 個解答
              

 
更多問題





我的電腦一直跳出新視窗?

             4 個解答
         

 

電腦桌面東西完全不見 工作管理員也無法開啟 但右鍵可以使用 求好心人幫忙解決?

             4 個解答
         

 

20170606
求line禮品小舖金頭腦送禮達人第2彈解答~~😀😀?

             8 個解答
         

 

  








服務條款


隱私權


RSS


















Embedded 嵌入式系統























 


















 






 
 
 
 


 

關於 Windows Embedded
 


 
 
Windows Embedded 系列產品是由 Windows CE 及 Windows XP Embedded 所組成。Windows CE 的設計目的是為進入了嵌入式系統的市場，結合了進階且即時的嵌入式作業系統與功能強大的工具，迅速地建立下一代的智慧型、連線式小型機體裝置。運用完整的作業系統功能組和開發工具，Windows CE 包含了您的開發人員在建置、偵錯和部署自訂裝置時所需要的功能。Windows CE 中的元件化功能會針對需要良好網路能力、通訊標準、硬體即時性核心程式、豐富的多媒體內容、網路瀏覽功能及精巧型的下一代裝置而進行最佳化。使用 Windows XP Embedded 來建置作業系統的常用裝置類別，包括個人數位助理 (PDA)、工業自動化設備、家用閘道器和消費性電子產品 (例如 CD 播放機、數位相機和網路 DVD 播放機)。Windows XP Embedded 是嵌入式作業系統，會以元件化形式展現 Windows 作業系統的強大威力。Windows XP Embedded 建置於與 Windows XP Professional 相同的架構基礎上，包含了超過 10,000 項以上的個別功能元件，因此開發人員在自訂裝置映像中，就能管理或減少機體的空間，以選擇並達到最佳的功能。Windows XP Embedded 建置於 Win32 程式撰寫模型的基礎上，透過運用熟悉的開發工具 (例如，Visual Studio .NET)、搭配使用現有的 PC 硬體以及緊密整合桌面應用程式，因而縮短產品上市的時程。使用 Windows XP Embedded 來建置作業系統的常用裝置類別，包含零售銷售點終端機、精簡型用戶端和進階的機上盒 (STB)。
 




 
 
 
 


 

為何要學Embedded
 


 
 
嵌入式軟體產業發展迅猛，已成為軟體體系的重要組成部分。嵌入式系統產品正不斷滲透各個行業，嵌入式軟體作為包含在這些硬體產品中的特殊軟體形態，其產業增幅不斷加大，而且在整個軟體產業的比重日趨提升。微軟針對該公司產品與技術發展藍圖現況指出，該公司甫成立半年的「Windows多媒體技術中心」，目前正與多家台灣知名科技業者與研究單位合作，進行包括電視手機、高畫質影音光碟等新世代多媒體產品與裝置的開發。該公司預期這些多媒體產品將為台灣創造上千億數位生活商機。
 


 
 
 
 




        


 

適合對象：
具作業系統核心及硬體Driver之開發基礎,有志朝微軟CE嵌入式技術工作發展者。
 


 

課程目標：

在Microsoft Windows XP Embedded作業系統的認證及授權下，提供學員Windows XP Embedded
實際製作的課程，進而學習如何製作XP Embedded的環境。
 


 

市場趨勢：
Windows CE 中的元件化功能會針對需要良好網路能力、通訊標準、硬體即時性核心程式、
豐富的多媒體內容、網路瀏覽功能及精巧型的下一代裝置而進行最佳化。 使用 Windows CE
來建置作業系統的常用裝置類別，包括個人數位助理(PDA)、工業自動化設備、醫療裝置、
家用閘道器和消費性電子產品 (例如CD 播放機、數位相機和網路 DVD 播放機)
 


 

課程內容：
1.CE6.0基本介紹 
              2.CE6.0作業系統特性 
              3.開發平臺工具概說
              4.作業系統核心 
              5.作業系統元件 
              6.建立系統 
              7.The Board Support Package 
              8.開發裝置的韌體 
              9.客製化OS設計 
              10.應用程式開發 
              11.CE 6.0 Testing 
              12.附錄:Licensing and Developer Resources
 


 
 
 
 
 


        


 

適合對象：
具基本作業系統及硬體概念有志朝微軟嵌入式技術工作發展者、對XPE系統開發之能力培養
有興趣者、並增加自己在嵌入式資源市場之價值。
 


 

課程目標：
在Microsoft Windows CE 作業系統的認證及授權下，提供學員Windows CE實際製作的課程，
進而學習如何製作CE的環境。
 


 

市場趨勢：
嵌入式軟體產業發展迅猛，已成為軟體體系的重要組成部分。嵌入式系統產品正不斷滲透
各個行業，嵌入式軟體作為包含在這些硬體產品中的特殊軟體形態，其產業增幅不斷加大，
而且在整個軟體產業的比重日趨提升。微軟針對該公司產品與技術發展藍圖現況指出，公司
成立「Windows多媒體技術中心」，目前正與多家台灣知名科技業者與研究單位合作，進行
包括電視手機、高畫質影音光碟等新世代多媒體產品與裝置的開發。該公司預期這些多媒體
產品將為台灣創造上千億數位生活商機。
 


 

課程內容：
1.描述嵌入式Windows XP及其架構 
2.安裝和使用嵌入式Windows XP工具 
3.建立元件及導入元件資料庫. 
4.為特定硬體建立及配置嵌入式Windows XP作業系統 
5.獨立開發嵌入式高端解決方案和產品
 


 


  
		  
1

 










 


















 
亞洲最大微軟Embedded培訓中心
 


 
最多原廠認證講師親自授課講解
 


 
原廠教材授課
 


 
註重實作，提供實作機板供學員操作驗證
 


 
最多學員取得原廠證照
 


 
課程內容最豐富且紮實
 


 
獨家與國內工業電腦第一大廠研華科技合作
              提供學員更多實作及硬體技術
 


 

























 







│巨匠電腦│數位學習網│ 學員專區│ 課程介紹│兒童電腦│ 客服中心│ 美語首頁│ 


　


本站最佳瀏覽視窗為1024*768 
                巨匠電腦股份有限公司　版權所有Copyright 2004 Gjun Information Co.,Ltd. 
                臺北市公園路30號6樓 / TEL:(02)23114537　客服專線: 0800-231381



 

















	嵌入式作業系統 - 艾訊




















[+]







產品詢問




Next



產品比較
關於艾訊
Taiwan / 繁體中文 
首頁















工業單板電腦與SOM模組


嵌入式電腦與網路平臺


工業級平板電腦


物聯網與M2M

解決方案
技術支援
最新消息
業務諮詢









工業主機板 & 單板電腦

ATX 主機板
Mini-ITX主機板
Pico-ITX單板電腦
Nano-ITX嵌入式主機板
3.5吋嵌入式單板電腦
EPIC 嵌入式主機板
反向佈局嵌入式主板
PC/104 模組

工業級長短卡

PICMG 1.3工業級長卡
PICMG 1.3 工業級半卡
PICMG 1.0 工業級長卡

嵌入式電腦模組

COM Express Type 2 模組 
COM Express Type 6 模組 
COM Express Type 10 模組
ETX 模組
Qseven 模組





RISC 單板電腦

系統模組

擴充卡 & 配件

PoE 模組
PCI Express Mini 模組
ZIO 模組
I/O 模組
 LVDS 轉換模組
快閃儲存設備
其他配件






熱門產品















嵌入式系統

無風扇嵌入式電腦系統
智慧交通專用嵌入式電腦
強固型無風扇Din-rail嵌入式系統

工業電腦

可擴充式無風扇嵌入式準系統
工業電腦機箱
背板
電源供應器

網路應用平臺

桌上型網路安全應用平臺
機架式網路應用平臺
LAN 模組
其他配件





數位電子看板

OPS數位電子看板播放器
數位電子看板專用播放器

多媒體播放器

觸控式多媒體播放器

週邊設備

機架式配件






熱門產品















無風扇觸控式平板電腦

超輕薄無風扇觸控式平板電腦
強固型無風扇觸控式平板電腦
不鏽鋼無風扇平板電腦

產業用平板電腦及顯示器

工業級觸控式平板電腦
開架式超薄型平板電腦
娛樂訊息專用平板電腦
工業級觸控液晶顯示器

醫療級平板電腦

醫療級觸控平板電腦





交通專用平板電腦

交通專用觸控平板電腦
交通專用觸控液晶顯示器

週邊配備

安裝配件
其他






熱門產品















智能裝置

智慧交通專用嵌入式電腦
交通專用觸控平板電腦
交通專用觸控液晶顯示器
智慧能源專用Din-rail嵌入式系統
EtherCAT 主控制器

閘道與防火牆

物聯網閘道平臺
工業級網路防火牆平臺





工業網路通訊產品

工業級乙太網路交換器
工業網路延伸器
乙太網路轉換器

智能軟體

智慧遠端監控與管理軟體






熱門產品

















工業自動化


交通運輸


物聯網


電力與能源


數位電子看板


遊戲機解決方案


自助式服務解決方案


網路安全管理方案


醫療系統


更多解決方案







下載專區
技術服務需求

技術常見問題


eRMA產品維修

夥伴專區






產品詢問
索取產品型錄
合作夥伴

聯絡我們


社群互動







新上市產品
新聞中心
電子報
技術文章
電子型錄
產品影片

參展訊息


RSS





















 首頁
產品服務嵌入式作業系統


 




















產品服務



單板電腦整合服務




嵌入式電腦整合服務




OEM/ODM服務




技術平臺 (ATP)




嵌入式作業系統











進階搜尋
下載專區
技術常見問題
業務諮詢
列印本頁







嵌入式作業系統

To optimize system resource demand, reduced TCO (Total Cost of Ownership), improve system reliability and system design TTM (Time-to-Market); Axiomtek established the embedded OS service force in 1999. As a platform concept, ECP (Embedded Computing Platform) combines two elements: a hardware SBC body and an embedded OS soul which constitute the perfect match for many target applications.
Axiomtek's embedded OS solutions offer a wide range of Microsoft Windows® and Embedded Linux and QNX family-based products and services, which include:

Windows® 10 IoT Enterprise/ Core Pro, Windows® Embedded Compact 7
Windows® XP Embedded, Windows® Embedded Standard 2009/7/8
Embedded Linux
QNX Neutrino RTOS
Software APIs and Utilities

With Axiomtek embedded OS solutions, the worry of dealing with various vendors, hardware suppliers, system integrators, and embedded OS distributors for tough projects, is cut to a minimum. Axiomtek is committed to helping customers; from the very beginning planning stages to successful complete system delivery, and fast time to market, Axiomtek is by your side. To better help achieve these goals, Axiomtek provides various services and solutions.
Windows® 10 IoT Enterprise Integration Services

Integrated Windows® 10 IoT Enterprise image by request based on:

Selected hardware platforms
Selected existing device drivers
Custom startup application
Customer proprietary device drivers and applications

Features of the service:

Full function test before any OS image is released
Flexible product combinations
Support of additional extension cards
Reasonable development fee refundable after certain amount of Windows® XP embedded licenses are purchased

Windows® 10 IoT Core Pro Ready Platforms

Rugged and compact industrial grade single board computers or panel computers
Flash disk with pre-configured Windows® 10 IoT Core Pro English and Chinese (Traditional & Simplified) image for target platform
Windows® 10 IoT Core Pro license
Utility and sample code
User manual

Windows® Embedded Integration Service
(Windows® XP Embedded/ Embedded Standard/ Embedded Standard 7/Embedded 8 Standard)
Reduces Windows® Embedded size by request based on:

Selected hardware platforms
Customer applications requirements
Required Windows® Embedded functions
Customer target storage size

Features of the service:

Windows® Embedded is tailored to run from SSD on rugged compact industrial grade single board computers
Direct I/O utility and sample code
Optional Instant-On solution implementation with special non- volatile memory
Reasonable development fee refundable after certain amount of Windows® Embedded licenses are purchased

Advantages of the service

Customers focus on software development to take full advantage of necessary Windows® Embedded features
Ready for mass production with standard hardware combined with Windows® Embedded license
Optional service with eSMART
Optional development kit

Embedded Linux Integration Service
For business model, the Axiomtek Kernel Embedded Linux is with free of charge run-time which at the same time is free download from Axiomtek's web service upon request to Axiomtek's FAE team.

Integrated Embedded Linux image by request based on:

Selected hardware platforms
Selected existing device drivers and IRQ settings
Selected Embedded Linux functions
Customer proprietary device drivers and applications
Bootloader and utilities

Features of the service:

Full function test before any OS image is released
Flexible product combination
Additional extension cards supported when IRQ allows
Optional Instant-On solution implementation with special non-volatile memory H/W

Advantages of the service:

Customer focus on software development with embedded visual tools
Ready for mass production with standard hardware combined with Embedded Linux License
Optional service with eSMART
Optional platform development kit
Reference platform for prototype design
OS and device driver porting service

QNX Neutrino RTOS (realtime operating system)

The QNX Neutrino RTOS provides a comprehensive, integrated set of technologies to help quickly deliver robust, reliable embedded systems. It's a memoryprotected microkernel architecture for maximum reliability unparalleled scalability and realtime performance for embedded applications.

High availability solution
Essential networking technologies including IPv4, IPv6, IPSec, FTP, HTTP, SSH, Telnet and more
Photon microGUI- a full featured embedded graphical user interface
Integrated file systems for flash devices and rotating media
System visibility and debugging support
Scalability
Portability

IntervalZero RTX64/RTX
IntervalZero's RTX64 and RTX transform Windows into a real-time operating system (RTOS) and RTX64 can scale from 1 to 63 cores for dedicated real-time processing. For complex, connected embedded systems that seek to take advantage of Windows' world-class HMI and that also require determinism and hard-real time, RTX64 and RTX provide an RTOS that is tightly integrated with Windows. Where Windows provides timers with a maximum resolution – smallest granularity – of 1000 μs (1 millisecond), RTX64/RTX lower this to 1 μs where supported by the hardware. We provide Digital Input/Output (DIO) driver development service to facilitate customer to integrate deterministic DIO control in their realtime application like motion control/robotics.
Software APIs and Utilities
Axiomtek's software API utility and driver service provides system environment protection, increased system reliability and enables remote management control.

uAPI: hardware monitor, DIO, WatchDog
AXView 2.0: remote management control
Specific utilities and driver: CANbus
CANopen, EtherCAT, EMGD driver
DIO driver for IntervalZero RTX

Embedded OS Service Flow

Embedded OS Porting Status
Axiomtek provides a wide range of embedded OS support. Click here to view the most updated embedded OS list.











解決方案

工業自動化


交通運輸


物聯網


電力與能源


數位電子看板


遊戲機解決方案


自助式服務解決方案


網路安全管理方案


醫療系統


更多解決方案



最新消息
新上市產品
新聞中心
電子報
技術文章
電子型錄
產品影片

參展訊息


RSS



技術支援
下載專區
技術服務需求

技術常見問題


eRMA產品維修

夥伴專區


產品服務

單板電腦整合服務


嵌入式電腦整合服務


OEM/ODM服務


技術平臺 (ATP)


嵌入式作業系統



關於我們
關於艾訊
投資人專區
公司治理專區
企業社會責任專區
利害關係人專區
服務與支援
產品設計
艾訊徵才
全球據點


業務諮詢 
產品詢問
索取產品型錄
合作夥伴

聯絡我們


社群互動









|
意見回饋 
 |
 網站導覽
 |
隱私權政策

© 2017 艾訊股份有限公司












下載  Intel ® 嵌入式驅動程式適用於 Microsoft Windows * 8 (32 位元 & 64 位元) 作業系統


















































搜尋
 




支援





支援首頁
驅動程式和軟體
Intel ® 嵌入式驅動程式適用於 Microsoft Windows * 8 (32 位元 & 64 位元) 作業系統















                        Intel ® 嵌入式驅動程式適用於 Microsoft Windows * 8 (32 位元 & 64 位元) 作業系統
                    

版本： 1 (最新的)
日期： 2015/10/16












可用下載



Windows 8*Windows* 8，32 位元Windows* 8，64 位元
語言： 英文
大小： 4.06 MB

Intel_Processor_Win8_IO_Drivers_Gold_MR1_EDC.zip








詳細說明：



本軟體僅供硬體和軟體開發人員使用的嵌入式 Intel 平臺。這並不是適用於企業或消費者系統。概覽安裝套件： Intel ® 嵌入式驅動程式適用於 Windows * 8 (32 位元和 64 位元) 作業系統。用途： 此軟體驅動程式套件會安裝 Intel 嵌入式驅動程式適用於 Intel ® 凌動、 Pentium ® 與 Celeron ® 處理器。這幾款處理器包括：Intel® Atom™ 處理器 E3800 產品系列Intel ® Celeron ® 處理器 J1900Intel ® Celeron ® 處理器 N2807Intel ® Celeron ® 處理器 N2930這些驅動程式無法在其他產品上運作。請參閱 README 檔中的安裝資訊版本註意事項以驅動程式版本的詳細資訊。註意： 這些軟體驅動程式均為通用版本，然後可以用於一般用途。然而，電腦原始設備製造商 (Oem) 可能已經改變這些功能、 納入自訂功能，或做了其他的變更的軟體或軟體封裝他們所提供。若要避免在您的 OEM 系統上任何潛在安裝不相容，Intel 建議您洽詢您的 oem 廠商，並使用系統製造商提供的軟體。Intel 或電腦原始設備製造商 (OEM) 可能不提供技術支援技術所產生的部分或所有問題提供技術支援使用此軟體驅動程式的通用版本。

此資訊結合人工翻譯和電腦翻譯原始的內容，方便您使用。此內容僅提供一般資訊，請勿將其視為完整或精確而仰賴之。



此下載檔案適用於下列產品。




Intel Atom® 處理器 E3845 (2M 快取記憶體，1.91 GHz)


Intel Atom® 處理器 E3826 (1M 快取記憶體，1.46 GHz)


Intel® Celeron® 處理器 N2807 (1M 快取記憶體，最高 2.16 GHz)


Intel® Celeron® 處理器 J1900 (2 MB 快取記憶體，最高 2.42 GHz)


Intel Atom® 處理器 E3825 (1M 快取記憶體，1.33 GHz)


Intel Atom® 處理器 E3827 (1M 快取記憶體，1.75 GHz)


Intel Atom® 處理器 E3815 (512K 快取記憶體，1.46 GHz)


Intel Atom® 處理器 E3805 (1M 快取記憶體，1.33 GHz)













Intel 軟體授權合約
X



本份軟體授權合約條款係規範您使用軟體的情形，適用於您下載的任何軟體。
This Agreement is in the English language only, which language shall be controlling in all respects, and all versions of this Agreement in any other language shall be for accommodation only and shall not be binding on you or Intel.  All communications and notices made or given pursuant to this Agreement, and all documentation and support to be provided, unless otherwise noted, shall be in the English language.   此 "合約" 僅以英文撰寫，此語文版本涵蓋各個層面，此 "合約" 的其他任何語文版本只是為了方便閱讀而加以提供，對您或 Intel 不具任何約束。所有伴隨此 "合約" 而達成或指定的溝通或註意事項，以及所有文件以及應提供的支援，除非另有聲明，否則均應以英文為準。   INTEL 軟體授權合約重要 - 複製、安裝或使用之前請先閱讀本合約。請先仔細閱讀下列條款和條件，再使用或載入本軟體及所有相關的資料 (以下合稱 "軟體")。裝載或使用本軟體，表示您同意合約中條款。如果不同意，請勿安裝或使用本 "軟體"。授權：請註意：- 如果您是網路管理員，則適用於以下的 "站台授權"。- 如果您是一般使用者，則適用於 "單一使用者授權"。- 如果您是原始設備製造商 (OEM)，則適用於 "OEM 授權"。站台授權。您可將本 "軟體" 複製到貴公司的電腦，以作為公司內部使用，並在遵守以下條件的情況下製作合理數量的 "軟體" 備份副本：1. 本 "軟體" 的授權僅限於配合 Intel 元件產品使用。若使用本 "軟體" 搭配非 Intel 元件產品，則無法據以獲得授權。2. 除非本合約提供之外，否則您不可以複製、修改、租出、販售、散佈或轉送軟體的任何部分，而且需同意防止未授權的軟體複製。3. 您不得對 "軟體" 進行反向工程、解編或反向組譯。4. 您不可以再授權或允許超過一個使用者同時使用軟體。5. 軟體 單一使用者授權。您可將軟體複製到非商業使用的個人電腦，可以做軟體的備份複製，並接受這些條件：1. 本 "軟體" 的授權僅限於配合 Intel 元件產品使用。若使用本 "軟體" 搭配非 Intel 元件產品，則無法據以獲得授權。2. 除非本合約提供之外，否則您不可以複製、修改、租出、販售、散佈或轉送軟體的任何部分，而且需同意防止未授權的軟體複製。3. 您不得對 "軟體" 進行反向工程、解編或反向組譯。4. 您不可以再授權或允許超過一個使用者同時使用軟體。5. 軟體 OEM 授權：您可以重製並發佈本 "軟體"，但僅限作為產品的整合部分或結合產品，或是針對現有產品的一般使用者 (不含任何其他獨立產品) 所作的獨立 "軟體" 維護更新，並且遵守以下條件：1. 本 "軟體" 的授權僅限於配合 Intel 元件產品使用。若使用本 "軟體" 搭配非 Intel 元件產品，則無法據以獲得授權。2. 除非本合約提供之外，否則您不可以複製、修改、租出、販售、散佈或轉送軟體的任何部分，而且需同意防止未授權的軟體複製。3. 您不得對 "軟體" 進行反向工程、解編或反向組譯。4. 您只能依據書面授權合約，將 "軟體" 發佈給您的客戶。此授權合約得為 "開封即表示同意" 授權合約。至少，此一授權應維護 Intel 的 "軟體" 所有權。5. 軟體無其他權限。除本 "合約" 明確陳述以外，不論明示或默示，Intel 都不會授予您任何與所有權資訊或專利權、著作權、光罩作品、商標、商業機密或其他 Intel 所擁有或控制之智慧財產權相關的權限或授權。軟體的所有權與著作權。"軟體" 所有副本之所有權仍屬 Intel 或其供應商所有。本軟體具有著作權並受美國及其他國家的法律，以及國際公約條款保護。您不可從軟體移除任何著作權註意事項。Intel 可對軟體或其中參考項目作改變，恕不另行通知，但不強制支援或更新軟體。除了其他方面明白提供之外，在 Intel 專利、著作權、商標或其他智慧財產權之下，Intel 不允許任何明示或默示的權利。只有在接受者同意完全受這些條款約束，以及如果您未保留軟體複本時，才可移轉軟體。有限媒體保固。若 Intel 係以實體媒體遞送「軟體」，Intel 保證自遞送之日起九十天內，該媒體絕無材料實體之瑕疵。如果發現這類的瑕疵，請將媒體退回 Intel 更換，或者如 Intel 選擇將軟體另外運送。其他保固之免除。除了上述條件之外，本軟體以 "原狀" 提供，並不做任何形式的明示或默示擔保，包括商業適售性、不侵害他人權益或適合某特定用途之擔保。對於 "軟體" 包含之資訊、文字、圖形、連結或其他項目的正確性或完整性，Intel 不提供任何保證亦不承擔任何責任。責任的限制。即使已建議 INTEL 會有這種損害的可能性，INTEL 或其供應商對於任何出自於使用或無法使用軟體的損害皆不負責任(包括，但不限於，利益損失、商業間斷或資訊損失)。對於默示擔保或重大或意外損害，有些司法管轄權會禁止責任的免除或限制，所以上述限制可能不適合您。您也可以有其他合法權利，隨不同的司法管轄權而改變。 合約終止。若您違反本 "合約" 之條款，Intel 得隨時終止 "合約"。合約終止後，您要立刻銷毀軟體或將所有軟體副本交還 Intel。 適用法律。本合約之聲明將由加州法律支配，但在貨物銷售之合約中不包括法律衝突及聯合國公約的原則。您不能違反應用輸出法及規定將本軟體輸出。除非用書面並由 Intel 授權的代表簽署，否則在其他任何合約下無法強制約束 Intel。政府有限權利。本軟體提供有 "限制權利"。政府之使用、複製或公開必須遵守 FAR52.227-14 和 DFAR252.227-7013 及其後的條例或其後續規定所設限制之規範。政府對本軟體的使用在此構成 Intel 專利權確認。"承包商" 或 "製造商" 為 Intel 2200 Mission College Blvd., Santa Clara, CA 95052。



我接受這份授權合約


我不接受這份授權合約



                    已經開始下載檔案。若下載尚未開始，請按一下這裡重新開始。
                








     
需要更多協助嗎？

聯絡支援






     
回饋







這個資訊對您是否有幫助呢？


是



否




剩下 500 個字元。


傳送




謝謝您










©Intel 公司使用條款*法律聲明Cookie保密政策
 


