


軟體工程(Software Engineering;SE)
















軟體工程(Software Engineering;SE)
本網頁以打造無障礙閱讀為目標，可以用任何瀏覽器來觀看本網頁


      軟體工程這門課程在國內教育上，資工與資科等系所會列為必修而資管僅列為選修而已，資管會列為必修的是系統分析與設計，但系統分析與設計只是整個軟體工程的一小部分而已，所以資管出身的資訊人是一定要瞭解的啦....。
    


簡介

軟體工程

軟體開發架構的演進

系統分析與設計


結構化技術

物件導向技術


統一塑模語言(Unified Modeling Language,UML)

樣式理論(Pattern Theory)

資料庫正規化

CMMI(Capability Maturity Mode Integrated)

參考書目

網路資源



      簡介

      1968年秋季，NATO（北約）的科技委員會召集了近50名一流的編程人員、計算機科學家和工業界巨頭，討論和制定擺脫“軟體危機”的對策。在那次會議上第一次提出了軟體工程（softwareengineering）這個概念。 
      大多數軟體開發項目的失敗，並不是由於軟體開發技術方面的原因。它們的失敗是由於不適當的管理造成的。遺憾的是，盡管人們對軟體專案管理重要性的認識有所提高，但在軟體管理方面的進步遠比在設計方法學和實現方法學上的進步小，至今還提不出一套管理軟體開發的通用指導原則。
「新技術一直冒出來，學都學不完了，那裡有空搞軟體工程」、「計畫趕著進行，做都做不完了，那裡有空搞軟體工程」...... 就在這一個又一個的藉口中，原本可以幫助軟體產業進步的軟體工程，竟然變成他們口中阻礙軟體產業進步的絆腳石似的，怎不令人對他們的無知感到心寒。

      寫程式的難度愈來愈低，因為程式語言越來越高階，API 越來越多，開發工具越來越好用，寫程式的門檻自然就大大地降低了。想要開發出有價值的中大型系統，軟體工程就很重要了，以蓋房子來說，你可以隨便找一兩個工人用磚或木材來蓋一棟矮房，但是如果想蓋一百多層樓的101大樓，你非得有良好的工程規劃不可，軟體不也是如此？程式設計師名片上的頭銜都是工程師，雖然和建築工程師、機械工程師... 一樣都被稱為工程師，但比較起來，軟體產業的工程師卻是最不工程導向的 。



      軟體工程

      軟體工程包括兩方面內容：軟體開發技術和軟體專案管理。 
    

軟體開發技術包括軟體開發方法學、軟體工具和軟體工程環境。 
軟體專案管理包括軟體度量、項目估算、進度控制、人員組織、配置管理、項目計畫等。 

      軟體工程是為瞭解決軟體危機而誕生，近來最熱門的技術有
      
UML
Design Patterns
re-engineering
XP 



        軟體架構
      
      已成為軟工熱門的研究之一。
開發流程由強調瀑布式流程(waterfall)轉為強調反覆式流程(iterative)。 反覆式流程的主要精神是分析一些，設計一些，實作一些，執行一些，也就是將整個開發流程切割成數個週期(iteration)，每個週期都是一個叫小型的直線式流程，並且強調週期結束時都有可以執行的結果，而每個週期都是以前一週期的結果為基礎，在新增需求的方式進行，直到所有的軟體需求都滿足為止。因此反覆式流程也是一種漸增式流程(降低風險)。以結果來看，瀑布式流程只會交付一次產品，反覆式流程會交付多次產品。


      SA -> SD -> coding -> test -> installation -> maintance 
    
process

Quality Assurance
Configuration Management
Project Management
CMM 

software system


      bussiness application
      
TPS,DSS,MIS,ES


      web application
      
Web System
Web Service 
E-service : marketing+MIS

real-time
safety-critical

safety critical system

      常用的formal工具 : Petri Nets
    

Petri Nets 的 reachability graph 常因可能的狀況太多而不可能分析，所以有許多論文會討論如何簡化它
現今也常用在電子商務上

軟體開發架構的演進
      

      隨著Internet的興起，分散式系統的環境日趨成熟，要將整個Internet視為區域網路般的存取資源與交換資料，程式設計上就必須考慮到所謂的3層式架構 
    


        展示層(Presentation Tier) 
      

        將UI的部分獨立出來，除了可讓專業的美工處理之外，還要考慮到程式邏輯的變動不會影響到畫面，或是畫面的變動不會影響到程式邏輯 
      

        商業邏輯層(Business Logic Tier) 
      

        將企業運作的邏輯獨立成元件，以方便更新程式碼時只需要異動相關的元件即可 
      

        資料層(Data Tier) 
      

        將關於資料存取的部分獨立出來，如此一來在變動資料庫架構時便不需要更改程式邏輯或畫面 
      

    接下來，讓我們來瞭解程式開發架構是如何由1-Tier走向N-Tier的
    單機架構(1-Tier)

      展示層，商業邏輯層，資料層都在單機上處理，適用於文字處理，個人資料處理(PIM)等單機架構，其瓶頸為
    

檔案型的資料有傳輸浪費頻寬與異動需鎖定等問題
商業邏輯或使用者介面改變，需重新部署

主從架構(Client/Server , 2-Tier)

      將資料層分離出來，儲存到資料庫伺服器，適用於多人存取資料的環境，其瓶頸為
    

商業邏輯或使用者介面改變，需重新部署
資料庫伺服器容易成為效率的瓶頸，例如Client端的連線數會增加伺服器connection紀錄負擔 
      
        //因此我們應該只在取用資料與將資料回存時才進行connection
      

      商業邏輯應該放在client或server端的問題
      
放在前端，資料庫可不受限制的抽換，但商業邏輯改變，需重新部署
放在後端，通常是利用Stored Procedure，但這樣就不易抽換資料庫軟體


分散式架構(N-Tier)

      將展示層，商業邏輯層(放在AP Server)，資料層(放在Database Server)都各自獨立，適用於平臺不同，網際網路的環境。
      
      若展示層以一般開發工具開發稱為
      
        Rich Client
      
      ，若利用動態網頁技術運作於瀏覽器上則稱之為
      
        Thin Client
      
      。 
      
      其瓶頸為
    

AP Server 與 Database Server除了穩定運作的需求外，也易成為效率的瓶頸
需要能將商業邏輯包裝成元件的技術，門檻較高

網路服務(Web Service)

      將整個網際網路視為區域網路甚或是作業系統般，徹底實踐分散式系統的美麗新天地，使用網際網路上的資源就如同取用單機資源一般容易，主要是利用XML作為資料轉換的標準，透過SOAP通訊協定穿過防火牆，打破網際網路的隔閡，目前有Sun 的Java One架構與Microsoft的.NET架構可供參考。
    


      系統分析與設計(Systems Analysis & Design)
資訊系統的種類

交易處理系統(Transaction Processing System;TPS) 
管理資訊系統(Management Information system;MIS)
決策支援系統(Decision Support System;DSS)
高階主管資訊系統(Executive Information System,EIS)

      專家系統(Expert System;ES)
      
使用者介面
推理機
知識庫

操作性系統(Operational Systems)
辦公室自動化系統(Office Automation Systems;OA)

資訊系統的建置策略


      公司內部獨力完成
      
使用者自建(End User Development;EUD)
資訊部門發展


      公司外部取得
      
委外開發(Outsourcing)
套裝軟體(Application Package)


      其他方式
      
與軟體公司合作等


系統開發模式(SoftWare Process Model)
瀑布式(Waterfall)



        編碼與修正模式(Code-andfix Model)
      


        階段模式(Stagewise Model)：Benington(1956)
      

      瀑布模式(Waterfall Model)：Royce(1970)
      = 系統發展生命週期(System Development Life Cycle;SDLC)
      

        特徵
        
適用於需求明確，領域知識(Domain KnowHow)容易取得的專案
強調開發過程需有完整的規劃，分析，設計，測試及文件等管理控制
前一階段完成後才能進入下一階段，各階段僅循環一次
沒有明確規定要劃分成多少個階段，每一階段皆有文件產出


        至少劃分3階段
        
分析
設計
實施


        通常劃分5~7階段不等(每一家學說都不同,掌握精神即可)
        
初步調查 (Preliminary Investigation) 
系統分析 (System Analysis) 
系統設計 (System Design) 
系統開發 (System Development) 
系統實施與評估 (System Implementation and Evaluation) 




      反覆式(Iterative)


      漸增模式(Incremental Model)：Mills(1971)
      
強調需求可分成幾個部分
開發週期可反覆進行


      雛形模式(Prototyping Model)：Bally(1977)
      
適用於需求不明確，專案小，應用領域不熟悉或高風險之專案
強調雛形之快速開發，以雛形作為使用者與資訊人員溝通之工具，使用者高度參與等

        雛形策略
        
演進式雛形(Evolutionary Prototyping)
用後丟棄式雛形(Rapid Throwaway Prototyping)：因成本較高，故適用於風險最高的情形



      螺旋模式(Spiral Model)：Boehm(1988)
      
強調「風險分析」結合了SDLC與雛形模式

        螺旋模式的4個步驟
        
找出系統目標，可行方案與限制
依目標與限制評估方案
開發雛形
使用者評估，決定下一步驟



      同步模式(Concurrent Model)：Aoyama(1993)
      
構想源於製造業的同步工程(Concurrent Engineering)目的在於縮短產品開發時間，適用於套裝軟體的專案

        同步模式的構想
        
活動同步(Activity Concurrency)：不同團隊平行開發
資訊同步(Information Concurrency)：不同團隊資訊共享
整合性的管理系統：協調各種資源的互動關係



需求擷取與分析
使用者需求的分類

巨觀需求：欲電腦化的環境，作業程序與範圍，輸出與輸入所需之資訊或表單及系統目標，限制，主要功能等，盡可能在需求分析階段中釐清與確定。
細部需求：使用者介面之要求，例外狀況之處理，錯誤及輔助訊息之顯示，通常到設計階段處理。

需求的擷取方式

查閱文件 
實地觀察(Observation)

      訪談(Interview)
      
開放式訪談(Open Interview)：類似交談
結構化訪談(Structured Interview)：類似詢問


      問捲
      
簡單隨機抽樣
分層抽樣
便利抽樣
判斷抽樣

開會討論

      聯合開發(Joint Application Development;JAD)
      
範圍界定
關鍵人員的熟悉
會議準備
會議進行
文件產生


需求的表達工具


      流程圖(Flow Chart)
      
□：表達作業處理，可配合
        處理描述
◇：表達流程控制
→：表達資訊流向
波浪形：表達資訊的展示與儲存，可配合
        藍圖(Drawing)
        與
        資料詞彙(Data Glossary)


需求分析文件的樣版

問題描述
新系統目標
新系統限制

      使用者需求
      

        流程圖
        
處理描述
藍圖
資料詞彙



系統分析與設計的兩大技術


結構化技術
      ：將資料與流程分開考慮
      
流程塑模：主要透過資料流程圖(DFD)
資料塑模：主要透過實體關係模式(E-R Diagram)
使用者介面塑模


物件導向技術



      結構化技術


      結構化設計(1960)：強調系統的結構化與可維護性，決定系統應有哪些模組(模組名稱,輸入,輸出,內部資料,處理邏輯)
      

          結構化技術所需工具
        


            文件
          

            工具
          

            經驗法則
          

            評估準則
          



            結構圖(Structure Chart)
          
 
            
          

            模組大小：小模組200行以內
          

內聚力




            HIPO圖(Hierarchical Input Process Output)
          
 
            
          

            控制間距：(Magic Number 7±2)
          

耦合力




            處理規格描述(Process Specification)
            
結構化英語(Structured English) 
程式設計語言(Program Design Language;PDL)


 
            
          

            影響範圍
          
 
            
          



            資料字典(Data Dictionary;DD)
          
 
            
          

            控制範圍
          
 
            
          



      結構化分析(1970)：利用圖形化文件工具(Graphic Documentation Tools)進行企業流程及企業資料格式塑模
      

        事件列(Event List)
        
資料流導向：客戶輸入代號
時間導向：下午3點要簽發支票
控制導向：系統的開啟或關閉


        環境圖(Context Diagram)
        
○：系統
□：外部實體
→：資料流


        資料流程圖(Data Flow Diagram;DFD)：表達系統作業處理與資料流之關係
        

          表示符號
          
□：外部實體(Entity)
→：資料流(Data Flows)
○：處理(Process)
二：資料儲存(Data Store)


          建構方式
          
由上往下分割(Top-Down Partitioning)
由中間往外分割(Middle-Out)：Yourdon-1988



        實體關係圖(Entity-Relationship Diagram;ERD)
        

          表示符號
          
矩形：代表實體類型 (Entity Type) 
菱形：代表實體類型與實體類型間之關係 (Relationship) 
橢圓：代表實體類型或關係之屬性 (Attribute) 
直線：把屬性連結到實體類型或把實體類型連結到關係 
基數率(Cardinality Ratio)：代表實體類型與實體類型間之關係程度。常見的基數率是「1:1」、「1:N」及「M:N」三種
參與限制(Participation Constraint)：個體的存在是否藉由與另一個個體之間的關係而存在。參與限制分為「全部參與（Total Participation）」、「部份參與（Partial Participation）」兩種。


處理規格描述(Process Specification)
狀態轉移圖(State Transition Diagram;STD)


      結構化程式設計(1969)：Dijkstra提出，避免GOTO所造成的混亂
      
循序(Sequence)：compute,read,write
選擇(Condition)：if then else, case 
重複(Repetition)：do while 


      由上而下發展
      
由上而下設計(Top-Down Design)
由上而下編碼(Top-Down Coding),由下而上編碼(Bottom-Up Coding)

        由上而下實施(Top-Down Implementation)由上而下測試(Top-Down Integration Test)
        

          白箱測試：由上而下或由下而上依功能測試
          
單元測試
整合測試


          黑箱測試：情況極端與例外的測試
          
系統測試
驗收測試




結構化分析與設計的評估準則
    良好的設計希望達到模組的內聚力為功能內聚力，耦合力為資料耦合力
    

      內聚力(Cohesion)：衡量模組完成一件工作的程度



        功能內聚力(Function Cohesion)
      
      ：單獨處理一件工作


        順序內聚力(Sequential Cohesion)
      
      ：模組順序執行，一個模組的輸出會成為下一組的輸入


        溝通內聚力(Communication Cohesion
      
      )：使用相同的資料
暫時內聚力(Tempral Cohesion)：模組執行無順序關係但須在一定時間內完成一件工作
程序內聚力(Procedural Cohesion)：按照順序執行而不共用資料
邏輯內聚力(Logical Cohesion)：根據上層模組傳來的參數決定執行的功能
偶發內聚力(Coincidental Cohesion)：模組可做好幾件不相干工作，各模組具有功能內聚力



      耦合力(Coupling)：衡量模組間相互關連的程度


        資料耦合力(Data Coupling)：模組間藉由資料傳遞參數

        資料結構耦合力(Stamp Coupling)：模組各自使用資料結構的一部份
控制耦合力(Control Coupling)：A模組傳遞旗標控制B模組
共同耦合力(Common Coupling)：兩模組使用相同的資料區
內容耦合力(Content Coupling)：A模組可使用B模組的程式碼或改變其變數



      物件導向技術(Object-Oriented Technique，OOP)

針對日趨複雜之軟體需求的挑戰，軟體業界發展出了物件導向 (OO) 的軟體發展模式，作為針對「軟體危機」的最佳對策。
物件導向之觀念起源於模擬語言(1966, Simula 語言)，以物件模式來描述真實系統，並將資料抽象化(Data Abstraction)、封裝、繼承與同名異式的觀念融入於物件系統開發中。 
第一個純粹的OOP語言：1980全錄(Xerox)公司的PARC研究中心所開發的
      
        Smalltalk-80
      


      OOP的先驅 Brad Cox 曾提出Software-IC的概念，而要達到軟體IC的概念，則需要下列特性
    

物件 & Message 
繼承性(inheritance)
封裝性(encapsulation)
動態連結(dynamic binding)

抽象化(Abstraction) 

抽象化所描述的過程，就是由許多物件中抽離出重要的特性來，而這些特性，足以讓被抽象化的物件，與別的物件分別開來。同時，對於物件抽象化的結果，也因我們的需要不同，而有所變化。
所有的抽象化都是系統的發展，為了維繫存在，必須適應變化的唯一路途。
抽象化的目標與物件導向一樣，就是『讓我們更容易模擬世界，並加以處理』。



      物件(Object)=案例(Instance)

由一群具有相同資料結構與相同行為的物件所描述的集合中，某一個特定且存在的物件。
物件是一個具有狀態(State)、行為(Behavior)與識別(Identity)的實體或抽象化概念(Abstract Concept)，且其行為會影響其狀態。
物件是一個封包，包括了名稱(name)、
      
        屬性(attribute)
      
      及
      
        操作(operation)
      
      3部分。
      
在C++中稱為
        
          資料成員(Data Member)
        
        與
        
          成員函式(Member Function)
        

      在Java中稱為
      
        欄位(Field)
      
      與
      
        方法(Method)
      
每一個物件都是一個被class所分類的instance (Every object is an instance of a class)



      類別(Class)=物件類型(Object Type)=抽象化資料型態(Abstract Data Type;ADT)

由一群具有相同資料結構與相同行為的物件描述，所形成的集合，經由抽象化(Abstraction)後稱之為類別。
類別是一種定義(Definition)、描述(Description)、樣版(Template)，故可以類別建立新的物件。

封裝(Encapsulation)

將資料與操作此資料的方法包裝成一個物件稱之為封裝。

      封裝後物件的結構分為2部分
      1.介面(Interface)2.實作(Implementation)
封裝將物件的實作細節隱藏，使其與外界環境隔離，只允許該物件所包含之操作修改其資訊，稱之為資訊隱藏(informatiion hiding)。

繼承(Inheritance)


      所謂繼承就是從基底類別(base class)，建立衍生類別(derived class)。衍生類別除了繼承基底類別的所有特性外，可依據需求建立新的功能或修改，其基底類別不會受任何影響。繼承可提升程式碼的重複使用性(reusability)。
      

        多重繼承(multiple inheritance)：一個類別可以直接繼承多個基底類別─網路結構。多重繼承最常引發的麻煩便是「模稜兩可」(ambiguity) 。
簡單繼承(single inheritance)：一個類別最多只能直接繼承一個基底類別─樹結構。


      類別間的層級關係
      
父類別(Superclass)、泛化、一般化(Generalization)：萃取類別的相同屬性與操作所成的上層類別。
子類別(Subclass)、繼承、特殊化(Specialization)：在既存類別下，加上專門的特性所成的下層類別。
「is a」的關係：子類別 is a 父類別，如鋼琴是樂器。


同名異式(Polymorphism)=多型=動態繫結(Dynamic binding)

定義相同名稱的操作，以不同的方式處理不同類型的資料。
多型在程式執行期利用動態連結(Dynamic Binding)的方式判斷訊息參數的類型與個數來決定運作的方法。

      達到物件導向中「多型」的方法
      
抽象類別 (abstract class)：抽象類別是為了讓方法的使用更多樣化，物件轉換型別為抽象類別後，即使方法名稱相同，其實作的內容與執行結果卻不同。 


物件導向的系統開發方法(Process)

      物件導向的系統開發是一個反覆(Iterative)的過程，包括了三個階段
    

需求分析 ->
      
      (需求模式) 主要以使用個案圖、活動圖、藍圖、資料詞彙、介面元件等作為表達工具。
系統分析與設計 -> 
      
      (分析模式) 將需求模式中的系統表達成一個物件架構，包括了物件圖與類別圖 
      
      (設計模式) 將物件架構至現況之實施環境，包括了循序圖、合作圖、狀態圖、活動圖。
實施與測試 ->
      
      (實施模式)元件圖、部署圖。
      
      (測試模式)

    這種反覆的開發方式，在每個iteration(反覆的期間)結束後，希望能產生具備產品品質、測試、整合過的軟體出來，所以會有多個發行版本(release)存在
    

        重要的物件導向的系統開發方法
      


          方法名稱
        

          方法論者(3 Amigo)
        



          Booch
        

          Grady Booch 
        



          OMT(Object Modeling Technique)物件塑模技術
        

          Jim Rumbaugh 
        



          OOSE(Object-Oriented Software Engineering)物件導向軟體工程
        

          Ivar Jacobson 
        



          RUP(Rational Unified Process)Rational統一流程
        

          Rational / IBM 
        



          XP(eXtreme Programming)極致程式設計
        

          Kent Beck 
        



          要看看還有哪些系統開發方法，可參考： 
          http://www.cetus-links.org/oo_ooa_ood_methods.html



Booch

      Booch之方法將系統開發過程分為
      觀念期、分析期、設計期、進化期、維護期，常用於大型軟體專案。
    

觀念期：確定核心需求
分析期：發展系統行為模式
設計期：建構系統架構
進化期：改良系統
維護期：改良移交後之系統

OMT

      Rumbaugh之OMT方法將系統開發過程分為 觀念形成、物件導向分析、物件導向設計三個階段，常用於企業資訊系統。
    
OOSE

      Jacobson之OOSE方法將系統開發過程分為 分析、建構、測試三個階段，以使用個案著名。
    
RUP

初始階段(inception)
詳述階段(elaboration)
建構階段(construction)
轉換階段(transition)

物件導向的塑模 = 軟體架構

      軟體開發如同音樂譜曲及建築設計，其過程中必須將需求、分析、設計、實作、佈署等各項工作流程之不同觀點予以呈現，這就是軟體系統之塑模(Modeling)。 
    

      Booch等人 / Rational Software 提出可從4+1觀點(4+1 view)來看軟體系統架構(凸顯使用個案的重要性)
    

使用個案觀點(Use Case View)：以使用個案充分表達軟體功能需求
設計觀點(Design View)：以物件的觀念，表達出軟體設計結果 (Logical View) 
流程觀點(Process View)：
實施觀點(Implementation View)
佈署觀點(Deployment View)


      根據上述5個觀點我們可以整理出6種塑模
    

使用個案塑模：使用個案圖
物件資料結構塑模：類別圖、物件圖
物件互動行為塑模：互動圖(包含了循序圖、合作圖)
作業行為塑模：活動圖、狀態圖
使用者介面塑模：
系統元件與組織結構塑模：元件圖、部署圖

物件導向的軟體維護

軟體的維護就是軟體的再生，維護較開發而言要花更多的金錢與時間
軟體維護的思維上就是要考慮到
      
        可維護性(Maintainability)
      
      與
      
        可重複使用性(Reuseability)
      
傳統的重複使用方案並無法兼顧可維護性與可重複使用性的目標，物件導向設計的重複使用方式可在含有宏觀商業邏輯的抽象層次的上層結構來考量，以達到可維護與可重複使用的目標。

物件導向類別設計的法則

開閉原則(Open-Closed Principle ; OCP)
Liskov代換原則(Liskov Substitution Principle ; LSP)
依賴倒轉原則(Dependency Inversion Principle ; DIP)
介面隔離原則(Interface Segregation Principle ; ISP)
組合/聚合重複使用原則(Composition / Aggregation Principle ; CARP)
Demeter原則(Law of Demeter; LoD)


開閉原則(Open-Closed Principle ; OCP)



        模組應當敞開擴充大門，但關閉修改之窗
      
      。
如何達成開閉原則，關鍵在抽象化。
不允許更改的是系統的抽象層，允許擴充的是系統的實作層。
OCP的另一個角度是EVP對可變性的封裝原則(Principle of Encapsulation of Variation)即找到一個系統的可變因素，並將之封裝起來。
可變性必須被封裝，那不同的可變性呢？應用繼承來處理，因此繼承應被視為封裝變化的方法，但繼承的層數避免超過2層以免不同的可變性混和。
應避免將單純的流程控制轉移語句改寫成多型，除非內含了某種商務邏輯。
所有的設計樣式(Design Pattern)都是針對不同的可變性封裝，使系統在不同的角度上達到開閉原則。


      Liskov代換原則(Liskov Substitution Principle; LSP)



        子類別應該可以使用其基礎類別替代
      
      。
Liskov代換原則是繼承之所以能重複使用的基石，只有當衍生類別可以替換掉基礎類別，且軟體的功能不受影響時，其類別才算真正的被重複使用，而衍生類別也才能夠在基礎類別的基礎上增加新的行為。
Liskov代換原則要求凡是基礎類別使用的地方，衍生類別一定適用，故衍生類別必須包含全部基礎類別的介面

      針對違反LSP設計時可行的重構(Refactoring)方式
      
當類別A錯誤的繼承類別B時，可建構一個新的抽象類別C，作為2個具體類別A,B的父類別
當類別A錯誤的繼承類別B時，可重構為類別B委派(Delegate)類別A



      依賴倒轉原則(Dependency Inversion Principle; DIP)



        要依賴於抽象，而不要依賴於具體
      
      。

      依賴倒轉原則的策略是依賴介面或抽象方法及類別，而不是具體方法或類別，包括了下列情況都得遵循DIP
      
變數的類別宣告
參數的類別宣告
方法的傳回型態宣告
型態的轉換

抽象層級含有宏觀和重要的商務邏輯，具體層級含有與實作有關的演算法語次要的商業邏輯，而傳統的程序性設計或錯誤的類別規劃會讓抽象層級依賴於具體層級，因此依賴倒轉原則可倒轉此一現象，讓實作改變時，商業邏輯無須變動。
一個具體Java類別應當只實作Java介面和抽象Java類別中宣告的方法，而不應當給出多餘的方法。

      若Java程式要參照一個物件，若此物件有一個抽象型態，則應使用此抽象型態作為靜態型態(Static Type)
      
靜態型態(Static Type) = 實際型態(Apparent Type)：變數被宣告時的類別
實際型態(Actual Type)：變數所參照的物件真實型態

若一個物件存在其抽象類別，就應當在任何參照此物件的地方使用抽象類別

      Java語言中建構一個物件的程式是違背OCP與DIP的，但可在此類別被建構出來後過多型性使得使用端依賴於其抽象類別。
      
List employees = new Vector();

DIP是最難實作的原則，因為會使用到物件工廠就會產生大量的類別。
DIP假定所有的具體類別都是會變化的並不完全正確，因為某些具體類別是相當的穩定因此並不需要為此發明一個抽象型態。


      介面隔離原則(Interface Segregation Principle; ISP)

由客戶端指定的許多介面比一個一般用途的介面好。 
使用多個專門的介面比使用單一的總介面要好，否則會造成對介面的污染(Interface Contamination)。
一個類別對另一個類別的依賴性應當是建立在最小的介面上的。


      組合/聚合重複使用原則(Composition / AggregationPrinciple ; CARP)
Demeter原則(Law of Demeter; LoD)


      統一塑模語言(Unified Modeling Language ; UML)

由Rational software corporation融合了物件導向三劍客的方法論，統一了以物件導向分析與設計的表示法，於1997年11月由
      OMG(Object Management Group)
      公佈為物件導向視覺化塑模的標準，目前
      最新的版本為 2.0 (2003/06/01)
UML是一種塑模語言，而非方法論，它並沒有規範符號的使用時機與次序僅利用符號來達到溝通的目的，從分析，設計到實作都可以使用同一套符號來表達，因此應用時可以搭配適合的方法論。
UML之所以重要，就是因為他有助於軟體開發人員之間的溝通。我們必須在某種程度上使用他以協助溝通，而非阻礙溝通。
循序圖、合作圖合稱互動圖。

      UML設計的理念
      
使用個案導向(強調以使用者的角度來定義功能需求)
軟體架構設計(強調系統開發要有藍圖)
往覆，漸增式流程(強調降低專案風險)


使用個案圖(Use Case Diagram)

以OO技術開發系統時在需求分析時常利用典型的情節(Scenario)來進行需求塑模，這種個案模式一直沒有統一的表達方式直到Ivar Jacobson等人(1996) 才將使用個案的表達正式化。 
使用個案圖表示從使用者之觀點描述系統的行為者與系統間之互動行為與關係，包含了行為者和使用個案二個元件，此法在資料與展示格式上僅利用文字描述，若能搭配結構化中的藍圖與資料詞彙則可補強其不足之處。
使用案例是專業分工的依據，是專案進度評量的重要因素。

行為者(Actor) = 參與者

環境中與系統有互動關係的人或事物，有該使用個案的啟動者即
      
        主要行為者(Primary Actor)
      
      與其他參與者即
      
        次要行為者(Secondary Actor)
      
      。
參與者被繪製成一個火柴棒形狀的小人並將名稱置其下方。 

使用個案(Use Case)

使用者透過介面要求系統所做一系列相關的事件流，包含了最主要的事件即
      
        基本路徑(Basic Course)
      
      與其他衍生事件或可能發生的錯誤即
      
        替代路徑(Alternative Courses)
      
      。
使用案例被繪製成橢圓形並將名稱置於圖形內部或底部來表示 

      使用個案間的關係：
      
關聯(association)：使用個案與行為者之間的關係，以實線段表示。

        包含(Include)：一個使用個案會用到另一個使用個案，二個或以上的使用個案具有相同的行為模式時，可將該段行為模式獨立出來成為一個新的使用個案，再建立包含的關係，用一個虛線實心箭頭的線段並含有關鍵字 <<include>>  。
延伸(Extend)：在某情況下，使用個案會插入另一使用個案的定義中，用一個虛線實心箭頭的線段並含有關鍵字 <<extend>> 。

        一般化(Generalization)：一個使用個案繼承另一個使用個案的行為，
        用一個實線空心箭頭表示的線段從子使用個案指向父使用個案，且箭頭朝向父使用個案端。


情節(Scenario)

      使用個案中的某一個單一執行路徑，可能是基本路徑也可能是替代路徑。
    
建構使用個案圖的步驟

找出行為者：從環境圖找
找出使用個案：由行為者找出使用個案
描述使用個案：可用自然語言或事件條列式
找出使用個案間的關係：
繪製使用個案圖

類別圖(Class Diagram)

表示系統存在之類別、介面及它們間之靜態資料結構與邏輯關係

      通常以三層表示
      
類別名：正體字：具體類別，斜體字：抽象類別，介面：<interface>
屬性層：
方法層：


      屬性與方法有四種封裝方式
      
public:以符號
        
          + 
        
        表示
private:以符號
        
          -
        
        表示
protected:以符號
        
          # 
        
        表示
static:以符號
        
          _ 
        
        表示

描述介面的類別圖：沒有private的封裝
描述物件的類別圖：描述類別的實體，名稱下需加底線

關係

      類別間的關係包括了
    


      依賴 / 相依(Dependency)
      
使用的關係，表達一個類別會用到另一個類別
另一個類別的改變會影響到使用他的類別，但反之不必然
一類別的區域變數，方法參數，方法返回值，對靜態方法呼叫時是另一個類別時稱之
以虛線開箭頭表示。------->


      一般化(Generalization)
      
繼承的關係，包括了類別間的繼承，介面間的繼承，類別對介面的實作等
以實線空心箭頭表示。


      關聯/結合(Association)
      
同一層級的類別間靜態的結構關係
Java語言中是使用實體屬性實作的
其關係有雙向與單向，建議多用單向
關係有基數(Multiplicity)，關係有名稱，但通常均予以省略

        以實線段表示。 —
        

          依關聯的類別個數來分
          
二元關聯(Binary Association)
多元關聯(n-ary Association)


          依描述整體與部分的關係來分(不同層級的類別)
          
聚合 / 聚集(Aggregation)：以實線且整體端加一個空心的菱形表示。◇—
合成 / 組合(Composition)：整體物件需負責部分物件的生命週期，以實線且整體端加一個實心的菱形表示。◆—




      實現化(Realization)
      
以介面實現其他類別之描述
以虛線空心箭頭表示。


基數(Multiplicity) =多重性 

      在類別連線上與類別之旁以數字標示與之關聯的數量。
    
物件圖(Object Diagram)

描述系統於某一時間點的靜態結構，也稱為案例圖，包含了
      物件
      與連線二個元件。
物件間的關係稱為連線(Link)。

循序圖(Sequence Diagram)

以時間發生之先後順序來表達物件間的訊息傳遞與處理之程序，包含了類別之物件、訊息、操作、生命線與控制焦點等元件。

      循序圖有2個象線
      
垂直象線依照訊息呼叫發生的時間順序，來描述訊息呼叫的先後次序。
水平象線描述一個物件實體傳送訊息給哪一個物件實體。


訊息(Message) =刺激(Stimuli)

      由某一物件傳送訊息至另一物件以啟動操作，以上下位置表示順序。
    
生命線(Lifeline)

      表達物件再某時段的存在，以物件下與物件垂直之虛線表示。
    

      控制焦點 (Focus of Control) =啟動條(ActivationBar)

      表達物件執行某動作之時段，與生命線重疊且以高瘦的矩形表示。
    
系統邊界 (System Border) 

      系統與外界溝通之介面，通常放置在循序圖的最左側。
    
建構循序圖的步驟

確認物件
描述操作
描述訊息
繪製循序圖

合作圖(Collaboration Diagram)

著重表達物件間之連結結構，並能同時展現物件間的訊息傳遞與處理之程序，包含了類別之物件、連結、訊息與操作等元件。
Rational Rose可將循序圖直接轉換成合作圖。 
合作圖與循序圖相比較，少了物件生命線與焦點控制，多了路徑與序數

連結(Link)

      以直線連接二個物件也就是物件間的路徑(Path)。
    
訊息(Message)

      訊息發生順序以自然數或杜威數等編號來表達。
    
活動圖(Activity Diagram)
狀態圖(State Diagram)
元件圖(Component Diagram)
部署圖(Deployment Diagram)


      樣式理論(Pattern
      Theory)

研究一再發生的典型事例，以便研究者可以研習至融會貫通，舉一反三，推陳出新的理論，叫做樣式理論。
樣式不是發明，而是發現

      現代樣式理論：建築設計學家 亞歷山大 Christopher Alexander提出
      
無名之
        
          質
        
        (The Quality Without a Name ; QWAN)


          門
        
        (The Gate)


          道
        
        (The Way)：又稱作「永恆之道」(The Timeless Way)

Alexander認為 透過追尋「道」，可以通過「門」到達「質」是任何一種工程設計的發展過程


        「樣式是某外在背景環境 (Context) 下﹐對特定問題 (Problem) 的慣用解決之道 (Solution)
        」 
      
      。
樣式是不斷的重複發生，而有其重複性。但重複的不是問題的本身，而是問題的本質，所以要把不同問題以相同的樣式來處理，勢必要擷取其本質，也就是『抽象』。所以研究樣式必須重視問題本質而非問題的表象。同樣的問題的背景環境及解決之道也是抽象的。 
設計樣式是對軟體設計模型進行不斷追求完善的使用工具，但樣式的使用無絕對的公式，需要經過大量的個人實踐才能熟練掌握。
重構(Refacotrying)是對不滿意的程式碼進行彌補的時候所需要的技術，因此重構的存在證明瞭樣式並非軟體設計的銀彈(Silver Bullet)

      樣式的要素
      
名字(Name)
問題(Problem)
初始環境(Initial Context)
力(Forces)
解答(Solution)
舉例(Examples)
末態環境(Resulting Context)
推理(Rationale)
相關樣式(Related Patterns)
已知應用(Known Uses)


      樣式的種類
      

        設計樣式(Design Patterns)：GoF提出
        
建構型樣式(Creational Pattern)
結構型樣式(Structural Pattern)
行為樣式(Behavioral Pattern)

架構樣式(Architecture Patterns)
分析樣式(Analysis Patterns)：Martin Fowler提出
反樣式(Anti-Patterns)

物件導向樣式的經典：四人幫(Gang of Four ; GoF) 即Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides等四人，於1995年出版之 
      
        Design Patterns
      
      - Elements of Reusable Object-Oriented Software這本經典著作，包含23種軟體設計樣式，例如MVC Pattern，將軟體設計分為Model、View和Control三個部分，Model是屬於企業邏輯的部分，例如網路購物的交易機制；View是使用者介面的設計；Control則串連Model與View的程式碼。



      關聯式資料庫的正規化(normalization)
定義

      若關聯表中每一欄位的值都是唯一而不可分割的(Atomic)，則稱之為正規化
    
關聯式資料庫的鍵(Key)

候選鍵(Candidate key)：能在資料表中將各列分別出來的欄位(一個資料表可以有多個)
主鍵(Primary key)：從候選鍵中選出來作為主要鍵的欄位
替代鍵(Alternate key)：其他未被選為主鍵的候選鍵欄位
連結鍵(Concatenated key)：指候選鍵是由多個欄位所組成

一階正規化 (First Normal Form; 1NF)

      又稱為平坦檔(Flat File)，若關聯表中的任一行與任一列的交叉格(Cell)上均只有一個值，但會有插入，刪除，更改等異常(Anomalies)
    
二階正規化 (Second Normal Form; 2NF) 

      符合一階正規化的關聯表，再除去資料的
      
        部分功能相依(Partial Dependency)
      

      (將1NF中由部分主鍵就可以決定其值的欄位移出成為另一個關聯表)
    
三階正規化 (Third Normal Form; 3NF) 

      符合二階正規化的關聯表，再除去資料的
      
        遞移相依(Transitive Dependency)
      

      (將2NF中由非由主鍵決定其值的欄位移出成為另一個關聯表)
    
Boyce-Codd正規化 (Boyce-Codd Normal Form; BCNF) 

      符合三階正規化的關聯表，再除去任何因功能相依所造成的異常結果
    
四階正規化 (Fourth Normal Form; 4NF) 

      符合BCNF正規化的關聯表，再除去所有的多值相依
    
五階正規化 (Fifth Normal Form; 5NF) 

      符合四階正規化的關聯表，再除去剩餘的所有異常情況
    


      CMMI(Capability Maturity Model Integrated)
CMMI的由來

      美國國防部對於軟體的策略是希望外包(outsourcing)的，但為了掌握軟體 產品的品質與進度，希望開發過程能夠透明化，因此於1980 年時，提出對軟體承包商的軟體開發能力進行評估的要求。於是美國國防部與卡內基美隆大學(Carnegie-Melon University ; CMU)共同設立了軟體工程研究所(Software Engineering Institute; SEI)  
    

      SEI於1988年研究發佈了軟體開發程序成熟度框架(CMM)，提供了軟體開發程序評估和軟體能力評價兩種評估方法和軟體成熟度提問單，來自產官學的技術和管理專家陸續進駐該機構，開始對工、商、政府提供產品和服務。 1991年，SEI將軟體開發程序成熟度框架 提升為軟體能力成熟度模型(Capability Maturity Model For Software，簡稱SW-CMM)，並發佈了最早的SW-CMM 1.0版。2000年底SEI發表了
      CMMI
      ，
      整合軟體工程(Software Engineeing ; SW)、系統工程(Systems Engineering ; SE)、
      產品與流程發展(Integrated Product and Procss development , IPPD)與供應商來源管理
      (Supplier Sourcing ; SS)的整合模式。從此以後，CMMI就與CMM並行。
    
CMMI的成熟等級

      SEI 試圖在軟體界建立一套工程般的制度，讓個人和組織在軟體開發上能有改進的依據。SEI 的 Capability Maturity Model (CMM) for Software 已經成為許多軟體公司所採行的標準，用作為改進公司內部軟體工程的依據。
      
      根據 CMM 的定義，軟體工程的成熟度分成五個等級，簡單介紹如下： 
    


      CMM-Level 1（initial）：軟體程序漫無章法，程序未被定義。專案流程無統一程序，專案計劃的成功仰賴於工作人員個別的努力。
      
參與範圍：
        
          個人
        

CMM-Level 2（repeatable）：已建立基本的管理與分析的程序(
      
        Measurement and Analysis ; MA
      
      )，對成本、時程、和職務權責能加以追蹤、查詢。已有作業程序所須具有的紀律，所以有能力重覆使用相類似的專案成功的案例與經驗。
      
參與範圍：
        
          專案或團隊
        
流程重點：需求管理(Requirements Management)


      CMM-Level 3（defined）：屬於管理和工程的活動都已設計、定義好，並且文件化，完整地整合成組織內的標準作業程序。各個專案計劃延用標準程序或被認可的標準程序修改程序。
      
參與範圍：
        
          組織或公司
        
流程重點：需求發展(Requirements Development;REQD)，驗證(Verification;VER)，確認(Validation;VAL)


      CMM-Level 4（managed）：組織可收集詳細的軟體程序以及軟體產品的量測資料。軟體作業程序和產品都有一組量測的數據，可讓工程師和經理們瞭解程序和產品的狀況。
      
參與範圍：
        
          組織或公司
        
流程重點：Quantitative Project Management(QPM) 


      CMM-Level 5（optimized）：評估革新性的新技術，做反省與提升，有規則地依序導入採用，以持續不斷地改進程序。
      
參與範圍：
        
          組織或公司
        
流程重點：Causal Analysis and Resolution(CAR) 


CMMI實施

      CMM是一種軟體開發的流程標準，可說是種軟體開發的品質保 証，就像ISO是組織管理的品質保証一樣。細分之下，CMM/CMMI分成五級，從第一級（level 1）到第五級（level 5），分別標示軟體公司流程管理的競爭力程度，一級只要提出申請即可列入，不需經過審查，而到第四級為可做質量管理，第五級則為最佳化，可預防缺陷。
    

      軟體先進國家都已體認到CMM/CMMI的重要性。目前全球約有700餘個包括公司及組織的單位通過CMM認証。其中最難的四、五兩級，全球各自有73與67個單位獲得，多數集中在美國及印度，其他則以個位數分佈在澳洲、蘇俄、以、法、新加坡等國。 
    

      我國行政院於91年11月院頒之『行政院所屬各機關資訊業務委外服務作業參考原則』中，亦明訂通過CMMI 評鑑得列為採購加分項目。
    


      參考書目


      Software Engineering 6th Edition; SOMMERVILLE; addison wesley;ISBN:020139815
吳仁和，林信惠;系統分析與設計;智勝出版 ISBN:9577292194
河合昭男;學習物件導向的第1本書;博碩文化; ISBN:9575275373
Fowler，Scott; UML精華第二版; �眳p; ISBN:9575667557
閻宏 ; Java與樣式理論 ; �眳p ; ISBN:9864214179 
賀元，賴明宗，劉燈 ; 世紀末軟體革命/C++,GUI與物件導向理論;傳徵(股)公司;ISBN:9579996504
賀元，賴明宗，劉燈 ; 世紀末軟體革命2;資訊人文化事業;ISBN:9579964092



      網路資源


UML 參考手冊

物件導向的天空

物件導向的軟體發展

沒人在乎軟體工程

軟體工程的弔詭

點空間

軟體設計的思維

朝陽科大呂瑞麟老師的系統分析與設計講義

淺談UML

測驗




迴首頁 Main Page


主 網 站：http://peterju.notlong.com
(目前轉址至 http://irw.ncut.edu.tw/peterju/)




|

|

|



|

|



This work is licensed under a
Creative
Commons License








需求分析 - 維基百科，自由的百科全書






























 







需求分析

維基百科，自由的百科全書


					前往：					導覽，					搜尋








軟體開發過程


核心行動




需求分析
軟體設計
軟體構造（英語：Software construction）
軟體測試
偵錯
軟體部署（英語：Software deployment）
軟體維護




軟體開發模式




軟體工程
瀑布模型
淨室（英語：Cleanroom software engineering）
疊代建模（英語：Incremental build model）
螺旋模型
V模型（英語：V-Model (software development)）
敏捷軟體開發




方法和框架




軟體原型（英語：Software prototyping）
快速應用程式開發（RAD）
統一流程（英語：Unified Process）
極限編程
團隊軟體流程（英語：Team software process）
個人軟體程式
動態系統開發方法（英語：Dynamic systems development method）
MSF（英語：Microsoft Solutions Framework）
Scrum
看板 (軟體開發)
Dual Vee Model（英語：Dual Vee Model）
測試驅動開發
ATDD（英語：Acceptance test–driven development）
行為驅動開發
FDD（英語：Feature-driven development）
DDD（英語：Domain-driven design）
MDD（英語：Model-driven_development）
疊代式開發
精益軟體開發
DevOps




軟體開發輔助領域




軟體配置管理
基礎設施作為代碼（英語：Infrastructure as Code）
軟體文件
軟體品質保證
軟體專案管理（英語：Software project management）
使用者經驗
WinOps（英語：WinOps）




軟體開發工具




編譯器
偵錯工具
效能分析
GUI設計器（英語：Graphical user interface builder）
建模（英語：UML tools）
整合式開發環境（IDE）
組建自動化
發布自動化（英語：Application release automation）
測試




標準和BOK




能力成熟度模型整合
IEEE標準（英語：IEEE_Standards_Association）
ISO 9000
ISO/IEC標準（英語：ISO/IEC JTC 1/SC 7）
SWEBOK（英語：SWEBOK）
專案管理知識體系
BABOK（英語：BABOK）







閱
論
編





在系統工程及軟體工程中，需求分析指的是在建立一個新的或改變一個現存的系統或產品時，確定新系統的目的、範圍、定義和功能時所要做的所有工作。需求分析是軟體工程中的一個關鍵過程。在這個過程中，系統分析員和軟體工程師確定顧客的需要。只有在確定了這些需要後他們才能夠分析和尋求新系統的解決方法。
在軟體工程的歷史中，很長時間裡人們一直認為需求分析是整個軟體工程中最簡單的一個步驟，但在過去十年中越來越多的人認識到它是整個過程中最關鍵的一個過程。假如在需求分析時，分析者們未能正確地認識到顧客的需要的話，那麼最後的軟體實際上不可能達到顧客的需要，或者軟體無法在規定的時間裡完工。



目錄


1 挑戰

1.1 主要困難
1.2 持有關鍵資訊的人
1.3 軟體開發者
1.4 解決方法


2 主要技術

2.1 採訪持重要資訊的人
2.2 需求工作會
2.3 將需求列成合同式的檔案
2.4 原型（Prototype）
2.5 用例（Use Case）
2.6 確認持關鍵資訊者


3 參考文獻
4 延伸閱讀

4.1 英文書籍


5 外部連結
6 參見



挑戰[編輯]
順利地完成需求分析是一個艱巨的挑戰。首先要確認所有持有關鍵資訊的人本身就不容易，然後還要從這些人獲得可用的資訊，把這些資訊轉化為清晰的和完整的形式。同時分析者還要考慮到可能的限制。除此之外他們還要考慮一個專案的

是否可行
是否在規定的時間裡可以完成
價格上是否負擔得起
是否合法
是否符合道德

一個新專案開始的時候人們往往還非常興奮，往往試圖輕視需求分析的必要性。但對過去專案的分析證明一個徹底的和無情的需求分析可以降低一個專案的耗費和降低其技術風險。
主要困難[編輯]
隨著工程師對需求分析的越來越重視，今天我們對需求分析的主要困難也理解得比較清楚：

需求分析需要由有充分的經驗、技術知識和語言技巧的專家來完成；
顧客一開始所提出的需要，往往不完全、太樂觀以及過分受老的系統或過程的影響；
使用複雜的工具和不同的技術來進行需求分析往往會打消獲得一個完整的和細緻的結果的希望。

持有關鍵資訊的人[編輯]
顧客有可能妨礙需求分析順利進行，有以下幾種可能性：

顧客不明白他自己需要什麼
顧客不願將他們的需要固定在一系列寫在紙上的條例中
在價格和時間確定後，顧客堅持要求新的需要
分析者與顧客的通訊太緩慢
顧客不參加回顧或無法參加回顧
顧客缺乏技術上的知識
顧客缺乏對軟體開發的知識

軟體開發者[編輯]
但是軟體開發者也有他們的責任。由於軟體開發者收錢來開發他們的軟體，他們的責任就更加不可推脫了。由軟體開發者導致的困難有：

軟體工程師與他們的顧客往往使用不同的詞彙。有時他們以為互相之間完全達成協定，但是在展示最終結果時卻發現並非如此。開發者有義務剋服這個困難，他們拿了顧客的錢，因此有這個義務。
軟體開發者往往喜歡將顧客的需要改變得能使它們符合一個已存在的系統或模式，而不願按照顧客的需要來發展一個新的系統。
需求分析往往是由程式設計師完成的，而不是由作業分析員完成的。程式設計師往往缺乏理解實際事物的執行過程和商業過程的技巧。

解決方法[編輯]
解決這些困難的一個方法是使用專業的作業或系統分析員，這些專業人員通過專門訓練來填補商業和電腦世界之間的鴻溝的。這個方法可以達到一定的效果，但從顧客方面來說要找到相應的有類似技巧的人就相當困難了。此外今天為需求分析所使用的方法依然還有很大的缺陷，它們還不夠有效。
1990年代以來，新的技術有製作原型、統一建模語言（UML）、用例（Use case）和敏捷軟體開發等方法。
主要技術[編輯]
需求分析有可能在一個專案中成為一個漫長、艱巨的工作。需求分析專家與他們的顧客交談、記錄他們的交談結果、分析他們收集的資訊，從中提取互相矛盾的地方，總結出一個總體觀念，然後再與顧客交談他們發現的問題。這個過程可以不斷重複，在有些專案中這個過程可以伴隨著整個生命周期。
新系統很可能改變人之間的關係和人的工作環境，因此認定誰是重要的資訊持有者是非常重要的。只有這樣在需求分析的過程中才能夠將顧客所有的需要都紀錄下來，只有這樣才能保證他們認識到新的系統對他們來說帶來怎樣的變化。出於下述原因這個要求往往達不到：

與顧客的交談不夠多和不夠徹底，一些重要的需求被忽視；
顧客的反應不說明問題，顧客對新系統的特徵不滿。

為了使所有這些討論有條理、有組織和有效地被記錄下來，這些討論的過程和其內容的演化也必須被記錄下來。
分析員可以使用不同的技術來從顧客手中獲得需求。比較老的方式有採訪顧客，或者與顧客一起開座談會，列舉顧客的需求。比較新的技術有建立模型和使用用例。在最佳狀態下在採納了不同的技術後他們可以完全理解顧客的需要和與持重要資訊的人建立了必要的聯繫。
採訪持重要資訊的人[編輯]
採訪持重要資訊的人是需求分析中一個必不可少的過程。但在一個大的系統中許多人必須被採訪，這需要許多時間和金錢，但最重要的是這個過程最可能顯示現有的業務流程與新系統中的業務流程之間的差別。不同的顧客有可能有不同的或甚至相對的需求，在這種情況下分析員必須協調各方的需要。
需求工作會[編輯]
出於上述原因一般假如一個系統非常複雜的話需求分析最常用的方法是召開需求工作會，在需求工作會上分析員和持重要資訊的人一起分析系統的需要和發展解決方案。
這樣的工作會最好不要在採訪物件的工作場進行，這樣採訪物件才不會被打擾。工作會有一個負責人來保持會議的行程，一個記錄員來記錄會議的討論，投影儀和相應的軟體是常用的工具。一般需要進行多次會議後才能得到最終結果。
一般認為需求工作會可以節省不少時間，因此是一個非常有用的工具，但是往往很難同時將所有的持重要資訊的人聚集到一起。
一個常見的缺陷是一些持重要資訊者在這樣的會議上不十分積極，因此他們的需求沒有獲得必要的重視。這樣得到的解決方案必然有限。此外需求工作會是一個很好的分析現有系統的工具，但用它來尋求解決方案就不是十分有用了。
將需求列成合同式的檔案[編輯]
最常見的紀錄需求分析的方式是將顧客需求列入一個合同式的表。對於一個複雜的系統, 該檔案可以長達數百頁。現代的分析員不願使用這樣的列表，因為它們被證明相當無用，但它們依然相當常見。
優點：

提供一份需求的清單。
提供一份顧客和開發者間的合同。
對一個大的系統來說它提供了一份高階的描寫。

缺點：

這些列表可以長達上百頁，實際上沒有人能夠完整地閱讀這樣的檔案來獲得一個完整的系統理解。
列表中的需求一般都很抽象和缺乏關聯

這樣的列表一般表示不列出需求之間怎樣組成一個整體。
從列表中很難看出哪些需求更重要。
抽象後的列表為讀者提供了許多理解的餘地，因此不同的讀者對檔案的理解可能不同。一個專案越大，讀者越多，理解的方式就越多。
從抽象後的列表中很難看出它是否完全。它們往往忽視了許多細節。


顧客和開發者對這個列表的理解往往完全不同。
這樣的合同式的列表給顧客一個錯誤的安全感，好像他們的要求都已列入了。但是由於列表本身對細節問題不能細述因此許多關鍵的細節問題實際上並未列出和解決。這些問題一直到後來軟體開發時才被發現。那時開發者一般要與顧客再次討論並試圖按他們的意願和條件來解決。
這個列表對此後的系統設計不提供任何幫助，它們的結構無法直接進入新軟體。

原型（Prototype）[編輯]
從1980年代中開始，越來越多的人將作原型看作是解決需求分析困難的辦法。原型模擬最終軟體的螢幕顯示，這樣用戶可以看到最終軟體將是什麼樣，而實際上在這些螢幕顯示的背後還一切都空著呢。這樣顧客可以在系統還沒有建立之前就做出設計決定。當原型首次被使用的時候它們的效果被視為非常驚人。引入原型往往提高顧客與開發者之間的資訊交換。原型的螢幕顯示後來往往很少被改變，因此可以大大地降低費用。
但此後十多年的實際應用，證明雖然原型是一種有用的技術，但它也有它的缺陷：

經理人員在看到原型後，往往不理解為什麼還要到一段時間後，最終設計才能完成。
設計師往往將拼湊在一起的原型碼用到後來真正的系統中，因為他們怕在再次編碼時「浪費時間」。
原型幫助解決設計決定和使用者介面的設計，但是它們並不提供任何關於需求的資訊。
設計師和顧客有可能花費太多的時間和精力來設計使用者介面，而忽視對作業過程的關心。

用例（Use Case）[編輯]
參見用例
用例是一種記錄新系統或軟體更換時的需求的技術。每個用例包含一個系統在作業時與用戶或與其它系統之間交換資訊的場景。一般用例避免使用術語，而儘量使用顧客、用戶或他們的專家的語言。一般用例由軟體開發者和顧客一起寫成。
在1990年代中用例很快地成為了記錄需求分析的最主要的方式。尤其在它的發源地，在物件導向的程式設計中它的普及性非常高。但用例不僅可以用在物件導向的程式設計系統中，實際上用例本身並非物件導向的。
每個用例集中於描寫如何來完成一個作業目標或任務。對傳統的軟體工程來說每個用例描寫系統的一個特點。對大多數軟體專案來說一個新的系統有多個（往往十幾個）用例。不同的軟體專案的格式或專案的進展都可能影響用例的細節性。
用例描述系統在執行時與外部執行者之間的資訊交換。外部執行者是任何系統外的、與系統交換資訊的物件或人物。它們可以是用戶、用戶的角色或其它系統。
用例將系統當作一個「黑匣子」，它從外部來看與系統之間的資訊交換（包括系統的回答）。這樣它簡化對系統的需求的描寫而且防止對系統的工作方式作任何過早的假設。
每個用例應該符合下述條件：

描寫完成作業目標的作業任務
不包含任何編程碼
有一定的細緻性
足夠短，一個程式設計師應該可以在一個版本的工作中，獨立完成這個用例所描寫的作業過程。

在描寫功能需求時用例非常好用，但它們不適合描寫非功能需求。
確認持關鍵資訊者[編輯]
從1990年代開始確認持關鍵資訊者被確定為一個非常關鍵的過程。它同時也是需求分析的第一步。此前經理人員往往被認為是持關鍵資訊者。許多系統是按照這些經理人員的設想設計的，而實際的用戶很少或根本沒有對設計做任何貢獻。這樣的系統往往是大失敗。因此在1970年代和1980年代在軟體工程師中漸漸地持關鍵資訊者的概念擴充功能到主要用戶，後來還擴充功能到次要用戶。在1990年代中工程師們更加從一個系統整體的觀念上來確定持關鍵資訊者。他們漸漸認識到不但在僱傭他們的顧客中有持關鍵資訊者，其他持關鍵資訊者包括：

與顧客橫向相連（或應該橫向相連）的組織
顧客的後勤辦公室或類似的組織
高階經理人員

成功地確認持關鍵資訊者是完整地完成需求分析的基礎。
參考文獻[編輯]

延伸閱讀[編輯]
英文書籍[編輯]

Laplante, Phil. Requirements Engineering for Software and Systems 1st. Redmond, WA: CRC Press. 2009. ISBN 1-42006-467-3. 
McConnell, Steve. Rapid Development: Taming Wild Software Schedules 1st. Redmond, WA: Microsoft Press. 1996. ISBN 1-55615-900-5. 
Wiegers, Karl E. Software Requirements 2: Practical techniques for gathering and managing requirements throughout the product development cycle 2nd. Redmond: Microsoft Press. 2003. ISBN 0-7356-1879-8. 
Andrew Stellman and Jennifer Greene. Applied Software Project Management. Cambridge, MA: O'Reilly Media. 2005. ISBN 0-596-00948-8. 
Brian Berenbach, Daniel Paulish, Juergen Katzmeier, Arnold Rudorfer. Software & Systems Requirements Engineering: In Practice. New York: McGraw-Hill Professional. 2009. ISBN 0-07-1605479. 

外部連結[編輯]
參見[編輯]

業務需求分析
功能需求










閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。














閱
論
編


系統工程






分支領域



航空航天工程
生物系統工程
配置管理
Earth systems engineering and management
電機工程
Enterprise systems engineering
Performance engineering
Reliability engineering
安全工程








過程



需求分析
功能需求
系統整合
驗收
Design review








概念



業務流程
系統
System lifecycle
V模型
系統發展生命周期








工具



決策
Function modelling
IDEF
最最佳化
品質機能展開
計劃
統計分析
系統動力學
Systems Modeling Language
系統分析
Systems modeling
工作分解結構








相關領域



控制工程
電腦工程
工業工程
運籌學
專案管理
品質管理
風險管理
軟體工程











Category
Commons












 
						取自 "https://zh.wikipedia.org/w/index.php?title=需求分析&oldid=42174674"					
4 個分類：軟體需求軟體開發軟體工程系統工程隱藏分類：含有英語的條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


CatalàČeštinaDanskDeutschEnglishفارسیFrançaisGalegoBahasa IndonesiaItaliano日本語한국어NederlandsNorsk bokmålPortuguêsРусскийShqipСрпски / srpskiSvenskaதமிழ்ไทยTürkçeУкраїнськаTiếng Việt 
編輯連結 





 本頁面最後修訂於2016年11月16日 (週三) 23:07。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 









軟體工程實務－系統分析、設計與測試-金石堂網路書店














































會員功能列

 


加入會員
登入




您好
登出


會員專區
客服中心
查訂單


 
（ 0 件）0 元
結帳












購物車
（ 0 件）0 元
結帳



金石堂及銀行均不會請您操作ATM!  如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當!
    (詳情)




軟體工程實務－系統分析、設計與測試－金石堂網路書店歡迎您加入博客和facebook 臉書粉絲團！The largest retail books store chains in Taiwan! 





TOP關鍵字

2017希望書包
怪獸的產地
七龍珠
肆一 
蠟筆小新套票
抽EC






全館搜尋
中文書
英文書

雜誌
MOOK
文具
玩具親子
美妝配飾
3C
家電
運動休閒
居家生活
動漫部屋
日用清潔
食品




 

天花版bn

12345678910





購物目錄


首頁
3h快送
中文書
英文書

雜誌
MOOK
文具
美妝配飾
玩具親子
3C
家電
運動休閒
居家生活
日用清潔
動漫精品
食品






商品次目錄


新書
預購書
推薦書
套書
暢銷書排行榜
書展 / 特惠
讀者書評
出版社專區
香港出版品




 

    您的位置：金石堂網路書店
中文書
電腦資訊
網路／安全／概論
系統分析／設計
商品詳情

 


軟體工程實務－系統分析、設計與測試
                        










作者：Mint(經營
追蹤


譯者：周明憲

出版社：博碩文化  
出版社追蹤


出版日：2004/1/19

ISBN：9789575276591
語言：中文繁體
適讀年齡：全齡適讀


定價：420 元

特價：79 折 332 元 (可得紅利3點)
紅利優惠價：77 折 322 元 (折抵說明)紅利可抵：10 元 
信用卡紅利：可折抵多家銀行 (扣抵說明)
運送方式：全球配送　香港到店　國內宅配國內店取　












<<



>>


https://cdn.kingstone.com.tw/book/images/product/20147/2014712566912/2014712566912b.jpg














                           本商品已絕版無法購買
                           


金石堂讀者好評
 
0 個人說讚，看排行 >






電腦資訊分類追蹤
使用此功能請先登入金石堂網路書店正式會員。這是什麼？




分享：
                            
                           	  










書籍介紹
其他讀者也買
強力推薦
讀者好評(0)
下標籤
團體專屬服務






內容簡介
詳細資料






內容簡介 top 
《軟體工程實務－系統分析、設計與測試》
                                本書內容為提供軟體開發工程中的實務分享，經由有多年實務經驗的作者群撰寫，以圖文並茂的方式呈現，幫助讀者快速吸收與學習軟體開發相關的知識和經驗。
本書主要說明在現實的軟體開發作業中，如何實踐所說明理論的實務分享，主要適用對象為軟體開發業中有2～3年經驗的年輕程式設計師、系統工程師、軟體開發專案中的負責人等人，這些都是本書設定主要的閱讀對象。
本書共分六大章節，分別討論以下主題:●第一章 開發團隊的成立與時程的排定軟體開發專案中同心協力組成的團隊是軟體開發作業能夠成功的重要關鍵。本書一開始為了讓讀者能夠瞭解軟體開發專案的重點，本章將從「何謂軟體開發專案」之類的概論開始說明專案的體制、團隊運作的重點、時程的排定及維護時的註意事項。
●第二章 從需求分析、定義至設計在軟體開發作業中，需求定義與設計工程為決定客戶滿意度的重要流程。新的系統會決定以何種形式對客戶提供哪些功能。本章介紹需求定義、外部設計與內部設計等3個製程，並按照各個製程的作業內容與順序加以說明。同時將使作業能夠有成效的進行之重點分成需求定義與設計2方面來討論。
●第三章 程式設計作業程式設計作業會將之前只是藍圖、構想的軟體轉化成具體的「實物」。程式設計師必須能夠不偏不倚的運用現實的商業知識與專門知識來完成使命。本章探討與分享在程式設計作業中最重要的遵守時程與確保品質，並分享如何做到這二點所必須在事前制定的各項標準，以掌控整個團隊的工作。
●第四章 從測試到運轉軟體要能夠實際上線運轉，其中的品質與測試是十分重要的把關作業，本章要討論的議題即是如何確保軟體的品質和測試作業。
●第五章 軟體開發的最新話題軟體開發的觀念總是不斷的推陳出新，本章將要介紹以下幾個話題，希望可做為軟體開發技術人員的參考：物件導向開發的動向／極致軟體製程(XP)／網路服務／安全技術／以套裝軟體來開發軟體／CMMI／軟體結構管理／無塵室(clean room)手法／Critical Chain：TOC的專案管理手法／技能標準／資訊處理資格
●第六章 對SE的期待本章將說明客戶對SE（系統工程師）有哪些期待及SE如何因應客戶的期待。同時也將參與軟體開發的前段與後段作業的其他SE及程式設計師視為虛擬客戶，來說明這種虛擬客戶所期待的事情。 




詳細資料top 

                               編／譯者：周明憲語言：中文繁體規格：平裝分級：普級頁數：352
                               出版地：台灣















系統分析／設計相關書籍
延伸閱讀推薦















共0篇好評top 
寫書評去 >










商品標籤 (什麼是標籤？)

JAVA



我的標籤新增









團體專屬服務top

團體專屬服務














訂購須知top 
防治詐騙，提醒您!!金石堂及銀行均不會請您操作ATM! 如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當! 

商品運送說明：
當商品送達金石堂門市或便利商店後，您會收到E-mail及APP出貨/到貨通知，您也可透過【訂單查詢】確認到貨情況。
建議您可下載『金石堂APP』並開啟推撥設定，即可收到相關出貨/到貨通知訊息。
並請您於指定期限內取貨付款，若逾期未取，您取貨的金石堂門市或便利商店將會辦理退貨作業。
產品顏色可能會因網頁呈現與拍攝關係產生色差，圖片僅供參考，商品依實際供貨樣式為準。 

退換貨說明：
依據「消費者保護法」第19條及行政院消費者保護處公告之「通訊交易解除權合理例外情事適用準則」，以下商品購買後，除商品本身有瑕疵外，將不提供7天的猶豫期：

                            1、 易於腐敗、保存期限較短或解約時即將逾期。（如：生鮮食品）
                            2、 依消費者要求所為之客製化給付。（客製化商品）
                            3、 報紙、期刊或雜誌。（含MOOK、外文雜誌）
                            4、 經消費者拆封之影音商品或電腦軟體。
                            5、 非以有形媒介提供之數位內容或一經提供即為完成之線上服務，經消費者事先同意始提供。（如：電子書、電子雜誌、下載版軟體、虛擬商品…等）
                            6、 已拆封之個人衛生用品。（如：內衣褲、刮鬍刀、除毛刀…等）
若非上列種類商品，商品均享有到貨7天的猶豫期（含例假日）。
辦理退換貨時，商品（組合商品恕無法接受單獨退貨）必須是您收到商品時的原始狀態（包含商品本體、配件、贈品、保證書、所有附隨資料文件及原廠內外包裝…等），請勿直接使用原廠包裝寄送，或於原廠包裝上黏貼紙張或書寫文字。退回商品若無法回復原狀，將請您負擔回復原狀所需費用，嚴重時將影響您的退貨權益。










中文書籍分類

文學財經企管生活風格飲食料理心理勵志醫療保健旅遊宗教命理教育/親子教養童書羅曼史輕小說漫畫語言／字辭典藝術設計電腦資訊
程式設計
網頁設計
繪圖／影音／多媒體
辦公軟體／應用軟體
作業系統
資料庫
3C數位生活
APPLE專區
認證考試
網路／安全／概論
網路技術
雲端技術
系統分析／設計
計算機概論
電腦專業辭典


其他電腦資訊

自然科普人文歷史社會哲思考試書／政府出版品參考書全部的分類 >>




相關商品


雜誌



PC DIY! 7月2017第245期
數位狂潮DIGITREND 2017第44期
PC HOME 電腦家庭 7月2017第258期
MAXIMUM PC Spcl: BUILD IT:The Perfect PC Vol.2 2017
PC DIY! 6月2017第244期









外嵌連結
軟體工程實務－系統分析、設計與測試



在金石堂門市找此書
                         選擇縣市：

請選擇
基隆市
臺北市
新北市
桃園市
新竹市
新竹縣
宜蘭縣
苗慄市
苗慄縣
南投縣
臺中市
雲林縣
彰化縣
嘉義市
臺南市
高雄市
屏東縣

查詢












↑回上方

金石堂網路書店

首頁
關於金石堂網路書店
人才招募
客服中心
異業合作
出版情報
手機版
關於金石堂書店
金石堂書店全台門市



客服專線：02-2364-9989
傳真：02-2364-4672
客服時間：週一至週五 9：00∼12：30 及 13：30∼18：00（例假日除外）
地址：100 台灣臺北市中正區汀州路三段 160 巷 3 號 2 樓
Copyright©2016, Digital Kingstone Co., Ltd. 金石網絡股份有限公司






瀏覽本站建議使用：Internet Explorer 8.0 以上或 FireFox、Google Chrome、Safari 等瀏覽器。
本網站已依台灣網站內容分級規定處理且符合電子商務、安全交易















金石堂APP出/到貨提醒不漏接，讓您便利隨行
















.21





系統分析 - 維基百科，自由的百科全書































 






系統分析

維基百科，自由的百科全書


					前往：					導覽，					搜尋






本條目需要補充更多來源。（2012年7月8日） 
請協助添加多方面可靠來源以改善這篇條目，無法查證的內容可能會因為異議提出而移除。 






伽利略定位系統的系統分析架構


系統分析，旨在研究特定系統結構中各部分（各子系統）的相互作用，系統的對外接口與界面，以及該系統整體的行為、功能和局限，從而為系統未來的變遷與有關決策提供參考和依據。系統分析的經常目標之一，在於改善決策過程及系統性能，以期達到系統的整體最優。[1][2]
系統分析被看作是系統工程的一個重要程序和核心組成部分，以及系統理論的一項應用。 在系統開發生命周期中，系統分析階段先於系統設計，是系統開發前期不可或缺的工作。 系統分析大量借用數學模型、數學分析、計算機模擬等定量分析方法，試圖在具有不確定約束或邊界條件的情況下，對系統要素進行綜合分析、描述，得出較為準確或合理的結論。
在信息技術領域，系統分析的發展相對比較成熟，並與計算機系統及軟體工程中的需求分析有著密切的關係。 隨著計算機技術、運籌學的普及以及結構化分析、規約語言等系統分析方法的發展，系統分析方法在跨學科領域也獲得日益廣泛的應用，被用於研究、分析、改善許多複雜系統。
相關條目[編輯]

系統科學
系統工程
系統理論
需求分析
系統分析師
企業架構
運籌學
解決問題
可行性研究
敏感度分析
管理信息系統
決策支持系統
設計

參考資料[編輯]


^ SYSTEMS ANALYSIS
^ Tom Ritchey, Analysis and Synthesis











閱
論
編


系統工程






分支領域



航空航天工程
生物系統工程
配置管理
Earth systems engineering and management
電機工程
Enterprise systems engineering
Performance engineering
Reliability engineering
安全工程








過程



需求分析
功能需求
系統整合
驗收
Design review








概念



業務流程
系統
System lifecycle
V模型
系統發展生命周期








工具



決策
Function modelling
IDEF
最優化
品質機能展開
計劃
統計分析
系統動力學
Systems Modeling Language
系統分析
Systems modeling
工作分解結構








相關領域



控制工程
計算機工程
工業工程
運籌學
專案管理
品質管理
風險管理
軟體工程











Category
Commons












 
						取自 "https://zh.wikipedia.org/w/index.php?title=系統分析&oldid=45214717"					
3 個分類：系統工程系統理論分析隱藏分類：自2012年7月需補充來源的條目拒絕當選首頁新條目推薦欄目的條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


العربيةAzərbaycancaБеларускаяCatalàDeutschEnglishEspañolEestiفارسیFrançaisGaeilgeעבריתՀայերեն日本語Қазақша한국어NederlandsਪੰਜਾਬੀPolskiPortuguêsRomânăРусскийSlovenčinaShqipSvenskaไทยTürkçeУкраїнськаTiếng ViệtWinaray 
編輯連結 





 本頁面最後修訂於2017年7月15日 (週六) 15:54。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 
































系統分析師、程式設計師_國立臺灣師範大學_資訊工程學系 - 104人力銀行












                        系統分析師、程式設計師                        
國立臺灣師範大學_資訊工程學系
本公司其他工作



我要應徵
處理中...
儲存工作
處理中...


0~5人應徵
FB 分享
轉寄
檢舉







工作內容

依據專案需求進行系統分析、系統研發及系統管理。專案大多以資訊教育相關資訊系統為主，包括教學系統、輔助教學系統、評測與檢定系統等。除了資訊專案系統開發外，亦有機會參與各項資訊教育推廣活動。歡迎願對我國資訊教育發展做出貢獻之資訊工程師加入計畫行列。 薪資待遇除了月薪外，可享有一年1.5月年終獎金。經審核符合需求條件者即通知面試，未符合者恕不另行通知。

職務類別：

電腦系統分析師、Internet程式設計師、軟體設計工程師 






認識「」職務

詳細職類分析(工作內容、薪資分佈..)
更多相關工作




工作待遇：
月薪 5萬元 至 6萬元
工作性質：
全職
上班地點：

	                                    臺北市文山區汀州路四段88號 (台灣師範大學資訊工程系)







地圖找工作




管理責任：
不需負擔管理責任
出差外派：
無需出差外派
上班時段：
日班，08:30~17:30
休假制度：
週休二日
可上班日：
一個月內
需求人數：
2至3 人




條件要求


接受身份：
上班族
工作經歷：
2年以上
學歷要求：
大學、碩士
科系要求：
資訊工程相關
語文條件：

英文 -- 聽 /中等、說 /中等、讀 /中等、寫 /中等

擅長工具：
不拘
工作技能：
系統架構規劃、系統整合分析、軟體工程系統開發、軟體程式設計、網路程式設計、資料庫程式設計
其他條件：
未填寫




公司福利

勞保，健保，週休二日



聯絡方式


聯絡人：
鄭巧莉小姐





更新日期：2017-07-14


與系統分析師、程式設計師相關的工作

推薦工作
104 智能管家依據您平常儲存、應徵工作的喜好，為您推薦工作！請先登入My104 會員中心



看過此工作的人也看以下工作
推薦課程




瀏覽工作紀錄
清除







104提醒：
求職應徵請準時赴約並註意安全。如有公司要求您交付提款卡及密碼、信用卡、銀行郵局帳號、身分證，及要求繳費、購買服務或產品等情事，請勿進行並速與警方反詐騙專線165聯繫。看更多>>


















































                 工程系統分析的概念–程序式及啟發式系統







工程系統分析的概念
–程序式及啟發式系統
 
丁冠中、方煒
 
本文刊載於1991 環控農業機械工程研討會專輯 

一、程序式系統分析
  
a.數學模式的建立
    針對某〝工程化〞系統，當吾人須要從事實驗以求達更多的資訊以求能對該系統有進一步的瞭解，則通常
    (1) 對實際的系統進行實驗。
    (2) 對〝模式〞系統進行實驗，此即所謂的模擬
    模式系統可以是：
    (1) 縮小或同尺寸的實體模式，或者
    (2) 一數學模式（由一個或一組方程式組成，允許由獨立變數值去計算相關
       變數值）。
  
b.工程化系統的設計
    (1) 技術性的–須滿足科學上及工程上與涉及諸參數相關的定律。
    (2) 經濟上的–須使成本為最少或能有最大的回數（即投資回收的最佳化）。
    (3) 其他考慮因素–政治上、社會上、美學上的等。
 
    工程化設計的產品為一份包括計算、討論、結論及（或）草圖等的報告。
 
  
c.可行的及最佳的設計
    可行的設計造成可行的系統，此系統允許所有給定的工作能順利執行並滿足所有系統的限制。最佳系統是一可行的系統，並具有最佳的（通常不是最大就是最小）目標函數值，所謂的目標函數乃是由可行系統的相關參數中推衍出來的函數，此函數的計算值可用來評估諸可行系統的優劣。
 
  
d.組成模式的建立
 
    假設一完整的模式可分成多個組成模式，各組成模式可以一或多個數學方程式來模擬，此方法允許我們由幾個已知的參數值來計算各組成成本的參數值。此模式至少有兩點優於其他模式，譬若同尺寸或縮小尺寸的實體模式。
 
    (1) 可借助於電腦作數值模擬。
    (2) 對諸組成模式作分析可應用最佳化的數學理論。
 
    有兩個常見的方法：
 
    (1) 由數據上推導：曲線湊配(curve fitting)，馬可夫鏈(markov's chain)。
    (2) 由理論上推導。
 
  
e.數值系統模擬
 
    (1) 系統：一系列彼此相關的組成部份合稱〝系統〞。

一系統可以是

離散(discrete)或連續式(continuous)、
靜態(static)或動態(dynamic)、
決定式(deterministic)或機率式(stochastic)等。


    (2) 模式的建立：基於可代表該系統的方程式來發展電腦程式稱之。
    (3) 模擬：更動一個或多個輸入條件執行電腦程式的過程稱之。
 
    主要步驟：
 
    (1) 將問題公式化。
    (2) 對各組成成份發展數學模式。
    (3) 構建系統模式以包括所有組成模式。
    (4) 由系統模式求解（由已知參考值求未知參數值）
    (5) 模式的驗證。
    (6) 實用。
 
  
f.系統模式的輸出
 
    (1) 序列式計算–此程序在觀念上是既簡單又明顯，當一個好的資訊流程圖能夠事先建立。
    (2) 並行式計算–須要求解聯立方程組（包括線性或非線性）。
 
  
g.系統的最佳化
 
    (1) 問題的建立
        目標函數：    Y(X1,X2........Xn)
        限制：  等式   E1(X1,X2......Xn)=0
                       
em(X1,X2......Xn)=0
                不等式 
i1(X1,X2......Xn)<=L1
                       
ij(X1,X2......Xn)<=Lj
        最佳化的觀念：
            求出滿足所有的限制式且能得到最佳的（通常不是最大即最小）目標
            函數值的一系列條件（即X1,X2......Xn的值）
        方法：不同的問題可以不同的方法求解，常見的方法包括微分法、搜尋法
            、動態規劃、幾何規劃及線性規劃等。
 
  
h.實例（方等1990在羅格斯大學發展的電腦軟體：參考文獻4）。
 
  
i.推理機器。
 
二、啟發式系統
  (一)人工智慧(AI)
 
    (1) 專家系統（推理）
    (2) 機械人（工作規劃）
    (3) 影像處理（視覺）
    (4) 自然語言處理
    (5) 語音識別
    (6) 自動程式設計
 
  (二)何謂專家系統
 
    (1) 定義：專家系統是一包含實例與規則的電腦程式，通常針對某一特定的範圍可以以專家認定高水準的能力來協助解決問題。
 
    (2) 特徵：
 
        Ⅰ 具專業知識–具有一有限範圍的知識庫。
        Ⅱ 啟發式–符號式的推理能力，良好的猜測能力。
        Ⅲ 知識庫與推理機分離–允許對知識庫作修改或增減。
        Ⅳ 允許對未知作推理–泛晰推理方法。
        Ⅴ 瞭解自己知識的來源–可以解釋求得結論的各個推理的步驟。
        Ⅵ 可以自我學習–神經網。
 
    (3)特色：
 
        Ⅰ 如同具高水準的專家聚於一堂，省掉顧問費等。
        Ⅱ 預測模式發展的能力  predictive modeling power。
        Ⅲ 常駐性–儘管主畏的成員離開了，知識仍在。
        Ⅳ 可當訓練設備使用–減短學習時間。
 
    (4) 知識工程化：建構一專家系統涉及如何由專家處擷取知識，經分析、整理
            、歸納並最後將此知識以程式語言寫入電腦。
 
    (5) 專家系統的結構–須包括如何建構適當的知識庫以及如何才能有效的運用
          這些知識。
 
    (6) 知識的組成及呈現–連接實例和規則。
 
        Ⅰ 規則式：IF condition THEN 
action
        Ⅱ 框架式：各實例構成節點，由諸實例間的關係連接諸節點形成層次的
           網路。
 
    (7) 專家系統（人工專家）與人類專家的比較。
 



人  類  專  家


人  工  專  家




可能死亡


永存的




不容易作知識轉移（須透過教育）


容易轉移（拷貝）




不容易對求得的結論提出解釋


容易解釋求得之答案




難以預測


非常統一




昂貴


在可接受程度內




具開創性


缺乏開創性




具學習能力


須要教導（新的理論可使E.S.具學習能力）




擁有感觸的經驗


符號或輸入




知識範圍涵蓋較廣


狹益的知識範疇




具普通常識


只懂專業知識



       
    
(三)何時使用專用系統
 
        (1) 沒有涉及許多數學計算的問題。
        (2) 通常可從知識及觀念上來解決的問題。
        (3) 診斷類的問題。
        (4) 涉及不安性的問題。
        (5) 由人類專家在一有限的小的時間內可解決的問題。
        (6) 相關資訊可建構成一系列關係式的問題。
 
   (四)專家系統之應用分類
 
 
                  
      表二、專家系統應用之分類



類別


問題所在




1. 解譯


預測現況並解說所偵測之資料




2. 預測


對已知之情況預測其發生之次序




3. 診斷


由觀察預知系統功能有問題之地方




4. 設計


在某種限制下，描述物體之形狀




5. 規劃


設計各種動作




6. 監測


比較觀察之值及期望產生之結果




7. 偵錯


描述功能失效時之補救措施




8. 修護


執行補救措施所預設之計劃




9. 指導


診斷、偵錯及修護學生之實習錯誤




10.控制


控制系統之所有作為



                          

   (五)專家系統如何做成
 
         1. 不需要普通常識。
         2. 僅需要認知技巧。
         3. 專家存在並能說明。
         4. 專家同意的解答。
         5. 工作不甚困難。
         6. 充分瞭解工作性質。
 
 
   (六)何時是專家系統正當的發展
 
         1. 工作解決耗費甚鉅。
         2. 人類專家可能失傳。
         3. 人類專家甚為罕見。
         4. 不同場合需要專家。
         5. 惡劣環境需要專家。
 
   (七)何時是專家系統適切的發展
 
        1. 性質：工作需用符號操縱、工作需用推理解決者。
        2. 複雜度：工作並非十分容易者。
        3. 範圍：工作有其實用價值者、工作合乎管理範圍。工作之範圍不
               
能太廣泛或太一般化，必須適宜的狹窄而可處理的問題。
 
 
    
(八)專家系統發展的步驟
 



發展步驟


步驟敘述




示範原型


系統只解決程式之部份問題，其主要目的在說服提供金錢的客戶或進行某一觀念之測試。屬小型系統，約50-100個規則。其發展時間約 1-3 個月。




研究原型


屬中型程式，規則約為200-500條。可以展示值得信任的解題功能，但仍缺少足夠的測試和修正。發展時間約 
  1-2年。




區域原型


系統展示良好，有適度之可靠性，包含有較順暢及友善的介面。規則集約 500- 
  1000 條，發展時間需 2-3年。




生產模式


已經廣泛被使用及測試之區域原型。具有可信度高、快速和有效的功能。此種系統為數甚少，規則在 500-1500條間，發展時間約需 2-4 年。




商用系統


系統是一個生產模式、用於正規商務之作業均可獲正確的結論率達90-95%。如XCON，其規則超過3000條，發展時間超過六年。



                     

    
(九)專家知識的取得
 
        1. 知識來源：大部份來自領域專家。
                     
其他部份來自參考書、報告、實驗資料、專題研究等。
        2. 領域專家：(知識工程之反論者)
           a.有能力之領域專家愈多，其能用於解題的知識能力愈少。
           b.自己不能成為領域專家。
           c.不能盡信專家所說的話。在解題時讓專家示範規則之使用。
        3. 自領域專家取得知識的技巧：
           a.就地觀察：觀察。
           b.討論問題：發現。
           c.說明問題：解說。
           d.問題分析：測試/偵察。
           e.系統之修正：採用不同之情況進行測試，並加以修正。
           f.系統之測試：專家的評論。
           g.系統之驗證：進行比較及估驗。
 
   (十)目前專家系統在農業上之應用
 
     佛里達大學(UNIV. OF FLORIDA)

作物研究設備之管理(Management of crop research facility)
農業資訊存取系統(Agricultural information retrieval systems)
大豆雜草管理系統(Weed management in soybean)
中央旋轉式灌溉時序之規劃(Scheduling of center pivot irrigation)
溫室蕃茄環境控制器(Tomato greenhouse environment controller)
溫室即時監控系統(Real time 
greenhouse monitoring and control)

     喬治亞大學(Univ. of Georgia)

超級市場農產品之處理系統(Produce handling in supermarket store)
 
     肯達基大學(Univ. of Kentucky)

家畜場通風設備診斷系統(Troubleshooting livestock ventilation systems)
 
     麻州大學(Univ. of Massachusetts)

農產品加工工程應用(Process engineering applications)

     明尼蘇達大學(Univ. Minnesota)

電壓變化關係咨詢系統(The stray voltage advisor)

     普渡大學(Purdue Univ.)
 
大豆油粹取系統(Soybean oil extraction) 
玉米或大豆高產要求下，耕耘系統之選擇 (Tillage system 
selection for maximum corn/soybean yield) 
 豬舍通風問題診斷系統(Troubleshooting 
swine ventilation problems)
木材砍伐設備之選擇(Timber harvesting equipment selection)
油壓系統問題之診斷(Diagnosing problems in hydraulic system)
甜瓜生產系統(Muskmelon production)
印地安那州選擇性作物之評估系統 (Assessing alternative crops in Indiana)
榖類市場分析(Grain marketing analysis)

     德州大學(Texas A&M Univ.)
 
聯合收穫機之性能診斷(Troubleshooting combine performance)
農業機械管理系統(Machinery management) 
昆蟲學門應用(Entomology)
病蟲害防治咨詢系統(Pest management advisor)

     琴州技術學院(Virginia Tech)

環境保護規劃(Conservation planning)

     羅格斯大學(Rutgers University)

溫室盆栽作物生產系統(Greenhouse potted plant production)
溫室系統設計及操作(Greenhouse systems design and operation)
單果串蕃茄生產系統(Single-truss tomato growing systems)
整合溫室生產決策支援系統 (Decision Support for Integrated Greenhouse Production Systems)
溫室被覆資材選擇系統 (Glazing selection system)


 三、參考資料

 
Anonymous. 1986. 
Personal consultantTM Easy-Getting Started, Texas Instruments Incorporated.
 
Barrett J. R. and 
D. D. Jones, Editors. 1989. Knowledge Engineering in 
Agriculture. An ASAE Monograph Number 8 in a series published by ASAE. 2950 Niles Rd., St. Joseph, MI 49085-9659.
 
Buchanan B. G. 
and E. H. Shortliffe. 1984. Rule-Based Expert Systems-The MYCIN Experiments of the Standardford Heuristic 
Programming Project. Addison-Wesley Publishing Co. 748p.
 

Fang, W., K.C.  Ting and G.A. Giacomelli. 1990. Optimizing Resource Allocation  for Greenhouse Potted Plant Production. Transactions  of  the ASAE, 33(4): 1377-1382. 

Forsyth, R. 
Editor. 1984. Expert Systems-Principles and Case Studies. Chapman and Hall, Ltd. 231p.
 
Hayes-Roth, F., D. 
B. Lenat, Editors. 1983. Building Expert Systems. Addison-Wesley Publishing Co. 444p.
 
 Waterman,  D.  A.  1986.  A Guide to Expert Systems. 
Addison-Wesley. Publishing Co. 419pp.
 
Stoecker, W. F. 
1980. Design of Thermal Systems, 2nd ed., McGraw-Hill Book Company, 310pp.









課程大綱










工程系統分析ENGINEERING SYSTEM ANALYSIS






開課系所 Department/Institute:  水利系          Hydraulic and Ocean Engineering
開課教師 Instructor:   吳嘉文 ;周乃昉 Chou, Nine-Fang               
開課學年 Academic Year:   0102
開課學期 Semester:    2
開課序號 Serial Number:   111

課程屬性碼 Attribute Code:   HOE 3001 
課程碼 Course Number:   E830100 
分班碼 Class Code: 
學分數 No. of Credits:           3
課程語言 Medium of Instruction:   中文


課程網址 Course Website: 

先修課程或先備能力 Prerequisite Course(s):   課程名稱：微積分(一)
銜接課程相關說明：極值求解      

教師聯絡資訊 Contact with Teacher
  	    電話 ：分機63269
e-mail： hyd4691@mail.ncku.edu.tw       

助教資訊 Contact with Tutor


學習規範 Course Policy


評量方式 Grading


方法百分比%

期中考 Midterm Exam
50期末考 Term exam
50




教學方法 Teaching Strategies
      講授    

		※請遵守智慧財產權觀念  不得不法影印
		 Please follow the Intellectual Property instruction and No illegal copy
	

課程教材 Course Material
	    Meredith, D.D., K.W. Wong, R.W. Woodhead, and R.H. Wortman, Design & Planning of Enginering Systems, 2nd ed., Prentice-Hall, 1985.    

參考書目 References
	    Smith, A. A., E. Hinton, and R. W. Lewis, Civil Engineering Systems, Analysis and Design, John Wiley & Sons, 1983.
雷萬清 譯，"工程系統設計與規畫"  (Meredith etc. 原著, 1st ed., 1973) 中國土木水利工程學會發行, 科技圖書公司經銷。    

備註 Remarks





基本素養 Basic Literacy
□ 人文素養
 Spirit of Humanism
□ 公民素養
 Civic Concern
■ 工程倫理
 Engineering Ethics
□ 環境與社會關懷
 Environmental and Social Caring
□ 國際視野
 Global vision
 

核心能力 Competence
■ 運用數學、科學及工程知識的能力。
 The ability to apply the knowledge of mathematics, science and technology.
■ 設計與執行實驗，以及分析與解釋數據的能力。
 The abilities to design and implement experiments, as well as to analyze and interpret data.
■ 執行水利及海洋工程實務所需技術、法規及使用工具之能力。
 Possessing the skills, rules and tools to execute hydraulic and ocean engineering operation.
■ 水利及海洋工程系統設計、施工與維護管理之能力。
 The skills to design, construct, maintain and manage Hydraulic and Ocean systems.
□ 有效溝通與團隊合作的能力。
 The abilities of project management, effective communication and team work.
■ 發掘、分析及處理問題的能力。
 The abilities to search, analyze and solve problems.
□ 認識時事議題，瞭解工程技術對人，環境、社會及全球的影響，並培養持續學習的習慣與能力。
 Be aware of current global issues, understand how engineering technology influences the environment, community and the world, as well as develop self-learning habits and abilities.
□ 理解專業倫理及社會責任。
 Understanding professional ethics and social responsibility.
 

課程概述 Course Description
       以系統程序解析工程之規劃、設計、建造及營運。包括用經濟或社會觀點建立問題之分析目標，及透過數學優選分析求得最佳解決方案。主題有：系統化之工程程序、系統模式、經濟分析、風險評估、微積分優選法、線性圖、線性規劃、敏敢分析、網路分析、計劃評核術、非線性規劃、動態規劃、多標的優選法、決策分析、系統模擬。 

課程學習目標 Course Objectives    
	    工程師在規劃、設計或經營一工程系統以解決問題時，不僅需處理技術問題，亦需體認社會目標，並將之融入工程計畫之規劃、設計、施工及營運當中。故工程師欲善盡專業的社會責任，應具有多層面的觀點與訓練，從而運用其判斷以行決策，並承擔決策施行後之責任。實際執行須以系統觀點對問題進行解析，所學習之系統程序為：首需對此問題之發生環境與限制條件有所認識，據此建立相關的求解目標以確立問題；其次，明確定義出問題並予以模式化；再同時考慮不同的替代解決方案，從中選擇一最佳方案以付諸實施；最後進行考核、檢討與修正。    

課程進度 Course Outline


週次 Week進度說明 Progress Description
1系統之設計與規劃程序2問題之公式化3系統理論4系統模式5優選法基本觀念6系統估值7線性圖分析法8微積分優選法9期中考10線性規劃11非線性規劃12決策分析13系統模擬14網路規劃與計畫排程15臨界路徑分析16系統化之工程程序17期末總複習18期末考 

　以上每週進度教師可依上課情況做適度調整。The schedule may be subject to change.


課程學習融入下列議題或具有下列內涵的程度 Immersing the Following Issues or Contents
議題或內容 Issues or Contents關聯性 Correlation觀光旅遊產業 Tourism
無相關 No correlation綠色能源產業 Green Energy Industry
無相關 No correlation文創產業 Cultural and creative Industry
無相關 No correlation環境保護 Environmental Protection
間接相關 Indirect correlation人權教育 Human Rights Education
無相關 No correlation服務學習 Service Learning
無相關 No correlation性別平等 Gender Equity
無相關 No correlation法治教育 Law-Related Education
無相關 No correlation工作實務取向 Pragmatic Orientation
間接相關 Indirect correlation生命教育 Life Education
無相關 No correlation智慧財產權 Intellectual Property
無相關 No correlation環境安全 Environmental Safety
間接相關 Indirect correlation健康醫療照護產業 Health,Medical Treatment, Nursing Industry
無相關 No correlation精緻農業產業 Advanced Agriculture
無相關 No correlation生物科技產業 Biotechnology Industry
無相關 No correlation學術研究取向 Academic Orientation
間接相關 Indirect correlation 

有關課程其他調查 Other Surveys of Courses
                   1.本課程是否規劃業界教師參與教學或演講?   否            
Is there any industry specialist invited in this course? How many times? No
			
           2.本課程是否規劃內含校外實習 (並非參訪)?   否		   
Is there any in (out of) school practicum involved in this course? How many hours?  No






資策會 - 軟體需求與系統分析實務班





























資訊工業策進會˙數位教育研究所




資策會臺北-軟體開發/ 專案管理/ 人資財務課程

							【主題館】軟體架構與開發主題館

							【主題館】專案管理主題館

							【主題館】人資/財務/經營管理課程主題館






























《106/8/5開課，7月28日前報名，
						即享早鳥優惠》

~歡迎企業洽談包班需求~







										軟體架構師培訓班，同步招生中 



					軟體需求塑模與需求規格文件撰寫實務班，同步招生中 








    ◆ 課程源起








    多數專案失敗的原因在於需求無法掌握，古今中外的老生常談，知道這回事但不知如何做的大有人在。身為系統分析人員，若在初步階段沒有一套可依循的方法，後續的設計開發會遇到的困境將接踵而來，心力也大多耗費在補洞救火，致使延宕開發時程。因此，如何掌握需求是系統分析人員的「首要」任務，並且根據2009年經濟部商業司「商業服務業e化人才專業職能調查」，歸納出的4類e化人才中，系統分析師是本產業最核心的角色之一，其扮演商務與技術領域的溝通者，兼具產業知識和程式設計的能力，優秀的系統分析師應該具備系統整合、邏輯思考、需求訪談等3項重要能力。



    本課程以系統分析人員在實務上可能遭遇的情境及所需要的技巧為考量，透過兩位講師理論與實務交錯並進的引導，再加上情境模擬演練，更能協助學員深化需求蒐集(Requirement 
													Gathering)規劃、需求訪談，與分析客戶需求之能力，並瞭解系統分析的產出文件撰寫重點與表達目的。



    本課程已在業界實施多年，多年經驗顯示透過兩位老師與學員互動學習並與學員進行情境模擬演練的學習方式，以及實務經驗回饋的案例討論，可以快速提升系統分析人員熟悉系統分析作業及所需要的技巧。


    ◆ 課程目標










								學習需求蒐集規劃，對客戶安排需求訪談作業，建立需求訪談所需之技巧及能力，及執行驗證與確認作業，以確保工作產出滿足客戶需求。

 ◆ 
							課程特色










    本課程完整涵蓋軟體開發作業剖析、文件之審查技術、系統分析實務、需求訪談、情境模擬演練，以及案例討論等內容，使學員能夠實地感受分析之作業及面臨的問題，進而提昇系統分析所需之核心能力。



 ◆ 
                          適合對象










                                軟體專案開發商之業務人員與Pre-Sales、軟體系統專案經理、軟體系統系統分析師。


 ◆ 課程日期








第31期：106年8/5-8/6(週六、日白天9:00~12:30、13:30~17:00)，共2天、計14小時
													。<確定開課>

													*主辦單位得視報名情況而保留實際開課日期的變更權利 。 
													


 ◆ 上課地點








								資策會數位教育研究所，臺北市信義路三段153號10樓。 
								上課地點位於捷運大安站1號出口左轉約20公尺（農會大樓樓上）


* 上課地點與教室之確認，以上課通知函為主。


 ◆ 

招生人數








								顧及教學品質與學員的學習機會，本課程限24人。（如遇額滿，將視完成報名及繳費之時間決定優先順序）

 ◆ 課程內容









   





課程單元

課程內容大綱



時數




軟體開發與驗證確認作業





                      				。軟體系統開發作業




                      				。需求管理




                      				。系統分析人員需參與的驗證(Verification)與確認(Validation)活動及技術


3.5



系統分析作業實務





                      				。系統分析作業實務上對於軟體發展曲線的影響
									。軟體開發過程中系統分析作業的實務操作




                      				。系統分析作業要項與步驟




                      				。系統分析常見問題


3.5



需求蒐集訪談實務





                      				。如何規劃訪談的活動




                      				。如何做需求蒐集訪談




                      				。需求蒐集訪談需註意之事項




                      				。如何檢核需求蒐集訪談成效


3



實務模擬演練





                      				。實地演練


2.5




案例討論





                      				。案例討論




                      				。同仁審查演
										練




                      				。課後回顧與評量


1.5



                                  課程執行單位保留調整課程內容與講    
＊課程執行單位保留調整課程內容、日程與講師之權利



 ◆ 報名方式










                    	本課程採線上報名，請按右方【我要報名】進入報名系統 
								。 
								課程諮詢電話：(02)6631-6534 黃小姐  聯絡E-mail：wenhsin@iii.org.tw
報名確認電話：(02)6631-6535 孫小姐  
                      			聯絡E-mail：chelseasun@iii.org.tw



　




 ◆ 課程費用與繳費









								1.本課程原費用NT$10,000元(含稅)，費用含課程、講義及
								午餐餐盒。
2.凡於7月28日前完成報名並填寫繳費資料者，可享優惠價NT$8,000元(含稅)。
3.招生及最低人數： 
								本課程預計招收人數為24人，至少需達10人才予開課。 


4.團報優惠：
								兩人團報可打95折、四人團報可打9折優惠。

●團報優惠與早鳥優惠可一併使用。

●課程報名系統每個帳號僅提供一位學員報名，若為團報學員，每位皆必須完成線上報名，並於其他金額說明欄位註記「與XXX一起團報」，以利事後核對名單。

5.
課程若未如期開班，費用將全額退還。
								6.請以信用卡或即期支票支付—
●以信用卡支付者：請務必將正確信用卡資料填寫於繳費方式資料表。
●以即期支票支付者：抬頭為「財團法人資訊工業策進會」，劃線並禁止背書轉讓，以掛號寄至臺北市106信義路三段153號9樓之1
                                                    邱小姐
                              收。


 ◆ 報名確認與取消









1.已完成報名與繳費之學員，課程主辦單位將於開課三天前以E-mail方式寄發上課通知函；若課程因故取消或延期，亦將以E-mail方式通知，如未收到任何通知，敬請來電確認。
2.已完成繳費之學員如欲取消報名，請於實際上課日前以書面通知業務承辦人，主辦單位將退還90% 
                                  課程費用。
3.學員於培訓期間如因個人因素無法繼續參與課程，將依課程退費規定辦理之︰上課未逾總時數三分之一，欲辦理退費，退還所有上課費用之二分之一，上課逾總時數三分之一，則不退費。
4.本單位保留是否接受報名之權利。
5.如遇不可抗拒之因素，課程主辦單位保留修訂課程日期及取消課程的權利。


 ◆ 

                          結業證書








    
                                依資訊工業策進會ISO品質系統之「教育訓練服務程序」規定，本課程為短期班，參訓學員缺課未超過總時數五分之一者，結業時由本會核發結業證書。



 ◆ 

                          餐點服務







    
                                本課程上課期間，每天都會提供午餐，學員不需自行準備或額外付費。



 ◆ 
                          學習護照








    
                                資策會為人事行政局首批認證審定之民間學習機構，參加本課程之中小企業員工，亦可獲得「中小企業終身學習護照」認可之時數；此外，公務人員參加資策會課程，學習時數可登錄「公務人員終身學習護照」。







 
 
 
 



資訊工業策進會 數位教育研究所  版權所有，禁止侵害，違者必究。

Copyright (c) 2017 III Digital Education Institute. All Rights
      Reserved 















	中華民國計量工程學會 Chinese Metrology Society - [研討會]量測系統分析(MSA-GR&R)基礎實作(新竹班)


































個人會員(外籍人士)公司會員








                                    身分證字號：
                                    



                                    密碼：
                                    







加入會員忘記密碼









個人會員(外籍人士)公司會員








                                    護照號碼：
                                    



                                    密碼：
                                    







加入會員忘記密碼









個人會員(外籍人士)公司會員







                                    公司統編：
                                    
                                    -
                                    



                                    密碼：
                                    







加入會員忘記密碼









．學會簡介



．服務宗旨



．理監事簡介



















．學會會訊



．電子報







．意見交流



．兩岸計量交流專欄



．科學計量



．法定計量



．計量博物館



．相關法規



．計量組織簡稱



．儀器新知










此網站網頁設計程式設計由網繹數位科技製作






















































































































































                                                                     









































首頁 >> 學會活動 >>
                                                                研討會




















                                                     











                                                     
















                                                         



















                                                日期：2015/09/17
                                                ~
                                                2015/09/17
                                                研討會名稱：量測系統分析(MSA-GR&R)基礎實作(新竹班)




































                                                                    主辦單位：

                                                                     

                                                                    本會




                                                                    舉辦地點：

                                                                     

                                                                    新竹市光復路二段295號3樓恆逸資訊電腦教室 (位於工研院光復院區旁之帝國經貿大樓、永豐銀行樓上〕




                                                                    聯絡人姓名：

                                                                     

                                                                    李小姐
                                                                



                                                                    聯絡人電話：

                                                                     

                                                                    03-5743810#
                                                                




                                                                    聯絡人E-MAIL：

                                                                     

YuanRuLee@itri.org.tw














                                                        補充說明：

                                                         

                                                        ◆課程簡介量測目的在決定受測物的特性(值)，以提供客觀的決策依據。任一量測值之呈現需經由人員、標準器／儀器設備、環境、操作作業與時間等因素決定；因此量測結果(值)除伴隨量測不確定度外，量測系統/量具在現場作業過程中因應不同狀況（如不同人員、操作條件、受測物…等）下操作時，必受制於各項操作條件的影響而對量測結果衍生不同程度的風險效應，特別是對設計驗證與製程驗證等過程之效度與信度的鑑別，及對製程能力分析鑑別的危害風險，故驗證過程應評估量測系統/量具對樣品(特性)重複量測的品質（重覆性）與在不同狀況（如不同人員）下呈現的品質（再生性），以作為衡量檢測、驗證作業過程品質的基礎，及衍生應用的可用性。本課程主要以6Sigma管理、ISO/TS 16949/QS 9000/AS 9000等所提及之量測系統分析(MSA-第四版)為基礎，介紹量測基本統計概念、量測品質分析的五大觀念(穩定性、準確性、線性、重複性與再生性)，及有關量具重複性與再生性分析方法與簡易實用案例之實務(Excel或minitab)操作，課程中穿插案例的練習(一人一機實作)與討論，使學員得以實際應用與瞭解量測系統分析(第四版)內函(含FMEAQC工程表觀念)，以期對研發、製造、品管、實驗室等人員於檢測標準與儀器的應用上有所助益。課程預計招生：24人，最低開班人數：12人。◆日期：104年8月26日（星期三）09：00-17：00◆講師：工研院資深桂冠講師 鄭希龍◆課程內容 ‧標準規範與指引的要求重點 ‧MSA-GRR在設計驗證與製程驗證的必要性，及應用觀念(FMEAQC工程表觀念)探討 ‧穩定性(Stability)分析、偏差(Bias)分析、線性(Linearity)分析等案例解析 ‧量具重複性與再生性(GR&R)分析作業(含量具的解析度與鑑別力分析)與案例解析 ‧案例研討與軟體練習(Excel或minitab，配合上述內容講授) ◆費用每人新台幣3,200元。8/12日前報名者可享優惠價NT$3,000/人。





                                                        參考網址：

                                                         



詳細課程內容及報名網址







                                                        檔案下載：

                                                         

































回上頁





                                 





                                                         






















































系統分析與設計(第二版)(CD Inside) - 系統分析與設計 - 資訊與資工 | 書籍資訊 - 滄海書局‧鼎隆圖書‧滄海圖書資訊網站




















































0

購物車


首頁|
會員登入|
購物客服中心|
聯絡我們
























系統分析與設計
首頁,書籍資訊,資訊與資工,系統分析與設計






















系統分析與設計(第二版)(CD Inside)
+作者：

黃明祥著


+年份：
2011 年2 版

+ISBN：
9789866184321

+書號：
CS0332

+規格：
16開/平裝/套色

+頁數：
632

+出版商：
滄海

+參考網址：











定價

                      $

線上價$









線上團體購書(15本以上)一律享有團體優惠價格，折扣為定價打 85 折，大量購書亦可來信或來電直接與我們聯絡。









●本書撰寫的過程十分嚴謹，深入淺出方式介紹系統分析與設計之基礎理論與實務應用，　教材內容十分完整，適合做為大學部系統分析與設計課程之教科書。●本書的內容十分豐富，涵蓋系統分析與設計的理論與實務，以創意思考方式引導學習的過程，　激發讀者的想像力和創造力，相信閱讀本書一定可以激發創造力的潛能。●本書的資料內容相當豐富涉及資訊科技、管理學、人文藝術與人生哲學等多方面的領域，　讀者可以在學習過程中，將本書觀念與方法靈活的應用到工作與生活。●本書配合?一章節主題設計兩個本土化迷你個案，讀者在迷你演練過程中可以激發學習者的興趣　與創造力，培養一流的系統分析與設計的能力。●本書附錄的光碟之實務專題講座是作者從事於系統分析工作二十多年的經驗與體會，?一個實務　專題之內容均十分生動活潑，它是學習系統分析最佳的輔助教材，讀者可以輕輕鬆鬆的學習。第二版的修正除增修一些內容外，增加十八個系統分析實務專題講座的錄音檔。



黃明祥現職：國立屏東科技大學資訊管理系副教授學歷：國立中山大學資訊管理博士、國立成功大學工業管理碩士、國立成功大學工程科學學士經歷：台灣機械公司資訊處組長、源盛科技公司專案經理、國立屏東科技大學資訊管理系助理教授專長領域：系統分析與設計、物件導向分析、軟體專案管理著作[1] 黃明祥 編譯，「豐田式生產管理」，大坤書局，民國六十六年。[2] 黃明祥 編譯，「實用工廠管理學」，科技圖書公司，民國六十九年。[3] 黃明祥 編譯，「生產管理實務」，科技圖書公司，民國六十九年。[4] 黃明祥 編譯，「成本管理」，大坤書局，民國六十九年。[5] 黃明祥 編譯，「日本企業成功的條件」，書泉出版社，民國八十一年。[6] 黃明祥 編著，「管理資訊系統」，松崗電腦圖書公司，八版，民國八十一年。[7] 黃明祥 編著，「系統分析與設計」，松崗電腦圖書公司，十二版，民國八十八年。[8] 黃明祥 編著，「軟體工程」，松崗電腦圖書公司，四版，民國八十一年。[9] 林信惠、黃明祥、王文良 著，「軟體專案管理」，智勝文化事業，民國九十四年七月，再版。



Chapter1 緒論Chapter2 系統分析師Chapter3 資訊系統開發的程序Chapter4 系統分析的基本概念Chapter5 需求分析Chapter6 資料塑模Chapter7 流程塑模Chapter8 可行性分析與建議書Chapter9 系統設計的概念Chapter10 資料庫設計Chapter11 介面設計Chapter12 物件導向開發方法Chapter13 統一塑模語言──靜態模型分析與設計工具Chapter14 統一塑模語言──動態模型分析與設計工具Chapter15 系統分析與設計在軟體專案之應用Chapter16 物件導向分析與設計的應用實例－－新一代自動販賣機的產品開發之範例(本章收錄於隨書光碟中)
















































會計



會計學
中級會計
高級會計
成本會計
管理會計
審計學
會計資訊系統
財務報表分析
政府與非營利事業會計
國際會計
會計理論
審計資訊系統
稅務會計
鑑識會計與舞弊查核
會計其他




經濟



經濟學原理
個體經濟學
總體經濟學
管理經濟學
財政學
經濟數學
環境經濟學
計量經濟
勞動經濟
都市經濟
土地經濟
國際政治經濟
國際經濟
比較經濟
經濟發展
經濟問題分析
經濟專題
高等總體經濟學
經濟其他




國際貿易



國際貿易相關課程
國際物流




財務



財務管理
投資學
金融市場
金融機構
貨幣銀行
選擇權
固定收益(債券市場)分析
衍生性金融證券評價
不動產投資
個人理財
風險管理
保險學
保險風險
財務數值方法
企業評價
利率學
投資心理學
信託實務
財務數學
債券市場
投資分析
投資組合
股票評價
公司財務
財政思想史
國際金融
財務工程
國際財務管理
財務經濟
投資倫理
財務分析
投資哲學
投資銀行
財務其他




企業管理



企業概論
管理學
策略管理
個案研究
決策分析
組織行為
組織理論與管理
組織發展
組織結構
人力資源管理
領導學
員工福利
員工訓練與發展
行銷學/行銷管理
國際行銷學
顧客關係管理
廣告管理
業務人員與銷售管理
通路管理
零售管理
門市營運管理
消費者行為
行銷研究
服務業行銷
企業行銷
網路行銷
國際企業
電子商務
商業自動化
知識管理
專案管理
服務業(生產)管理
企業倫理
創業管理
創新管理
中小企業管理
企業談判
企業經營診斷
公司治理
行銷策略與規劃
商業文書
定價策略
企業研究方法
觀光行銷
商業智慧
企業管理其他




數學



微積分(偏理工)
微積分(偏商管)
數學導論
數論
高等微積分
分析理論
線性代數
微分方程
偏微分方程
離散數學
工程數學
實變函數論
複變函數論
管理數學
數值分析
幾何學
向量分析
圖論
組合論
線性規劃
數理規劃
傅立葉分析
壽險數學
轉換方法論
矩陣
向量微積分
精算數學
MATHEMATICA
測度論
拓樸學
代數學
數學其他




機率與統計



機率論
統計學
商業統計
線性模式分析
迴歸分析
商業預測
時間序列
多變量分析
數理統計
高等統計
推論統計
統計方法
抽樣方法
研究方法
實驗設計
可靠度分析
統計資料分析
工程統計
社會統計
生物與醫護統計
存活分析
S, S-PLUS
SPSS
統計輔助軟體
保險風險理論
類別資料分析
離散資料分析
矩陣模式分析
縱貫性分析
隨機過程
無母數統計
臨床試驗分析
財務統計
估計與近似值理論
質性研究方法
醫療統計學
巨量分析/大數據分析
機率與統計其他




資訊與資工



計算機概論
管理資訊系統
資訊科技與資訊概論
程式語言概論
C
C++
C#
JAVA
FORTRAN
COBOL
Visual Basic
系統分析與設計
資料結構
物件導向
軟體工程
計算機組織
組合語言
作業系統
系統程式
UNIX
LINUX
資料庫概論
資料庫系統
資料庫管理系統
資料庫應用Access
資料與電腦通訊
網路安全
資訊安全
演算法
區域網路
資料倉儲與資料探勘
多媒體
多媒體通訊
軟體專案管理
決策支援系統
電腦繪圖應用程式
MATLAB
數位教學
通訊網路
網路程式設計
數位學習
Python
資訊與資工其他




工業工程



生產與作業管理
高等生產管理
作業研究與管理科學
人因工程
工業工程管理
工作研究
品質管理
全面品質管理
國際品質管理
可靠度
設施規劃
工廠管理
物流管理與運籌
供應鏈管理
採購管理
物料管理
存貨管理
科技管理
系統模擬
排程
工程經濟學
企業資源規劃
職業安全
最佳化工程
自動化製造
產品開發
電腦整合製造
產品資料管理
系統工程
國際物流
系統動力學
工業工程其他




社會與心理



心理學
社會心理學
兒童心理學
工業心理學
管理心理學
變態心理學
教育心理學
人格心理學
健康心理學
成人發展與老化
心理學研究方法
青少年健康
認知心理學
社會與心理其他




醫務管理



醫療管理
醫療品質管理
醫療人力資源管理
醫療財務管理
醫療資料管理
醫療服務管理
醫療經濟學
醫療概論
健康事業
醫務管理其他




物理



大學物理
學院物理
生活物理
熱物理
熱力學(偏物理)
電磁學(偏物理)
光學
傅立葉光學
雷射
X光繞射
凸鏡設計
近代物理
固態物理
量子物理
粒子物理
核物理
超導體
物理數學
古典力學
力學
波
天文學
物理實驗
MATHEMATICA(偏物理)
量子力學
物理其他




化學與化工



普通化學
有機化學
有機合成
有機實驗
分析化學
儀器分析
物理化學
化學數學
化工(化學)熱力學
程序控制
輸送現象與單元操作
高分子化學
陶瓷材料
奈米材料
奈米技術
生物化學
無機化學
化工安全
化學實驗
通識化學
固態化學
化工概論
光譜學
分子光譜學
生物質譜學
催化作用
薄膜合成與分離技術
有機金屬
藥物化學
觸媒
物化數學
化學與化工其他




電子與電機



電路學
電路學相關
電子學
電子學實驗
電機學
數位電子學
類比電子學
運算放大器
電子學相關
數位邏輯設計
數位訊號處理
影像處理
聲音處理
線性系統
訊號與系統
通訊系統
電磁學(偏電子電機)
光纖通訊
通訊電子學
射頻微波電路
天線
展頻分析
行動通訊
通訊相關
顯示器
光電工程
光纖
雷射電子學
光學(偏電子電機)
矽光子學
數位控制
控制相關
半導體製程
積體電路
電子材料
VLSI
微機電
半導體物理與元件
半導體相關
通訊網路
類神經網路
無線網路
網路相關(偏電子電機)
電機機械
電力系統
電力電子
電力相關
單晶片
微處理機
嵌入式系統
資料壓縮
數位系統設計
數位邏輯實習
訊號處理單晶片
回授控制
系統晶片
控制系統
電機工程
電磁相容
電子與電機其他




機械工程



靜力學
動力學
靜力與動力
材料力學
高等材料力學
振動力學
結構力學
力學(偏機械)
機械力學
黏性力學
生物力學
固力相關
流體力學
熱力學(偏機械)
熱傳學
輻射熱傳
對流熱傳
熱傳與質傳
冷凍空調
燃燒工程
內燃機
壓縮流與氣體動力
機械元件設計
電腦輔助設計與機械製圖
控制系統
動力系統(中等動力學)
系統動力
機電整合
自動化工程
機器人學
材料科學導論
塑膠加工
工程材料
有限元素法
奈米工程
能源
汽車引擎
柴油引擎
焊接
摩潤學
MATLAB(偏機械)
油壓系統
燃料電池
機械製造
連體力學
機動學與機構學
系統工程
機械工程其他




航空工程



空氣動力學
飛機結構
航太概論
飛機保養與維修
飛機電子學
飛機動力學
飛行概論
飛機力學
衛星導航系統
航空管理
飛行力學
航空交通控制
飛機設計
飛行控制與模擬
航空工程其他




土木工程



結構分析
給水工程
水文學
水資源工程
輸砂理論
石造結構
鋼筋混凝土
預力混凝土
電腦輔助結構分析
建築材料
結構力學
土壤學
土壤力學
基礎工程
交通工程
舖面工程
交通計畫
施工設備
施工專案管理
地理資訊系統
遙感探測
土木電腦輔助應用
測量資訊相關
環境影響評估
物業管理
運輸規劃
營建管理
土木工程其他




環境工程



環境科學
環境工程
水化學
環境化學
環境化學檢測
環境化學分析
污水工程
地下水學
有毒廢棄物管理
固體廢棄物
廢棄物管理與資源回收
空氣污染防治工程
噪音污染控制
污染防治
生態學
生態工程
環境影響評估
環境毒物學
環境控制系統
環境土壤化學
氣象學
環境工程其他




生命科學



生物學
微生物學
分子生物學
生物技術
生醫材料
生物資訊
人類發展學
食品科學
遺傳學
高等遺傳學
作物培育
寄生蟲學
組織學
生醫工程
生命科學其他




護理



護理
護理少量進口書籍 




休閒觀光與餐飲



休閒產業分析
觀光學
餐飲服務管理
渡假村作業管理
餐旅管理
餐飲成本控制
旅館前臺管理
收益管理
餐旅服務管理
餐旅採購管理
餐旅財務管理
餐飲業




化妝品科學



化妝品化學
化妝品原料
其他




其他



國文類
日語類
英語類
商事法
合作社法
公平交易法
金融法
稅務行政
地球科學
森林測量
地質學
人體解剖
論文寫作
談判
綠色科技
工程英語
綠色創新設計
憲法
教學設計
保險
其他




 

帳號


密碼


驗證碼





忘記密碼 | 註冊



訂閱 / 取消滄海電子報

 











書籍資訊|
會員服務|
教師專區|
新聞中心|
購物客服中心|
電子報|
加入會員|
邀請作者|
服務諮詢|
員工專區|
網站使用須知|
隱私權政策


2014 © 滄海書局‧鼎隆圖書股份有限公司.  All Rights Reserved.     Designed by WDD
地址：臺中市西屯區臺灣大道三段540號11樓電話：(04)2708-8787傳真：(04)2708-7799E-mail：thbook@tsanghai.com.tw




0

購物車




 




