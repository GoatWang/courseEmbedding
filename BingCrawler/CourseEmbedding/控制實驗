









控制實驗法 - MBA智庫百科









 
 















控制實驗法

出自 MBA智庫百科(http://wiki.mbalib.com/)


目錄

1 什麼是控制實驗法
2 控制實驗法的特點
3 控制實驗法的優缺點
4 控制實驗法的步驟
5 控制實驗法主要關註的條件


[編輯]什麼是控制實驗法
　　控制實驗法是指研究在室內進行，而且研究進行時對某些實驗因素加以人為的控制。這種方法適用於圍觀的、探究因果關係的研究。因此它們的實驗對象人數不多，常為幾十人。
　　在傳播學中，控制實驗主要是用於測試特定的信息刺激或環境條件與人的特定心理或行為反應類型之間的因果關係。它是由庫爾特·盧因（kurt.lewin）和霍夫蘭這兩位傳播學先驅從實驗心理學中引入傳播研究領域的。這一方法需要在經過特殊設計的專門的實驗室中進行。實驗室內應配有閱讀機、錄音機、放映機以及各種記錄、測量反應的儀器，對實驗室的形狀、燈光、色彩等也會有特殊的要求。試驗進行時必須人為地控制某些變數以觀察特殊變數與傳播效果之間的因果關係。

[編輯]控制實驗法的特點
　　第一、 研究對象較少。調查法一般都是對數量龐大的調查對象進行大量的觀察和訪問，其研究對象往往被稱為“大樣本”。而實驗法則主要是探求少數變數與傳播效果之間的因果關係，其研究對象通常只有數十人，因而是“小樣本”。



市場調查方法





A


案頭調研


案例研究法


B


不重覆抽樣


C


抽樣調查


重置抽樣


抽簽法


產品留置測試


D


多維尺度法


定量研究方法


定性研究方法


典型調查法


電話調查


多階段抽樣


等距抽樣


獨立控制配額抽樣


等距量表


等比量表


E


二手資料調研


二路焦點小組


F


非概率抽樣


分層抽樣


分層比例抽樣


分層最佳抽樣


G


觀察法


概率抽樣


拐點調研


滾雪球抽樣


H


會議調查


J


焦點訪談法


經驗判斷法


隨機抽樣


家庭日記法


經銷商訪談


K


可行性研究


控制實驗法


L


聯合分析法


留置調查


垃圾調研法


類別量表


M


面談訪問法


盲測


描述性調研


媒介調查法


P


PPS


判斷抽樣


配額抽樣


平衡量表法


評價量表


配對比較量表


Q


Q分類法


R


任意抽樣


S


容量測定法


SEM模型


深層訪談法


雙重抽樣


實驗調查法


實地調研


數值分配量表


隨機號碼表法


順序量表


T


投影技法


推銷估計法


投射研究


探索性調研


W


文獻調查法


問捲調查法


網路調研


文案調查法


無準備訪問


網上調查


X


詢問法


辛迪加調研


行蹤分析


相互控制配額抽樣


Y


郵寄調查


因果性調研


Z


主觀概率法


整群抽樣


重點調查


逐戶尋找法



[編輯]

　　第二、 研究環境是在實驗室人為的環境中。而調查法的則是在廣泛的社會環境中進行的。

[編輯]控制實驗法的優缺點
　　控制實驗邏輯程式嚴密，研究者可以對實驗因素加以控制，從而突出某些變數的作用。但是，其實驗環境終究是人為設置的，與實際生活中複雜多變的狀況有一定的距離，所以實驗的結果往往會有誤差。
　　作為彌補這一缺陷的一種手段，近年來傳播實驗已經開始轉向“自然實驗法”或“社會實驗法”。這種方法就是將整個社會環境作為“實驗室”，採用多元分析的方法來進行控制實驗。

[編輯]控制實驗法的步驟
　　控制實驗有以下程式：
　　第一、確定假設命題。
　　第二、簡化因素、確定變數。在有關大眾傳播諸多因素中依實驗目的並參照有關理論或定論，選擇一對與研究目的相符的因果關係因素來作為實驗變數。
　　第三、控制與實驗。將選擇出的研究對象分為兩個組——“實驗組”和“控制組”，儘量保持兩組成員人數、年齡、性別、教育程度等變數的相同以排除這些變數在實驗中可能產生的影響。實驗過程中，這兩個組的唯一區別是接觸的包含自變數的材料不同，以此來計算因變數是否會產生相應的變化。
　　第三、 統計分析。對實驗所得的大量數據進行整理、分析，從中推出某些發現、結論，同時對實驗的假設進行驗證。

[編輯]控制實驗法主要關註的條件
　　傳播學中的控制實驗主要關註以下條件：
　　1、信源的條件——測試信源可信性與傳播效果之間的關係；
　　2、信息內容的條件——測試不同的信息內容是否會導致不同的認知和行為反應。
　　3、傳播方法和技巧的條件——測試不同的內容提示法、說理法和訴求法各自具有什麼樣的說服效果；
　　4、受傳者的社會條件——測試受傳者的各種社會屬性、群體歸屬關係、群體規範等對他們接收信息的影響。
　　5、受傳者的個性條件——測試個人的信息處理方式和習慣、自信心的強弱等個性特征對他們的信息處理過程及其結果的影響等等。





取自"http://wiki.mbalib.com/zh-tw/%E6%8E%A7%E5%88%B6%E5%AE%9E%E9%AA%8C%E6%B3%95"

本條目對我有幫助12  分享到：














   如果您認為本條目還有待完善，需要補充新內容或修改錯誤內容，請編輯條目。
本條目由以下用戶參與貢獻
Cabbage,Vulture,Zfj3000,Dan,鱸魚,Yixi,y桑,Tracy,蘇青荇. 頁面分類: 市場調查方法 





評論(共0條)提示:評論內容為網友針對條目"控制實驗法"展開的討論，與本站觀點立場無關。
發表評論﻿請文明上網，理性發言並遵守有關規定。




 




導航


首頁
文檔
百科
商學院
資訊
培訓
幫幫




個人工具


用戶登錄創建新帳號 









搜索



 
 

全球最大的中文經管百科，由121,994位網友共同編寫而成，共計414,196個條目








 
首頁
 
管理
 
營銷
 
經濟
 
金融
 
人力資源
 
咨詢
 
財務
 
品牌
 
證券
 
物流
 
貿易
 
商學院
 
法律
 
人物
 
分類索引
 




查看

條目討論編輯簡體中文繁體中文 


工具▼


鏈入頁面
鏈出更改
上載文件 特殊頁面 可列印版
永久鏈接 













導航


最新資訊
最新評論
最新推薦
熱門推薦
編輯實驗
使用幫助
創建條目
隨便看看












本周推薦
最多推薦



影響世界的100個經典管理定律產品定位五步法垃圾人定律MECE分析法巴納姆效應管理百科DISC個性測驗感性型人格約哈里窗戶PPP模式 

蘑菇管理定律猴子管理法則情緒ABC理論100個最流行的管理辭彙21天效應破窗效應懶螞蟻效應SWOT分析模型墨菲定律踢貓效應 

以上內容根據網友推薦自動排序生成









x



	   最後更改10:43, 2017年1月9日.	  
智庫首頁 - 
百科首頁 - 
關於百科 -
	   客戶端 -
	   人才招聘 -
	   廣告合作 - 
權利通知 -
	   聯繫我們 -
	   免責聲明
 - 友情鏈接

©2006-2017 MBAlib.com, All rights reserved. 


 





控制組 實驗組 的定義 | Yahoo奇摩知識+




















 









   ⌂首頁信箱新聞股市名人娛樂氣象運動App下載購物中心商城拍賣更多⋁知識+汽車機車電影字典遊戲旅遊理財房地產時尚美妝折扣城   Yahoo 奇摩知識+                        👤 登入    ✉ 信箱     ⚙ 服務說明    帳號資料 服務說明 意見回報        
















Yahoo奇摩知識+ 首頁











所有分類
 
健康
 
商業與財經
 
娛樂與音樂
 
家居與園藝
 
家庭與人際關係
 
寵物
 
懷孕與育兒
 
政治與政府
 
教育與參考
 
新聞與活動
 
旅遊
 
汽車與交通
 
消費電子產品
 
環境
 
社會科學
 
社會與文化
 
科學
 
美容與造型
 
藝術與人文
 
遊戲與休閒活動
 
運動
 
電腦與網際網路
 
食品與飲料
 
餐廳與小吃
 





世界Yahoo 








阿根廷





澳洲





巴西





加拿大





法國





德國





印度





印尼





義大利





馬來西亞





墨西哥







紐西蘭





菲律賓





魁北克





新加坡





香港





西班牙





泰國





英國與愛爾蘭





美國





越南





西班牙文







關於





關於 Yahoo奇摩知識+
社群指南
排行榜
點數與等級
部落格
如何安全地使用 Yahoo奇摩

 








 教育與參考

 考試


 看另一則問題 










            控制組 實驗組 的定義
        


請問 控制組 與實驗組的定義為何? 

那參照組和對照組呢? 

我一直搞不清楚，請好心人幫我解釋:)





 
1 個人正在追蹤 


 
 2 個解答 
2


檢舉不當使用









您確定要刪除此解答嗎？
是
否












 









抱歉，似乎發生一些問題。



Trending Now





 

解答














最佳解答: 
             實驗組  
有改變變因的組別。 

對照組 參照組 控制組  
所有條件保持原本的，沒有改變變因。 

改變一個變因(稱為操作變因)，其他變因(皆稱為控制變因)均保持不變，為實驗組。必須有一組沒有改變任何變因的，為對照組。 

例如：加電解質是否會使導電效果更好 
變因是電解質，所以要作加不同種電解質時(一組加鹽，或再加一組加醋的，或要再加其他組)的狀況，皆為實驗組。 
此時需要一組對照組與實驗組作比較，就用純水做(即不加任何電解質)，純水這組就是對照組。 




 參考資料： 
 


Angelicaretta
 · 11 年前 





1
真讚



0
真遜





檢舉不當使用


意見





 




新增意見











送出












 · 剛才不久






















 以研究為例子實驗組就是改變了研究因子而控制組則控制維持原狀之後兩組來對照看差異在哪實驗組等同對照組參照組等同控制組如果不明白那....再研究囉....呵呵





 參考資料： 
 自己 


bobo
 · 11 年前 




0
真讚



1
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久













 

檢舉不當使用

 我認為此問題違反社群指南 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此問題違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此解答違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此解答違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此意見違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此意見違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消



 

你可能對以下搜尋感興趣：


海外留學開啟全球新視野

為自己拓展視野豐富人生經驗

說走就走泰國輕鬆GO!

沖繩租車自駕遊












發問問題
通常可在幾分鐘內獲得解答！







展開»






詳細資料



詳細資料






現有問題




更多





請多詳述您的問題
上傳處理中




上傳失敗。 請上傳大於 100x100 像素的檔案
目前發生問題，請再試一次。
您只能上傳 PNG、JPG 或 JPEG 等類型的檔案。
您只能上傳 3GP、3GPP、MP4、MOV、AVI、MPG、MPEG 或 RM 等類型的檔案。
您只能上傳不超過 5 MB 的相片。
您只能上傳不超過 600 MB 的影片。
您只能上傳相片 (png, jpg, jpeg) 或影片 (3gp, 3gpp, mp4, mov, avi, mpg, mpeg, rm)。
您只能上傳相片或影片。
影片不應超過 <b>600mb/5 分鐘</b>
相片不應超過 <b>5mb</b>
影片不應超過 <b>600mb/5 分鐘</b>相片不應超過 <b>5mb</b>
  







解答問題


高雄有推薦教資訊應用與商業模式的課程單位嗎?



 

英文發音.免費學英文?



 

如果讀高職想考北藝大電影系補習有用嗎?



 

專業成人英語推薦課程 平鎮?



 


發燒問題




為明年的畢業找航空業的工作，考試需準備什麼?有人有經驗的分享我，如果是補習班，只能推薦臺中市區的~?

                  4 個解答
              

 

有哪些科學治療性功能障礙的方法?

                  4 個解答
              

 

請問maca瑪卡能快速治療性功能障礙嗎?

                  4 個解答
              

 
更多問題





大大們，能幫我解決一個問題嗎　　我高中職填志願填錯了　　把慈惠醫專填在前面
如果我種了慈惠醫專的話　　那　７／１３報到當天有辦法坐校車嘛！？慈惠在屏東　我人在高雄　但我害怕沒有校車做到屏東　　想問問看當天有沒有校車　如果沒校車怎麼辦?

             4 個解答
         

 

想要出國打工度假,但英文很爛,聽說英文不錯出國打工的工作可以賺比較多的錢,如果明年底去,有推薦補習班可以幫忙惡補嗎?再麻煩大家提供一下意見,謝謝?

             9 個解答
         

 

我小孩現在國中畢業,現在要升高中,之前都在佳音補習,有沒有推薦的英文補習班,不要文理補習班那種,我的小孩很討厭要一直考試的補習班...?

             9 個解答
         

 

  








服務條款


隱私權


RSS


















控制變數 - 維基百科，自由的百科全書






























 






控制變數

維基百科，自由的百科全書


					前往：					導覽，					搜尋

科學實驗中的控制變數（或科學常量）是整個研究過程中恆定和不變的實驗要素。控制變數強烈影響實驗結果，並且在實驗過程中保持不變，以測試從屬和獨立變量的相對關係。控制變數本身不是研究者的主要興趣。



目錄


1 用法
2 實驗
3 控制理論
4 電腦科學

4.1 舉例





用法[編輯]
在實驗中維持固定的變數是為了評估其它變數之間的關係，即為控制變數。控制變數是整個實驗中不會改變的元素，因為它的固定狀態是為了更好地理解其它被測變數之間的關係。
實質上，控制變數在整個實驗中保持不變，在實驗結果中並不是主要考量。實驗中控制變數的任何變化將使應變數（dependent variable, DV）與自變數（independent variable, IV）的相關性無效，會造成實驗結果偏斜。
實驗[編輯]
任何的系統在自然狀態中，許多變數可能是獨立的，而每一個都會影響另一個。由實驗者操作的自變數，測試對應變數造成的影響，瞭解兩者之間的關係。任何附加的獨立變量都可以是一個控制變數。
例如一個有關波義耳定律的實驗，數學模式如下：








P
V

T


=
k


{\displaystyle \qquad {\frac {PV}{T}}=k}


其中：

P 是壓力、
V 是體積、
T 是絕對溫度、
k 是常數（以能量單位除以溫度）；
表示壓力與體積的乘積與系統溫度之間的比值保持不變。

在驗證波以耳氣體定律（P * V = T）的實驗部份中，其中壓力，溫度和體積都是變量，需要至少一個保持不變，量測對這些變量的最終變化。這是為了在剩餘的變量中看到可比較的實驗結果。
如果體積作為控制變數，並在整個實驗過程中不允許改變，則「壓力和溫度」應變量之間的關係可由改變其中之一的值而快速建立。例如，如果壓力升高，則溫度必須相對應增加。
然而，如果溫度作為控制變數，並在整個實驗過程中不能改變，則改變「壓力和體積」應變量其中之一的值快速建立兩者之間的關係。例如，壓力升高，則體積必須減小。
控制理論[編輯]
在控制理論中，控制變數是一個控制系統的輸入，控制系統的輸出會隨控制變數而變化。
電腦科學[編輯]
在電腦科學中，控制變數是用來調整程式控制流程的變量。
舉例[編輯]

迴圈中的控制變數是用來控制迴圈執行的次數，迴圈每執行一次，控制變數會遞增（若是控制變數下數的迴圈，控制變數則會遞減）。
控制變數可用來識別程式的狀態(電腦科學)（英語：State (computer science)）。





 
						取自 "https://zh.wikipedia.org/w/index.php?title=控制變數&oldid=44156689"					
3 個分類：實驗自動控制計算機科學 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


CatalàEnglishفارسی한국어Simple English 
編輯連結 





 本頁面最後修訂於2017年4月28日 (週五) 01:49。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 













mbed 基礎教學實驗 - GPIO控制 - Single.9


















































































跳至內容區



Single.9
電子、電腦、網路、科技與新知。

選單










mbed 基礎教學實驗 – GPIO控制 

 


在上一篇教學文章中，我們學會瞭如何操作 mbed LPC1768 這個板子上面的四顆 LED 燈號。今天這篇文章，則是要來教各位利用 LPC1768 上的 GPIO (General purpose input output, GPIO) 來做簡單的周邊控制。

開始之前
除了必備的 mbed LPC1768 之外，你還需要…

麵包板一塊
LED 八顆
按鈕開關八個

為什麼是八個呢? 因為一個位元組是由八個位員組成的關係，這樣可以順便呼應上一篇文章所提到的位移的內容。不過如果你懶的話，可以只使用一半，也就是四顆來作實驗就可以。
基礎實驗 – GPIO 控制
事實上，前一篇所講的 LED 控制就是一種 GPIO 的應用，只不過他是預先裝在板子上面的 LED 而不是自己外接的。而接下來所要講的，則是要自己動手接線路來實作的控制。
mbed LPC1768 的板子大小恰好可以插到麵包板上，並且留有左右各一排的位置可供接線使用，所以，用力把板子插到麵包板上，我們準備進行實驗囉！

上面這是 LPC1768 的腳位圖，我們今天會用到藍色標籤的部分。
GPIO 單腳 LED 輸出






#include "mbed.h"
DigitalOut LED(p5)

main()
{
    while(1)
    {
        LED = 0;
        wait(0.1);
        LED = 1;
        wait(0.1);
    }
}





1234567891011121314

#include "mbed.h"DigitalOut LED(p5) main(){    while(1)    {        LED = 0;        wait(0.1);        LED = 1;        wait(0.1);    }} 






一開始我們先從最簡單的單腳控制來做，這邊我把 mbed LPC1768 的 p5 腳位給了一個名字 LED，然後只做一個很簡單的事情，閃爍。
GPIO 多腳 LED 輸出 – DigitalOut






#include "mbed.h"
DigitalOut LED1(p5)
DigitalOut LED2(p6)
DigitalOut LED3(p7)
DigitalOut LED4(p8)

main()
{
    while(1)
    {
        LED1 = 0;
        LED2 = 0;
        LED3 = 0;
        LED4 = 0;
        wait(0.1);
        LED1 = 1;
        LED2 = 1;
        LED3 = 1;
        LED4 = 1;
        wait(0.1);
    }
}





1234567891011121314151617181920212223

#include "mbed.h"DigitalOut LED1(p5)DigitalOut LED2(p6)DigitalOut LED3(p7)DigitalOut LED4(p8) main(){    while(1)    {        LED1 = 0;        LED2 = 0;        LED3 = 0;        LED4 = 0;        wait(0.1);        LED1 = 1;        LED2 = 1;        LED3 = 1;        LED4 = 1;        wait(0.1);    }} 






p5 ~ p8 分別被命名為 LED1 ~ LED4，這是模仿上一篇文章的程式內容，動作模式也是閃爍，只不過這次是四顆 LED 閃爍。
GPIO 多腳 LED 輸出 – BusOut






#include "mbed.h"

BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12);

main()
{
    while(1)
    {
        LEDs = 0x00;
        wait(0.1);
        LEDs = 0xFF;
        wait(0.1);
    }
}





123456789101112131415

#include "mbed.h" BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12); main(){    while(1)    {        LEDs = 0x00;        wait(0.1);        LEDs = 0xFF;        wait(0.1);    }} 






有一位新角色在這裡初登場，先前我們都是使用 DigitalOut 來做輸出腳位與名稱的指定，但當你要指定的同時輸出腳位有 4 個以上時，這就會是一個非常煩人的事情。還好，mbed 有提供一個 BusOut 的物件可以解決這個問題。它除了可以讓你不用一直複製貼上外，還能快速指定輸出的內容，就像範例程式呈現的那樣。
還記得上一篇文章對於 port 的解釋時的表格嗎? 在這裡也可以用同樣的方式去看。



LEDs


      LED1
    

      LED2
    

      LED3
    

      LED4
    

      LED5
    

      LED6
    

      LED7
    

      LED8
    



對應腳位


      p5
    

      p6
    

      p7
    

      p8
    

      p9
    

      p10
    

      p11
    

      p12
    


如果你想看更細節的 BusOut 動作，可以用下麵這個範例程式。






#include "mbed.h"

BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12);

main()
{
    while(1)
    {
        for(int i=0; i<16; i++)
        {
            LEDs = i;
            wait(0.1);
        }
    }
}





12345678910111213141516

#include "mbed.h" BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12); main(){    while(1)    {        for(int i=0; i<16; i++)        {            LEDs = i;            wait(0.1);        }    }} 






GPIO 按鍵輸入 – DigitalIn
講完了輸出後，接下來我們即將進入輸入的部份。






#include "mbed.h"

DigitalIn press(p21);
DigitalOut LED(LED1);

int main() 
{
    while(1) 
    {
        if(press) 
        {
            LED = !LED;
        }
        wait(0.1);
    }
}





1234567891011121314151617

#include "mbed.h" DigitalIn press(p21);DigitalOut LED(LED1); int main() {    while(1)     {        if(press)         {            LED = !LED;        }        wait(0.1);    }} 






這裡出現了一位新的角色 DigitalIn ，他主要是將某一個腳位設成輸入腳位，這樣就能夠讓 mbed LPC1768 接收到外來的訊號，而不只是在內部自嗨。
在這個範例程式中，我們指定 p21 腳位為一個輸入腳，然後接上一個按鈕，這個按鈕只需要一端接上正電，另一端接到 LPC1768 的 p21 腳位即可。
當你按下按鈕時 LPC1768 上的 LED1 燈號會亮起，再點下一次便會熄滅，嘿！你的 LPC1768 可以接收到來自外界的訊號啦！
GPIO 按鍵輸入 – BusIn
既然有 BusOut 當然會有 BusIn 囉。






#include "mbed.h"

BusIn Buttons(p21, p22, p23, p24, p25, p26, p27, p28);
BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12);

int main() 
{
    while(1) 
    {
        LEDs = Buttons;
    }
}





12345678910111213

#include "mbed.h" BusIn Buttons(p21, p22, p23, p24, p25, p26, p27, p28);BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12); int main() {    while(1)     {        LEDs = Buttons;    }} 






這個程式是一個 BusIn 對應到 BusOut 的實驗，當你接好線路並按下按鈕時，就會看到相對應位置的 LED 亮起，對應關係可以透過下麵的表格來對照。



按鍵


      p21
    

      p22
    

      p23
    

      p24
    

      p25
    

      p26
    

      p27
    

      p28
    



LED


      p5
    

      p6
    

      p7
    

      p8
    

      p9
    

      p10
    

      p11
    

      p12
    


這個範例程式與對應關係的實驗應該可以讓你對 BusIn 和 BusOut 有更初步的瞭解。
InOut 合一
上述的所有範例都只是單方向的輸出或輸入，但 mbed 的能力不止如此。他還提供了兩個很有趣的物件，分別是 DigitalInOut 、 BusInOut。從字面上的意思可以很快的瞭解到，這是一個將輸出入合併在同一個或多個宣告的腳位上。
也就是說，特定的腳位在某些時候，你可以將他設為輸出，而在某些時候，你可以將他設為輸入，很有趣對吧? 接下來讓我們來看看範例程式。






#include "mbed.h"

DigitalOut led(LED1);
DigitalInOut pin(p5);

int main() 
{
    while(1)
    {
        pin.output();   // 設為輸出
        pin = 1;     
        wait(1.0);
        pin = 0;        // 重置為 0 
        wait(0.1);
        pin.input();    // 設為輸入
        while(!pin)
            led = !led;
        wait(1.0);
    }
}





123456789101112131415161718192021

#include "mbed.h" DigitalOut led(LED1);DigitalInOut pin(p5); int main() {    while(1)    {        pin.output();   // 設為輸出        pin = 1;             wait(1.0);        pin = 0;        // 重置為 0         wait(0.1);        pin.input();    // 設為輸入        while(!pin)            led = !led;        wait(1.0);    }} 






這邊直接看影片會比較清楚。

在影片中前半段的小問題是因為我程式中的 1 秒延遲造成的，後面你就會看到我按下按鍵時，LPC1768 上的 LED1 燈號會亮起，然後 1 秒後滅掉，接著是按鈕上方的 LED 亮起、滅掉，之後就重複一樣的動作。在這裡的按鈕與 p5 腳位式接在一起的，你可以從畫面中看到，只有一條線接到按 LPC1768 上。
至於每次我按按鈕時 LED 都會亮起一次，那是電路接線上的關係。因為我的按鈕是接在按下時通正電的狀態，而 LED 則是有正電進入時會亮起。
BusInOut 的動作原理差不多，只差在他是一次可以接收或輸出好幾個這樣。






#include "mbed.h"

DigitalOut led(LED1);
DigitalInOut pins(p5, p6, p7);

int main() 
{
    while(1)
    {
        pins.output();   // 設為輸出
        pins = 0x03;     // p6, p7 輸出     
        wait(1.0);
        pins = 0x00;     // 重置為 0 
        wait(0.1);
        pins.input();    // 設為輸入
        if(pins == 0x06) // 如果 p5, p6 被按下
            led = !led;
        wait(1.0);
    }
}





123456789101112131415161718192021

#include "mbed.h" DigitalOut led(LED1);DigitalInOut pins(p5, p6, p7); int main() {    while(1)    {        pins.output();   // 設為輸出        pins = 0x03;     // p6, p7 輸出             wait(1.0);        pins = 0x00;     // 重置為 0         wait(0.1);        pins.input();    // 設為輸入        if(pins == 0x06) // 如果 p5, p6 被按下            led = !led;        wait(1.0);    }} 






總結
GPIO 控制是嵌入式系統開發中非常重要的一個部份，透過 GPIO 控制，嵌入式系統才能與我們人類作更多互動，例如本次範例使用的按鍵以及 LED 顯示。當然 GPIO 並不只侷限在於按鍵的輸入與 LED 的顯示，他還可以讓你控制諸如馬達、電燈、繼電器…等等需要開關的東西，也能夠接收來自不同訊號模組的資料，並透過嵌入式系統處理器處理後，再透過 GPIO 本身做你所想要的動作。
簡單來說 GPIO 是嵌入式系統核心晶片接收與傳遞他本身以外的訊息的一個方式，就如我們人類的神經系統那樣。
回到 mbed ， mbed 最有趣的地方是他的 GPIO 設定並不會非常死板，你可以很自由的把某幾隻接腳透過 BusIn/BusOut 群組起來操作，你也可以透過 InOut 合一的物件，對同一個 I/O 腳位做輸出入的控制，很酷對吧?
其實關於 GPIO 還有更多的操作與使用方式，不過這屬於比較進階的操作，在本系列文章中就不去加以介紹。如果你有興趣，可以到官方網站上查看更多資料。

mbed Handbook Digital I/O: https://developer.mbed.org/handbook/Homepage#digital-i-o


相關
 




給點回應吧~ 取消回覆
















搜尋：


搜尋

點點贊助 



  新進文章 

Node.js 做一個 NPM 模組更新或安裝的進度條


Node.js 從無到有 – 做一個簡易部落格(一)


想建造自己的 Cloud9 雲端環境？兩步驟讓你擁有！


在找免費的電路模擬器？123D Circuits 滿足你的願望！


Beaglebone Black – 透過 NodeJS 使用 RF24 Library


Ubuntu – 讓 Sendmail 以 Gmail 的 SMTP 來發送信件


 熱門文章






								Node.js 從無到有 - 做一個簡易部落格(一)							








								Arduino Basic (6) - AnalogRead 類比輸入							








								Sysprep 電腦升級主機板免重灌！							








								Sikuli - 程式語言大革命！用圖片寫程式！							








								Arduino Basic (5) - PWM 類比輸出							








								RF24 專屬於 nRF24L01 的程式函式庫。							








								程式設計條件判斷之章，switch...case。							








								在找免費的電路模擬器？123D Circuits 滿足你的願望！							








								關於break、continue之間的關係。							



最近留言獨夜 在 Node.js 從無到有 – 做一個簡易部落格(一)Barbie Liu 在 Node.js 從無到有 – 做一個簡易部落格(一)獨夜 在 Sysprep 電腦升級主機板免重灌！小黑 在 Sysprep 電腦升級主機板免重灌！開講啦 在 如何解決 Homebrew Update 失敗？lloydwu 在 如何設定 Beaglebone Black 透過 USB 的網路連線?Mr. Lin 在 什麼? Git 可以拿來更新測試網站?獨夜 在 如何設定 Beaglebone Black 透過 USB 的網路連線?在Facebook看s9page’s的個人檔案在Twitter看single9’s的個人檔案在GitHub看single9’s的個人檔案在YouTube看MrSingleNine’s的個人檔案在Twitch看single9’s的個人檔案 



標籤8051
Arduino
ASUS
Basic
Beaglebone Black
break
C
CSS
FLASH
Google+
Google plus
Launch Pad
Linux
LPC1768
mbed
MSP430
MySQL
Nodejs
nRF24L01
Pad2Pad
PHP
Sikuli
Single.9
TI
Ubuntu
VC
Visual Studio
Windows
WordPress
XML
免費空間
免費軟體
單晶片
德州儀器
抽獎
教學
無廣告
燒錄器
硬體
程式設計
程式語言
系統
迴圈
電腦
電路設計
 































mbed 基礎教學實驗 - GPIO控制 - Single.9


















































































跳至內容區



Single.9
電子、電腦、網路、科技與新知。

選單










mbed 基礎教學實驗 – GPIO控制 

 


在上一篇教學文章中，我們學會瞭如何操作 mbed LPC1768 這個板子上面的四顆 LED 燈號。今天這篇文章，則是要來教各位利用 LPC1768 上的 GPIO (General purpose input output, GPIO) 來做簡單的周邊控制。

開始之前
除了必備的 mbed LPC1768 之外，你還需要…

麵包板一塊
LED 八顆
按鈕開關八個

為什麼是八個呢? 因為一個位元組是由八個位員組成的關係，這樣可以順便呼應上一篇文章所提到的位移的內容。不過如果你懶的話，可以只使用一半，也就是四顆來作實驗就可以。
基礎實驗 – GPIO 控制
事實上，前一篇所講的 LED 控制就是一種 GPIO 的應用，只不過他是預先裝在板子上面的 LED 而不是自己外接的。而接下來所要講的，則是要自己動手接線路來實作的控制。
mbed LPC1768 的板子大小恰好可以插到麵包板上，並且留有左右各一排的位置可供接線使用，所以，用力把板子插到麵包板上，我們準備進行實驗囉！

上面這是 LPC1768 的腳位圖，我們今天會用到藍色標籤的部分。
GPIO 單腳 LED 輸出






#include "mbed.h"
DigitalOut LED(p5)

main()
{
    while(1)
    {
        LED = 0;
        wait(0.1);
        LED = 1;
        wait(0.1);
    }
}





1234567891011121314

#include "mbed.h"DigitalOut LED(p5) main(){    while(1)    {        LED = 0;        wait(0.1);        LED = 1;        wait(0.1);    }} 






一開始我們先從最簡單的單腳控制來做，這邊我把 mbed LPC1768 的 p5 腳位給了一個名字 LED，然後只做一個很簡單的事情，閃爍。
GPIO 多腳 LED 輸出 – DigitalOut






#include "mbed.h"
DigitalOut LED1(p5)
DigitalOut LED2(p6)
DigitalOut LED3(p7)
DigitalOut LED4(p8)

main()
{
    while(1)
    {
        LED1 = 0;
        LED2 = 0;
        LED3 = 0;
        LED4 = 0;
        wait(0.1);
        LED1 = 1;
        LED2 = 1;
        LED3 = 1;
        LED4 = 1;
        wait(0.1);
    }
}





1234567891011121314151617181920212223

#include "mbed.h"DigitalOut LED1(p5)DigitalOut LED2(p6)DigitalOut LED3(p7)DigitalOut LED4(p8) main(){    while(1)    {        LED1 = 0;        LED2 = 0;        LED3 = 0;        LED4 = 0;        wait(0.1);        LED1 = 1;        LED2 = 1;        LED3 = 1;        LED4 = 1;        wait(0.1);    }} 






p5 ~ p8 分別被命名為 LED1 ~ LED4，這是模仿上一篇文章的程式內容，動作模式也是閃爍，只不過這次是四顆 LED 閃爍。
GPIO 多腳 LED 輸出 – BusOut






#include "mbed.h"

BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12);

main()
{
    while(1)
    {
        LEDs = 0x00;
        wait(0.1);
        LEDs = 0xFF;
        wait(0.1);
    }
}





123456789101112131415

#include "mbed.h" BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12); main(){    while(1)    {        LEDs = 0x00;        wait(0.1);        LEDs = 0xFF;        wait(0.1);    }} 






有一位新角色在這裡初登場，先前我們都是使用 DigitalOut 來做輸出腳位與名稱的指定，但當你要指定的同時輸出腳位有 4 個以上時，這就會是一個非常煩人的事情。還好，mbed 有提供一個 BusOut 的物件可以解決這個問題。它除了可以讓你不用一直複製貼上外，還能快速指定輸出的內容，就像範例程式呈現的那樣。
還記得上一篇文章對於 port 的解釋時的表格嗎? 在這裡也可以用同樣的方式去看。



LEDs


      LED1
    

      LED2
    

      LED3
    

      LED4
    

      LED5
    

      LED6
    

      LED7
    

      LED8
    



對應腳位


      p5
    

      p6
    

      p7
    

      p8
    

      p9
    

      p10
    

      p11
    

      p12
    


如果你想看更細節的 BusOut 動作，可以用下麵這個範例程式。






#include "mbed.h"

BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12);

main()
{
    while(1)
    {
        for(int i=0; i<16; i++)
        {
            LEDs = i;
            wait(0.1);
        }
    }
}





12345678910111213141516

#include "mbed.h" BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12); main(){    while(1)    {        for(int i=0; i<16; i++)        {            LEDs = i;            wait(0.1);        }    }} 






GPIO 按鍵輸入 – DigitalIn
講完了輸出後，接下來我們即將進入輸入的部份。






#include "mbed.h"

DigitalIn press(p21);
DigitalOut LED(LED1);

int main() 
{
    while(1) 
    {
        if(press) 
        {
            LED = !LED;
        }
        wait(0.1);
    }
}





1234567891011121314151617

#include "mbed.h" DigitalIn press(p21);DigitalOut LED(LED1); int main() {    while(1)     {        if(press)         {            LED = !LED;        }        wait(0.1);    }} 






這裡出現了一位新的角色 DigitalIn ，他主要是將某一個腳位設成輸入腳位，這樣就能夠讓 mbed LPC1768 接收到外來的訊號，而不只是在內部自嗨。
在這個範例程式中，我們指定 p21 腳位為一個輸入腳，然後接上一個按鈕，這個按鈕只需要一端接上正電，另一端接到 LPC1768 的 p21 腳位即可。
當你按下按鈕時 LPC1768 上的 LED1 燈號會亮起，再點下一次便會熄滅，嘿！你的 LPC1768 可以接收到來自外界的訊號啦！
GPIO 按鍵輸入 – BusIn
既然有 BusOut 當然會有 BusIn 囉。






#include "mbed.h"

BusIn Buttons(p21, p22, p23, p24, p25, p26, p27, p28);
BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12);

int main() 
{
    while(1) 
    {
        LEDs = Buttons;
    }
}





12345678910111213

#include "mbed.h" BusIn Buttons(p21, p22, p23, p24, p25, p26, p27, p28);BusOut LEDs(p5, p6, p7, p8, p9, p10, p11, p12); int main() {    while(1)     {        LEDs = Buttons;    }} 






這個程式是一個 BusIn 對應到 BusOut 的實驗，當你接好線路並按下按鈕時，就會看到相對應位置的 LED 亮起，對應關係可以透過下麵的表格來對照。



按鍵


      p21
    

      p22
    

      p23
    

      p24
    

      p25
    

      p26
    

      p27
    

      p28
    



LED


      p5
    

      p6
    

      p7
    

      p8
    

      p9
    

      p10
    

      p11
    

      p12
    


這個範例程式與對應關係的實驗應該可以讓你對 BusIn 和 BusOut 有更初步的瞭解。
InOut 合一
上述的所有範例都只是單方向的輸出或輸入，但 mbed 的能力不止如此。他還提供了兩個很有趣的物件，分別是 DigitalInOut 、 BusInOut。從字面上的意思可以很快的瞭解到，這是一個將輸出入合併在同一個或多個宣告的腳位上。
也就是說，特定的腳位在某些時候，你可以將他設為輸出，而在某些時候，你可以將他設為輸入，很有趣對吧? 接下來讓我們來看看範例程式。






#include "mbed.h"

DigitalOut led(LED1);
DigitalInOut pin(p5);

int main() 
{
    while(1)
    {
        pin.output();   // 設為輸出
        pin = 1;     
        wait(1.0);
        pin = 0;        // 重置為 0 
        wait(0.1);
        pin.input();    // 設為輸入
        while(!pin)
            led = !led;
        wait(1.0);
    }
}





123456789101112131415161718192021

#include "mbed.h" DigitalOut led(LED1);DigitalInOut pin(p5); int main() {    while(1)    {        pin.output();   // 設為輸出        pin = 1;             wait(1.0);        pin = 0;        // 重置為 0         wait(0.1);        pin.input();    // 設為輸入        while(!pin)            led = !led;        wait(1.0);    }} 






這邊直接看影片會比較清楚。

在影片中前半段的小問題是因為我程式中的 1 秒延遲造成的，後面你就會看到我按下按鍵時，LPC1768 上的 LED1 燈號會亮起，然後 1 秒後滅掉，接著是按鈕上方的 LED 亮起、滅掉，之後就重複一樣的動作。在這裡的按鈕與 p5 腳位式接在一起的，你可以從畫面中看到，只有一條線接到按 LPC1768 上。
至於每次我按按鈕時 LED 都會亮起一次，那是電路接線上的關係。因為我的按鈕是接在按下時通正電的狀態，而 LED 則是有正電進入時會亮起。
BusInOut 的動作原理差不多，只差在他是一次可以接收或輸出好幾個這樣。






#include "mbed.h"

DigitalOut led(LED1);
DigitalInOut pins(p5, p6, p7);

int main() 
{
    while(1)
    {
        pins.output();   // 設為輸出
        pins = 0x03;     // p6, p7 輸出     
        wait(1.0);
        pins = 0x00;     // 重置為 0 
        wait(0.1);
        pins.input();    // 設為輸入
        if(pins == 0x06) // 如果 p5, p6 被按下
            led = !led;
        wait(1.0);
    }
}





123456789101112131415161718192021

#include "mbed.h" DigitalOut led(LED1);DigitalInOut pins(p5, p6, p7); int main() {    while(1)    {        pins.output();   // 設為輸出        pins = 0x03;     // p6, p7 輸出             wait(1.0);        pins = 0x00;     // 重置為 0         wait(0.1);        pins.input();    // 設為輸入        if(pins == 0x06) // 如果 p5, p6 被按下            led = !led;        wait(1.0);    }} 






總結
GPIO 控制是嵌入式系統開發中非常重要的一個部份，透過 GPIO 控制，嵌入式系統才能與我們人類作更多互動，例如本次範例使用的按鍵以及 LED 顯示。當然 GPIO 並不只侷限在於按鍵的輸入與 LED 的顯示，他還可以讓你控制諸如馬達、電燈、繼電器…等等需要開關的東西，也能夠接收來自不同訊號模組的資料，並透過嵌入式系統處理器處理後，再透過 GPIO 本身做你所想要的動作。
簡單來說 GPIO 是嵌入式系統核心晶片接收與傳遞他本身以外的訊息的一個方式，就如我們人類的神經系統那樣。
回到 mbed ， mbed 最有趣的地方是他的 GPIO 設定並不會非常死板，你可以很自由的把某幾隻接腳透過 BusIn/BusOut 群組起來操作，你也可以透過 InOut 合一的物件，對同一個 I/O 腳位做輸出入的控制，很酷對吧?
其實關於 GPIO 還有更多的操作與使用方式，不過這屬於比較進階的操作，在本系列文章中就不去加以介紹。如果你有興趣，可以到官方網站上查看更多資料。

mbed Handbook Digital I/O: https://developer.mbed.org/handbook/Homepage#digital-i-o


相關
 




給點回應吧~ 取消回覆
















搜尋：


搜尋

點點贊助 



  新進文章 

Node.js 做一個 NPM 模組更新或安裝的進度條


Node.js 從無到有 – 做一個簡易部落格(一)


想建造自己的 Cloud9 雲端環境？兩步驟讓你擁有！


在找免費的電路模擬器？123D Circuits 滿足你的願望！


Beaglebone Black – 透過 NodeJS 使用 RF24 Library


Ubuntu – 讓 Sendmail 以 Gmail 的 SMTP 來發送信件


 熱門文章






								Node.js 從無到有 - 做一個簡易部落格(一)							








								Arduino Basic (6) - AnalogRead 類比輸入							








								Sysprep 電腦升級主機板免重灌！							








								Sikuli - 程式語言大革命！用圖片寫程式！							








								Arduino Basic (5) - PWM 類比輸出							








								RF24 專屬於 nRF24L01 的程式函式庫。							








								程式設計條件判斷之章，switch...case。							








								在找免費的電路模擬器？123D Circuits 滿足你的願望！							








								關於break、continue之間的關係。							



最近留言獨夜 在 Node.js 從無到有 – 做一個簡易部落格(一)Barbie Liu 在 Node.js 從無到有 – 做一個簡易部落格(一)獨夜 在 Sysprep 電腦升級主機板免重灌！小黑 在 Sysprep 電腦升級主機板免重灌！開講啦 在 如何解決 Homebrew Update 失敗？lloydwu 在 如何設定 Beaglebone Black 透過 USB 的網路連線?Mr. Lin 在 什麼? Git 可以拿來更新測試網站?獨夜 在 如何設定 Beaglebone Black 透過 USB 的網路連線?在Facebook看s9page’s的個人檔案在Twitter看single9’s的個人檔案在GitHub看single9’s的個人檔案在YouTube看MrSingleNine’s的個人檔案在Twitch看single9’s的個人檔案 



標籤8051
Arduino
ASUS
Basic
Beaglebone Black
break
C
CSS
FLASH
Google+
Google plus
Launch Pad
Linux
LPC1768
mbed
MSP430
MySQL
Nodejs
nRF24L01
Pad2Pad
PHP
Sikuli
Single.9
TI
Ubuntu
VC
Visual Studio
Windows
WordPress
XML
免費空間
免費軟體
單晶片
德州儀器
抽獎
教學
無廣告
燒錄器
硬體
程式設計
程式語言
系統
迴圈
電腦
電路設計
 



























KNR 機器人實驗手冊：KNRm控制器實驗教材開發 (增訂版)-金石堂網路書店














































會員功能列

 


加入會員
登入




您好
登出


會員專區
客服中心
查訂單


 
（ 0 件）0 元
結帳












購物車
（ 0 件）0 元
結帳



金石堂及銀行均不會請您操作ATM!  如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當!
    (詳情)




KNR 機器人實驗手冊：KNRm控制器實驗教材開發 (增訂版)－金石堂網路書店歡迎您加入博客和facebook 臉書粉絲團！The largest retail books store chains in Taiwan! 





TOP關鍵字

2017希望書包
怪獸的產地
七龍珠
肆一 
蠟筆小新套票
抽EC






全館搜尋
中文書
英文書

雜誌
MOOK
文具
玩具親子
美妝配飾
3C
家電
運動休閒
居家生活
動漫部屋
日用清潔
食品




 

天花版bn

12345678910





購物目錄


首頁
3h快送
中文書
英文書

雜誌
MOOK
文具
美妝配飾
玩具親子
3C
家電
運動休閒
居家生活
日用清潔
動漫精品
食品






商品次目錄


新書
預購書
推薦書
套書
暢銷書排行榜
書展 / 特惠
讀者書評
出版社專區
香港出版品




 

    您的位置：金石堂網路書店
中文書
自然科普
科技/應用科學
應用科學總論
商品詳情

 


KNR 機器人實驗手冊：KNRm控制器實驗教材開發 (增訂版)
                        










作者：宋開泰
追蹤



出版社：馥林文化  
出版社追蹤


出版日：2015/10/21

ISBN：9789864050154
語言：中文繁體
適讀年齡：全齡適讀


定價：360 元

特價：79 折 284 元 (可得紅利2點)
紅利優惠價：76 折 275 元 (折抵說明)紅利可抵：9 元 
信用卡紅利：可折抵多家銀行 (扣抵說明)
運送方式：全球配送　香港到店　國內宅配國內店取　












<<



>>


https://cdn.kingstone.com.tw/book/images/product/20144/2014480855034/2014480855034b.jpg














                           商品暫時無法購買



金石堂讀者好評
 
0 個人說讚，看排行 >






自然科普分類追蹤
使用此功能請先登入金石堂網路書店正式會員。這是什麼？




分享：
                            
                           	  










書籍介紹
其他讀者也買
強力推薦
讀者好評(0)
下標籤
團體專屬服務






內容簡介作者目錄序/導讀試閱
詳細資料






內容簡介 top 
《KNR 機器人實驗手冊：KNRm控制器實驗教材開發 (增訂版)》

	本書是一套應用KNRm控制器之智慧機器人實驗教材，包含基本之感測器與機器人運動控制實驗與實作競賽。配合不同的實驗進度與實作競賽單元，讓使用者可以有效學習機器人相關知識並熟練KNRm機器人控制器的相關應用。教材內容涵蓋基礎LabVIEW機器人程式、馬達控制、機器人感測元件原理與應用、機器人基礎技術實作及機器人作競賽。教學內容將包括程式設計、機器人運動控制、機器人定位、環境感測器、機器人行為控制等等。透過本書之KNRm教學設備與實驗教材之研發，將協助大學院校有一套更適合學生使用之智慧機器人實驗教材，並且更易於擴展於未來之各種機器人競賽與實際應用，有助於機器人教育之推廣。



作者top 


作者介紹

宋開泰國立交通大學電機工程學系教授。1989年於比利時荷語魯汶大學取得博士學位。之後便任職於交通大學電機工程學系。同時也是臺灣機器人學會、臺灣智慧自動化與機器人協會、中華民國自動控制學會、中華民國系統學會的理事。研究領域包括移動機器人、影像處理、視覺追蹤、嵌入式系統和機電整合。著有《KNR機器人實驗手冊》。





目錄 top 
KNR 機器人實驗手冊：KNRm控制器實驗教材開發 (增訂版)－目錄導覽說明


前言

PARTＩLabVIEW Robotics & 機器人硬體元件實驗

	Lab 1 LabVIEW Robotics介紹      

	Lab 2 KNRm控制器&機器人平臺介紹      

	Lab 3 直流伺服馬達控制實驗     

	Lab 4超音波測距環境掃描實驗   

	Lab 5紅外線測距校正&類比訊號輸入實驗      

PART II KNRm控製程式 & 機器人實作競賽

	Lab 6超音波測距機器人沿牆走實驗  

	Lab 7超音波測距機器人避障實驗       

	Lab 8機器人平臺遙控與自主避障實驗      

	Lab 9機器人影像尋標與追蹤實驗       

	Lab10機器人自主避障尋標實驗  





序/導讀 《KNR 機器人實驗手冊》top 


	本增訂版之前一版本「KNR機器人實驗手冊」，是一套以KNR控制器及LabVIEW為平臺的機器人實驗教材，是專門為大專學生提供一套實驗以熟習機器人關鍵技術與實務。自出版以來已用於大學部之智慧型機器人實驗課程，成效頗佳。隨著美商國家儀器(National Instruments, NI)公開其新一代之嵌入式控制器myRIO，貝登堡國際應用myRIO嵌入式控制電路開發出新一代之KNRm控制器，強化了控制器的運算效能，增加更多硬體與感測器支援，並且縮小機身體積，使機器人減少功耗，更為節電。從2015年器WRO 大專組競賽KNRm已獲選為官方認可之機器人控制器。KNRm控制器之控制介面與驅動程式與先前之KNR已大幅更新，為了有助於熟習此新的KNRm控制器，亟需為其開發一套實驗教材，以利學生及對機器人控制有興趣人士使用。

	機器人是一種整合機械、電子、電機、與電腦資訊之新興高科技產業，需要跨領域機電整合之人才，因此人才之培育將是機器人產業重要之一環。 近幾年來，由於生產自動化之需求，機器人產業持續成長，工業機器人(Industrial robots)之產值屢創歷史新高，尤其是在亞洲部分已成為機器人成長最多的地區。另一方面，由於老人看護及少子化的問題備受關註，服務型機器人(Service robots)亦成長快速，可以預見機器人將是未來另一波明星產業，世界各國皆投入大量經費進行機器人技術開發與產業發展。世界上許多國家皆已將智慧型機器人列入重要產業發展，人才之需求逐漸增加，培育優質專業人才，提升機器人技術與世界接軌，實為當務之急。但目前國內多數大專院校缺乏機器人專業課程，尤其缺少機器人實務之教材與設備，若能開發一套實驗教材，提供大學部學生啟發性機器人實作相關課程，將有助於吸引學生學習機器人科技，以利未來投入機器人相關產業。

	本書這是一套應用KNRm控制器之智慧機器人實驗教材，包含基本之感測器與機器人運動控制實驗與實作競賽。配合不同的實驗進度與實作競賽單元，讓使用者可以有效學習機器人相關知識並熟練KNRm機器人控制器的相關應用。教材內容涵蓋基礎LabVIEW機器人程式、馬達控制、機器人感測元件原理與應用、機器人基礎技術實作及機器人作競賽。教學內容將包括程式設計、機器人運動控制、機器人定位、環境感測器、機器人行為控制等等。透過本書之KNRm教學設備與實驗教材之研發，將協助大學院校有一套更適合學生使用之智慧機器人實驗教材，並且更易於擴展於未來之各種機器人競賽與實際應用，有助於機器人教育之推廣。

	感謝交大電控所劉鴻燊先生及張岳傳先生協助本書中之實驗程式及教材內容撰寫，感謝交大電機資訊國際學位學程Mr. Susanto協助LabVIEW實驗程式編撰及實驗驗證。




試閱top 

                                  Lab 5紅外線測距校正&類比訊號輸入實驗 1. 實驗目的：●學習KNRm類比電壓量測方式。●瞭解紅外線近接感測器原理與使用方式。 2. 原理說明： 2.1 KNRm類比電壓量測 KNRm主機中內建A/D(Analog-to-digital converter)類比電壓量測通道，可以連接廣泛的感測器並量測感測器的類比電壓，如紅外線、傾斜儀、陀螺儀等感測器。KNRm 主機總共有16組類比電壓通道，分別為二個群組(channel 0-7, 8-15)。使用者可以決定每一個群組為single-ended 或differential 模式輸入。在single-ended模式，感測器的正端可接到某個AI channel，負端可接到AI GND。在differential 模式，電壓數據會由兩個AI channel 組成，例如正端接到AI 0，負端接到AI 1。在single-ended 模式，可量測到的電壓範圍為0V~4.5V。 在differential 模式，可量測到的電壓範圍為 -4.5V~4.5V。 KNRm類比電壓輸入的位置如圖5-1有兩種介面設計，第一為彈簧接頭共提供14個接點，此接點在陣列中表示為2~16。由左至右第3到8的接點為6組類比電壓輸入可使用單芯線與感測器訊號進行連接，而感測器所需之電源則可利用KNRm所提供的電力供應，第1、2個接點為5V電源輸出，第9~14為電源接地。第二種為紅外線測距儀連接埠共兩個，每一個連接埠都有5V、GND與訊號線，此接點在陣列中表示為0、1。所以KNRm最多能夠擁有16組的類比電壓輸入，用來量測感測器的資訊。 2.2 紅外線測距儀工作原理 紅外線測距儀能夠感測前方的物體，生活中應用相當廣泛，如常見的自動感應水龍頭、自動沖水等。KNRm的紅外線測距儀如圖5-2所示為Sharp GP2Y0A21YK0F，有效的感測距離約10~80 cm，工作電壓為4.5~5.5V，輸出的形式為類比電壓。此類型的紅外線感測器如圖5-3採用的是一維PSD(1-D Position Sensitive Detector)的方式進行位置測，PSD能夠在一維空間進行多點的感測，能夠得知入射光線的位置。紅外線感測器具有紅外線(IR)發射器以及一維的PSD元件，當感測器發射紅外線光束至物體錶面時，會因為距離不同，將光束反射在PSD元件對應的位置上，依據光線抵達的位置不同，可以推算物體錶面的與紅外線感測器的距離。
                                     ...看全部





詳細資料top 

                               語言：中文繁體規格：平裝分級：普級開數：25開15*21cm頁數：190
                               出版地：台灣















應用科學總論相關書籍
延伸閱讀推薦
延伸推薦









延伸推薦top 





What Do Scienc...

特價 1814元





Overcomplicate...

特價 504元





Crack99...

特價 502元





Freud in Cambr...

特價 3779元





Blockchain Rev...

特價 630元





CTimes雜誌6月2017...

特價 171元
立即購買 




J-RESCUE救難情報 7...

特價 446元
立即購買 




消防防災戰術指南...

特價 589元
立即購買 




消防裝備便覽 2017-20...

特價 836元





新消防水管延長指南...

特價 589元
立即購買 











共0篇好評top 
寫書評去 >










商品標籤 (什麼是標籤？)

動物百科



我的標籤新增









團體專屬服務top

團體專屬服務














訂購須知top 
防治詐騙，提醒您!!金石堂及銀行均不會請您操作ATM! 如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當! 

商品運送說明：
當商品送達金石堂門市或便利商店後，您會收到E-mail及APP出貨/到貨通知，您也可透過【訂單查詢】確認到貨情況。
建議您可下載『金石堂APP』並開啟推撥設定，即可收到相關出貨/到貨通知訊息。
並請您於指定期限內取貨付款，若逾期未取，您取貨的金石堂門市或便利商店將會辦理退貨作業。
產品顏色可能會因網頁呈現與拍攝關係產生色差，圖片僅供參考，商品依實際供貨樣式為準。 

退換貨說明：
依據「消費者保護法」第19條及行政院消費者保護處公告之「通訊交易解除權合理例外情事適用準則」，以下商品購買後，除商品本身有瑕疵外，將不提供7天的猶豫期：

                            1、 易於腐敗、保存期限較短或解約時即將逾期。（如：生鮮食品）
                            2、 依消費者要求所為之客製化給付。（客製化商品）
                            3、 報紙、期刊或雜誌。（含MOOK、外文雜誌）
                            4、 經消費者拆封之影音商品或電腦軟體。
                            5、 非以有形媒介提供之數位內容或一經提供即為完成之線上服務，經消費者事先同意始提供。（如：電子書、電子雜誌、下載版軟體、虛擬商品…等）
                            6、 已拆封之個人衛生用品。（如：內衣褲、刮鬍刀、除毛刀…等）
若非上列種類商品，商品均享有到貨7天的猶豫期（含例假日）。
辦理退換貨時，商品（組合商品恕無法接受單獨退貨）必須是您收到商品時的原始狀態（包含商品本體、配件、贈品、保證書、所有附隨資料文件及原廠內外包裝…等），請勿直接使用原廠包裝寄送，或於原廠包裝上黏貼紙張或書寫文字。退回商品若無法回復原狀，將請您負擔回復原狀所需費用，嚴重時將影響您的退貨權益。










中文書籍分類

文學財經企管生活風格飲食料理心理勵志醫療保健旅遊宗教命理教育/親子教養童書羅曼史輕小說漫畫語言／字辭典藝術設計電腦資訊自然科普
植物/花草生活
動物/寵物
普及科學
數學
物理
化學
生命科學
地球生態/天文
科技/應用科學
應用科學總論
應用力學
工程數學
電子/電路
半導體/面板
自動控制/機器人
通訊
電子機械/家電
機械/機器
交通工具
土木/建築工程
環工/都更
能源
化學工業
技術/工業


其他自然科普

人文歷史社會哲思考試書／政府出版品參考書全部的分類 >>




相關商品


雜誌



World of Animals 第47期
美味菇類與毒菇圖鑑
World of Animals 第46期









外嵌連結
KNR 機器人實驗手冊：KNRm控制器實驗教材開發 (增訂版)



在金石堂門市找此書
                         選擇縣市：

請選擇
基隆市
臺北市
新北市
桃園市
新竹市
新竹縣
宜蘭縣
苗慄市
苗慄縣
南投縣
臺中市
雲林縣
彰化縣
嘉義市
臺南市
高雄市
屏東縣

查詢












↑回上方

金石堂網路書店

首頁
關於金石堂網路書店
人才招募
客服中心
異業合作
出版情報
手機版
關於金石堂書店
金石堂書店全台門市



客服專線：02-2364-9989
傳真：02-2364-4672
客服時間：週一至週五 9：00∼12：30 及 13：30∼18：00（例假日除外）
地址：100 台灣臺北市中正區汀州路三段 160 巷 3 號 2 樓
Copyright©2016, Digital Kingstone Co., Ltd. 金石網絡股份有限公司






瀏覽本站建議使用：Internet Explorer 8.0 以上或 FireFox、Google Chrome、Safari 等瀏覽器。
本網站已依台灣網站內容分級規定處理且符合電子商務、安全交易















金石堂APP出/到貨提醒不漏接，讓您便利隨行
















.22





變因 - 維基百科，自由的百科全書






























 






變因

維基百科，自由的百科全書


					前往：					導覽，					搜尋






本條目需要補充更多來源。（2014年10月25日） 
請協助添加多方面可靠來源以改善這篇條目，無法查證的內容可能會因為異議提出而移除。 


變因是為了釐清哪些因素能使實驗產生不同的結果而形成的概念。分為下列三者：

操縱變因：實驗中唯一能改變的因素。(實驗組及對照組不同的一個因素)
控制變因：實驗中其它不能改變 (維持不變)的因素。 (實驗組及對照組皆相同的因素)
應變變因：實驗結果或要測量或比較的項目。

此外，有一種實驗標題能夠透露出操作變因及應變變因為何，如「酸對禿頭的影響？」中，「酸」為操縱變因、「禿頭」則是應變變因。但並非適用於所有實驗標題，如「熔化熱實驗」、「製作氧氣實驗」等'沒有[問號]的名稱則無法透露操縱變因及應變變因為何'或是'根本沒有變因 (亦指無實驗組與對照組)。



目錄


1 例子
2 參考文獻

2.1 書目
2.2 網站
2.3 註釋


3 外部連結



例子[編輯]

濕度對發霉的影響：

步驟：兩小塊相同土司分別放入兩個夾鏈袋，並取其一噴入水。
操作變因：水分多寡 (噴水與否)
控制變因：土司大小、夾鏈袋大小、擺放位置、溫度、空氣量
應變變因：發霉的速度 (黴菌生長速度)


酸對生鏽的影響：

步驟：兩塊大小相同的鋼棉 (最好是相同廠牌)分別浸入水和醋酸水溶液。
操作變因：液體種類 (是否含有酸)
控制變因：鋼棉大小、液體量 (水和醋酸水溶液之量必須相等)、擺放位置
應變變因：生鏽的速度及範圍



參考文獻[編輯]
書目[編輯]

《國小自然6下》，南一齣版
《國中自然1上》，翰林出版
《國中自然2上》，翰林出版

網站[編輯]
註釋[編輯]
外部連結[編輯]

維基筆記-變因
繁中百科全書-變因
中文世界大典-變因





 
						取自 "https://zh.wikipedia.org/w/index.php?title=變因&oldid=44489634"					
分類：實驗隱藏分類：自2014年10月需補充來源的條目拒絕當選首頁新條目推薦欄目的條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


العربيةCatalàDeutschΕλληνικάEnglishEuskaraفارسیSuomiItalianoҚазақша한국어NederlandsPolskiPortuguêsРусскийSimple Englishதமிழ்TürkçeУкраїнська 
編輯連結 





 本頁面最後修訂於2017年5月24日 (週三) 14:29。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 






