


使用者介面 - 維基百科，自由的百科全書






























 







使用者介面

維基百科，自由的百科全書


					前往：					導覽，					搜尋









「user interface」的各地常用譯名


中國大陸
用戶界面、用戶接口


臺灣
使用者介面


港澳
使用者介面、使用者界面、用戶介面、用戶界面


使用者介面（User Interface，簡稱UI，亦稱用戶介面[1]）是系統和用戶之間進行互動和資訊交換的媒介，它實現資訊的內部形式與人類可以接受形式之間的轉換。
使用者介面是介於使用者與硬體而設計彼此之間互動溝通相關軟體，目的在使得使用者能夠方便有效率地去操作硬體以達成雙向之互動，完成所希望藉助硬體完成之工作，使用者介面定義廣泛，包含了人機互動與圖形使用者介面，凡參與人類與機械的資訊交流的領域都存在著使用者介面。
用戶和系統之間一般用面向問題的受限自然語言進行互動。目前有系統開始利用多媒體技術開發新一代的使用者介面。



目錄


1 組成要素
2 發展歷史

2.1 古代

2.1.1 早期電腦


2.2 現代

2.2.1 電腦：圖形使用者介面
2.2.2 工業：人機介面
2.2.3 其他


2.3 未來


3 應用產品

3.1 工業應用
3.2 娛樂應用
3.3 電腦應用


4 註釋
5 參見



組成要素[編輯]

基本要素：必須有人類感官與作用體所產生輸出、輸入與運作內容三方互動設計。
用戶介面使得用戶與系統之間雙向的資訊傳遞成為可能：




輸入：允許使用者操作執行一套系統。
輸出：允許系統向使用者傳達操作效果。




人性要素（Human Factor）：

人類感官知覺、心理情緒、認知、學習、記憶、反應、以及處理資訊的模式、個別背景之差異等等每一項都和用戶介面有密切的關係，直接或間接地影響用戶介面的效能。

輔助與說明：

適當的說明文件，不管是線上的或是傳統的檔案。讓使用者明瞭系統究竟可以做與如何來達成工作。並讓使用者能夠花最少的時間在介面的熟悉上，而將時間投註於完成其預定之工作項目。最簡單的輔助說明就是圖形或符號。

由此產生以下區別：

功能性介面
情感性介面
環境性介面



發展歷史[編輯]
古代[編輯]
最古老的用戶介面是在各式各樣物體製作符號、圖形，使人類與物件之間產生互動介面，比如說當人類看到招牌即知道這棟房屋的作用為何。
聲音、旗幟、手勢的運用，是讓人與人或人與裝置之間的用戶介面，例如在戰場或樂團演奏上，甚至是運用龜甲、錢幣的卜卦，老師使用黑板作為與學生的用戶介面，而算盤亦是由珠子所構成的早期人機介面。
早期電腦[編輯]

以預先製作打孔或塗黑的卡片或紙捲，作為輸入之用；直到鍵盤與磁碟被普及使用後才逐漸消失。
批次介面（風行於1945-1968）：所有的輸入資料預先設置於程式或命令列參數中。
命令列介面（風行於1969-1983）：用戶通過鍵盤輸入指令，電腦接收到指令後，予以執行。

現代[編輯]
電腦：圖形使用者介面[編輯]
一般指介於使用者與電腦之間溝通與互動之硬體以及軟體，目的在使得電腦系統之使用者能夠方便有效率地去操作電腦以達成雙向之互動，完成所希望藉助電腦完成之工作，其涵蓋之範圍包括：早期由紙帶輸入裝置到鍵盤、滑鼠、數位版等等資料輸入的裝置，顯示螢幕、聲音等等輸出裝置，參考檔案、線上說明、教學課程等等輔助使用之材料，人機互動的模式達到了只認識1與0的電腦與人類之間的用戶介面。
在圖形使用者介面中，電腦畫面上顯示窗口、圖標、按鈕等圖形表示不同目的的動作，用戶通過滑鼠等指針裝置進行選擇。最著名例子就是由蘋果公司在麥金塔所創的圖形化使用者介面。
在1980年代，電腦的用戶介面革命是當時蘋果電腦所發表的麥金塔（Macintosh）使用WIMP（視窗、圖鍵、表單，以及滑鼠鼠標）將圖形使用者介面（GUI）帶進了大眾市場，取代早期電腦使用的命令列介面。
1990年代初期微軟所發表的Windows 3.0則鞏固此一變革。
工業：人機介面[編輯]
在工業界亦將傳統按鈕面板進入到親切的觸控人機介面（Human-Machine Interface，縮寫HMI），在工業上的用戶介面簡單的區分為Input（輸入）與Output（輸出）兩種，Input指的是由人來進行機械或裝置的操作，如把手、開關、門、指令（命令）的下達或保養維護等，而Output指的是由機械或裝置發出來的通知，如故障、警告、操作說明提示等，好的人機介面會幫助使用者更簡單、更正確、更迅速的操作機械，也能使機械發揮最大的效能並延長使用壽命，而目前市面上所指的人機介面則多半狹義的指在擁有軟體人性化的操作介面的硬體（如觸控螢幕）。
其他[編輯]
現在還有很多一些用戶介面，由原本的按鈕、紙本等傳統古代介面進化至直接用手指、或者特殊的筆端觸摸觸摸屏上顯示的按鈕、圖標進行各種操作，如自動取款機（ATM），汽車導航、媒體播放器、遊戲機、手機等等，一般操作簡捷，直觀。
未來[編輯]
未來的用戶介面：

更加真實互動的虛擬實境：舉例來說，就是比個粗魯動作就能當作Control-Alt-Delete鍵的意思。
腦機介面：它是在人或動物腦（或者腦細胞的培養物）與外部裝置間建立的直接連線通路，目前還在實驗階段，科學家在全身癱瘓病患實際腦中植入電腦晶片，已成功利用腦電波來控制電腦，畫出簡單的圖案及遊玩電腦遊戲，至未來進一步發展實用化，人類便可以腦波作為用戶介面直接操作電腦等資訊產品。

應用產品[編輯]




使用者藉由觸控式的人機介面與手機、PDA等裝置溝通


工業應用[編輯]

觸控螢幕：是可用以取代機械式的按鈕面板，並藉由可接收觸頭（無論是手指或膠筆尖等）等輸入訊號的感應式液晶顯示裝置達到了機械裝置與人類之間的人機介面。

娛樂應用[編輯]

遊戲機：遊戲機就像一臺電腦，主要組成元件都十分類似，也有各種的軟體和硬體可供安裝使用。遊戲機主要的硬體元件包括CPU、記憶體、儲存媒體、影音輸出裝置、訊號輸入裝置等機械裝置。其中，遊戲機的訊號輸入裝置如手把或搖桿，將電視、電腦藉由簡單的一些按鈕達到與人類之間巧妙的互動，其遊戲軟體更藉由一些圖形與文字達到機械與人類之間娛樂的人機介面。

電腦應用[編輯]

硬體方面：鍵盤、滑鼠、顯示器之間構成
軟體方面：微軟的Windows與蘋果的Mac OS。
網路應用：

註釋[編輯]


稱呼劃分：人機介面此用語通常大量用在工業上的機械與人溝通的硬體（如觸控螢幕，因為英文是Human Machine Interface），而UI則通常是稱呼電腦軟體上的與使用者之介面（User Interface），定義幾乎近似，但是一個是指硬體方面，另外一個稱呼是用在軟體方面。


^ 某種觀點認為「介面」可能在字義上比「界面」適合。Mozilla Taiwan討論區：板名中「界面」應改為「介面」，但依據維基詞典的解釋，「介面」的稱謂通常用於正體，而大陸地區更普遍接受「界面」的譯法，維基詞典：interface


參見[編輯]

人機工程學
人機互動
互動設計
用戶體驗
以用戶為中心的設計
工業工程
虛擬實境
腦機介面
優使性
使用者經驗
自然使用者介面









閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。










 
						取自 "https://zh.wikipedia.org/w/index.php?title=用戶界面&oldid=38961551"					
分類：人機互動 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


العربيةAzərbaycancaБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBrezhonegBosanskiCatalàČeštinaDanskDeutschEnglishEspañolEestiEuskaraفارسیSuomiFrançaisעבריתहिन्दीHrvatskiMagyarBahasa IndonesiaÍslenskaItaliano日本語ಕನ್ನಡ한국어LietuviųLatviešuМакедонскиМонголBahasa Melayuनेपाल भाषाNederlandsNorsk nynorskNorsk bokmålPolskiPortuguêsРусскийСаха тылаScotsSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSvenskaதமிழ்తెలుగుไทยTagalogTürkçeУкраїнськаاردوTiếng ViệtBân-lâm-gú粵語 
編輯連結 





 本頁面最後修訂於2016年2月3日 (週三) 10:15。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 








404 - Not Found


404 - Not Found








































Developing a User Interface for a Custom Task | Microsoft Docs



















Developing a User Interface for a Custom Task


2017-3-3
5 分鐘可讀完
參與者








  The  Integration Services object model provides custom task developers the ability to easily create a custom user interface for a task that can then be integrated and displayed in  SQL Server Data Tools (SSDT). The user interface can provide helpful information to the user in  SSIS Designer, and guide users to correctly configure the properties and settings of the custom task.  
 Developing a custom user interface for a task involves using two important classes. The following table describes those classes.  



Class
Description




DtsTaskAttribute
An attribute that identifies a managed task, and supplies design-time information through its properties to control how  SSIS Designer displays and interacts with the object.


IDtsTaskUI
An interface used by the task to associate the task with its custom user interface.



 This section describes the role of the DtsTaskAttribute attribute and the IDtsTaskUI interface when you are developing a user interface for a custom task, and provides details about how to create, integrate, deploy, and debug the task within  SSIS Designer.  
 The  SSIS Designer provides multiple entry points to the user interface for the task: the user can select Edit on the shortcut menu, double-click the task, or click the Show Editor link at the bottom of the property sheet. When the user accesses one of these entry points,  SSIS Designer locates and loads the assembly that contains the user interface for the task. The user interface for the task is responsible for creating the properties dialog box that is displayed to the user in  SQL Server Data Tools (SSDT).  
 A task and its user interface are separate entities. They should be implemented in separate assemblies to reduce localization, deployment, and maintenance work. The task DLL does not load, call, or generally contain any knowledge of its user interface, except for the information that is contained in the DtsTaskAttribute attribute values coded in the task. This is the only way that a task and its user interface are associated.  
The DtsTask Attribute
 The DtsTaskAttribute attribute is included in the task class code to associate a task with its user interface. The  SSIS Designer uses the properties of the attribute to determine how to display the task in the designer. These properties include the name to display and the icon, if any.  
 The following table describes the properties of the DtsTaskAttribute attribute.  



Property
Description




DisplayName
Displays the task name in the Control Flow toolbox.


Description
The task description (inherited from DtsLocalizableAttribute). This property is shown in ToolTips.


IconResource
The icon displayed in  SSIS Designer.


RequiredProductLevel
If used, set it to one of the values in the DTSProductLevel enumeration. For example, RequiredProductLevel = DTSProductLevel.None.


TaskContact
Holds contact information for occasions when the task requires technical support.


TaskType
Assigns a type to the task.


Attribute.TypeId
When implemented in a derived class, gets a unique identifier for this Attribute. For more information, see Attribute.TypeID property in the .NET Framework Class Library.


UITypeName
The type name of the assembly that is used by  SSIS Designer to load the assembly. This property is used to find the user interface assembly for the task.



 The following code example shows the DtsTaskAttribute as it would look, coded above the class definition.  
using System;  
using Microsoft.SqlServer.Dts.Runtime;  
namespace Microsoft.SSIS.Samples  
{  
  [DtsTask  
  (  
   DisplayName = "MyTask",  
   IconResource = "MyTask.MyTaskIcon.ico",  
   UITypeName = "My Custom Task," +  
   "Version=1.0.0.0," +  
   "Culture = Neutral," +  
   "PublicKeyToken = 12345abc6789de01",  
   TaskType = "PackageMaintenance",  
   TaskContact = "MyTask; company name; any other information",  
   RequiredProductLevel = DTSProductLevel.None  
   )]  
  public class MyTask : Task  
  {  
    // Your code here.  
  }  
}  
Imports System  
Imports Microsoft.SqlServer.Dts.Runtime  

<DtsTask(DisplayName:="MyTask", _  
 IconResource:="MyTask.MyTaskIcon.ico", _  
 UITypeName:="My Custom Task," & _  
 "Version=1.0.0.0,Culture=Neutral," & _  
 "PublicKeyToken=12345abc6789de01", _  
 TaskType:="PackageMaintenance", _  
 TaskContact:="MyTask; company name; any other information", _  
 RequiredProductLevel:=DTSProductLevel.None)> _  
Public Class MyTask  
  Inherits Task  

  ' Your code here.  

End Class 'MyTask  
 The  SSIS Designer uses the UITypeName property of the attribute that includes the assembly name, type name, version, culture, and public key token, to locate the assembly in the Global Assembly Cache (GAC) and load it for use by the designer.  
 After the assembly has been located,  SSIS Designer uses the other properties in the attribute to display additional information about the task in  SSIS Designer, such as the name, icon, and description of the task.  
 The DisplayName, Description, and IconResource properties specify how the task is presented to the user. The IconResource property contains the resource ID of the icon embedded in the user interface assembly. The designer loads the icon resource by ID from the assembly, and displays it next to the task name in the toolbox and on the designer surface when the task is added to a package. If a task does not provide an icon resource, the designer uses a default icon for the task.  
The IDTSTaskUI Interface
 The IDtsTaskUI interface defines the collection of methods and properties called by  SSIS Designer to initialize and display the user interface associated with the task. When the user interface for a task is invoked, the designer calls the Initialize method, implemented by the task user interface when you wrote it, and then provides the TaskHost and Connections collections of the task and package, respectively, as parameters. These collections are stored locally, and used subsequently in the GetView method.  
 The designer calls the GetView method to request the window that is displayed in  SSIS Designer. The task creates an instance of the window that contains the user interface for the task, and returns the user interface to the designer for display. Typically, the TaskHost and Connections objects are provided to the window through an overloaded constructor so they can be used to configure the task.  
 The  SSIS Designer calls the GetView method of the task UI to display the user interface for the task. The task user interface returns the Windows form from this method, and  SSIS Designer shows this form as a modal dialog box. When the form is closed,  SSIS Designer examines the value of the DialogResult property of the form to determine whether the task has been modified and if these modifications should be saved. If the value of the DialogResult property is OK, the  SSIS Designer calls the persistence methods of the task to save the changes; otherwise, the changes are discarded.  
 The following code sample implements the IDtsTaskUI interface, and assumes the existence of a Windows form class named SampleTaskForm.  
using System;  
using System.Windows.Forms;  
using Microsoft.SqlServer.Dts.Runtime;  
using Microsoft.SqlServer.Dts.Runtime.Design;  

namespace Sample  
{  
   public class HelloWorldTaskUI : IDtsTaskUI  
   {  
      TaskHost   taskHost;  
      Connections connections;  
      public void Initialize(TaskHost taskHost, IServiceProvider serviceProvider)  
      {  
         this.taskHost = taskHost;  
         IDtsConnectionService cs = serviceProvider.GetService  
         ( typeof( IDtsConnectionService ) ) as   IDtsConnectionService;   
         this.connections = cs.GetConnections();  
      }  
      public ContainerControl GetView()  
      {  
        return new HelloWorldTaskForm(this.taskHost, this.connections);  
      }  
     public void Delete(IWin32Window parentWindow)  
     {  
     }  
     public void New(IWin32Window parentWindow)  
     {  
     }  
   }  
}  
Imports System  
Imports Microsoft.SqlServer.Dts.Runtime  
Imports Microsoft.SqlServer.Dts.Runtime.Design  
Imports System.Windows.Forms  

Public Class HelloWorldTaskUI  
  Implements IDtsTaskUI  

  Dim taskHost As TaskHost  
  Dim connections As Connections  

  Public Sub Initialize(ByVal taskHost As TaskHost, ByVal serviceProvider As IServiceProvider) _  
    Implements IDtsTaskUI.Initialize  

    Dim cs As IDtsConnectionService  

    Me.taskHost = taskHost  
    cs = DirectCast(serviceProvider.GetService(GetType(IDtsConnectionService)), IDtsConnectionService)  
    Me.connections = cs.GetConnections()  

  End Sub  

  Public Function GetView() As ContainerControl _  
    Implements IDtsTaskUI.GetView  

    Return New HelloWorldTaskForm(Me.taskHost, Me.connections)  

  End Function  

  Public Sub Delete(ByVal parentWindow As IWin32Window) _  
    Implements IDtsTaskUI.Delete  

  End Sub  

  Public Sub [New](ByVal parentWindow As IWin32Window) _  
    Implements IDtsTaskUI.[New]  

  End Sub  

End Class  
See Also
 Creating a Custom Task Coding a Custom Task Developing a User Interface for a Custom Task 










註解										



編輯										


共用

Twitter
Facebook


|

語言

VB
C#



佈景主題


淺色
深色
























































(子公司)使用者介面設計師_和泰汽車股份有限公司 - 104人力銀行












                        (子公司)使用者介面設計師                        
和泰汽車股份有限公司
本公司其他工作



我要應徵
處理中...
儲存工作
處理中...


0~5人應徵
FB 分享
轉寄
檢舉







工作內容

1.設計、優化產品介面與其流程，提出最佳使用者體驗的改善方案。2.能與行銷與數據團隊協同合作，進行上線後功能持續改善與調整。3.熟悉各種原型製作軟體（例：Axure）4. 有基礎 HTML5、CSS3、AJAX、JavaScript等網頁設計概念佳，能與開發和視覺設計團隊協同作業。

職務類別：

網頁設計師、商業設計、平面設計／美編人員 






認識「」職務

詳細職類分析(工作內容、薪資分佈..)
更多相關工作




工作待遇：
依公司規定
工作性質：
全職
上班地點：

	                                    新北市新莊區明中街10號







地圖找工作




管理責任：
不需負擔管理責任
出差外派：
需出差，一年累積時間未定
上班時段：
日班，08:30-17:30
休假制度：
週休二日
可上班日：
兩週內
需求人數：
1至2 人




條件要求


接受身份：
上班族
工作經歷：
1年以上
學歷要求：
大學、碩士
科系要求：
大眾傳播學相關、商業及管理學科類
語文條件：
不拘
擅長工具：
不拘
工作技能：
不拘
具備駕照：
普通小型車
其他條件：
1.擅長Adobe Photoshop、Illustrator、Axure




公司福利

1.2016年每股盈餘近20元。2.近3年新進人員加薪幅度平均約5%。3.其他福利：每年福利金(如旅遊、三節、生日…)每人約6~9萬元。



聯絡方式


聯絡人：
羅小姐
其他：
請透過104投遞履歷 本公司應徵流程:第一關專業科目考試、第二關單位主管面談





更新日期：2017-07-11


與(子公司)使用者介面設計師相關的工作

推薦工作
104 智能管家依據您平常儲存、應徵工作的喜好，為您推薦工作！請先登入My104 會員中心



看過此工作的人也看以下工作
推薦課程




瀏覽工作紀錄
清除







104提醒：
求職應徵請準時赴約並註意安全。如有公司要求您交付提款卡及密碼、信用卡、銀行郵局帳號、身分證，及要求繳費、購買服務或產品等情事，請勿進行並速與警方反詐騙專線165聯繫。看更多>>

























































104人力銀行─錯誤頁









您要找的職缺或公司已結束徵才了 ~但仍然可以：
查詢適合您的最新工作
瀏覽 104 所有工作



















【硬塞科技字典】什麼是 UI／使用者介面？ - INSIDE 硬塞的網路趨勢觀察

















































































INSIDE 硬塞的網路趨勢觀察

選單






新創


趨勢


娛樂


評論


焦點Hightlight

硬塞科技字典
物聯網






硬塞報童


主機與網站應用




訂閱


隨時關註最新創業、科技、網路、工作訊息。























趨勢

【硬塞科技字典】什麼是 UI／使用者介面？ 


2016/5/10



Mia 

UI、User Interface、使用者介面、科技、設計


評論






評論



(Photo Credit: baldiri )
UI（User Interface）中文稱為使用者介面，以產品的角度來看，就是使用者實際接觸產品的部分，他們操作使用者介面的選單或指令，來運用背後的程式。實務開發上則包含外觀、前端和互動設計等範疇。
UI 又常和 UX（User Experience）設計搞混，雖然都是產品設計，UX 著重的是整體流程的「體驗」，大多是無形的，而 UI 則著重在具體的功能和視覺安排上。
不像 UX 設計師要考慮產品的整體觀感，使用者介面設計師專精於「產品怎麼呈現」。
他們負責設計每一個與使用者互動的網頁或畫面，然後確認 UI 能傳達 UX 設計師展示的路徑。舉例來說，UI 設計師做了一個統計資訊面板，可能會把最重要的內容往前放在最上面，或是判斷用來調整圖表的捲軸或控制鈕是不是符合直覺。
UI 設計師通常還要負責確立通用風格指南，讓整個產品的設計語言一致。維持視覺元素的一致，並定義如何顯示錯誤或是警告狀態的動作等都是 UI 設計師的職責。
歡迎加入「Inside」Line 官方帳號，關註最新創業、科技、網路、工作訊息







分享文章或觀看評論

評論






Mia

看起來乖巧的怪人，性不喜出門，愛上網。興趣是半夜滑 app 商店研究新服務以及逛 PTT ，是故言出必宅，笑點難懂。 


Mail














訂閱 INSIDE


隨時關註最新創業、科技、網路、工作訊息。






訂閱





相關文章





評論







知名廠商強力徵才中






Android Engineer (APP, SDK) *赴日工作* 

XFLAG (Mixi旗下遊戲公司) 




創業夥伴- 資料分析工程師 

旅型資訊股份有限公司 




Ruby on Rails Full stack developer 

Zooe Inc. 




測試工程師 Test Engineer 

LINEFukuoka [Momozono代徵] 











新創


踏出「休閒運動的一小步」，Reebok 這款鞋將要登上外太空！



2017/7/20



【合作媒體】iFanr愛範兒 

reebok、太空鞋



台灣新創 Pointimize 獨霸亞洲簡報大賽 挺進歐洲科技盛會



2017/7/14



INSIDE 硬塞的網路趨勢觀察 

Pointimize、RISE、歐洲科技盛會



用電商賣吐司　冷凍包子王轉型豪賭！



2017/7/14



商業周刊 

B2C、烘焙、電商



目標時速 1126 公里，「超級高鐵」Hyperloop One 真空試跑成功！



2017/7/13



Chris 

Hyperloop、超級高鐵



創業不再孤獨，SLP Taipei 創業培訓課程即將開跑！



2017/7/4



INSIDE 硬塞的網路趨勢觀察 

SLP、創業、新創


趨勢


實現環島目標，特斯拉台灣第二座超級充電站現身臺南奇美博物館



2017/7/20



INSIDE 硬塞的網路趨勢觀察 

Tesla、臺南、特斯拉、超級充電站



告別斷線，捷運車廂有 WiFi！北捷免費網路年底前全面升級



2017/7/20



INSIDE 硬塞的網路趨勢觀察 

WiFi、臺北、捷運、無線網路



微軟開發 GLAS 自動恆溫器，結合 Azure 雲端省能源！



2017/7/20



Claire 

Azure、GLAS、微軟、恆溫器



YouTube 公佈第 2 季最成功廣告，前五皆由和泰、統一一手包辦！



2017/7/20



INSIDE 硬塞的網路趨勢觀察 

Google、Youtube



兩週募破千萬，達成率 1300%！ALPHA Camp 和慕課專案要培養「國際級全端工程師」



2017/7/20



Mia 

ALPHA Camp、全端工程師、募資、慕課、課程


娛樂


【Cheng lap 的資訊通鑑】打電話玩 RPG：勇者鬥惡婆、修羅戰記與七座金城



2017/7/20



Chenglap 

BBS、RPG、修羅戰記、撥號、遊戲



花錢當課長 SSR 老抽不到？立委籲修法，明示手遊抽獎機率！



2017/7/20



Chris 

SSR、手遊、課金



《冰與火之歌》第七季熱燒，能為 HBO 在網路趕上 Netflix 車尾燈嗎？



2017/7/19



Chris 

HBO、streaming、冰與火之歌



華文首部 VR 電影怎麼拍？蔡明亮說沒有構圖、特寫，要當劇場去規劃



2017/7/18



Chris 

VR、蔡明亮



你的下一部遊戲機，會是一臺 Mac 電腦嗎？



2017/7/18



【合作媒體】iFanr愛範兒 

game、MAC


評論


兩週募破千萬，達成率 1300%！ALPHA Camp 和慕課專案要培養「國際級全端工程師」



2017/7/20



Mia 

ALPHA Camp、全端工程師、募資、慕課、課程



oBike 來台引爭議，問題到底出在哪？



2017/7/20



Mashdigi 

oBike、共享單車、市容問題



在萬物聯網的新時代下，區塊鏈才是撐起一切的安全關鍵！



2017/7/20



精選轉貼 

區塊鏈、萬物聯網



從 Google 出走的這五家「創業車隊」，其命運各自為何？



2017/7/19



【合作媒體】36kr 

Google、無人車創業



Google「你畫我猜」數據分析：你畫圈是順時針還是逆時針？台、日和其他國家大不同



2017/7/18



Mia 

Google、文化、文字、畫圈、畫圓









訂閱 INSIDE


隨時關註最新創業、科技、網路、工作訊息。






訂閱





關於 INSIDE


聯絡我們


隱私權聲明


著作權聲明



© 2009-2017 INSIDE 硬塞的網路趨勢觀察 
























 




[程式] QT- 視覺化使用者介面設計(GUI) 軟體介面自己畫，來自創元件吧！ - 蕾咪哈哈-歐美旅遊時尚|理財觀點







































 



























 
 







關於蕾咪 Rami
廠商合作
讀者優惠
歐美代購
 

facebook
youtube
instagram
google+
 









“Fashion Blogger with Chic Travel Style”



 


首頁 » ♥ 學習筆記Learning » 程式語言 Coding » [程式] QT- 視覺化使用者介面設計(GUI) 軟體介面自己畫，來自創元件吧！





♥ 學習筆記Learning • 程式語言 Coding
[程式] QT- 視覺化使用者介面設計(GUI) 軟體介面自己畫，來自創元件吧！
5 年 ago7 Commentsby 蕾咪














人，都是視覺化的動物！有時候寫程式，真的會寫得很無聊，因為沒有美美的軟體畫面，看著那堆黑底白字跳動，千辛萬苦最後只跑出一個對的數字，那種空虛感真是油然而生，好吧！多多少少混著一點點成就感。
這幾天玩QT，玩得很開心，雖然自己之前寫的都是程式黑手在做的事情，但是那堆像是火星文一樣的程式碼，在經過編譯器的巧手之後，就會變成一個個視覺化的軟體介面，最酷的是，QT所開發出來的軟體，屬於跨平臺支援的，意思是當你寫好了後，丟進MAC，就會變成美美的MAC版應用程式；丟進WIN7就變成了WIN7版的應用程式，毫無違和感。
當然，我們也可以跟官方書籍一樣，搞得很花俏，用個粉紅色或咖啡色這樣。
可以輕易的做出屬於個人Style的軟體介面，或者是可以學學官方網站示範的那招，連圖形都自己畫。

最棒的是，因為蕾咪以前喜歡設計網站，而Qt的軟體介面設計，其實是以XML語言為主。所以，在一個團隊中合作開發新軟體時，往往會有這樣的分工，包含「使用者介面設計師」、「軟體開發工程師」等，兩者的合作，就能做出美美又好用的軟體工具了；常見的是，許多專業的使用者軟體介面設計師，是純設計出生的，所以並不需要太高難度的程式基礎，只要有敢接觸網站設計部分語法的能力，就可能可以勝任這個工作。







在這裡，我們需要有一些簡單的概念。
在網站設計的時候，圖形往往是存放在一個image資料夾，使用類似「嵌入」的方式呈現在網頁上。
因此，我們常常會使用一些固定的路徑，讓不同的網頁可以找到同一個圖片來顯示。
而在軟體開發時，QT裡面同樣也有個資源檔，附檔名是*.qrc，裡頭同樣存放著一個image資料夾，供軟體執行時存取，這裡面就儲存著，一些軟體元件設計師自行設計好的圖形元件，屬於比較完全自創的設計。
看看這個♥愛心的例子，不管是軟體顯示或系統工具列，都是呈現♥愛心這個圖形。

而如果是採用預設的軟體介面設計時，事實上，QT也提供了一個叫做QT Designer的工具，只要「拖拖拉拉」就可以設計完一個軟體工具介面，甚至只要再學習一點點「你丟我接」的概念，就可以做出簡單的小工具了。

因此，為了開始設計一些美美的介面，蕾咪需要練習一些簡單的語法。
在開始設計介面之前，請先想像自己是一場電影的導演。
這時候我們需要關心幾件事情，同時也來學習Graphics View的架構。
1. 場景 Scene      (拍電影的場地)
2. 角色 Item          (場地中的角色與物品等)
3. 顯示區域 View (其實就是觀眾真正能看的到的東東啦！請想像它是你的攝影機。)

透過這樣的概念，我們一一來介紹如何使用。
1. 場景 Scene
型別：QGraphicsScene
場景裡面，我們同時需要考量的是各個角色的位置與工作分配，管理好彼此間的互動，藉此呈現一幕好電影。
因此，場景是我們最重要的介面，用來管理與分配工作給各個角色；QT預設Binary Space Partitioning Tree來做角色的管理動作。
2. 角色 Item
型別：QGraphicsItem
在場景裡面上演的角色，自然就是我們的演員了。
別忘了我們是能夠互動的軟體介面，因此，大部分的角色都支援滑鼠或鍵盤的互動功能。^^
3. 顯示畫面
型別：QGraphicsView
當導演指示攝影師操作畫面時，我們可以自由的選擇要用甚麼樣的視角去呈現，並且是否要縮放或特寫；因此，對於軟體的使用者而言，它們真正能接觸到的就是View這一塊，不同於一般電影的概念是 軟體本身是具有互動特性的，因此，View也同時是接收互動的區域，再藉由View告知Scene後，Scene再統籌各個Item去做出互動。
# 座標系統
1. 場景座標系統→決定每個角色的實際位置。
2. 角色座標系統→以角色為中心點，讓自己知道自己在場景的哪個位置。
3. 顯示畫面座標系統→決定你的攝影機要拍攝場景的哪一部分。
有了這些大致的概念後，再來好好的玩玩介面設計囉！(>  W  <)O
以下有非常多實用的參考資料，大家也可以點進去看看囉！
 
※參考資料(Reference)
[1] 解析QT資源文件使用方式 http://mobile.51cto.com/symbian-270121.htm
[2] Qt4 : Gossip: QT 資源系統 http://caterpillar.onlyfun.net/Gossip/Qt4Gossip/QtResourceSystem.html
[3] Glade – A User Interface Designer http://glade.gnome.org/
[4] How to create dynamic QML component by XML
http://www.developer.nokia.com/Community/Wiki/How_to_create_dynamic_QML_component_by_XML
[5] 使用 Qt GraphicsView 顯示 OpenNI 影像資料 http://kheresy.wordpress.com/2011/08/18/show_maps_of_openni_via_qt_graphicsview/
[6] Graphics View Framework http://doc.qt.digia.com/4.7/graphicsview.html


相關
 



 








About the author


 

蕾咪

蕾咪，來自台東，卻不定期旅居歐洲的工程師女孩，身兼作家、部落客、創業家等多重身份。畢業於臺大電子所，曾在義大利商與美商擔任研發工程師；走訪世界後，發現對台灣有段割捨不了的愛，讓我們一起努力成為想要的自己吧！:) 合作邀稿請聯繫：ramihaha@gmail.com





View all posts










You may also like




 


[品酒] 上課心得-蕾咪的吃貨飲食原則，愛蔬食不愛素食。

 


 


[為了部落] 部落格應該怎麼經營？如何運用部落格經營個人品牌？

 


 


[理財]  培養職場競爭力，昂貴課程變免費，5種政府補助資源分享

 


 


[蕾咪♥旅行] 英文不好，怎麼到國外自助旅行？








Pingback: 資料視覺化 – 紀錄學習程式語言的內容()





豆花



QT的介紹得很好懂,感謝






Rami



哈哈 很開心你這麼說。:)








waftwalker



我從你舊站連過來的
謝謝你的資訊　讓我學了不少招
八月退伍　九月才去歐洲洽公回來  歐洲消費真的太高了
最近才剛開始學QT 　
在歐洲打拼加油啊






ramihaha



呵呵 那我們一起加油囉:)








amedar



I appreciate, cause I found exactly what I was looking for. You’ve ended my 4 day long hunt! God Bless you man. Have a nice day. Bye






ramihaha



Thank you for your post,but I left only one msg from you.
Because too many comments more than 100msgs from the same account is not good to me.











 
 

							電子郵件位址						











 


蕾咪，來自台東，卻不定期旅居歐洲的工程師女孩，身兼作家、部落客、創業家等多重身份。畢業於臺大電子所，曾在義大利商與美商擔任研發工程師；走訪世界後，發現對台灣有段割捨不了的愛，讓我們一起努力成為想要的自己吧！:)
合作邀稿請聯繫：ramihaha@gmail.com



♥ 城市旅遊懶人包 ♥ 




♥ 巴黎自由行攻略 ♥open all | close all


♥ 倫敦自由行攻略♥ open all | close all


♥ 義大利自由行攻略 ♥open all | close all


♥ 歐美電商攻略 ♥ open all | close all


♥ 背包客棧♥ 首頁 嚴選好文open all | close all


♥ PTT論壇♥自我成長x感情相處 [PTT] 大家都用什麼方式督促自己呢？談實踐夢想與達成目標的方式。(WomanTalk)
[PTT] 如何離開沉迷網路遊戲的自己？
[PTT] 對學歷的迷惘 (CareerPlan)
[PTT] 胖女生如何挑衣服？(Mix_Match)
[PTT] 如何愛一個人，讓所愛的人感到幸福？

[PTT] 要什麼條件才能讓男生想追求？

[PTT] 如何找回消逝了的單純之心？
[PTT] 如何讓"個性"變的有魅力？
♥ PTT論壇♥ 理財系列文open all | close all


 


♥ 贊助商連結 ♥ 

 
 

















 




♥ 學習筆記Learning Archives - 蕾咪哈哈-歐美旅遊時尚|理財觀點























 






















 
 







關於蕾咪 Rami
廠商合作
讀者優惠
歐美代購
 

facebook
youtube
instagram
google+
 









“Fashion Blogger with Chic Travel Style”



 


首頁 » ♥ 學習筆記Learning




Category - ♥ 學習筆記Learning






理財規劃 CFP • 理財諮詢案例 
[理財] 小花平臺-妳專屬的保險顧問與理財規劃專家
8 個月 agoAdd Commentby 蕾咪





 






 


理財規劃 CFP • 美股投資
[理財] 美國花旗銀行開戶步驟教學-花旗全球速匯，美國台灣跨國匯款免手續費


蕾咪年底安排了一趟前往美國洛杉磯的旅行，除了算是散散心以外，主要的任務就是到美國花旗銀行開戶，方便海外資金匯回台灣，也...





 


♥理財規劃教學 • 理財規劃 CFP
[理財] 關於購買終身險與定期險的差別？哪些人適合終身險(定期險)？


這篇文章撰稿於2013年，原張貼於PTT的保險版，轉貼回來，單純想要記錄自己想法變化的過程；在那之後的隔年，蕾咪自己因...





 


♥ 學習筆記Learning • ♥ 蕾咪愛生活 • 蕾咪愛健康 • 蕾咪愛美食
[品酒] 上課心得-蕾咪的吃貨飲食原則，愛蔬食不愛素食。


最近，上了快一個月的品酒課，發現嗅覺與味覺變得比過去更敏銳，對於食物更容易抱持著感恩的心情去品嘗，畢竟即使只是一滴葡萄...









 


為了部落 Blogger • 理財規劃 CFP
[理財] 2016年免稅扣除額總整理-部落客、SOHO族應該怎麼報稅節稅？


又到了5月報稅季，每年的免稅額都有點些微調整，加上蕾咪從一般上班族，變成了SOHO族也有一年了，報稅的項目多了很多以前...





 


♥ 學習筆記Learning • 為了部落 Blogger
[為了部落] 部落格應該怎麼經營？如何運用部落格經營個人品牌？


前陣子蕾咪剛好受邀一個講座，分享給有心想經營部落格的人一些自己的Know...





 


♥ 學習筆記Learning • ♥理財規劃教學 • 創業資源整理
[理財]  培養職場競爭力，昂貴課程變免費，5種政府補助資源分享


從小開始的煉金術，就是去瞭解遊戲規則與尋找資源；人生中，其實每一件事情，都有它自訂的遊戲規則，只是我們是先知先覺、後知...





 


♥ 學習筆記Learning • 外語學習 Language
[蕾咪♥旅行] 英文不好，怎麼到國外自助旅行？


這是個蕾咪常常被問的問題，其實，蕾咪的英文也很不好，第一次出國前往德國時，聽也聽不懂、說也不太會說，甚至比一些學弟妹們...





 


♥ 學習筆記Learning • 理財規劃 CFP
[理財]國泰人壽網路投保簡易教學。如何為自己規劃保險？該選擇終身或定期壽險？妳必須知道的「眉角」！


可以給我保險規劃的建議嗎？」蕾咪常常遇到網友詢問這樣的問題，買保險其實沒有絕對的標準範本，重點是怎麼買對CP值，買對的...





 


♥ 學習筆記Learning • 為了部落 Blogger • 理財規劃 CFP
[理財] Google Adsense哪個收款方式比較好？如何收款免手續費？


Google Adsense怎麼收款免手續費？這個問題，應該是許多使用Google...








 
 

							電子郵件位址						











 


蕾咪，來自台東，卻不定期旅居歐洲的工程師女孩，身兼作家、部落客、創業家等多重身份。畢業於臺大電子所，曾在義大利商與美商擔任研發工程師；走訪世界後，發現對台灣有段割捨不了的愛，讓我們一起努力成為想要的自己吧！:)
合作邀稿請聯繫：ramihaha@gmail.com



♥ 城市旅遊懶人包 ♥ 




♥ 巴黎自由行攻略 ♥open all | close all


♥ 倫敦自由行攻略♥ open all | close all


♥ 義大利自由行攻略 ♥open all | close all


♥ 歐美電商攻略 ♥ open all | close all


♥ 背包客棧♥ 首頁 嚴選好文open all | close all


♥ PTT論壇♥自我成長x感情相處 [PTT] 大家都用什麼方式督促自己呢？談實踐夢想與達成目標的方式。(WomanTalk)
[PTT] 如何離開沉迷網路遊戲的自己？
[PTT] 對學歷的迷惘 (CareerPlan)
[PTT] 胖女生如何挑衣服？(Mix_Match)
[PTT] 如何愛一個人，讓所愛的人感到幸福？

[PTT] 要什麼條件才能讓男生想追求？

[PTT] 如何找回消逝了的單純之心？
[PTT] 如何讓"個性"變的有魅力？
♥ PTT論壇♥ 理財系列文open all | close all


 


♥ 贊助商連結 ♥ 

 
 
















 




程式語言 Coding Archives - 蕾咪哈哈-歐美旅遊時尚|理財觀點























 






















 
 







關於蕾咪 Rami
廠商合作
讀者優惠
歐美代購
 

facebook
youtube
instagram
google+
 









“Fashion Blogger with Chic Travel Style”



 


首頁 » ♥ 學習筆記Learning » 程式語言 Coding




Category - 程式語言 Coding






♥ 學習筆記Learning • 程式語言 Coding 
[程式] Django x Python & Android x Java 開始自學Django Web與Android App開發囉！創業旅程開始囉！
3 年 agoAdd Commentby 蕾咪





 






 


♥ 學習筆記Learning • 程式語言 Coding
[程式] 給想學程式女孩們的交流社群 (PyLadies, Rails Girl, Django...


這是一個小小的筆記，紀錄一下最近學習到關於網路程式語言的東西，以及重要的是給女孩們的免費資源。...





 


♥ 學習筆記Learning • 程式語言 Coding
[程式] QT-Connection 機制-多執行緒


為了要解決多執行緒(Multi...





 


♥ 學習筆記Learning • 程式語言 Coding
[程式] QT- 視覺化使用者介面設計(GUI) 軟體介面自己畫，來自創元件吧！


人，都是視覺化的動物！有時候寫程式，真的會寫得很無聊，因為沒有美美的軟體畫面，看著那堆黑底白字跳動，千辛萬苦最後只跑出...









 


♥ 學習筆記Learning • 程式語言 Coding
[程式] QT – Chap.7 Reimplementing Event...


如果是一個按鍵事件，我們將會指派QEvent物件給QKeyEvent，並且確認看看是哪個按鍵被按下。如果這個按鍵是Ta...





 


♥ 學習筆記Learning • 程式語言 Coding
[程式] QT─ Chap. 7 Event Processing –...


在QT當中，一個事件是QEvent子類別的一個實體(Instance)。QT能處理超過一百種類型的事件，每一種類型由個...





 


♥ 學習筆記Learning • 程式語言 Coding
[程式] QT – Chap. 7 Event Processing + Chap...


因為需要支援後續的實作，蕾咪必須學會幾樣東西，包含Multithreading、Network...





 


♥ 學習筆記Learning • 程式語言 Coding
[程式] QT-C++ QString的類型轉換


為了避免每次找了半天的資料，最後又要重新找過一遍，因此蕾咪將計就計會做個摘要整理。...





 


♥ 學習筆記Learning • 程式語言 Coding
[程式] QT各式GUI介面解析-Item Based vs. Model Based


再經過幾天閱讀了大量的QT文件與規格以後，蕾咪的任務正式起跑了。...





 


♥ 學習筆記Learning • 程式語言 Coding
[程式] QT中的qmake常用指令


QMake Commands QMake by default does ‘check’...








 
 

							電子郵件位址						











 


蕾咪，來自台東，卻不定期旅居歐洲的工程師女孩，身兼作家、部落客、創業家等多重身份。畢業於臺大電子所，曾在義大利商與美商擔任研發工程師；走訪世界後，發現對台灣有段割捨不了的愛，讓我們一起努力成為想要的自己吧！:)
合作邀稿請聯繫：ramihaha@gmail.com



♥ 城市旅遊懶人包 ♥ 




♥ 巴黎自由行攻略 ♥open all | close all


♥ 倫敦自由行攻略♥ open all | close all


♥ 義大利自由行攻略 ♥open all | close all


♥ 歐美電商攻略 ♥ open all | close all


♥ 背包客棧♥ 首頁 嚴選好文open all | close all


♥ PTT論壇♥自我成長x感情相處 [PTT] 大家都用什麼方式督促自己呢？談實踐夢想與達成目標的方式。(WomanTalk)
[PTT] 如何離開沉迷網路遊戲的自己？
[PTT] 對學歷的迷惘 (CareerPlan)
[PTT] 胖女生如何挑衣服？(Mix_Match)
[PTT] 如何愛一個人，讓所愛的人感到幸福？

[PTT] 要什麼條件才能讓男生想追求？

[PTT] 如何找回消逝了的單純之心？
[PTT] 如何讓"個性"變的有魅力？
♥ PTT論壇♥ 理財系列文open all | close all


 


♥ 贊助商連結 ♥ 

 
 
















像個設計師一樣設計你的 APP 介面 - ALPHA Camp Blog                                         Menu       December 25, 2014  像個設計師一樣設計你的 APP 介面美國在2014年初，透過行動裝置的上網量正式超越了桌面電腦，從此確立了行動裝置取代桌面電腦成為一般大眾接受資訊的主流終端。也因此越來越多的 Start-up 將自己的產品重心放在行動 APP 上面。然而隨著市場上的 APP 數量爆發性成長，如何從眾多的產品中吸引使用者、黏住使用者，使用者經驗設計變成了其中一個很重要的環節。  使用者經驗設計的範疇非常大，包含瞭解使用者、挖掘使用者潛在動機到易用性、美學等等，通俗點來說，如何讓一個產品給使用者爽的感覺，其中所包含的知識與方法都是所謂使用者經驗設計。  在整個 APP 的設計之中，介面與使用流程是使用者最直接體驗到產品好壞的地方，即便你在前期研究發想，抓住了很棒的價值訴求、問題解決方式，而在 APP 設計上的最後一哩上－－介面與流程給使用者不好的印象，你前面的努力便功虧一簣，由此可以見介面設計的重要性。  這篇文章將會帶大家實地重新設計一個簡單的 APP 介面，從中讓大家熟悉介面設計上的思考方式。整個設計的流程包含： 框定你的設計範圍整理你的資訊架構考慮資訊的不同狀態考慮資訊的流動性發揮你的美感 裡頭我會使用最近給一位朋友的產品－－Phofun 介面上的建議與修改方案為例帶大家思考。  Phofun 是一款讓朋友間彼此販賣創意照片的社群 APP。在裡頭每個人給每張照片定價，並用一句話形容照片後分享給朋友，收到照片的朋友，一開始沒辦法看到照片，只能從這張照片的敘述以及價格，來決定自己要不要使用 APP 內的金幣來實際觀看這張照片，觀看後讓使用者即時回饋評價這張照片。  簡單地說，這是一個藉由窺看慾望以及虛擬經濟為驅動的照片社群，最近 Phofun 想要讓社群從認識的朋友彼此分享擴展為讓不認識的朋友也可以互相分享販賣照片，也就是要建立一個賣場，讓全世界彼此不認識的人，也可以購買觀看互相的照片。  在開發過程中，我朋友他還沒有細想賣場的介面便直接開發了，以下這張圖是當時開發中的介面，看到這張圖以後你會怎麼重新設計它呢？  看起來不知道從哪裡下手嗎？ 來跟著我一起一步步去整理自己的思緒重新設計它吧！框定設計範圍動手設計之前，先問問自己「我可以設計的範圍在哪裡？」，有些專案可以從前期調查開始挖掘需求、有些專案已經定下了商業目標得從互動設計上發揮……，每次設計都要先釐清你這次設計可以發揮的限制在哪裡，避免自己一頭熱最後設計出開發上來不及、無法融入現有產品的產品。  而在這次介面設計案例中，我無法重新定義需求、無法定義使用者與產品的互動方式以及產品設計語言等等，我們能做的是最基礎的介面設計。在這個階段，我們的設計目標是要確保介面表達出適當及適合的資訊，讓使用者清楚理解介面互動的方式。整理你的資訊架構在拿起你的鉛筆開始畫介面之前，先思考你的介面上需要呈現什麼資訊。 首先是整理你的產品資訊架構（Information Architecture），也就是在你的產品中裡頭的資訊彼此的關連性、階層關係，進而去設計這些資訊以什麼方式組織呈現給使用者。  在我們的案例中，賣場裡頭賣的是照片，我們需要先思考每一張上架的照片呈現哪些資訊，並且同時思考這些資訊彼此的關係。比如說在照片資訊內，裡頭的賣價與倒數時間是一塊的，可以把它分類出來，方便之後介面上設計。  整理結果如上圖所示，有了他之後我們才能瞭解到這個介面需要呈現哪些資訊、這些資訊的分類關係。  為什麼要知道這兩點呢？因為瞭解了需要呈現哪些資訊，你才知道介面上要放什麼資訊；瞭解了這些資訊的分類關係，你才知道資訊要怎麼放在介面上。  在介面上，我們會傾向會把同類的內容與互動元件放在一起，讓使用者更容易理解元素之間的關係。那為什麼放在一起會讓使用者更容易理解呢？那是因為在原因是在完形心理學裡頭有所謂的接近法則（law of proximity），如果兩個元素緊密地放在一起，人類會將這兩個東西建立關聯，即使是不相似的事物也可能因為距離相近，而在視覺上產生群組效果，比如說下圖左右兩邊都有圓形，但你不會把這兩個圓形當做同一個群組的元素。  考慮資訊的不同狀態接下來，要考慮介面上資訊的不同狀態，因為 APP 介面並不是一張畫在固定大小紙上的畫，而是可與使用者互動來變化自己部分介面資訊。比如說在我們的案例中，每一張照片有著「我還沒買過」、「我已經買過的狀態」，而評價資訊上則會有「我還沒評價」「我已經評價」的不同狀態。  這些狀態會隨著使用者的互動而變，並且也是需要呈現在介面上讓使用者看見，藉由這些狀態變化的資訊，使用者才能感受到自己與系統正在互動，並且理解自己的操作狀態。考慮資訊的流動性除了介面的不同狀態外，介面設計與平面設計的差別還有在於資訊是流動的，也就是介面上的資訊並不是固定長度的，比如說每個人的 ID 名字長度不一樣、照片敘述的長度也不一樣、剩下的倒數時間不一樣、評價數也是不一樣的，而這些不同長度的文字有可能會在畫面上與其他 UI 元素碰撞，比如說底下這個購買介面，當商品名過長時會覆蓋到付款的按鈕。  這個問題有以下三種處理方式：限制長度 限制長度可以分為輸入限制以及顯示限制，輸入限制是指使用者在輸入資訊時，限制他可以輸入的字元長度；顯示限制則是當資訊長度超過顯示範圍時，則隱藏過長的資訊，最常使用的是截斷資訊後加上刪節號（ellipsis）。動態調整大小 根據不同的文字長度，在不失可讀性範圍內去動態縮小文字。讓文字根據長度自適應大小。動態調整顯示形式 有些資訊有不只一種的表達方式，當資訊過長時可以使用比較簡短的表達方式，比如說 September 換成 Sep.、1200 換成 1.2K、1分30秒換成 90 秒……等等。對於介面上要呈現的資訊都思考過以後，你就可以在紙上打草圖或是使用 Axure RP、Balsamiq 等原型工具畫 wireframe。發揮你的美感當草圖畫完，檢查確認後沒有問題後，打開你的 Photoshop、Illustrator 或是 Sketch來畫出漂亮的視覺稿吧！最終的方案中，可以看見我是怎麼將之前整理的資訊表現在介面上：  我把資訊架構中同一族群的元素放在一塊，比如說把價錢與購買倒數時間一塊放在右上角，讓使用者一眼就知道購買相關的資訊。對於介面不同狀態的表現，我讓使用者已經購買的照片背景轉暗，表示對照片已經操作過了；購買資訊（價錢與購買倒數時間）對使用者來說也已經沒有意義了，所以將他隱藏起來換為「已購買」字樣；對照片評價的部份，我運用小花、大便與評論的 icon 顏色來表現使用者有沒有對照片評價，而對於不同長度的資訊，我分別對他們做不同的處理：倒數時間：只顯示最高單位的時間，比如說還剩 1 天 20 小時 5 分，只顯示 1 天，理由是在 Phofun 賣場裡，並不像拍賣喊價應用對時間資訊有這麼高的需求，所以隱藏到對使用者重要度沒這麼高的時間訊息。評價數量：運用一千轉為 1K 、一百萬轉為 1M 的方式，限制評價數量所用的字元數在三個以內。照片敘述：限制使用者只能輸入 70 字元，並且根據不同長度的字數動態調整文字大小，小於 28 字元字體大小為 16px、 28 ~ 56 字元時字體為 15px 、而大於 56 字元時為 12px。 而最後我評估認為評價資訊中的購買數，對使用者來說並不是一個重要的指標，使用者想瞭解的是其他人對這張照片的好壞，因此小花數、大便數以及評論數才是對使用者來說重要的元素，因此去除購賣數資訊，並且把可能需要對圖片進行購買、刪除以外的操作，像是檢舉、分享……等可能的操作藏在評價列最右邊的刪節號裡頭，當使用者點下刪節號才會出現更進一步的選單。開始動手設計你自己的 APP 介面學習了怎麼設計 APP 介面後，你是不是手癢想趕快設計自己的 APP 了呢？趕快動手開始設計你的APP UI 吧！設計完以後在底下留言，分享炫耀你所設計的 APP 介面吧！如果設計上遇到了什麼問題，也歡迎在底下留言發問！  Photo Credit： Jeshu John, CC License. 作者介紹 最新文章About Lucien Lee畢業於商學院，但不甘於停留在商業思考，跑到電腦科學裡頭研究 Human Computer Interaction ，遊走在設計、資訊以及商業領域之間。 我相信設計的過程最重要的是原型（Prototyping），去驗證去實踐想法的過程才能讓設計真正與現實接軌，而社會最基礎的創新來自於打造（Crafting），唯有像個工匠直面面對自己的產品，才能創造實質的價值給這個社會。 曾為 HackNTU 共同創辦人、網路及平臺服務程式設計課程講師、阿裡巴巴集團互動設計師。 （個人部落格 Let's make things : http://make.lucienlee.cc）用 Keynote 做出令人驚艷的 APP 原型 - April 20, 2015像個設計師一樣設計你的 APP 介面 - December 25, 2014 如何善用 A/B Testing 提昇網站成效？ Android App Developer 的第一哩路SharePost tagsAPP Desginapp 設計DesigniOSProduct DesignUI介面使用者經驗產品設計 Leave a comment Cancel replyYour commentName* E-mail* Website Math Captcha 54 +  = 64  訂閱部落格Startup人才需要的觀點與技能，課程資訊與交流活動，每週直達你的信箱       ALPHA Camp 貼文分類Bernard Cafe (24)Startup Skills 技能 (165)技術力 (63)數據力 (3)行銷力 (45)設計力 (23)軟實力 (48)Startup World 觀點 (95)人物專訪 (12)新創案例 (29)新創職涯 (10)新創趨勢 (28)活動直擊 (12) 近期貼文    課程筆記分享：【2017 紫牛學校 x ALPHA Camp】 #1 產品戰爭 - 移動互聯網下半場，產品經理該如何應對？ Jun 9th, 2017     Minerva --- 一所顛覆高等教育的新型態大學 Mar 21st, 2017     【ALPHA Camp 校友聚焦】 不想上班有限公司共同創辦人梁多多專訪 Mar 7th, 2017     4 個預告你的 Prototype 將會失敗的重要跡象 Mar 4th, 2017     拿到用戶資料以後該怎麼做？--- 行銷應用案例分享 Feb 23rd, 2017     創業家何時該決定放棄？ Feb 21st, 2017                                       
﻿








北美智權股份有限公司

































 


 













 
智權報總覽 > 產業與經濟
          













 


淺談Apple的使用者經驗與人機介面的設計原則(上)




葉雪美╱經濟部智慧財產局專利一組專利高級審查官╱台科大專利研究所兼任助理教授
2014.04.16












本文將介紹Apple公司的使用者經驗與人機介面的設計原則，以及Apple的iOS7全新行動作業系統的視覺設計(下期刊登)，讓讀者能瞭解Apple公司如何以使用者觀點及使用者經驗來開發人機介面設計。 


壹、前言 
              2007年iPhone推出市場時，iPhone簡潔的設計雖令人驚艷，由於沒有實體鍵盤、也沒有複製與貼上、電子郵件等功能，與人們使用手機的習慣不相符，市場的評價正面負面兩極化，許多人覺得這是一個失敗的作品。不過，經過這些年的市場檢驗，iPhone受社會大眾的肯定後，大部分手機都採用觸控螢幕，手機的設計大都是扁薄長方形的機身配置矩形的大螢幕，使用人機互動的圖形介面。 
              對消費者而言，優良的電子產品除了要有簡約且吸引人的外觀設計之外，更重要的是，要具有容易理解、易於操作、使用順心的使用者介面。iPhone除了是一款具有拍照、個人數位助理、媒體播放器、電子郵件、無線通訊、網頁瀏覽等多功能的智慧型手機，iPhone推出以手勢輸入與多點觸控理念的人機互動介面，在使用者介面上有虛擬鍵盤的設計。除此之外，iPhone還可透過網路的App Store下載（付費及免費）應用程式實現虛擬專線網路服務，例如：電玩遊戲、聽音樂，圖庫、瀏覽網頁、GPS導航以及連接社群網路...等（如圖1所示）（註1）。截至2013年底，AppStore已提供超過1,000,000個以上的應用程式，Apple公司則以銷售分成的方式從App Store中獲利。（註2） 
              Apple公司從Macintosh電腦開始就非常重視使用者經驗與人機介面的設計，又延續Macintosh介面的經驗而發展出iPhone的多點觸控介面，開發出新的人機介面互動模式。本文將介紹Apple公司的使用者經驗與人機介面的設計原則，以及Apple的iOS7全新行動作業系統的視覺設計，讓讀者能瞭解Apple公司如何以使用者觀點及使用者經驗來開發人機介面設計，另一方面希望能提供給我國軟體開發廠商在設計人機介面作為參考之用。 

圖1 2013年的iPhone前10大的付費及免付費Apps.
              貳、Apple公司的人機互動介面設計 
              iPhone提出了一個革命性的使用者介面與互動模式，無論使用者身在何處，都可以瀏覽網頁，使用網路的應用程式，並使用iPhone內建功能，例如：電子郵件應用程序、iPod與數位相機等。手機改變了人與人之間的通訊習慣，而iPhone的人機互動介面則改變了人類與科技之間的關係，人們不再覺得科技產品是高不可攀的、困難學習與使用的、冷漠的。Apple的人機互動介面的設計是依照使用者的實際思考的邏輯與操作習慣去設計，將使用者的使用體驗融入應用程式的運作平臺，因此，無論是年幼的5歲兒童或是7-80歲的老人都能直覺的使用觸控螢幕上的圖形介面與iPhone互動。 
              iPhone不但改變了人與人之間溝通的文化，進一步影響人們的消費習慣與商業型態，創造了龐大的手機商機與新的商業模式。近年來，許多娛樂、醫療、餐飲、銀行、零售等通路都在善用iPhone的應用程式體系而強化其服務效率。Apple公司為iPhone、iPod Touch以及iPad等產品開發出App Store的應用平臺，允許使用者從iTunes Store瀏覽及下載一些經由iOS開發的應用程式，這些改變了商店的使用者介面型態及使用者的購物體驗。iOS是Apple公司為行動裝置所開發的作業系統，支援的裝置包括iPhone、iPod touch、iPad、Apple TV。iOS作業系統與Android及Windows 作業系統不同，不支援非Apple硬體的裝置。由這些年的App Store實務可得知，iOS應用程式的成功是取決於其中使用者介面的品質，如果使用者發現某一應用程式不具有吸引力，又不容易使用，即使是最快、最強、功能最完整的應用程式，在 App Store很快就會被淘汰。 
              Apple公司從Macintosh電腦開始就非常重視人機介面的設計，iPhone的多點觸控介面也是延續Macintosh介面的經驗而發展出來的。進一步言，iPhone的人機介面與互動模式將原本需要鍵盤操控的手機的操作變得更為容易、更順手與更人性化。使用者只需用手指在螢幕錶面觸動，就能啟動與操作應用程式與開啟檔案。如果想要放大或縮小數位相片，只要將兩根手指在相片對角線的向放大或縮小的方向拖曳後放開即可，這種設計可應用在文件編輯、圖片瀏覽、網頁瀏覽、文字瀏覽等操作。這種獨特、創新、手勢控制（Finger Gestures)的人機介面設計令人驚艷，這也是iPhone成功的因素之一。 
              2005年，Apple公司出版人機介面的設計指南（Apple Human Interface Guidelines）（註3），該指南中介紹iPhone的內建作業環境，以及如何延續Macintosh作業系統的使用者經驗到iPhone介面。2007年，Apple公司為軟體開發者公開人機介面的設計指南（iPhone Human Interface Guidelines）（註4），其中介紹了iPhone的作業環境，以及如何將使用者經驗應用在作業系統內容，詳細解釋如何為他們的作業系統設計出優秀的使用者介面，以便它能在iPhone上清楚顯示及有效的執行，進一步說明如何應用使用者介面的設計原則到iPhone的作業系統中，最後，提供了許多的設計原則與設計指標，指導App Store軟體開發者如何在網路上設計一個優秀的使用者介面，幫助他們解決及處理特定的設計問題，以確保他們的介面能在iPhone上清楚顯示及有效的執行工作。Apple公司之後的iOS作業系統的更新版本（iOS Human Interface Guidelines）（註5）以及iOS7的人機介面也是遵循著前面的使用者經驗及使用者觀點的設計原則進行設計。 
              叄、Apple公司人機介面的設計原則（註6） 
              Apple 公司的人機介面指南（Human Interface Guidelines）分為兩個部分，第一部分詳細說明人機介面與互動模式的設計原則，（1）反應使用者的心智（2）隱喻（3）明確與隱含的動作（4）直接操作（5）所見即所得（6）回饋與溝通（7）使用者控制（8）一致性（9）可逆的操作系統（10）穩定的視覺感知（11）美學的完整性（12）無強制回應模式，第二部分延續Macintosh的經驗並定義出的介面元素及設計原則，介面元素包含：選單、視窗、對話框、控制項、圖像、顏色、行為及語言等，本文以下僅介紹第一部分的人機介面與互動模式的各項設計原則。 
              一、反映使用者的心智模式（Reflect the User’s  Mental Model） 
              通常使用者對於軟體可執行的任務早已有一個心智模式，而這個模式是由現實世界的生活經驗、其他軟體的經驗以及一般的電腦經驗組合後而產生的。例如︰使用者都會有寫作和寄信的實戰經驗，大多數使用者都使用電子郵件應用程式編寫及發送郵件。在此基礎上，使用者就會有這個任務的概念模式，其中包括一定的期望，例如︰寫一封新信、選擇收件人、發送信件的功能（如圖2所示）。如果電子郵件應用程式忽略了使用者的心智模式，有些部分不符合使用者的期望，就會讓使用變得困難，甚至是不愉快的。因為這應用程式強調的是使用者陌生的概念模式，而不是建立在使用者已有的知識和經驗上。 



圖2 iPhone的OS系統的電子郵件應用程式的介面 



              設計應用程式的使用者介面時，要先試著去發現使用者的心理的任務模式，因為該應用程式是要幫助他們去執行任務。應註意模式內在的隱喻，它代表了任務的概念元素，以寫信為例，隱喻包括信件、郵箱與信封。而在攝影的心智模式的隱喻包括照片，相機與相簿。使用者介面應力求反映使用者所預期的任務元件、組織和工作流程、視窗佈局，選單和工具列的安排與實用的視窗設計（如圖3所示）。 



圖3 iPhone的OS系統的照片應用程式的介面 



              如何將適當的心理模式的結果反映在一個乾淨、直覺的使用者介面，iTunes的介面設計是一個很好的例子。iTunes的介面設計反映出人們與播放音樂及管理他們的音樂收藏的心智模式（如圖4所示），在一個整潔的視窗中，iTunes會顯示每一首歌曲、播放列表、播放及搜索控制，以一首歌曲為中心的安排，最大的視窗顯示歌曲的曲目，藉由標題、演唱家和專輯加以清楚的分類排序。較小的視窗顯示播放列表與收藏，其中控制歌曲列表就像文件夾的圖像控制物件、文件夾和應用程式的顯示。圖式中顯眼的播放控制物件看起來像收音機類似的控制，CD播放器與iPod。因為iTunes的使用者介面反映了一個定義良好的心智模式，而不是強迫使用者採用不熟悉的概念，即使是新手都會發覺iTunes的直觀和易於使用。 






圖4 iPhone的iTunes應用程式的介面 


              二、隱喻（Metaphors） 
              隱喻（Metaphors）是以使用者的知識與日常生活來隱喻應用程式的概念與特徵，藉由隱喻及熟悉的理念，設計出符合使用者期待的電腦應用環境，容易學習使用（如圖5所示）。隱喻是使用者的心理對於任務模式的構建方塊，充分利用人類在世界上的知識，藉由隱喻的方式來傳達一種具體、熟悉的應用程式的概念，讓隱喻是顯而易見的，讓使用者能有一組期望且熟悉的電腦作業環境。 






圖5 以現實世界的對象和動作來隱喻虛擬的物件與動作 


              以現實世界中的對象和動作來隱喻應用程式中虛擬的物件與動作，使用者能快速掌握如何使用該應用程式。最典型的隱喻是以文件夾隱喻存儲檔案，在現實世界中，人們把東西放在文件夾，所以，他們立即瞭解將文件放入電腦上的文件夾的想法。其他的隱喻包括以真實世界中的音樂播放列表和相簿來表示iTunes播放列表和iPhoto相簿。一個儀表板工具也可以隱喻它所執行的任務，因為它瞬間將其目的傳達給使用者。 
              iOS系統為隱喻提供了很大的範圍，iOS有豐富的圖形圖像和手勢操作，人們可與螢幕上的對象進行對話，在很多情況下，就像是在與真實世界的對象對話一般。建議將隱喻應使用於特定的元素，但不限制隱喻的實作。而且，隱喻的建議使用與電腦是否有能力來支持及擴展隱喻的使用之間的折衷平衡是很重要的。例如：使用者丟棄在垃圾桶的項目數量不應有實質的垃圾桶會有容納數量的限制，不過可以有垃圾桶狀態的顯示（如圖6所示）。 


                  美國D535662設計專利 
美國D536002設計專利 
美國D536000設計專利 







圖6 Microsoft公司的三個垃圾桶的圖像（註7）


              通常，最合適的隱喻所建議的使用或經驗，無需帶入作為隱喻基礎的現實世界的物體或動作的限制。最好的隱喻效果就是不要延伸的太遠，例如：人們在電腦中的文件夾所置入的文件內容會多於放在真實的文件夾，當他們已有一個虛擬文件櫃，文件夾的使用性就會減少。 
              三、明確與隱含的動作（Explicit  and Implied Actions） 
              每一個作業都要用動作來操作物件。操作的第一步驟是，使用者在螢幕上看到想要的對象。第二步驟是使用者選擇或指定該對象。最後步驟是使用者執行動作，或者使用選單命令或是用滑鼠或其他設施直接操作。這些引導出兩個操作物件的規範，就是明確與隱含的動作。 
              明確的動作可清楚地說明操作物件的結果。例如：在視窗物件上可執行明命令的選單列表，選單命令的名稱清楚地表明該操作命令及當前的狀態（是變灰的或啟用的），表明該操作在當下是否有效（如圖7所示）。明確的動作指示，使用者不需要去記憶就可在特定的物件上執行命令。 







圖7 iOS系統中App、鍵盤與鬧鐘的操作介面（註8）


              隱含動作會透過視覺提示或前後關係傳達了動作的結果。一個拖曳的操作是隱含動作常見的例子。拖動一個物件到另一物件的結果，藉由該拖曳操作構成物件與執行動作之間的關係。例如，將文件夾拖曳到垃圾桶的圖像中意味著將該文件夾從文件系統中移除。由於隱含動作是顯而易見的，使用者能識別出物件所涉及的目的、將要執行的操作以及操作的後果。當你設計使用者介面時應將這兩種模式牢記於心。檢視你的應用程式任務的使用者心智模式，可幫助您確定每種操作是否合適。 
              四、直接操作（Direct  Manipulation） 
              直接操作，強調即看即點（See and Point）的使用哲學。直接操作是隱含動作的一個實例，讓使用者感覺自己直接操控螢幕上的物件，而不是透過別的媒介控制。根據這個原則，螢幕上的物件應保持可被看見的，當使用者執行操作，該操作的影響應該是及時可見的。例如：對於一個拖曳與放開操作（直接操作最常見的例子），使用者可藉由拖曳文件的圖像將其從一個位置移動到另一個位置，或拖曳選定的內容直接置入另一個文件中。直接操作的其它例子是繪圖應用程式中圖形物件大小的調整，物件的定位或是立體場景中相機視圖。 






圖8 以手指指尖直接操作介面設計 


              當使用者直接操縱螢幕上的物件，而不是使用其他的控制來操縱它們，他們越是參與任務，越容易理解行為的結果。使用者喜歡透過高度感知的多點觸控介面直接操作，使用手勢給了人們一個更大的親和力及控制感（如圖8所示），以及他們在螢幕上看到的物件他們能夠直接觸摸，而無需使用媒介物（滑鼠）。例如：使用者以捏的手勢直接擴大或縮小內容的區域，取代縮放控制元件。而在遊戲中，玩家移動並直接與螢幕上的物件互動。例如，一個遊戲可能會顯示一個圓形密碼鎖，使用者可以旋轉來開鎖。 
              在iOS應用程式中使用者可以體驗直接操作，當他們旋轉或移動設備影響螢幕上的物件；或使用手勢來操作螢幕上的物件；或可看到他們的操作所顯示的即時視覺效果。 
              五、所見即所得（What You See Is What You Get） 
              所見即所得，通常簡稱為WYSIWYG，亦即使用者可在螢幕上直接正確地看到即將列印在紙張上的效果，也稱為視覺化操作。在應用程式中使用者可將資料列印、發布到網路，或寫入檔案或DVD或其他格式，應確保使用者在螢幕上看到與最終的輸出列印在紙張上的效果是無顯著差異的。當使用者更改文件案檔時，螢幕上應即時顯示效果，不應等待最後的列印輸出才會知道文件的視覺效果。必要時，可使用預覽功能（如圖9所示）。 






圖9 視覺化操作與預覽功能 


              使用者應能在應用程式中找到所有可用的功能，不會因漏列在選單中而隱藏了該功能。選單列出的命令列表，讓使用者可看到他們的選擇，而不是要他們去記住命令的名稱。命令只能設置在選單或工具列中，應避免提供可直接切入的命令功能。雖然工具列和前後關係的選單可被隱藏，但其所包含的命令應一直存在於可用的選單與工具列之中（如圖10所示）。 





圖10 選單與工具列 


              六、回饋與溝通（Feedback and Communication） 
              當使用者操作出現錯誤時，回饋及溝通的作用遠超過僅顯示警告。透過提供適當的回饋的機制，讓使用者及時瞭解所發生的事情。當使用者啟動一個操作，應提供該應用程式已經收到使用者的輸入，並進行運作指示。通常，使用者想知道一個命令是否正在進行。如果命令不能執行，他們想知道為什麼不能執行，以及能做什麼來取代之。在操作階段，動畫是告知使用者其請求的操作正在開展的一種最佳的方式。例如：當使用者點擊螢幕上的圖像，該圖像會反彈好讓使用者知道該應用程式是在開起的過程。 
              提供使用者能夠理解的直接、簡單的回饋機制，可考慮使用微妙的動畫提高使用者介面的回饋效果。例如：應說明錯誤信息是什麼情況所造成的錯誤（硬碟上沒有足夠的空間來保存文件檔案）以及使用者可採取的糾正行動（可嘗試將檔案保存在另一個地方）。回饋不但可確認使用者的操作，同時也確保那些操作正在執行。當使用者起動操作時，他們期待即時的回饋，而且，在長時間操作中，他們也想要知道狀態的更新（如圖11所示）。 









圖11信息與回饋的視窗 


              七、使用者控制（User Control） 
              原則上，應該由人啟動和控制操作，而不是應用程式。雖然應用程式可以建議一系列的操作程序，或是對危險後果發出警告（如圖12所示），如果不是讓使用者自己做決定，這些做法通常是錯誤的。最好的應用程式是在給予使用者所需的功能與幫助他們避免危險結果之間的尋求正確的平衡。關鍵是為使用者提供他們所需要的，同時幫助他們避免危險及不可逆轉的操作。例如，在使用者可能會意外地破壞數據的情況下，你應該持續提供警告，而不是同意使用者選擇繼續。 





圖12危險後果的警告信息視窗 


              使用者期望有充分的機會在開始前可取消操作，並且希望在他們想要執行一個潛在破壞性的操作之前，有機會再次確認（如圖13所示）。最後，他們希望能正常停止正在進行中的操作。 






圖13再次確認操作的警示訊息 


              八、一致性（Consistency） 
              介面的一致性使讓使用者能夠將使用者的知識和技能轉換到另一個應用程式。一致的應用程式並不是盲從地複製其他應用程式，而是要以規範與標準的優勢，讓使用者能很自在的轉換到另一個應用程式。要確定一個應用程式是否遵循一致性原則，應思考下列的問題： 
              （1）應用程式與iOS標準是否一致？是否正確地使用系統所提供的
              控制元件、視窗和圖像？是否整合裝置的功能？ 
              （2）應用程式本身是否一致？本身內部是否使用統一的術語和風格
              （如圖14所示）？相同的圖像是否意味著同樣的事情？使用者是
              否能預期他們在不同的地方執行相同操作的結果？介面元素在
              整個應用程式的外觀和行為是一致的嗎（如圖15所示）？ 






圖14圖像、介面元素使用統一的術語和風格（註9）








圖15介面元素的外觀與行為的一致性 



              （3）在合理範圍內，應用程式與先前的版本是否一致？其中的術語
              及意涵是否保持不變？基本概念是否保持不變？ 
 九、可逆的操作系統（Forgiveness） 
              利用可逆的系統鼓勵使用者勇於嘗試與探索新的應用程式，而不用在意會損壞作業系統。換言之，要讓大多數操作是可逆轉的、可回復系統，如此，使用者可感知到他們可以嘗試的新事物而不會破壞系統或危害他們的資料。應用程式應建立安全網，例如：撤銷和恢復到已儲存狀態的命令，讓人們能自在的學習和使用新的應用程式。 
              在使用者啟動一個任務，警告他們這將會使資料造成不可逆的損失。如果警告頻繁出現，這可能意味著該應用程式的設計具有一定的缺陷。當選項被明確地提出且有即時回饋時，應用程式的操作應該是相對無差錯。要先預知一些常見問題，以及警告使用者那些問題潛在的副作用。在每一階段提供的足夠的回饋和溝通機制，讓使用者覺得有足夠的訊息來做出正確的選擇。 
              十、穩定的視覺感知（Perceived Stability）
              穩定的視覺感知提供易理解、熟悉且可預測的電腦使用環境。Aqua介面設計可提供一個可以易於理解的、熟悉的與可預測的環境。為了給使用者帶來穩定的視覺感，介面定義了許多標準的視覺元素，例如：選單欄，視窗控制元件等。這些標準元素可為使用者提供熟悉的環境，使他們知道事情的行為方式以及如何處理它們。 
              為了給使用者帶來穩定的概念意義，介面提供了一個清晰且明確物件組與這一組物件所執行的操作（如圖16所示）。例如：當一個選單命令並不適用於被選定的物件或在其當前的狀態，該命令是灰色的，而不是省略。 







圖16 清晰且明確物件組與所執行的操作 


              為了幫助傳達穩定的感知，保留使用者修改的設置，例如︰視窗的尺寸和位置。當使用者設定他們螢幕環境的特定佈局，這些設定會被保持，直到使用者再次改變。提供狀態和回饋都是讓使用者知道應用程式正在執行指定的任務，這些是有助於感知的穩定性。 
              十一、美學的完整性（Aesthetic Integrity） 
              美學整體性是指資料安排的井然有序與優良的視覺設計原則是一致的。千萬不要在一個視窗與對話框中，放置成打以上的圖像或按鈕。也不要使用任意的符號來表示概念，它們可能會混淆或分散使用者的註意。視窗的整體佈局與使用者介面元素的設計應該要反映該應用程式執行任務的使用者的心智模式（如圖17所示）。螢幕上的應用程式的介面的佈局應使用或保持簡單的圖形與圖像，提高其可用性，當使用者需要長時間的觀看與使用時，也能感覺自在與愉快。 


                  QuickTime播放器 
儀表板 
FaceTime







圖17 知名產品的圖像家族 


              一個應用程式應激發出一種身臨其境的任務，例如：在遊戲中心（Game Center），使用者期望有一個美麗、有趣又好玩的介面，能鼓勵使用者想去探索。雖然，在一場比賽中，人們不希望完成一個嚴肅或多產的任務，他們仍然期待遊戲的外觀與經驗能相結合。 
              美學整體性並不是要衡量一個應用程式是否美觀。而是要考量應用程式的外觀與其功能是否能緊密結合（如圖18所示）。這種應用程式提供使用者關於其目的與定位的明確且標準一致的信息。另一方面，如果應用程式執行一個產生內容的任務，而其介面看起來似乎異想天開或花俏，使用者很難理解介面與操作之間的矛盾信號。 


App Store的圖像家族 





實用工具的圖像家族 





圖18 不同屬性與種類的圖像家族 


              十二、無強制回應模式（Modelessness） 
              在任何時候盡可能讓使用者作他想做的，避免使用強制回應的模式，因為該模式會限制使用者的操作，會鎖定一個操作，防止使用者再去其他任何事情，直到操作完成。如此，使用者不能做他想做的，無強制回應模式允許使用者在同一時間可執行多個程式操作。 
              抽屜（drawers）與附表（sheets）可支援與強化無強制回應模式。抽屜可提供額外的功能，同時允許使用者繼續進入原來的視窗。附表是附加到原視窗的對話框模式，取代強制回應對話框模式的使用。下列三種是最能接受的使用模式：（1）短期模式，使用者必須不斷地做一些事情，以保持狀態，例如：按住滑鼠的按鈕、滾動文字或按住Shift鍵以擴展選定內容；（2）警告，在繼續使用前，必須糾正的異常情況的警告，不過要將這種情況降到最低程度；（3）安裝與協助，這模式唯一目的就是引導使用者通過重要的任務。 
              下列三種的操作模式亦為可接受的：（1）模仿一個熟悉的真實生活狀況本身就是模式，例如：在一個圖形應用程式選擇不同的工具，類似於現實生活中的選擇真實的繪圖工具；（2）只改變事務的屬性，而不是它的行為，例如：粗體和文字下方劃線的改變模式；（3）阻止系統其他大部分命令的正常運行，僅剩下基本模式，例如：對話框會使所有的選單命令都不可用，除了剪切、複製和粘貼的功能。 
              不論應用程式選擇使用哪一種模式，都必須有清晰可視的指示器，能讓使用者很容易的進入與離開。例如：在許多圖形應用程式中，鉛筆、刷子、十字圖形或橡皮擦等工具都可作為指標，可供使用者視其所需的功能來選擇使用。
 


專利師法修法意見調查

親愛的北美智權報讀者您好：目前正值專利師法修法之際，相信您一定也與北美智權報一樣，非常關心專利界未來的發展。為了讓主管機關能夠更理解專利業界的聲音及期許，這份問捲分別針對專利師考試、專利師公會、專利師法人化與保險制度進行問捲調查，希望您能惠賜寶貴的意見，讓專利界的未來更健全，謝謝您的配合！北美智權報編輯部   敬上





 
附註：

參照 “Top Ten iPhone Apps of 2013  According to Apple”, http://www.intomobile.com/2013/12/17/apples-best-2013-list/,最近流覽日期28/02/2014。 
通常，Apple公司與合作夥伴獲得所有第三方開發者發布的應用程式銷售收入的30%，而開發者得到餘下的70%。
參閱Apple Human Interface  Guidelines, by: Apple, (2005) , 最近瀏覽日期12/22/2013 . http://developer.apple.com/documentation/…。 
參閱“iPhone Human Interface Guidelines—user experience”by: Apple, (2007)and(2008), 最近瀏覽日期12/22/2013 . http://developer.apple.com/documentation/…。 
參閱“iOS  Human Interface Guidelines”by: Apple, (2013)  , 最近瀏覽日期12/22/2013 . http://developer.apple.com/documentation/…。 
本章節所採用的人機介面圖形係源自Apple公司的官方網站中所提供的“Apple Human  Interface Guidelines” (2005-12-06) 、“iPhone Human Interface Guidelines—user experience” (2008-11-21)與“iOS Human Interface Guidelines”(2013-05-01)。 
由於Apple公司iPhone的使用者介面終沒有垃圾桶的應用程式，因此，垃圾桶的隱喻部分則以Microsoft公司的垃圾桶圖像與應用程式予以說明。 
參照 Apple公司的“iOS Human Interface Guidelines”, 2013-05-01。 
介面圖形係源自Apple公司的官方網站中的“iOS  Human Interface Guidelines”(2013-05-01)。 

 






作者：
葉雪美（Sherry H.M. Yeh）


現任：
經濟部智慧財產局專利一組 專利高級審查官
                
                台灣科技大學 專利所 兼任助理教授


學歷：
世新大學法律研究所法學碩士 
                 國立成功大學工業設計系學士


經歷：
中央標準局新式樣專利主任審查員（75-76） 
中央標準局專利審查委員（80-89）


著作：
《美國設計專利侵害認定相關問題研究－兼論我國新式樣專利侵害認定問題》，2004。 
《設計專利申請實務－台灣及美國專利申請策略》，元照出版公司，2008。

 

 


 














Facebook

按讚馬上加入北美智權報粉絲團
       










 















 


 


 


 





 


 

 


 


























