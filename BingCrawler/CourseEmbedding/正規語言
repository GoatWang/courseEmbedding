


正則語言 - 維基百科，自由的百科全書






























 







正則語言

維基百科，自由的百科全書


					前往：					導覽，					搜尋






正規語言又稱正則語言是滿足下述相互等價的一組條件的一類形式語言：

可以被確定有限狀態自動機識別；
可以被非確定有限狀態自動機識別；
可以被唯讀圖靈機識別；
可以用正規表示式描述；
可以用正則文法生成。
可以用字首文法生成。




目錄


1 例子
2 定義
3 封閉性質
4 純代數定義
5 相關條目
6 參照
7 外部連結



例子[編輯]

所有的有限語言都是正則的。
字母表{a, b}上包含偶數個a的所有字串構成的語言是正則的。
字母表{a, b}上取若干個a後緊跟若干個b形式的所有字串構成的語言是正則的。

定義[編輯]
在字母表集合Σ上的正規語言定義如下：

空集合Ø是正規語言
只包含一個空字串的語言{ε}是正規語言
對所有



a
∈
Σ


{\displaystyle a\in \Sigma }

，{a}是正規語言
若A, B是正規語言，則



A
⋅
B
,
A
⋃
B
,

A

∗




{\displaystyle A\cdot B,A\bigcup B,A^{*}}

(kleene星號)都是正規語言
除此之外都不是正規語言

如果一個語言不是正規語言，它需要一個記憶體至少是Ω(log log n)的自動機才能辨認。換句話說，DSPACE(o(log log n))等於所有正規語言的集合。實際上，大部份的非正規語言需要至少O(log n)的空間。
封閉性質[編輯]
這裡語言的運算參見條目形式語言。

正則語言的交、並、差、補運算得到的語言仍然是正則語言；
兩個正則語言連線（把第一個語言的所有字串同第二個語言的所有字串連線起來）後得到的語言仍然是正則語言；
正則語言閉包運算後得到的語言仍然是正則語言；
正則語言的每個字串轉置後得到的語言仍然是正則語言；
正則語言被任意語言的字串商（左商或右商)後得到的語言仍然是正則語言。
正則語言字串代換後得到的語言仍然是正則語言。
與正則語言字串同態或逆同態的語言仍然是正則語言。

純代數定義[編輯]
正則語言也可以以純粹代數的方式來定義。
Σ是一個有窮的字母表，Σ*是Σ上的自由麽半群，Σ*構成了Σ上的所有字串。令M為一個有限麽半群，對映f : Σ* -> M為一個麽半群同態，集合S是M的一個子集，於是S的逆同態象f -1(S)是正規的。每一個正規語言都可以依這種方式來定義。
另外一種定義方式藉助於一個等價關係。
取L為Σ*的任意子集，定義如下的Σ*上的等價關係~ (叫做「語法關係」)： u ~ v，即對Σ*中所有的的字串w有uw在L中若且唯若vw在L中。於是對正規語言有下麵的結論：語言L是正規的若且唯若關係~的等價類的數量是有限的（其證明在條目語法麽半群中）。在此情況下，等價類的數量就是接受語言L的最小確定有限狀態自動機的狀態數。
相關條目[編輯]

形式語言
有限狀態自動機
正規表示式
正則文法
喬姆斯基體系

參照[編輯]

Michael Sipser. Introduction to the Theory of Computation. PWS Publishing. 1997. ISBN 978-0-534-94728-6.  Chapter 1: Regular Languages, pp.31–90. Subsection "Decidable Problems Concerning Regular Languages" of section 4.1: Decidable Languages, pp.152–155.


外部連結[編輯]

Department of Computer Science at the University of Western Ontario: Grail+, http://www.csd.uwo.ca/Research/grail/. A software package to manipulate regular expressions, finite-state machines and finite languages. Free for non-commercial use.


Chalchalero! http://www.ucse.edu.ar/fma/sepa/chalchalero.htm. A free visual software to manipulate regular expressions, regular grammars, finite-state machines and finite languages developed by the SEPa! Project Team (Universidad Católica de Santiago del Estero).


REG at Complexity Zoo


http://www.csd.uwo.ca/Research/grail/ ：西安大略大學電腦科學系Grail+， 一個可以操作正規表示式、有限狀態自動機和有限語言的自由軟體包。









閱
論
編


自動機理論：形式語言和形式文法










喬姆斯基層級
文法
語言
極小自動機


類型 0
無限制
遞迴可列舉
圖靈機


—
(無公用名)
遞迴
判定器


類型 1
上下文有關
上下文有關
線性有界


—
附標
附標
巢狀堆疊


—
Linear context-free rewriting systems etc.
Mildly context-sensitive
Thread automata


—
樹-鄰接
適度上下文有關
嵌入下推


類型 2
上下文無關
上下文無關
非確定下推


—
確定上下文無關
確定上下文無關
確定下推


—
Visibly pushdown
Visibly pushdown
Visibly pushdown


類型 3
正則
正則
有限


—
—
Star-free
Counter-free (with aperiodic finite monoid)










每個語言範疇都是其直接上面的範疇的真子集 每個語言範疇內的語言都可以用同一行的文法和自動機表示










 
						取自 "https://zh.wikipedia.org/w/index.php?title=正則語言&oldid=45105152"					
2 個分類：編譯原理形式語言隱藏分類：使用ISBN魔術連結的頁面 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


ČeštinaDeutschΕλληνικάEnglishEspañolفارسیSuomiFrançaisעבריתHrvatskiMagyarItaliano日本語한국어MirandésNederlandsNorsk bokmålPolskiPortuguêsRomânăРусскийСрпски / srpskiУкраїнська 
編輯連結 





 本頁面最後修訂於2017年7月8日 (週六) 03:26。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 










正規語言概論 | 交資夢想 – moved to http://shaform.com/csdream/
































































交資夢想 – moved to http://shaform.com/csdream/


交大資工，交織夢想。





Skip to content

主頁文章彙整
關於








← 離散數學
密碼學概論 →


正規語言概論

Posted on 十二月 10, 2011 by Shaform  

前言
正規語言概論是交大資工大三上的必修課程。這門課的課題是基礎的計算理論，研究什麼是電腦的能力和極限。介紹各種計算模型，例如 DFA, NFA, PDA, Turing machines 等等，以及其相對應的正規語言，如 regular languages, context free languages, Turing-decidable languages 等等。也會探討問題間的 Reduction 以及問題的 Complexity 等等。
繫上使用的教科書主要是《Introduction to the Theory of Computation》不過也有老師使用《Introduction to Automata Theory, Languages, and Computation》。
簡介
透過計算模型，我們可以對計算定下明確的數學定義。而一旦有了明確的定義，便可以研究什麼是可計算的、什麼是不可計算的，而對於可計算的問題，必須花費多少時間和空間才可能計算。
Church–Turing thesis 指出，所有演算法可解的問題，都可透過 Turing machines 求解，也因此，藉由研究 Turing machines 我們得以探討電腦的極限，以及對各種問題的難度訂出明確的界線。
這是一門非常理論與數學的課，需要非常清晰的邏輯思考。老師曾說，資訊界日新月異，許多課程可能幾年後就不見了，或者教的東西大幅改變。但你幾乎可以確定，正規語言這門課還是會一直存在。從哲學的角度來說，計算理論在電腦科學裡佔了十分核心的地位。
正規語言課程所學的東西其實也有很多延伸的應用，以至於很多讀者很可能早已接觸過某些部份，但直到這門課，才真正以嚴謹的方式學習背後的來歷。像是如果有接觸像 Python 等語言或者用過 Vim 等編輯器的搜尋功能的讀者，很有可能有接觸過正規表示式。而 CFG 和程式語言的設計以及編譯器等課程有密切相關，你或許會曾在程式語言的文件上看過他。如果在演算法等課程聽過 NP、P 等名詞，在這堂課裡，你可以學到這些名詞到底有什麼含意。而對什麼是演算法，時間複雜度、問題的可計算性等等，都會在這堂課得到更深的理解。
學習小指引
課本本身寫的很好，建議將《Introduction to the Theory of Computation》研讀數遍，並配合書中練習題。
參考

Computability and Complexity
Automata, Computability, and Complexity
Regular Expression (RegExp) in JavaScript

 

廣告






Share this:點擊分享到 Google+(在新視窗中開啟)分享到 Facebook(在新視窗中開啟)分享到 Twitter(在新視窗中開啟)Click to email(在新視窗中開啟)請按讚：喜歡 載入中...

相關
 

												本篇發表於 交大課程 並標籤為 計算理論, 資工, 正規語言, 交大課程, 交大資工。將永久鏈結加入書籤。											


← 離散數學
密碼學概論 →


One Response to 正規語言概論


引用通告： 正規語言概論 – 交大修課心得 | 一座島



發表迴響 取消回覆 



在此輸入你的回應…




在下方填入你的資料或按右方圖示以社群網站登入：





























 
 


電子郵件 (必) （電子郵件地址不會被公開）



名稱 (必)



個人網站














 您的留言將使用 WordPress.com 帳號。 ( 登出 / 變更 )












 您的留言將使用 Twitter 帳號。 ( 登出 / 變更 )












 您的留言將使用 Facebook 帳號。 ( 登出 / 變更 )












 您的留言將使用 Google+ 帳號。 ( 登出 / 變更 )




取消
連結到 %s




 透過電子郵件通知我後續回應。
 



 









搜尋：



  最近文章 

資夢


Timus Online Judge 教學


資訊工程專題


交大資工相關獎學金、競賽、工讀與實習機會


程式語言


 熱門文章 

						資工系開放式課程資源					



						正規語言概論					



						基礎程式設計					



						組合語言與系統程式					



						數位電路實驗					



						微處理機系統實驗					



						計算機概論與程式設計					



						交大資工相關獎學金、競賽、工讀與實習機會					

文章存檔 
2014 年 五月
2013 年 六月
2012 年 十月
2012 年 七月
2012 年 六月
2012 年 三月
2012 年 二月
2011 年 十二月
2011 年 十一月
2011 年 十月
2011 年 八月
2011 年 七月
2011 年 四月

分類 
學習資源

實用技能

教學

交大生活

交大課程


8051
ACM
Arduino
C
Google
Haskell
HDL
Java
microcontroller
MIT
OCW
online judge
problem solving
Prolog
Python
RSA
Timus
Verilog
交大
交大課程
交大資工
交資夢想
大學
學習資源
密碼學
實習
專題
打工
搜尋
教科書
數學
正規語言
獎學金
程式設計
競賽
組合語言
英語
計算理論
資工
開放式課程其它 
註冊 登入
文章 RSS 訂閱
迴響 RSS 訂閱
WordPress.com 
 






					交資夢想 – moved to http://shaform.com/csdream/				


在 WordPress.com 建立免費網站或網誌.



















傳送到電子郵件地址

你的姓名

你的Email






取消

				文章沒有送出-請確認你的Email位置			

				Email確認失敗,請稍後再試.			

				抱歉，你的網誌無法透過電子郵件分享			





 
 
%d 位部落客按了讚：










































































































































正規表示式 - 維基百科，自由的百科全書






























 







正規表示式

維基百科，自由的百科全書


					前往：					導覽，					搜尋







本條目存在以下問題，請協助改善本條目或在討論頁針對議題發表看法。






本條目內容疑欠準確，有待查證。（2013年11月22日） 
請在討論頁討論問題所在及加以改善，若本條目仍有爭議及準確度欠佳，會被提出存廢討論。 







本條目需要補充更多來源。（2013年11月22日） 
請協助添加多方面可靠來源以改善這篇條目，無法查證的內容可能會因為異議提出而移除。 


















「regular expression」的各地常用譯名


中國大陸
正則表達式


臺灣
正規表示式、規則運算式、正規表示法
常規表示式、正規運算式
常規表示法、正規表式


香港
正則表達式


正規表示式，又稱正則表達式、正規表示法、正規運算式、規則運算式、常規表示法（英語：Regular Expression，在代碼中常簡寫為regex、regexp或RE），是電腦科學的一個概念。正規表示式使用單個字串來描述、符合一系列符合某個句法規則的字串。在很多文字編輯器裡，正則運算式通常被用來檢索、替換那些符合某個模式的文字。
許多程式設計語言都支援利用正則運算式進行字串操作。例如，在Perl中就內建了一個功能強大的正則運算式引擎。正則運算式這個概念最初是由Unix中的工具軟體（例如sed和grep）普及開的。正規表示式通常縮寫成「regex」，單數有regexp、regex，複數有regexps、regexes、regexen。



目錄


1 譯名問題
2 歷史
3 理論
4 基本語法
5 運算式全集
6 優先權
7 範例
8 相關條目
9 外部連結
10 註釋



譯名問題[編輯]
Regular Expression的「Regular」一般被譯為「正則」、「正規」、「常規」。此處的「Regular」即是「規則」、「規律」的意思，Regular Expression即「描述某種規則的表達式」之意。
歷史[編輯]
最初的正規表示式出現於理論電腦科學的自動控制理論和形式化語言理論中。在這些領域中有對計算（自動控制）的模型和對形式化語言描述與分類的研究。
1940年，沃倫·麥卡洛克與Walter Pitts（英語：Walter Pitts）將神經系統中的神經元描述成小而簡單的自動控制元。
1950年代，數學家史蒂芬·科爾·克萊尼利用稱之為「正則集合」的數學符號來描述此模型。肯·湯普遜將此符號系統引入編輯器QED（英語：QED (text editor)），隨後是Unix上的編輯器ed（英語：ed(text editor)），並最終引入grep。自此以後，正則運算式被廣泛地應用於各種Unix或類Unix系統的工具中。
Perl的正規表示式源自於Henry Spencer（英語：Henry Spencer）於1986年1月19日發布的regex，它已經演化成了pcre（Perl相容正規表示式，Perl Compatible Regular Expressions（英語：PCRE），一個由Philip Hazel（英語：Philip Hazel）開發的，為很多現代工具所使用的庫。
各電腦語言之間的正則運算式的整合目前[何時？]開展得很差。Perl6的子專案Apocalypse的設計中已考慮到了這點。
理論[編輯]
正規表示式可以用形式化語言理論的方式來表達。正規表示式由常量和算子組成，它們分別指示字串的集合和在這些集合上的運算。給定有限字母表Σ定義了下列常量：

（「空集」）∅指示集合∅
（「空串」）ε指示集合{ε}
（「文字字元」）在Σ中的a指示集合{a}

定義了下列運算：

（「串接」）RS指示集合{ αβ | α ∈ R，β ∈ S }。例如：{"ab","c"}{"d","ef"} = {"abd", "abef", "cd", "cef"}。
（「選擇」）R|S指示R和S的並集。例如：{"ab", "c"}|{"ab", "d", "ef"}= {"ab", "c", "d", "ef"}
（「Kleene星號」）R* 指示包含ε並且閉合在字串串接下的R的最小超集。這是可以通過R中的零或多個字串的串接得到所有字串的集合。例如，{"ab", "c"}* = {ε, "ab", "c", "abab", "abc", "cab", "cc", "ababab", ... }。

上述常量和算子形成了克萊尼代數。
很多課本使用對選擇使用符號∪, +或∨替代豎槓。
為了避免括弧，假定Kleene星號有最高優先級，接著是串接，接著是並集。如果沒有歧義則可以省略括弧。例如，(ab)c可以寫為abc而a|(b(c*))可以寫為a|bc*。
例子：

a|b*指示{a, ε, b, bb, bbb, ...}。
(a|b)*指示由包括空串、任意數目個a或b字元組成的所有字串的集合。
ab*(c|ε)指示開始於一個a接著零或多個b和最終可選的一個c的字串的集合。

正規表示式的定義非常精簡，避免多餘的量詞?和+，它們可以被表達為：a+ = aa*和a? = (a|ε)。有時增加補算子~；~R指示在Σ*上的不在R中的所有字串的集合。補算子是多餘的，因為它使用其他算子來表達（儘管計算這種表示的過程是複雜的，而結果可能以指數增大）。
這種意義上的正規表示式可以表達正則語言，精確的是可被有限狀態自動機接受的語言類。但是在簡潔性上有重要區別。某類正則語言只能用大小指數增長的自動機來描述，而要求的正規表示式的長度只線性的增長。
正規表示式對應於喬姆斯基層級的類型-3文法。在另一方面，在正規表示式和不導致這種大小上的爆炸的非確定有限狀態自動機（NFA）之間有簡單的對映；為此NFA經常被用作正規表示式的替代表示。
我們還要在這種形式化中研究表達力。如下麵例子所展示的，不同的正規表示式可以表達同樣的語言：這種形式化中存在著冗餘。
有可能對兩個給定正規表示式寫一個演算法來判定它們所描述的語言是否本質上相等，簡約每個運算式到極小確定有限自動機，確定它們是否同構（等價）。
這種冗餘可以消減到什麼程度?我們可以找到仍有完全表達力的正規表示式的有趣的子集嗎? Kleene星號和並集明顯是需要的，但是我們或許可以限制它們的使用。這提出了一個令人驚奇的困難問題。因為正規表示式如此簡單，沒有辦法在語法上把它重寫成某種規範形式。過去公理化的缺乏導致了星號高度問題。最近Dexter Kozen用克萊尼代數公理化了正規表示式。
很多現實世界的「正規表示式」引擎實現了不能用正規表示式代數表達的特徵。[來源請求]
基本語法[編輯]
一個正規表示式通常被稱為一個模式（pattern），為用來描述或者符合一系列符合某個句法規則的字串。例如：Handel、Händel和Haendel這三個字串，都可以由「H(a|ä|ae)ndel」這個模式來描述。大部分正規表示式的形式都有如下的結構：

選擇
|豎直分隔符代表選擇。例如「gray|grey」可以符合grey或gray。


數量限定
某個字元後的數量限定符用來限定前面這個字元允許出現的個數。最常見的數量限定符包括「+」、「?」和「*」（不加數量限定則代表出現一次且僅出現一次）：


+加號代表前面的字元必須至少出現一次。（1次、或多次）。例如，「goo+gle」可以符合google、gooogle、goooogle等;


?問號代表前面的字元最多只可以出現一次。（0次、或1次）。例如，「colou?r」可以符合color或者colour;


*星號代表前面的字元可以不出現，也可以出現一次或者多次。（0次、或1次、或多次）。例如，「0*42」可以符合42、042、0042、00042等。


符合
圓括弧可以用來定義操作符的範圍和優先度。例如，「gr(a|e)y」等價於「gray|grey」，「(grand)?father」符合father和grandfather。

上述這些構造子都可以自由組合，因此，「H(ae?|ä)ndel」和「H(a|ae|ä)ndel」是相同的。
精確的語法可能因不同的工具或程式而異。
運算式全集[編輯]
正規表示式有多種不同的風格。下表是在PCRE（英語：Perl_Compatible_Regular_Expressions）中元字元及其在正規表示式上下文中的行為的一個完整列表，適用於Perl或者Python程式語言（grep或者egrep的正規表示式文法是PCRE的子集）：


字元
描述


\
將下一個字元標記為一個特殊字元(File Format Escape)、或一個原義字元（Identity Escape)、或一個向後參照(backreferences)、或一個八進位轉義符。例如，「n」符合字元「n」。「\n」符合一個換行符。序列「\\」符合「\」而「\(」則符合「(」。


^
符合輸入字串的開始位置。如果設定了RegExp物件的Multiline屬性，^也符合「\n」或「\r」之後的位置。


$
符合輸入字串的結束位置。如果設定了RegExp物件的Multiline屬性，$也符合「\n」或「\r」之前的位置。


*
符合前面的子運算式零次或多次。例如，zo*能符合「z」、「zo」以及「zoo」。*等價於{0,}。


+
符合前面的子運算式一次或多次。例如，「zo+」能符合「zo」以及「zoo」，但不能符合「z」。+等價於{1,}。


?
符合前面的子運算式零次或一次。例如，「do(es)?」可以符合「do」或「does」中的「do」。?等價於{0,1}。


{n}
n是一個非負整數。符合確定的n次。例如，「o{2}」不能符合「Bob」中的「o」，但是能符合「food」中的兩個o。


{n,}
n是一個非負整數。至少符合n次。例如，「o{2,}」不能符合「Bob」中的「o」，但能符合「foooood」中的所有o。「o{1,}」等價於「o+」。「o{0,}」則等價於「o*」。


{n,m}
m和n均為非負整數，其中n<=m。最少符合n次且最多符合m次。例如，「o{1,3}」將符合「fooooood」中的前三個o。「o{0,1}」等價於「o?」。請註意在逗號和兩個數之間不能有空格。


?
非貪心量化（Non-greedy quantifiers）：當該字元緊跟在任何一個其他重複修飾詞（*,+,?，{n}，{n,}，{n,m}）後面時，符合模式是非貪婪的。非貪婪模式儘可能少的符合所搜尋的字串，而預設的貪婪模式則儘可能多的符合所搜尋的字串。例如，對於字串「oooo」，「o+?」將符合單個「o」，而「o+」將符合所有「o」。


.
符合除「\n」之外的任何單個字元。要符合包括「\n」在內的任何字元，請使用像「(.|\n)」的模式。


(pattern)
符合pattern並取得這一符合的子字串。該子字串用於向後參照。所取得的符合可以從產生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中則使用$0…$9屬性。要符合圓括號字元，請使用「\(」或「\)」。


(?:pattern)
符合pattern但不取得符合的子字串（shy groups)，也就是說這是一個非取得符合，不儲存符合的子字串用於向後參照。這在使用或字元「(|)」來組合一個模式的各個部分是很有用。例如「industr(?:y|ies)」就是一個比「industry|industries」更簡略的運算式。


(?=pattern)
正向肯定預查（look ahead positive assert），在任何符合pattern的字串開始處符合尋找字串。這是一個非取得符合，也就是說，該符合不需要取得供以後使用。例如，「Windows(?=95|98|NT|2000)」能符合「Windows2000」中的「Windows」，但不能符合「Windows3.1」中的「Windows」。預查不消耗字元，也就是說，在一個符合發生後，在最後一次符合之後立即開始下一次符合的搜尋，而不是從包含預查的字元之後開始。


(?!pattern)
正向否定預查(negative assert)，在任何不符合pattern的字串開始處符合尋找字串。這是一個非取得符合，也就是說，該符合不需要取得供以後使用。例如「Windows(?!95|98|NT|2000)」能符合「Windows3.1」中的「Windows」，但不能符合「Windows2000」中的「Windows」。預查不消耗字元，也就是說，在一個符合發生後，在最後一次符合之後立即開始下一次符合的搜尋，而不是從包含預查的字元之後開始


(?<=pattern)
反向(look behind)肯定預查，與正向肯定預查類似，只是方向相反。例如，「(?<=95|98|NT|2000)Windows」能符合「2000Windows」中的「Windows」，但不能符合「3.1Windows」中的「Windows」。


(?<!pattern)
反向否定預查，與正向否定預查類似，只是方向相反。例如「(?<!95|98|NT|2000)Windows」能符合「3.1Windows」中的「Windows」，但不能符合「2000Windows」中的「Windows」。


x|y
符合x或y。例如，「z|food」能符合「z」或「food」。「(?:z|f)ood」則符合「zood」或「food」。


[xyz]
字元集合（character class）。符合所包含的任意一個字元。例如，「[abc]」可以符合「plain」中的「a」。特殊字元僅有反斜線\保持特殊含義，用於跳脫字元。其它特殊字元如星號、加號、各種括弧等均作為普通字元。脫字元^如果出現在首位則表示負值字元集合；如果出現在字串中間就僅作為普通字元。連字元 - 如果出現在字串中間表示字元範圍描述；如果如果出現在首位則僅作為普通字元。


[^xyz]
排除型字元集合（negated character classes）。符合未列出的任意字元。例如，「[^abc]」可以符合「plain」中的「plin」。


[a-z]
字元範圍。符合指定範圍內的任意字元。例如，「[a-z]」可以符合「a」到「z」範圍內的任意小寫字母字元。


[^a-z]
排除型的字元範圍。符合任何不在指定範圍內的任意字元。例如，「[^a-z]」可以符合任何不在「a」到「z」範圍內的任意字元。


[:name:]
增加命名字元類（named character class）[註 1]中的字元到運算式。只能用於方括弧運算式。


[=elt=]
增加當前locale下排序（collate）等價於字元「elt」的元素。例如，[=a=]可能會增加ä、á、à、ă、ắ、ằ、ẵ、ẳ、â、ấ、ầ、ẫ、ẩ、ǎ、å、ǻ、ä、ǟ、ã、ȧ、ǡ、ą、ā、ả、ȁ、ȃ、ạ、ặ、ậ、ḁ、ⱥ、ᶏ、ɐ、ɑ 。只能用於方括弧運算式。


[.elt.]
增加排序元素（collation element）elt到運算式中。這是因為某些排序元素由多個字元組成。例如，29個字母表的西班牙語， "CH"作為單個字母排在字母C之後，因此會產生如此排序「cinco, credo, chispa」。只能用於方括弧運算式。


\b
符合一個單詞邊界，也就是指單詞和空格間的位置。例如，「er\b」可以符合「never」中的「er」，但不能符合「verb」中的「er」。


\B
符合非單詞邊界。「er\B」能符合「verb」中的「er」，但不能符合「never」中的「er」。


\cx
符合由x指明的控制字元。例如，\cM符合一個Control-M或Enter符。x的值必須為A-Z或a-z之一。否則，將c視為一個原義的「c」字元。


\d
符合一個數字字元。等價於[0-9]。


\D
符合一個非數字字元。等價於[^0-9]。


\f
符合一個換頁符。等價於\x0c和\cL。


\n
符合一個換行符。等價於\x0a和\cJ。


\r
符合一個Enter符。等價於\x0d和\cM。


\s
符合任何空白字元，包括空格、製表符、換頁符等等。等價於[ \f\n\r\t\v]。


\S
符合任何非空白字元。等價於[^ \f\n\r\t\v]。


\t
符合一個製表符。等價於\x09和\cI。


\v
符合一個垂直製表符。等價於\x0b和\cK。


\w
符合包括底線的任何單詞字元。等價於「[A-Za-z0-9_]」。


\W
符合任何非單詞字元。等價於「[^A-Za-z0-9_]」。


\ck
符合控制跳脫字元。k代表一個字元。等價於「Ctrl-k」。用於ECMA語法。


\xnn
十六進位跳脫字元序列。符合兩個十六進位數字nn表示的字元。例如，「\x41」符合「A」。「\x041」則等價於「\x04&1」。正則運算式中可以使用ASCII編碼。.


\num
向後參照（back-reference）一個子字串（substring），該子字串與正規表示式的第num個用括弧圍起來的捕捉群（capture group）子運算式（subexpression）符合。其中num是從1開始的十進位正整數，其上限可能是9[註 2]、31、[註 3]99甚至無限。[註 4]例如：「(.)\1」符合兩個連續的相同字元。


\n
標識一個八進位轉義值或一個向後參照。如果\n之前至少n個取得的子運算式，則n為向後參照。否則，如果n為八進位數字（0-7），則n為一個八進位轉義值。


\nm
3位八進位數字，標識一個八進位轉義值或一個向後參照。如果\nm之前至少有nm個獲得子運算式，則nm為向後參照。如果\nm之前至少有n個取得，則n為一個後跟文字m的向後參照。如果前面的條件都不滿足，若n和m均為八進位數字（0-7），則\nm將符合八進位轉義值nm。


\nml
如果n為八進位數字（0-3），且m和l均為八進位數字（0-7），則符合八進位轉義值nml。


\un
Unicode跳脫字元序列。其中n是一個用四個十六進位數字表示的Unicode字元。例如，\u00A9符合版權符號（©）。


優先權[編輯]


 優先權
符號


最高
\


高
( )、(?: )、(?= )、[ ]


中
*、+、?、{n}、{n,}、{m,n}


低
^、$、中介字元


最低
|


範例[編輯]

以下是以PHP的語法所寫的範例


驗證字串是否只含數字與英文，字串長度並在4~16個字元之間



<?php
$str = 'a1234';
if (preg_match("/^[a-zA-Z0-9]{4,16}$/", $str)) {
    echo "驗證成功";
} else {
    echo "驗證失敗";
}
?>


簡易的台灣身分證字號驗證



<?php
$str = 'a1234';
if (preg_match("/^[A-Za-z]\d{9}$/", $str)) {
    echo "驗證成功";
} else {
    echo "驗證失敗";
}
?>


以下範例是用Perl語言寫的，與上面的範例功能相同



print $str = "a1234" =~ m:^[a-zA-Z0-9]{4,16}$: ? "COMFIRM" : "FAILED";



print $str = "a1234" =~ m"^\w[12]\d{8}$" ? "COMFIRM" : "INVALID";

相關條目[編輯]

Perl
PHP
Python
Ruby

外部連結[編輯]


您可以在維基教科書中尋找此百科條目的相關電子教程：
:en:Regular Expressions





參見維基數據有有關P1793的屬性，正規表示式格式（參見用法）



RegExp (PCRE) and grep, （德文）
Comparison of regular expression engines（英語：Comparison of regular expression engines）（英文）
各種語言或工具軟體的不同風格的正規表示式文法規定
正規表示式30分鐘入門教程（簡體中文）
MSDN正規表示式語法介紹（簡體中文）
正規表示式應用範例
正規化表示法-ProgWiki（繁體中文）
一個線上正則驗證器
另一個正規表示式的網頁線上偵錯/驗證器，用狀態機圖解輸入的正規表示式的語意，並可檢測輸入的測試字串是否符合該正規表示式
Regexper
RegExr: Learn, Build, & Test RegEx，公式上的懸浮氣泡UI解釋該規則符合的字串；符合結果有對應的解釋；右側邊欄有正規表示式的詳細規範及圖中的小抄

註釋[編輯]


^ 命名字元類。對於C++11的regex_traits::lookup_classname，預設返回字元類的名字："alnum","apha","blank","cntrl","digit","graph","lower","print","punct","space","upper","xdigit","d","s","w"
^ 命名字元類 BRE與grep最多只能向後參照到9
^ Visual C++的regex庫最多只能向後參照到31
^ ECMAScript不限向後參照的上限







權威控制



GND: 4506116-6
NDL: 01121341
















閱
論
編


字串






String metric



字串近似符合
Bitap演算法
Damerau–Levenshtein距離
編輯距離
漢明距離
Jaro–Winkler距離
Lee距離
Levenshtein自動機
Levenshtein距離
Wagner–Fischer演算法








字串搜尋演算法



Apostolico–Giancarlo演算法
Boyer-Moore字串搜尋演算法
Boyer–Moore–Horspool演算法
Knuth–Morris–Pratt演算法
Rabin–Karp演算法








多字串搜尋



AC自動機
Commentz-Walter演算法
Rabin–Karp演算法








正規表示式



正規表示式引擎比較
Regular tree grammar
Thompson構造法
非確定有限狀態自動機








序列比對



Hirschberg's algorithm
Needleman–Wunsch演算法
史密斯-沃特曼演算法








資料結構



DAFSA
字尾陣列
Suffix automaton
字尾樹
Generalized suffix tree
Rope
三元搜尋樹
Trie








其它



語法分析器
模式符合
Compressed pattern matching
最長公共子序列
最長公共子串
Sequential pattern mining
排序












 
						取自 "https://zh.wikipedia.org/w/index.php?title=正則表達式&oldid=45228095"					
3 個分類：編譯原理形式語言程序設計語言隱藏分類：自2013年11月準確性有爭議的作品拒絕當選首頁新條目推薦欄目的條目自2013年11月需補充來源的條目含有多個問題的條目含有英語的條目有非常模稜兩可或者十分空泛語句的條目有未列明來源語句的條目包含規範控制信息的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源維基教科書 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


العربيةAzərbaycancaБългарскиCatalàČeštinaDanskDeutschΕλληνικάEnglishEsperantoEspañolEuskaraفارسیSuomiFrançaisGalegoעבריתहिन्दीHrvatskiMagyarՀայերենÍslenskaItaliano日本語ქართული한국어КыргызчаLatviešuМакедонскиMirandésNederlandsNorsk bokmålPolskiPortuguêsRomânăРусскийSimple EnglishSlovenčinaShqipСрпски / srpskiSvenskaதமிழ்ไทยTürkçeУкраїнськаاردوTiếng ViệtWalon 
編輯連結 





 本頁面最後修訂於2017年7月16日 (週日) 14:57。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 








正規語言 (Formal Language) - 教科書：系統程式































Wikidot.com



.wikidot.com
    


Share on








Edit
History
Tags
Source

Explore »

 





教科書：系統程式
陳鍾誠著，旗標出版








文章列表

最近修改
所有網頁
標記


相關網站

陳鍾誠的網站
系統程式
打造電腦
C# 程式設計
Blender 動畫設計
Linux 程式設計
Android 手機程式
HTML5 技術體系


陳鍾誠

陳鍾誠的信箱
陳鍾誠的留言板
陳鍾誠的網站
陳鍾誠在金門大學
陳鍾誠的手機網
陳鍾誠的簡歷
陳鍾誠的 Facebook
陳鍾誠的 Twitter
陳鍾誠的 Diigo
陳鍾誠的 Scribd
陳鍾誠的 ping
陳鍾誠的 Youtube
陳鍾誠的 GAE


旗標出版社

旗標首頁
信箱
留言板
教師服務
購書服務
讀者服務


Wikidot

網站管理
本站成員
標記
加入本站?
頂欄
側欄
樣版
Wikidot 文件
Wikidot 語法
Wikidot Module
Wikidot Embedding
Wikidot Template
Wikidot Layout




Create account or Sign in 




內容
前言
目錄
1. 系統軟體
2. 電腦的硬體結構
3. 組合語言
4. 組譯器
5. 連結與載入
6. 巨集處理器
7. 高階語言
8. 編譯器
9. 虛擬機器
10. 作業系統
11. 嵌入式系統
12. 系統軟體實作
附錄
補充教材
教學錄影
家庭作業
版本管理
相關資源
投影片
下載
參考文獻
相關文章
相關資源
錯誤更正
購買本書
手機版網站
問題與回答

rating: 0+x





                            正規語言 (Formal Language)
                        








文章
評論
授權



在資訊系的相關課程當中，與高階語言相關的課程，包含程式語言 (Programming Language)、正規語言 (Formal Language)、以及編譯器 (Compiler) 等等。這些課程的核心是語法理論，我們可以利用生成規則 (例如：BNF, EBNF 等) 描述程式的語法。一但能正確的描述某個程式語言，就能撰寫剖析該語言的剖析程式，將這些語法轉換成語法樹 (或稱剖析樹)。
高階語言所使用的語法，大致上分為兩個層次，在單詞的語法上會使用正規語法 (Regular Grammar)，而句法結構上則使用與上下文無關的文法 (Context-Free Grammar，簡稱 CFG)，這兩個語法都可以使用近代語言學之父的喬姆斯基 (Chomsky) 的生成語法 (Generative Grammar) 描述。在程式語言的領域，我們通常用 BNF 與 EBNF 語法描述這些程式的語法。
Chomsky 是個語言學家，提出的生成語法主要也是為了描述人類所說的語言，這在資訊科學的領域被稱為自然語言，以便與程式設計時所用的程式語言區分開來。然而，生成語法雖然主要為了描述自然語言而提出，但卻同樣適用於程式語言的語法上，甚至在程式語言的設計上造成了相當大的影響，這或許是當初 Chomsky 所沒有想到的。
語法的概念或許並非 Chomsky 所第一個提出的，但以正規的遞迴結構，有系統的描述英文的文法，則應歸功於 Chomsky，當初 Chomsky 看出了英文文法當中具有強烈的結構性，可以利用生成語法規則描述。透過有限的 (甚至是只有很少的幾條) 語法規則，就可以描述變化無窮的英文語句，這導至語言學研究的重要革命。同樣的，在程式語言上，也能利用規則，產生變化無窮的程式組合，這可以說是一個意外的收穫。
有關喬姆斯基語法階層的理論，是正規語言課程的主題，甚至牽涉到進階的計算理論主題，在此我們僅簡單的列出各型語法於表格 7.1當中，詳細內容請參考正規語言與計算理論課程的教科書。
表格 7.1 喬姆斯基語法階層


文法
語言
自動機
產生式規則


0-型
遞迴可枚舉語言 (Recursively Enumerable)
圖靈機 (Turing Machine)
α-> β


1-型
上下文相關語言 (Context Sensitive Grammar)
線性有界非確定圖靈機 (Linear Bounded Automata)
αAβ -> αγβ


2-型
上下文無關語言 (Context Free Grammar)
非確定下推自動機(Push Down Automata)
A -> γ


3-型
正規語言 (Regular Grammar)
有限狀態自動機 (Finite State Automata)
A -> aB A -> a





Show Comments





Add a New Comment


Post preview:


Close preview








or Sign in as Wikidot user



(will not be published)




-
+


                    Help: wiki text quick reference 











Permanent Link
Edit
Delete





本網頁的作者、授權與引用方式


作者
陳鍾誠，於金門大學資訊工程系，電子郵件：wt.ude.uqn|ccc#wt.ude.uqn|ccc，網站：http://ccckmit.wikidot.com。
授權
本文採用創作共用 (Creative Common) 3.0 版的 姓名標示─非商業性─相同方式分享 授權條款，歡迎轉載或修改使用，但若做為商業使用時必須取得授權，引用本文時請參考下列格式。
中文版 (APA格式)
陳鍾誠 (1270527286|%Y年%m月%d日)，(網頁標題) 正規語言 (Formal Language)，(網站標題) 教科書：系統程式，1270527286|%Y年%m月%d日，取自 http://sp1.wikidot.com/formallanguage ，網頁修改第 1 版。
英文版 (APA格式)
Chung-Chen Chen (1270527286|%Y,%b%e), Retrieved 1270527286|%b %e,%Y from http://sp1.wikidot.com/formallanguage, Page Revision 1.













page revision: 1, last edited: 10 Jun 2010 07:46

Edit
Tags
Discuss (0)
History
Files
Print
Site tools
+ Options


Edit Sections
Append
Edit Meta
Watchers
Backlinks
Page Source
Parent
Lock Page
Rename
Delete









Help
     |
    Terms of Service
     |
    Privacy
     |
    Report a bug
     |
    Flag as objectionable

Powered by Wikidot.com


                    Unless otherwise stated, the content of this page is licensed under Creative Commons Attribution-ShareAlike 3.0 License





Other interesting sites






Criminal Justice Collaboratory
          
              Colby Community College
            







Leaping Stag









Story Chip
          
              Become a part of history, share your story.
            







Pofo MultiQuiz




























        Click here to edit contents of this page.    



        Click here to toggle editing of individual sections of the page (if possible).         Watch headings for an "edit" link when available.    

        Append content without editing the whole page source.    

        Check out how this page has evolved in the past.    

        If you want to discuss contents of this page - this is the easiest way to do it.    

        View and manage file attachments for this page.    

        A few useful tools to manage this Site.    

        See pages that link to and include this page.    

        Change the name (also URL address, possibly the category) of the page.    

        View wiki source for this page without editing.    
  
        View/set parent page (used for creating breadcrumbs and structured layout).    

            Notify administrators if there is objectionable content in this page.        

            Something does not work as expected? Find out what you can do.        

            General Wikidot.com documentation and help section.        

            Wikidot.com Terms of Service - what you can, what you should not etc.        

            Wikidot.com Privacy Policy.          
        




































[系列文目錄] 正規語言 Formal Language | Mr. Opengate


















Pages



Home


About


Contact




























skip to main  |
      skip to sidebar







Mr. Opengate




Work hard, play harder, love hardest.

















2015年6月14日 星期日








[系列文目錄] 正規語言 Formal Language





於

6/14/2015 11:08:00 下午





標籤：
Computer Science-Formal Language,
featured


 






序 - 計算理論是計算機科學的靈魂

我就讀大一、大二時，其實對資訊科學並沒有非常的喜歡，而比較喜歡數學和物理這種用「單純」且「優雅」的理論就能解釋許多現象的學科。一直到大三學到了正規語言概論，才感覺到自己真正初步瞭解「電腦」的能力與極限，讓我有一種豁然開朗的感覺，而開始對資訊科學感興趣。

上了研究所後，又因修課仔細的研讀了一次正規語言，感觸十分深刻，因此，寫下了這些正規語言的介紹和整理。我的介紹整理秉持盡量以中文撰寫英文為輔為原則，期望有更多人能參透正規語言這個有趣的學門：）





目錄

一、正則語言 Regular Languages

Ch1    決定性有限自動機 Deterministic Finite automata, DFA
Ch2    非決定性有限自動機 Nondeterminism Finite automata, NFA
Ch3    正則表達式 Regular Expression, RE
Ch3.5  常用的正則表示式 Regular Expression in Application
Ch4    泵引理 Pumping Lemma
Ch5    邁希爾－尼羅德定理 Myhill-Nerode Theorem



二、上下文無關語言 Context-Free Languages

Ch6    上下文無關語言 Context-free language, CFLs
Ch7    下推自動機 Pushdown automaton, PDAs
Ch8    上下文無關語言泵引理 Pumping lemma for context free languages



三、邱奇－圖靈論題 Church–Turing Thesis

Ch9    圖靈機 Turing Machines
Ch10   變種圖靈機 Variants of Turing Machines



四、決定性問題 Decidability

Ch11   決定性問題 Decidability
Ch12   不可決定問題與圖靈可識別語言 Undecidable Problem and Turing-recognizable language
Ch12.5 決定與不可決定問題相關習題



五、歸約 Reducibility

Ch13   可歸約性 Reducibility
Ch14   多一歸約 Mapping Reducibility
Ch14.5 歸約相關習題 Exercises for Reducibility



六、時間複雜度 Time Complexity

Ch15   複雜度P和NP Time Complexity, P and NP
Ch16   NP完全 NP-Complete, NPC
Ch16.5 Cook-Levin理論與卡普的二十一個NP-完全問題







前言

正規語言概論是交大資工大三上的必修課程。這門課的課題是基礎的計算理論，研究什麼是電腦的能力和極限。介紹各種計算模型，例如 DFA, NFA, PDA, Turing machines 等等，以及其相對應的正規語言，如 regular languages, context free languages, Turing-decidable languages 等等。也會探討問題間的 Reduction 以及問題的 Complexity 等等。

通常使用的教科書主要是《Introduction to the Theory of Computation》不過也有老師使用《Introduction to Automata Theory, Languages, and Computation》。





簡介

透過計算模型，我們可以對計算定下明確的數學定義。而一旦有了明確的定義，便可以研究什麼是可計算的、什麼是不可計算的，而對於可計算的問題，必須花費多少時間和空間才可能計算。

Church–Turing thesis 指出，所有演算法可解的問題，都可透過 Turing machines 求解，也因此，藉由研究 Turing machines 我們得以探討電腦的極限，以及對各種問題的難度訂出明確的界線。

這是一門非常理論與數學的課，需要非常清晰的邏輯思考。老師曾說，資訊界日新月異，許多課程可能幾年後就不見了，或者教的東西大幅改變。但你幾乎可以確定，正規語言這門課還是會一直存在。從哲學的角度來說，計算理論在電腦科學裡佔了十分核心的地位。

正規語言課程所學的東西其實也有很多延伸的應用，以至於很多讀者很可能早已接觸過某些部份，但直到這門課，才真正以嚴謹的方式學習背後的來歷。像是如果有接觸像 Python 等語言或者用過 Vim 等編輯器的搜尋功能的讀者，很有可能有接觸過正規表示式。而 CFG 和程式語言的設計以及編譯器等課程有密切相關，你或許會曾在程式語言的文件上看過他。如果在演算法等課程聽過 NP、P 等名詞，在這堂課裡，你可以學到這些名詞到底有什麼含意。而對什麼是演算法，時間複雜度、問題的可計算性等等，都會在這堂課得到更深的理解。





學習小指引

課本本身寫的很好，建議將《Introduction to the Theory of Computation》研讀數遍，並配合書中練習題。






References

交資夢想 - 正規語言概論
https://nctucs.wordpress.com/2011/12/10/formal-languages/














































較新的文章


較舊的文章

首頁







技術提供：Blogger.























About Me




Hi! I'm Mr. Opengate.



喜歡做很酷的事，和睡覺；

相信品味與信念的不朽價值。

希望有更多的機會感受這個世界：）


第一次來記得看一下本站簡介喔！ 













Facebook

Mr. Opengate











Contents















Popular Posts









臺大資工研究所畢業心得：怪咖、凡人和藝術家










臺北信義行：信義商圈、Taipei 101、四四南村










C/C++ - Vector (STL) 用法與心得完全攻略










科技業常見的職務縮寫 SA SD RD PG PM DBA MIS QA Sales










猴子都會寫的Makefile - makefile簡易教學 (1)










C/C++ - String 用法與心得完全攻略















Search





























RSS







發表文章










                  Atom
                










發表文章












留言










                  Atom
                










留言



















Pageviews



















 












Home
Contact Me




































正規語言概論 – 交大修課心得 – 一座島







































































一座島
一座島，一個人，一個世界。














一月 2, 2013 by Shaform 
正規語言概論 – 交大修課心得 


Lego Turing Machine from Projet Rubens, ENS Lyon (cc-by)
課程資料
正規語言概論
開課：黃廷祿老師
修課年度：100資工系
這門課的課題是基礎的計算理論，研究什麼是電腦的能力和極限。介紹各種計算模型，例如 DFA, NFA, PDA, Turing machines 等等，以及其相對應的正規語言，如 regular languages, context free languages, Turing-decidable languages 等等。也會探討問題間的 Reduction 以及問題的 Complexity。使用的課本是《Introduction to the Theory of Computation》，更多相關議題可參考：〈正規語言概論〉。
上課方式
上課是用老師自己編的講義作為投影片講解，有時也會配合課本的頁面。老師上課時常會點同學回答，如果有同學打瞌睡他也會熱心的叫醒大家。老師會記人的名字，筆者就曾被點名回答題目。有時老師的穿著頗為正式，下課時如果問老師問題，他會不耐其煩的細心講解。作業通常是先在上課時宣佈，其後再公佈於課程網頁上。他偶而會在上課時突擊小考。
他曾說資工有很多課會消失於時代的演進之中，但這堂課是歷久不衰的。
好像是因為有同學懷疑課本的文法，所以老師有一次和我們談談學習英文的重要性，還跟我們說學校的圖書館有 iPad 可以出借，介紹了可以在其上使用的 Merriam-Webster 英英字典(有真人發音)，以及 New York Times 等讀物。
順帶一提，筆者也有用過《Longman Dictionary of Contemporary English》以及《Collins COBUILD Advanced Learner’s English Dictionary》，這三者都是非常優秀的英英字典，除了紙本外也都附有 PC 版光碟。關於英英字典也可參考：〈辭典選用的基本觀念〉、〈哪本辭典的定義最好？〉
考試作業
這堂課的負擔其實沒有很重，通常是數個禮拜老師才會在上課時宣佈習題。習題內容為課本的練習題，每次都只有一兩題，很快就會寫完，有時老師也會自己出題。
基本上是不點名，只有一次發了問捲調查作為點名，不過因為上課時有突擊小考，加上作業都在上課先宣佈的關係，建議還是不要蹺課比較好。
突擊小考的內容多半是剛剛才講過的內容，所以上課專心能有回報。考題不難，通常只有一題，若對課本有一定的熟悉度，應能很快寫完。
除此之外，還有期中考和期末考。老師會在事前公佈考古題，從考古題看來，以前的考試型態似乎有不少證明題。不過這次的期中考意外的沒出證明題，而且題型偏向簡單，多數人都考的不錯。期末考出了幾題證明，不過也滿基本的，考古題感覺難很多。
考試題型分別為是非題、選擇題，及最後的簡答、計算與證明題。所有的考試都是 open book，可以自由查閱課本、講義，或任何自帶紙本參考資料。也因此考的題目都會有變化，不會跟考古題一樣。
結語
這門課使用的課本其實內容不多，而且由於較為理論與數學，可以邊看邊思考，閱讀起來並不枯燥，筆者暑假時利用通勤的時間，把課本看完了一遍，覺得幫助頗大。《Intro. to the Theory of Computation》這本書真的寫得不錯，算是在資工教科書中，十分易讀的課本之一。
由於老師出的練習題實在太少，令人感覺不踏實，所以筆者也將課本裡附有答案的習題寫過了一遍。老師並不會出一些刁難的問題，基本上只要細讀課本與講義，考試和作業應該都能把握。

 

廣告






分享此文：GoogleFacebookPocket請按讚：喜歡 載入中...

相關
 





			2 thoughts on “正規語言概論 – 交大修課心得”		




板主你好，想請問一下無資工背景，來選修這門課，會不會聽不懂？感謝。


回應 





您好，這個應該是看個人情況有所不同，不過其實印象中這門課跟資工其他課的關聯度沒有很大就是，唯一可能可以算的上是有關的先修課程應該只有「離散數學」。理論上修過其他資工的課並不會比較聽的懂這堂課。


回應 






發表迴響 取消回覆 



在此輸入你的回應…




在下方填入你的資料或按右方圖示以社群網站登入：





























 
 


電子郵件 (必) （電子郵件地址不會被公開）



名稱 (必)



個人網站














 您的留言將使用 WordPress.com 帳號。 ( 登出 / 變更 )












 您的留言將使用 Twitter 帳號。 ( 登出 / 變更 )












 您的留言將使用 Facebook 帳號。 ( 登出 / 變更 )












 您的留言將使用 Google+ 帳號。 ( 登出 / 變更 )




取消
連結到 %s




 透過電子郵件通知我後續回應。
 



 






 
搜尋



熱門文章與頁面︰ 

						從交大資工到臺大資工所					



						在臺北實習的短期租屋					



						談談資工升大學備審資料的準備					



						千萬別學英語：關於學習、過往、及其它					



						「從留學到在美就業」講座心得					



						女生讀資工					



						談談資工升研究所備審資料的準備					



						高中一年回顧					



						文章匯整					



						口語表達與溝通：心得					

  近期文章 

看美劇的日子


眼界、控制、選擇


閱讀器


2016 年末回顧


背後的眼光


 近期迴響 
「姆Q」對「PTT 教我的人生哲學」留言「Shaform」對「從交大資工到臺大資工所」留言「dechen」對「從交大資工到臺大資工所」留言「Shaform」對「2016 年末回顧」留言「6 Anson」對「2016 年末回顧」留言 
分類 
生活紀實

白日夢

胡謅

閱書坊

設計間

散掉的紙張

望世界


TagsAIESEC
AP
Bellevue
BP
debate
dvorak
english
Flash
Google
Google Drive
IBM
Kindle
linux
Mainframe
Master the Mainframe
Microsoft
NPSC
Redmond
System z
USA
交大修課心得
交通大學
努力
升大學的準備方向
升學
危險心靈
古都馬拉松
臺北
臺南
臺大
台灣
台灣大學
回顧
國文
大學
大腦
學習
實習
工作
心情
思想
性別
教學
教育
文字
新竹
新聞
校園
比賽
海外實習
生技
生活
研究所
科幻
程式
程式設計
網路
考試
英文
英語辯論
行列
計劃
設計
評論
資工
超自然
足球
軟體工程師
輸入法
運動
閱謮
閱讀
電腦
食物
鬼Blog Stats 
278,336 hits

 


























張貼到



取消







 












 
 
%d 位部落客按了讚：









































































































































正則語言 - 維基百科，自由的百科全書








































開啟主選單



β





搜尋



編輯本頁以其他語言閱讀正則語言




正規語言又稱正則語言是滿足下述相互等價的一組條件的一類形式語言：
可以被確定有限狀態自動機識別；
可以被非確定有限狀態自動機識別；
可以被唯讀圖靈機識別；
可以用正規表示式描述；
可以用正則文法生成。
可以用字首文法生成。

目錄例子編輯
所有的有限語言都是正則的。
字母表{a, b}上包含偶數個a的所有字串構成的語言是正則的。
字母表{a, b}上取若干個a後緊跟若干個b形式的所有字串構成的語言是正則的。
定義編輯
在字母表集合Σ上的正規語言定義如下：
空集合Ø是正規語言
只包含一個空字串的語言{ε}是正規語言
對所有



a
∈
Σ


{\displaystyle a\in \Sigma }
 ，{a}是正規語言
若A, B是正規語言，則



A
⋅
B
,
A
⋃
B
,

A

∗




{\displaystyle A\cdot B,A\bigcup B,A^{*}}
 (kleene星號)都是正規語言
除此之外都不是正規語言
如果一個語言不是正規語言，它需要一個記憶體至少是Ω(log log n)的自動機才能辨認。換句話說，DSPACE(o(log log n))等於所有正規語言的集合。實際上，大部份的非正規語言需要至少O(log n)的空間。
封閉性質編輯
這裡語言的運算參見條目形式語言。
正則語言的交、並、差、補運算得到的語言仍然是正則語言；
兩個正則語言連線（把第一個語言的所有字串同第二個語言的所有字串連線起來）後得到的語言仍然是正則語言；
正則語言閉包運算後得到的語言仍然是正則語言；
正則語言的每個字串轉置後得到的語言仍然是正則語言；
正則語言被任意語言的字串商（左商或右商)後得到的語言仍然是正則語言。
正則語言字串代換後得到的語言仍然是正則語言。
與正則語言字串同態或逆同態的語言仍然是正則語言。
純代數定義編輯
正則語言也可以以純粹代數的方式來定義。
Σ是一個有窮的字母表，Σ*是Σ上的自由麽半群，Σ*構成了Σ上的所有字串。令M為一個有限麽半群，對映f : Σ* -> M為一個麽半群同態，集合S是M的一個子集，於是S的逆同態象f -1(S)是正規的。每一個正規語言都可以依這種方式來定義。
另外一種定義方式藉助於一個等價關係。
取L為Σ*的任意子集，定義如下的Σ*上的等價關係~ (叫做「語法關係」)： u ~ v，即對Σ*中所有的的字串w有uw在L中若且唯若vw在L中。於是對正規語言有下麵的結論：語言L是正規的若且唯若關係~的等價類的數量是有限的（其證明在條目語法麽半群中）。在此情況下，等價類的數量就是接受語言L的最小確定有限狀態自動機的狀態數。
相關條目編輯
形式語言
有限狀態自動機
正規表示式
正則文法
喬姆斯基體系
參照編輯
Michael Sipser. Introduction to the Theory of Computation. PWS Publishing. 1997. ISBN 978-0-534-94728-6.  Chapter 1: Regular Languages, pp.31–90. Subsection "Decidable Problems Concerning Regular Languages" of section 4.1: Decidable Languages, pp.152–155.

外部連結編輯
Department of Computer Science at the University of Western Ontario: Grail+, http://www.csd.uwo.ca/Research/grail/. A software package to manipulate regular expressions, finite-state machines and finite languages. Free for non-commercial use.
Chalchalero! http://www.ucse.edu.ar/fma/sepa/chalchalero.htm. A free visual software to manipulate regular expressions, regular grammars, finite-state machines and finite languages developed by the SEPa! Project Team (Universidad Católica de Santiago del Estero).
REG at Complexity Zoo
http://www.csd.uwo.ca/Research/grail/ ：西安大略大學電腦科學系Grail+， 一個可以操作正規表示式、有限狀態自動機和有限語言的自由軟體包。


取自 "https://zh.wikipedia.org/w/index.php?title=正則語言&oldid=45105152"






 





Fw: [心得] 正規語言概論 - 陳穎平 - 看板 NCTU-Teacher - 批踢踢實業坊


















批踢踢實業坊
›
看板 NCTU-Teacher
關於我們
聯絡資訊




返回看板


分享







作者neoneon (紅茶を飲む程度の能力)看板NCTU-Teacher標題Fw: [心得] 正規語言概論 - 陳穎平時間Tue Jul 12 01:43:57 2016
※ [本文轉錄自 neoneon 信箱]

作者: [email protected] ("愛宕有機奈米負離子貓")
標題: [心得] 正規語言概論 - 陳穎平
時間: Sun Jul 10 10:22:43 2016

作者: kougousei (BOSS) 看板: NCTU-Teacher
標題: [心得] 正規語言概論 - 陳穎平
時間: 2012/01/20 Fri 18:28:52


⊕課名⊕

正規語言概論

▲教授▲

陳穎平

★修課年度★（請加註開課單位 如:大三通識、XX系選修、XX所）

100上 資工系必修

￡教了什麼￡（課程大概內容。或是額外學會了什麼東西。）

DFA, NFA, CFG, PDA, turing maching, time complexity, NP-complete

簡單來說是資訊工程的理論基礎，探討電腦解決問題的能力到底有多強

(這可能是資工系最理論最數學的一堂課...)


◆上課方式◆（投影片、團體討論、老師教學風格）

用ipad放投影片，投影片文字圖片都是教科書的內容

不過偶爾會補充一些課本挪到習題的定理，例如Rice's theorm或CYK algorithm之類的


基本上這本課本寫得還不錯，所以不聽課也無所謂，但是老師講解還算詳細，

所以聽課有助於增進理解。

▼考試作業▼

3次考試，值得註意的是老師***非常***要求證明的嚴謹度，
所以扣分算是扣得蠻嚴格的

不過考試題目大多來自課本習題，事前練習絕對有幫助。
考古題也一定要寫

考試的班平均還蠻慘的不過學期最後會調分所以還ok
(聽說調得很神奇)

￥其他￥（是否註重出席率or嚴禁遲到？需要的基礎？）

第一堂課和最後一堂課有簽到.....


要修陳老師的課請做好要寫嚴謹數學證明的心理準備，
否則另外兩班是你更好的選擇。

離散數學和演算法有學好有幫助(邏輯和graph的部分常常出現)，
不過真的用到時再回去翻or google也來得及啦

￠最後想說的話￠

老師長得很像陳漢典。



--
※ Origin: 交大次世代(bs2.to)
◆ From: 111-240-40-181.dynamic.hinet.net
推 chingtung：推薦這篇文章                                         01/20 18:40
肝 pocket579：大推這個陳漢典!!!!!!!!!!!!!!!!他是好人阿!!!!!!!!!    01/20 18:40
→ chingtung：明明就不像!!!!老師教得很棒^q^                        01/20 18:42
推 kougousei：越看會越像=3=                                        01/20 18:43
推 michael01800：我也覺得不像@@不過老師是好人! XD                  01/20 18:55
推 PSP：老師是帥氣大叔 :$                                          01/20 18:57
推 canfish98：推薦這個漢典                                         01/20 19:06
推 sa411022：大推ypchen!!!!!!!                                     01/20 19:29
推 Roronoa：考試扣分這點我要稍微替老師平反一下                     01/20 20:49
推 Roronoa：題目的批改方式都是由三個助教討論後決定 並非老師指示    01/20 20:50
推 Roronoa：改嚴一點是為了 讓認真的同學有較高的報酬                01/20 20:53
推 gxlkhhc：推薦這篇文章                                           01/20 21:00
推 mike1026915：推薦這篇文章                                       01/20 21:09
推 leoturkey：推薦這篇文章                                         01/20 22:08
推 jeffrey1：推薦這篇文章                                          01/20 22:16
推 smilecat13：推調分調的很神奇... 應該有20多分吧?!                01/20 22:32
推 hsnuer1171：不像啊@@"                                           01/21 00:16
推 jarhys：推薦這篇文章                                            01/21 01:07
推 yohu：推薦這篇文章                                              01/21 23:11
推 ParkerTsai：推ypchen不推陳漢典 XD                               01/22 09:59
推 shadowIVII：考試數理邏輯真的要清楚 只不過調分其實調很大         01/26 11:47
推 johnnylo00：推薦這篇文章                                        01/27 11:19
推 shaform：推薦這篇文章                                           01/30 21:50
推 philo165：推薦這篇文章                                          01/31 11:04


※ 發信站: 批踢踢實業坊(ptt.cc)
※ 轉錄者: neoneon (106.105.175.48), 07/12/2016 01:43:57












正規語言 - 阿裡塔克





























搜尋



問題
話題
通知 

登錄    註冊








						0 人關註該話題 					正規語言 










關於話題
我的收藏
精華
全部問題



搜索








更多...




 條新動態, 點擊查看





資工系選課

 1 個回復 • 不感興趣




贊同來自:





	      		1、資訊理論一定是必要的不管您以後怎哪一條路，只要需要學習資訊科系用到的相關能力都要建議先從理論基礎開始打底學了這一項能找到好工作嗎？別傻了但是外面公司會找相關科系的原因也是這個有觀念好溝通阿顯示全部 »
	        		        	





		    1、資訊理論一定是必要的不管您以後怎哪一條路，只要需要學習資訊科系用到的相關能力都要建議先從理論基礎開始打底學了這一項能找到好工作嗎？別傻了但是外面公司會找相關科系的原因也是這個有觀念好溝通阿2、資訊硬體比較偏向電路開發，在職場領域方向是比較偏向電子科系像是電子的硬體開發如韌體開發、主機板電路設計等等所以包含了電子、電機科系必學的電子電路學理論還有組合語言、C語言、C++等等專寫底層的語言3、資訊系統簡單來說就是比較偏向於軟體開發層面高階物件語言VB.NET、JAVA是必學的，還有資料庫應用等等職場範圍只要是開發各種軟體、系統都有另外還有部分是針對網路的系統操作以及網路的資安4、電腦網路簡單來說就是網路管理、開發跟架設另外還有通訊設備的維護架設等等也就是說一樣是偏硬體的5. 多媒體處理看名稱就是知道，只要所有的繪圖設計，圖形處理、辨識都是這個領域學習的階段對開發軟體來說也是不可少的在這領域也是需要用程式語言+資料庫來開發至於哪個重要~看您的興趣各個工作希望可以兼具的技能也不同直接用剔除法可能比較快例如您對電子電路的硬體開發沒興趣那就把第2項排到最後那未來可能有關手機、電腦零組件、工業電腦的硬體電路開發工作您就不能去嘗試		    
			




添加評論

分享



站外









要參與問題請先登錄或註冊





0









更多...





資工系選課
java遊戲java高手幫幫忙java下載java程式java手機遊戲javascript
軟體 •  回復了問題  • 2013-06-27 12:32 • 1 人關註 • 134 次瀏覽
1回復
 


更多...



正規語言相關 

正規語言
		正規語言課程介紹preface 介紹此課程的目的、要求與評分方式等等。 http://163.23.1.99/cour_ol/ts_courdtl.jsp?ls_smye=97&ls_smty=2&ls_serial=0943&ls_lan=c...
http://www.csie.dyu.edu.tw/~spring/Teaching/98_2/F...



正規語言概論– 交大修課心得| 一座島
		2013年1月2日 ... 課程資料正規語言概論開課：黃廷祿老師修課年度：100資工系這門課的課題是基礎的計算理論，研究什麼是電腦…
http://shaform.wordpress.com/2013/01/02/formal-lan...



正規表示式的入門與應用(一) - 瑞泰纖維工業公司
		雖說正規表示式本身屬於正規語言(formal language)的範疇, 感覺似乎蠻嚴肅的, 其實要應用在實務上並不困難。 在本文中, 我們採用從做中學的方式把正規表示式...
http://www.rtfiber.com.tw/~changyj/regex.1/...



正規語言課程交流:: 隨意窩Xuite日誌
		正規語言課程交流. 我在學校中開這門選修課開了很多年了，我很喜歡這門課，希望同學能夠有好的收穫。也希望能再長久開下去，因為建個部落格，做這門課的介紹。
http://blog.xuite.net/springman/formallanguages...



正規語言(Formal Language) - 教科書：系統程式
		2010年6月10日 ... 在資訊系的相關課程當中，與高階語言相關的課程，包含程式語言(Programming Language)、正規語言(Formal Language)、以及編譯器(Compiler)...
http://sp1.wikidot.com/formallanguage...



正規語言_百度百科
		2013年8月19日 ... 正規語言又稱正則語言，是形式語言與自動機理論中討論的最基本的語言系。通過它可以架起有窮自動機和正則表達式之間的一座橋梁。...
http://123.125.115.53/view/1121609.htm...



Formal language - Monash University
		In academic writing we use formal language, avoiding the use of slang and colloquial language. Try to learn a range of appropriate language for expressing...
http://www.monash.edu.au/lls/llonline/writing/gene...



金國興- 正規語言與計算理論... | Facebook
		金國興- 正規語言與計算理論... Kevin Huang, ChihHsin Tsai, David Lu and 8 others like this. 1 share. 金國興如果指導老師自己不懂計算理論,. 給學生一些幾乎無解...
https://www.facebook.com/permalink.php?story_fbid=...
















話題描述



 相關話題   資訊 java 語言 java手機遊戲 javascript java高手幫幫忙 java下載 組合語言 java遊戲 java電子書  正規語言概論 正規語言pdf 正規語言解答 正規語言ppt 正規語言張俊盛 c語言正規表示 正規語言講義 正規語言與計算理論 正規語言教學 正規語言與自動機  

最佳回復者


0 人關註該話題


x話題修改記錄



分享/邀請好友完善

站外










Copyright © 2017 - 阿裡塔克   當前時區: GMT +8    RSS Feed 
	   Link:  Friv2

















formal instruction - 正規語言










迴首頁
網站地圖
關於我們
聯絡我們





國家教育研究院雙語詞彙、學術名詞暨辭書資訊網




詞彙查詢
下載專區
詞彙建議
審譯會






 ×
請輸入您的使用者帳號密碼




帳號

請輸入註冊的 email。
        
密碼

密碼英文字母有分大小寫 。
      

登入
離開









釋義
翻譯



  回簡目列表 
             修訂/勘誤建議
 單筆輸出






正規語言
regular language

            
            資訊與通信術語辭典


名詞解釋:同【型3語言】（type 3 language）。    



正規語言
formal instruction





                    以 formal instruction 進行詞彙精確檢索結果
                




出處/學術領域
英文詞彙
中文詞彙



                      學術名詞
                    科學教育

formal instruction
正規語言





                    以 正規語言 進行詞彙精確檢索結果
                




出處/學術領域
中文詞彙
英文詞彙



                      學術名詞
                    電子工程

正規語言
formal language



                      學術名詞
                    科學教育

正規語言
formal instruction



                      學術名詞
                    電子計算機名詞

正規語言
regular language



                      學術名詞
                    電子計算機名詞

正規語言
normal language






引用網址:



推文
評分




















            評分
            

















相關詞彙
詞彙建議





學術名詞


            正規語言 
            formal instruction
        






        
        暫無建議訊息
        
        










        
Copyright © 2012國家教育研究院 版權所有 建議最佳瀏覽螢幕解析度1024×768 三峽總院區 地址：23703新北市三峽區三樹路2號 電話：(02)7740-7890 傳真：(02)7740-1170 臺北院區 地址：10644臺北市大安區和平東路一段179號 電話：(02)7740-7890 傳真：(02)7740-7849 臺中院區 地址：42081臺中市豐原區師範街67號 電話：(02)7740-7890 傳真：(04)7740-7949 網站服務：臺北院區編譯發展中心
        



                瀏覽人次: 1794627
                





















