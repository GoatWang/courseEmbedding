



旗標學校服務網：演算法概論



















請選擇分類 　
計算機概論
作業系統
網路概論與技術
程式設計
資料結構與演算法
資料庫
系統程式
系統分析
商業套裝軟體
多媒體導論與技術
影像編修與繪圖
電腦動畫
影片剪輯
網頁設計
網頁程式設計
電子商務
管理資訊系統
資訊安全
資訊法律
數位訊號處理
硬體與自動控制
運動
電腦輔助設計

電腦輔助設計_工程圖學
數學
個人電腦實作
檢定考試用書
認證考試用書


 
 
 






  












 

 
 旗標科技
            l 旗標學校服務網
            l 學校書目錄
            l 教師服務
            l 購書服務
            l 特別企畫
            l 研討活動
            l 更正下載
            l Eleconce
            l 旗訊













旗標知識網>>好書能增進知識!提高學習效率! 卓越的品質是我們的信念與堅持

















•

突破傳統、領先潮流的資訊基礎教科書



•

學習網路, 除了理論, 也要實務、更要最新技術！



•

打造整合式的雲端服務頁面



•

最受歡迎的數位攝影教科書



•

遊戲廠推薦, 範例最豐富、多元的 Unity3D 入門書



•

超圖解、簡明易學的資料結構教科書



•

大量圖解+豐富案例 + 反覆練習的程式設計教科書



•

用創新案例來教電子商務和網路行銷






旗標知識網>>好書能增進知識!提高學習效率! 卓越的品質是我們的信念與堅持


























書籍單品頁








演算法概論

作者：探矽工作室　蔡鬱彬•胡繼陽•侯玉展
書號：XEP757

ISBN：9789867198990
定價：580  元
      



 教學資源：

習題•解答•投影片•
 


內容介紹　　　　      l 內容介紹 l 本書特色
 l 附件內容 l 適用科目 l 本書大綱 l 教學推薦 l

 

「程式 = 演算法＋資料結構」，這是在學習計算機科學的基礎時常常聽到的一句話，要發揮計算機的效能必須要有良善的程式，要開發出良善的程式則必須有適當的演算法。本書詳盡地收集與演算法相關的主題與資料，除了深入淺出地介紹各個演算法的理論外，也提供演算法的實作範例，期望提供給讀者廣泛的使用。■ 概論篇介紹演算法的基本概念和效能分析的技巧，並回顧一些基本的資料結構，以作為往後章節討論的基礎，讓讀者對演算法有初步的認識。■ 排序與搜尋篇這是演算法最基礎也最常被應用的主題，這裡介紹並分析了排序、堆積、搜尋、雜湊和字串搜尋等議題，作為真正踏入學習與研究演算法的第一步。■ 圖論演算法篇許多複雜的問題都可以對映成圖形的問題而得到較容易的理解方式，進而以圖形的解決方法來得到完善的處理，這裡介紹基本圖論、加權圖和網路流等，讓讀者認識圖論演算法的能力。■ 基本的最佳化演算法篇很多實際的問題都有多個可行的方法來解決，但是要從中找出最佳的解決方法卻是一個挑戰，在此介紹常用來解決最佳化問題的設計策略，包括貪婪演算法、動態程序規劃、回溯法和分支設限法等。■ 數值相關演算法篇數值的計算是計算機被賦予的原始任務，而快速、有效率地解決各類數值問題則是數值相關演算法的重點，這裡除了介紹目前當紅的密碼學核心－數論演算法之外，也討論了應用於各類科學研究和工程計算息息相關的計算幾何、矩陣操作、多項式運算和快速傅立業轉換（FFT）等議題。■ 進階議題篇主要挑選了NP 完全問題和平行演算法兩個議題，討論各類問題的計算複雜度，並使用不同的計算模型－平行計算為範例，介紹目前最新的研究議題，以建立研究更先進演算法的基本能量。





 
本書大綱
■ 概論篇 第1章　演算法簡介 第2章　效能分析 第3章　基本資料結構 ■ 排序與搜尋篇 第4章　排序 第5章　堆積 第6章　搜尋樹 第7章　雜湊 第8章　字串搜尋 ■ 圖論演算法篇 第9章　基本圖論 第10章　加權圖 第11章　網路流 ■ 基本的最佳化演算法篇 第12章　貪婪演算法 第13章　動態程序規劃 第14章　回溯與分支設限 ■ 數值相關演算法篇第15章　數論演算法 第16章　計算幾何 第17章　矩陣操作 第18章　多項式與FFT ■ 進階議題篇 第19章　NP完全的問題 第20章　平行演算法 






教學推薦




資料結構與演算法








 



  








旗 標 科 技 股 份 有 限 公 司   100 臺北市中正區杭州南路一段15-1號19樓
            TEL: 02-2396-3257
            Copyright © 2005 Flag Publishing Co.,Ltd. All Rights Reserved   
            版權所有 •聯絡我們
            •合作提案•隱私權政策






 











演算法概論 – 交大修課心得 – 一座島





































































一座島
一座島，一個人，一個世界。














一月 1, 2013 by Shaform 
演算法概論 – 交大修課心得 



課程資料
演算法概論
開課：蔡錫鈞老師
修課年度：99資工系
這門課所使用的教科書是：《Introduction to Algorithms》，教到的主題大約為：

Growth of Functions
Recurrence
Divide and Conquer
Heapsort
Quicksort
Sorting in linear time
Median Selection
Hash Tables
Bloom Filter
Dynamic Programming
Greedy Algorithms
Amortized Analysis
B-trees
Fibonacci Heaps
Disjoint Set Operations
Elementary Graph algorithms
Minimum Spanning Tree
Shortest Paths
Maximum flow

上課方式
使用投影片上課，作業通常得在上課前交，不接受遲交。所有的作業都會公佈在網頁上（在課堂公佈前就貼上課程網站了）投影片上有很多註解，有別班的同學說他自己覺得比他們班的投影片好理解，不妨參考：〈課程投影片〉。
評分方式
成績主要由期中、期末考，手寫及程式作業，以及上機考所決定。不點名，作業會抓抄襲，
小道消息指出，程式作業會搜尋一下網路看你是否直接下載別人的程式。
期中考分數分佈：
  00∼ 09分--  0 人
  10∼ 19分--  1 人
  20∼ 29分--  6 人
  30∼ 39分--  6 人
  40∼ 49分-- 10 人
  50∼ 59分-- 11 人
  60∼ 69分--  4 人
  70∼ 79分--  5 人
  80∼ 89分--  2 人
  90~ 99分--  1 人
考試作業
雖然老師一直強調註重實做的能力，認為修這班的學生一定要寫 code，不過覺得程式作業其實沒有想像中繁雜。(至少跟先前修吳育松老師的資料結構比起來，感覺 coding 時間少了很多)
第一個程式作業是實做 merge sort 和 heap sort。第二個是實做 Exercise 9.3-8：在 O(lg n) 時間找出兩個 sorted array 的中位數。第三個作業是修改老師寫到一半的程式碼，實做 chained hash table (事實上只要改數行)。第四個是 DP 有關的三個題目。第五個是實做 Huffman codes 並且作成一個可以壓縮和解壓縮檔案的程式(需要 demo)。第六個是實做跟 Maximum-flow 有關的題目以及跟 A* search algorithm 有關的題目。
大體上除了第五個作業外，都是純粹演算法的題目，而沒有很多實做的細節，所以通常在一百行內就結束，最長也差不多兩百多行。只是有些題目到底要怎麼套用演算法可能需要深切的思考跟那種沒有複雜演算法但實做起來要花很多時間的 project 大不相同。
而手寫的題目大多是證明題，助教對證明嚴謹度十分要求。由於課本後面的解答大多忽略很多細節，所以直接照著寫一定是會被扣分的。（就算用老師公佈的解答寫在期中考上也會被扣分，筆者親身經歷。）筆者覺得寫手寫作業的時間比 coding 長很多。
題外話，在這堂課的訓練之下，寫到後來慢慢自己對嚴謹度的要求也愈來愈高。像是這題：
16.3-7
Generalize Huffman’s algorithm to ternary codewords (i.e., codewords using the symbols 0, 1, and 2), and prove that it yields optimal ternary codes.
筆者為了達到十足的嚴謹度，足足寫了 A4 紙兩面半才證完。(雖然我覺得應該不可能要寫到這種地步才能拿滿分，並且數學好的人說不定可以用短一點又嚴謹的方法證明它吧)
考試方面有期中考和期末考，幾乎都是考考古題，主要仍以證明為主，少部份是操作演算法
還有一兩題是手寫短程式。
還有一個期中上機考，幾乎都是考作業題，如果上機考不好，最後還有個上機補考。
結語
演算法是資工最核心的學科之一，沒事可以多讀讀 Introduction to Algorithms。如果對 online judge 形式的作業不熟悉可以參考：〈基礎程式設計〉。學校的網站上有很多題目可供練習，未來應該會有很多課都採用此一介面來交作業及考試。
想看一下演算法的介紹可參考：演算法筆記。

 

廣告






分享此文：GoogleFacebookPocket請按讚：喜歡 載入中...

相關
 





發表迴響 取消回覆 



在此輸入你的回應…




在下方填入你的資料或按右方圖示以社群網站登入：





























 
 


電子郵件 (必) （電子郵件地址不會被公開）



名稱 (必)



個人網站














 您的留言將使用 WordPress.com 帳號。 ( 登出 / 變更 )












 您的留言將使用 Twitter 帳號。 ( 登出 / 變更 )












 您的留言將使用 Facebook 帳號。 ( 登出 / 變更 )












 您的留言將使用 Google+ 帳號。 ( 登出 / 變更 )




取消
連結到 %s




 透過電子郵件通知我後續回應。
 



 






 
搜尋



熱門文章與頁面︰ 

						從交大資工到臺大資工所					



						在臺北實習的短期租屋					



						談談資工升大學備審資料的準備					



						千萬別學英語：關於學習、過往、及其它					



						「從留學到在美就業」講座心得					



						女生讀資工					



						談談資工升研究所備審資料的準備					



						從台灣申請北美軟體工程實習 – 準備篇					



						高中一年回顧					



						文章匯整					

  近期文章 

看美劇的日子


眼界、控制、選擇


閱讀器


2016 年末回顧


背後的眼光


 近期迴響 
「姆Q」對「PTT 教我的人生哲學」留言「Shaform」對「從交大資工到臺大資工所」留言「dechen」對「從交大資工到臺大資工所」留言「Shaform」對「2016 年末回顧」留言「6 Anson」對「2016 年末回顧」留言 
分類 
生活紀實

白日夢

胡謅

閱書坊

設計間

散掉的紙張

望世界


TagsAIESEC
AP
Bellevue
BP
debate
dvorak
english
Flash
Google
Google Drive
IBM
Kindle
linux
Mainframe
Master the Mainframe
Microsoft
NPSC
Redmond
System z
USA
交大修課心得
交通大學
努力
升大學的準備方向
升學
危險心靈
古都馬拉松
臺北
臺南
臺大
台灣
台灣大學
回顧
國文
大學
大腦
學習
實習
工作
心情
思想
性別
教學
教育
文字
新竹
新聞
校園
比賽
海外實習
生技
生活
研究所
科幻
程式
程式設計
網路
考試
英文
英語辯論
行列
計劃
設計
評論
資工
超自然
足球
軟體工程師
輸入法
運動
閱謮
閱讀
電腦
食物
鬼Blog Stats 
278,338 hits

 
























張貼到



取消







 












 
 
%d 位部落客按了讚：












































































































































天瓏網路書店-演算法概論



































天瓏網路書店
全台最齊全
中英文電腦書專賣店







天瓏資訊圖書粉絲專頁




搜尋


資料科學
簡體書
Packt
微服務
工程師必讀經典
英文書新到貨
Python
Tensorflow
無瑕程式碼








        演算法概論
        


        探矽工作室、蔡鬱彬、胡繼陽、侯玉展
        
      




 


出版商:
學貫(旗標)


出版日期:
2007-05-24


定價:
$580


售價:

$580



貴賓價:

9.5 折
            $551

語言:
繁體中文


ISBN:
9867198999

ISBN-13:
9789867198990





      無法訂購
    











買這商品的人也買了...







 
$580
              售價: $458
          
建構式演算法 (Introduction to Algorithms: A Creative Approach)





 
$790
              貴賓價: $751
          
基礎資料結構─使用 C++ (Fundamentals of Data Structures in C++, 2/e)





 
$680
              貴賓價: $646
          
演算法 (Levitin：Introduction to the Design and Analysis of Algorithms, 2/e)





 
$780
              貴賓價: $741
          
作業系統原理 (Silberschatz: Operating System Principles, 7/e)





 
$790
              貴賓價: $751
          
基礎資料結構─使用 C (Fundamentals of Data Structures in C, 2/e)





 
$650
              貴賓價: $618
          
新觀念資料庫系統理論與設計實務, 3/e





 
$400
              售價: $316
          
提升程式設計的邏輯思考力—國際程式設計競賽之演算法原理、題型、解題技巧與重點解析





 
$420
              售價: $332
          
演算法之道─讓你學不會演算法都難





 
$360
              售價: $284
          
完整學會 Git, GitHub, Git Server 的24堂課





 
$1,200
              貴賓價: $1,020
          
軟體建構之道 (Code Complete, 2/e)





 
$680
              售價: $537
          
深入淺出軟體開發 (Head First Software Development)





 
$880
              售價: $695
          
深入淺出設計模式 (Head First Design Patterns)





 
$900
              貴賓價: $810
          
C 語言程式設計 + C 語言程式技巧問答實戰 (Kernighan: The C Programming Language, 2/e) (雙書合購)





 
$650
              貴賓價: $585
          
演算法設計：基礎、分析與網際網路實例 (Algorithm Design: Foundations, Analysis, and Internet Examples)





 
$620
              售價: $527
          
大話設計模式





 
$1,200
              售價: $948
          
JavaScript 大全, 6/e (JavaScript: The Definitive Guide: Activate Your Web Pages, 6/e)





 
$590
              售價: $502
          
大話資料結構





 
$650
              貴賓價: $618
          
數值分析<基礎篇> (Numerical Analysis)





 
$680
              售價: $537
          
演算法使用 C++ 虛擬碼 (Foundations of Algorithms Using C++ Pseudocode, 3/e)





 
$500
              售價: $395
          
提升程式設計的解題思考力－國際演算法程式設計競賽訓練指南




產品描述

本書特色

「程式 = 
  演算法＋資料結構」，這是在學習計算機科學的基礎時常常聽到的一句話，要發揮計算機的弁鄍眸椰釣}善的程式，要開發出良善的程式則必須有適當的演算法。本書詳盡地收集與演算法相關的主題與資料，除了深入淺出地介紹各個演算法的理論外，也提供演算法的實作範例，期望提供給讀者廣泛的使用。
■ 
  概論篇介紹演算法的基本概念和效能分析的技巧，並回顧一些基本的資料結構，以作為往後章節討論的基礎，讓讀者對演算法有初步的認識。■ 
  排序與搜尋篇這是演算法最基礎也最常被應用的主題，這裡介紹並分析了排序、堆積、搜尋、雜湊和字串搜尋等議題，作為真正踏入學習與研究演算法的第一步。■ 
  圖論演算法篇釵h複雜的問題都可以對映成圖形的問題而得到較容易的理解方式，進而以圖形的解決方法來得到完善的處理，這裡介紹基本圖論、加權圖和網路流等，讓讀者認識圖論演算法的能力。■ 
  基本的最佳化演算法篇很多實際的問題都有多個可行的方法來解決，但是要從中找出最佳的解決方法卻是一個挑戰，在此介紹常用來解決最佳化問題的設計策略，包括貪婪演算法、動態程序規劃、回溯法和分支設限法等。■ 
  數值相關演算法篇數值的計算是計算機被賦予的原始任務，而快速、有效率地解決各類數值問題則是數值相關演算法的重點，這裡除了介紹目前當紅的密碼學核心－數論演算法之外，也討論了應用於各類科學研究和工程計算息息相關的計算幾何、矩陣操作、多項式運算和快速傅立業轉換（FFT）等議題。■ 
  進階議題篇主要挑選了NP 
  完全問題和平行演算法兩個議題，討論各類問題的計算複雜度，並使用不同的計算模型－平行計算為範例，介紹目前最新的研究議題，以建立研究更先進演算法的基本能量。
本書內容

第1章　演算法簡介 第2章　效能分析 第3章　基本資料結構 ■ 排序與搜尋篇 第4章　排序 
  第5章　堆積 第6章　搜尋樹 第7章　雜湊 第8章　字串搜尋 ■ 圖論演算法篇 第9章　基本圖論 
  第10章　加權圖 第11章　網路流 ■ 基本的最佳化演算法篇 第12章　貪婪演算法 第13章　動態程序規劃 
  第14章　回溯與分支設限 ■ 數值相關演算法篇 第15章　數論演算法 第16章　計算幾何 第17章　矩陣操作 
  第18章　多項式與FFT ■ 進階議題篇 第19章　NP完全的問題 第20章　平行演算法 
 








中文書籍分類

最新新書
2016 年度暢銷排行
暢銷排行 (2017/06)
暢銷排行 (2017/05)
暢銷排行 (2017/04)



活動主題列表

資料科學
CRC好書上架
簡體中文書最新到貨
PACKT 最新到貨
Effective 系列書
微服務系列書
Ruddy老師的敏捷教室
程式設計必讀經典系列
Springer好書上架
英文書最新到貨
資料視覺化系列書
Python 系列書籍
深度學習系列書籍
無瑕的程式碼 超值合購
Maker小天地



特價書籍

Bootstrap系列76折起
松崗暢銷書展5折起










演算法概論-金石堂網路書店














































會員功能列

 


加入會員
登入




您好
登出


會員專區
客服中心
查訂單


 
（ 0 件）0 元
結帳












購物車
（ 0 件）0 元
結帳



金石堂及銀行均不會請您操作ATM!  如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當!
    (詳情)




演算法概論－金石堂網路書店歡迎您加入博客和facebook 臉書粉絲團！The largest retail books store chains in Taiwan! 





TOP關鍵字

2017希望書包
怪獸的產地
七龍珠
肆一 
蠟筆小新套票
抽EC






全館搜尋
中文書
英文書
簡體書
雜誌
MOOK
文具
玩具親子
美妝配飾
3C
家電
運動休閒
居家生活
動漫部屋
日用清潔
食品




 

天花版bn

12345678910





購物目錄


首頁
3h快送
中文書
英文書
簡體書
雜誌
MOOK
文具
美妝配飾
玩具親子
3C
家電
運動休閒
居家生活
日用清潔
動漫精品
食品






商品次目錄


新書
預購書
推薦書
套書
暢銷書排行榜
書展 / 特惠
讀者書評
出版社專區
香港出版品




 

    您的位置：金石堂網路書店
中文書
電腦資訊
程式設計
其它程式設計
商品詳情

 


演算法概論
                        










作者：蔡鬱彬，胡繼陽
追蹤



出版社：學貫      
出版社追蹤


出版日：2007/10/26

ISBN：9789867198990
語言：中文繁體
適讀年齡：全齡適讀


定價：580 元

特價：85 折 493 元 (可得紅利4點)
紅利優惠價：82 折 478 元 (折抵說明)紅利可抵：15 元 
信用卡紅利：可折抵多家銀行 (扣抵說明)
運送方式：全球配送　香港到店　國內宅配國內店取　












<<



>>


https://cdn.kingstone.com.tw/book/images/product/20147/2014712999673/2014712999673b.jpg














                           本商品已絕版無法購買
                           


金石堂讀者好評
 
0 個人說讚，看排行 >






電腦資訊分類追蹤
使用此功能請先登入金石堂網路書店正式會員。這是什麼？




分享：
                            
                           	  










書籍介紹
其他讀者也買
強力推薦
讀者好評(0)
下標籤
團體專屬服務






內容簡介目錄
詳細資料






內容簡介 top 
《演算法概論》
本書特色「程式 = 演算法＋資料結構」，這是在學習計算機科學的基礎時常常聽到的一句話，要發揮計算機的效能必須要有良善的程式，要開發出良善的程式則必須有適當的演算法。本書詳盡地收集與演算法相關的主題與資料，除了深入淺出地介紹各個演算法的理論外，也提供演算法的實作範例，期望提供給讀者廣泛的使用。■ 概論篇介紹演算法的基本概念和效能分析的技巧，並回顧一些基本的資料結構，以作為往後章節討論的基礎，讓讀者對演算法有初步的認識。■ 排序與搜尋篇這是演算法最基礎也最常被應用的主題，這裡介紹並分析了排序、堆積、搜尋、雜湊和字串搜尋等議題，作為真正踏入學習與研究演算法的第一步。■ 圖論演算法篇許多複雜的問題都可以對映成圖形的問題而得到較容易的理解方式，進而以圖形的解決方法來得到完善的處理，這裡介紹基本圖論、加權圖和網路流等，讓讀者認識圖論演算法的能力。■ 基本的最佳化演算法篇很多實際的問題都有多個可行的方法來解決，但是要從中找出最佳的解決方法卻是一個挑戰，在此介紹常用來解決最佳化問題的設計策略，包括貪婪演算法、動態程序規劃、回溯法和分支設限法等。■ 數值相關演算法篇數值的計算是計算機被賦予的原始任務，而快速、有效率地解決各類數值問題則是數值相關演算法的重點，這裡除了介紹目前當紅的密碼學核心－數論演算法之外，也討論了應用於各類科學研究和工程計算息息相關的計算幾何、矩陣操作、多項式運算和快速傅立業轉換（FFT）等議題。■ 進階議題篇主要挑選了NP 完全問題和平行演算法兩個議題，討論各類問題的計算複雜度，並使用不同的計算模型－平行計算為範例，介紹目前最新的研究議題，以建立研究更先進演算法的基本能量。 



目錄 top 
演算法概論－目錄導覽說明

■ 概論篇 第1章　演算法簡介 第2章　效能分析 第3章　基本資料結構 ■ 排序與搜尋篇 第4章　排序 第5章　堆積 第6章　搜尋樹 第7章　雜湊 第8章　字串搜尋 ■ 圖論演算法篇 第9章　基本圖論 第10章　加權圖 第11章　網路流 ■ 基本的最佳化演算法篇 第12章　貪婪演算法 第13章　動態程序規劃 第14章　回溯與分支設限 ■ 數值相關演算法篇 第15章　數論演算法 第16章　計算幾何 第17章　矩陣操作 第18章　多項式與FFT ■ 進階議題篇 第19章　NP完全的問題 第20章　平行演算法 






詳細資料top 

                               語言：中文繁體規格：平裝分級：普級頁數：480















其它程式設計相關書籍
延伸閱讀推薦
延伸推薦









延伸推薦top 





PC DIY! 6月2017...

特價 160元
立即購買 




PC DIY! 7月2017...

特價 160元
立即購買 




PC HOME 電腦家庭 7...

特價 171元
立即購買 




MAXIMUM PC Spc...

特價 532元
立即購買 




數位狂潮DIGITREND ...

特價 85元
立即購買 




超厲害派遣社員傳授的EXCE...

特價 204元





商務Excel實踐術 修訂版...

特價 340元





500日圓學會Powerpo...

特價 200元





這種程度也沒問題!Excel...

特價 359元





數位超整理術-照片篇...

特價 295元





Android 2.X應用開...

特價 352元
立即購買 











共0篇好評top 
寫書評去 >










商品標籤 (什麼是標籤？)

辦公軟體



我的標籤新增









團體專屬服務top

團體專屬服務














訂購須知top 
防治詐騙，提醒您!!金石堂及銀行均不會請您操作ATM! 如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當! 

商品運送說明：
當商品送達金石堂門市或便利商店後，您會收到E-mail及APP出貨/到貨通知，您也可透過【訂單查詢】確認到貨情況。
建議您可下載『金石堂APP』並開啟推撥設定，即可收到相關出貨/到貨通知訊息。
並請您於指定期限內取貨付款，若逾期未取，您取貨的金石堂門市或便利商店將會辦理退貨作業。
產品顏色可能會因網頁呈現與拍攝關係產生色差，圖片僅供參考，商品依實際供貨樣式為準。 

退換貨說明：
依據「消費者保護法」第19條及行政院消費者保護處公告之「通訊交易解除權合理例外情事適用準則」，以下商品購買後，除商品本身有瑕疵外，將不提供7天的猶豫期：

                            1、 易於腐敗、保存期限較短或解約時即將逾期。（如：生鮮食品）
                            2、 依消費者要求所為之客製化給付。（客製化商品）
                            3、 報紙、期刊或雜誌。（含MOOK、外文雜誌）
                            4、 經消費者拆封之影音商品或電腦軟體。
                            5、 非以有形媒介提供之數位內容或一經提供即為完成之線上服務，經消費者事先同意始提供。（如：電子書、電子雜誌、下載版軟體、虛擬商品…等）
                            6、 已拆封之個人衛生用品。（如：內衣褲、刮鬍刀、除毛刀…等）
若非上列種類商品，商品均享有到貨7天的猶豫期（含例假日）。
辦理退換貨時，商品（組合商品恕無法接受單獨退貨）必須是您收到商品時的原始狀態（包含商品本體、配件、贈品、保證書、所有附隨資料文件及原廠內外包裝…等），請勿直接使用原廠包裝寄送，或於原廠包裝上黏貼紙張或書寫文字。退回商品若無法回復原狀，將請您負擔回復原狀所需費用，嚴重時將影響您的退貨權益。










中文書籍分類

文學財經企管生活風格飲食料理心理勵志醫療保健旅遊宗教命理教育/親子教養童書羅曼史輕小說漫畫語言／字辭典藝術設計電腦資訊
程式設計
C／C#／JAVA
VB
其它程式設計


網頁設計
繪圖／影音／多媒體
辦公軟體／應用軟體
作業系統
資料庫
3C數位生活
APPLE專區
認證考試
網路／安全／概論
其他電腦資訊

自然科普人文歷史社會哲思考試書／政府出版品參考書全部的分類 >>




相關商品


雜誌



PC DIY! 7月2017第245期
數位狂潮DIGITREND 2017第44期
PC HOME 電腦家庭 7月2017第258期
MAXIMUM PC Spcl: BUILD IT:The Perfect PC Vol.2 2017
PC DIY! 6月2017第244期









外嵌連結
演算法概論



在金石堂門市找此書
                         選擇縣市：

請選擇
基隆市
臺北市
新北市
桃園市
新竹市
新竹縣
宜蘭縣
苗慄市
苗慄縣
南投縣
臺中市
雲林縣
彰化縣
嘉義市
臺南市
高雄市
屏東縣

查詢












↑回上方

金石堂網路書店

首頁
關於金石堂網路書店
人才招募
客服中心
異業合作
出版情報
手機版
關於金石堂書店
金石堂書店全台門市



客服專線：02-2364-9989
傳真：02-2364-4672
客服時間：週一至週五 9：00∼12：30 及 13：30∼18：00（例假日除外）
地址：100 台灣臺北市中正區汀州路三段 160 巷 3 號 2 樓
Copyright©2016, Digital Kingstone Co., Ltd. 金石網絡股份有限公司






瀏覽本站建議使用：Internet Explorer 8.0 以上或 FireFox、Google Chrome、Safari 等瀏覽器。
本網站已依台灣網站內容分級規定處理且符合電子商務、安全交易















金石堂APP出/到貨提醒不漏接，讓您便利隨行
















.23





演算法概論








演算法概論
2009 Fall
     

[期中課堂報告]
 
[作業blog(pixnet)]
 
時間：星期五2、3、4節, 
教室：N303
 
[ 老師的Email/教學/
研究/榮譽/
媒體報導 ]


[教科書：演算法設計─基礎、分析與網際網路實例]


12/25前完成課堂報告，1/8將所有作業完成。
[期中期末考、課堂報告及作業繳交一覽表]

1/15(五) 9:30 期末考，考完後對答案，1/16(六)前公佈期末補考名單。1/18(一) 11:10 N314期末考補考




台語華語辭典
 
台灣記憶
 
花蓮風景
 







補充：最長共同子序列LCS
配對(穩定婚姻)問題
11/6上課筆記
Ch14 演算架構
Ch13 NP-complete
Ch12 計算幾何學
Ch11 網路演算法
Ch10 數論與密碼學
Ch9 文字處理
Ch8 網路流與配對
Ch7 加權圖
 補充：Kruskal & Prim演算法
Ch6 圖
Ch5 基本技巧
Ch4 排序、集合與選擇
Ch3 搜尋樹與跳躍串列
Ch2 基本資料結構
Ch1 演算法分析
河內塔展示

預備工作
 作業0-1：建立作業blog (pixnet)↓(9/25)

申請一個blog，繳交作業用。為了教學的方便，本次統一申請pixnet痞客幫的部落格
部落格網址應該是 http://xxxxx.pixnet.net/blog
要給老師 xxxxx
學期成績與此部落格高度相關，老師成績未送出去之前，請勿把部落格內容刪除或關閉部落格，否則後果自行負責




  作業10：地圖著色問題↓(12/25)

這是一張台灣地圖，請用三色完成著色，用1,2,3表示，其中，南投(唯一不靠海的)請標1，
花蓮請標2

發表一篇文章，標題為:「作業10：地圖著色問題  」，把做好的圖放上來，圖的上面請用較淺的文字顏色加上學號姓名。

  作業9：最長共同子序列↓(12/25)

請填表算出"talaria"和"tibial"的LCS(最長共同子序列)，其中↑比←優先。填完後回答(i)LCS的長度 (ii)LCS

tibial
0000000
t0    
a0l0a0r0i0a0

發表一篇文章，標題為:「作業9：最長共同子序列  」，把答案寫出來。

  作業8：假金幣問題↓(12/25)

300個金幣中，有一個是假金幣，比其它正常的金幣還輕。我們有一個天平可以使用。
請列出步驟，回答在最壞情形下，最少需要比較多少次才能找出
發表一篇文章，標題為:「作業8：假金幣問題  」，把答案寫出來。

  作業7：最小成本展開樹↓(12/11)


請分別用Prim(以點來考慮，從點1開始)及Kruskal (以邊來考慮)演算法求出最小成本展開樹
發表一篇文章，標題為:「作業7：最小成本展開樹  」，把答案寫出來。

  作業6：穩定婚姻問題(stable marriage)↓(11/13)

假設假設有一家婚友中心，要將報名參加的各五名適婚年齡男女配對，男生以A、B、C、D、E表示，女生以1、2、3、4、5表示各將對方在自己心目中的排名列出來，假設排出來的順序如下表所示：

A	BCDE
21315
52231
13522
34443
45154



12345
EEADD
ADDBB
DBBCC
BACAE
CCEEA

發表一篇文章，標題為:「作業6：穩定婚姻問題  ，上述問題，請分別用男生的觀點和女生的觀點把答案寫出來。」

  作業5：背包問題(knapsack problem)↓(11/6)

假設有一個小偷闖空門，帶了一個載重30磅的背包。看到了三樣物品
	
物品1，5磅，價值 50元
	物品2，10磅，價值 60元
	物品3，20磅，價值 140元 
	
假設1 : 如果每件物品都有很多個，請問怎樣拿獲利最多？這是不是貪婪演算法？
假設2 : 如果每件物品只有一個，利用貪婪演算法來拿，獲利多少？這是不是最佳解（獲利最多的拿法）？如果不是，最佳解為何？
假設3 : 如果每件物品只有一個，可以只取部分（分數背包問題），請問最佳解為何？這是不是貪婪演算法？
發表一篇文章，標題為:「作業5：背包問題  ，把上述問題的答案寫出來。」

  作業4：雜湊↓(10/23)

請參考課本p116-124，投影片不夠清楚，太簡略
假設有一個班級，有10位修課的同學，學號分別是9589101, 9579003, 9688501, 9678023, 9779017, 9786524, 9788201, 9879502, 9878515還有你
我們宣告一個可存放1027筆資料的陣列
請你訂出你的雜湊函數，並根據這個雜湊函數，計算每位同學要被放在這個陣列哪個足標的位置
發表一篇文章，標題為:「作業4 雜湊  」

  作業3：堆積排序的步驟↓(10/16)

課本p112 R2-12
有7筆資料： 6, 5, 16, 8, 10, 23, 第七個數字是你的學號後兩碼，利用堆積排序從小排到大
請先畫出堆積樹(一張圖)
之後還有6張圖，分別是剩下6個節點、5個節點、4個節點、3個節點、2個節點、1個節點的堆積樹
發表一篇文章，標題為:「作業3 堆積排序的步驟  」

  作業2：合併排序的步驟↓(10/7)

有10筆資料： 6 7 2 5 10 4 1 8 3 9
請列出合併排序的步驟，每一組資料用括號表示
發表一篇文章，標題為:「作業2 合併排序的步驟  」

  作業1：河內塔(Hanoi tower)↓(10/2)

關於河內塔的說明，可參看這篇文章(跟老師的版本不太一樣)
假設有3根鐵柱 (編號A B C)，5個鐵環(編號 1 2 3 4 5從小到大)套在A柱上
請列出從A鐵柱把5個鐵環搬到B鐵柱的31個步驟，例如第11步驟將編號3鐵環從C鐵柱移到B鐵柱，請寫：11: 3 C-->B
發表一篇文章，標題為:「作業1 河內塔  」














最近更新：
2011/2/18 










Fw: [心得] 陳健 演算法概論 - 看板 NCTU-Teacher - 批踢踢實業坊


















批踢踢實業坊
›
看板 NCTU-Teacher
關於我們
聯絡資訊




返回看板


分享







作者neoneon (紅茶を飲む程度の能力)看板NCTU-Teacher標題Fw: [心得] 陳健 演算法概論時間Tue Jul 12 04:04:06 2016
※ [本文轉錄自 neoneon 信箱]

作者: [email protected] ("愛宕有機奈米負離子貓")
標題: [心得] 陳健 演算法概論
時間: Sun Jul 10 12:42:39 2016

作者: smilecat13 (微笑的貓) 看板: NCTU-Teacher
標題: [心得] 陳健 演算法概論
時間: 2014/07/11 Fri 01:42:13

⊕課名⊕

演算法概論 (英文授課)

▲教授▲

陳健

★修課年度★（請加註開課單位 如:大三通識、XX系選修、XX所）

102學年度下學期

￡教了什麼￡（課程大概內容。或是額外學會了什麼東西。）

選課系統上的課綱為:
1. Introduction to analysis of algorithms
2. Asymtotic notation
3. divide and conquer
4. Recurrences, summations
5. Randomized quicksort
6. Median, order statistics
7. Sorting in linear time
8. Hash
9. Red-Black tree
10. Dynamic Programming
11. Greedy algorithms
12. Minimum spanning tree
13. Graph algorithms: depth-first search, topological sorting,
    breadth-first search
14. Graph algorithms: Single-source shortest paths, Dijkstra's algorithm
15. Bellman-Ford algorithm, dag shortest paths
16. All-pairs shortest paths, Floyd-Warshall algorithm
17. Network flow
18. Introduction to NP-completeness

對應課本的章節為:
1、2、3、4、6、7、8、9、11、13、14、
15、16、17、22、23、24、25、26、34、35

◆上課方式◆（投影片、團體討論、老師教學風格）

老師都用他的平板接投影機，
直接在螢幕上寫筆記和講解，偶爾會用到黑板。

上到all-pairs shortest path algorithm、maximum-flow的時候，
有發講義給我們練習算，他會帶著我們練習。

講解應該還算清楚吧，感覺得出來有認真備課，
但我覺得他的英文口語表達沒有很好。

有不懂的地方，下課時去問老師，
老師會用中文重新講解一遍給你聽。

很喜歡問學生問題，
不過都是坐前面幾排的固定幾個人會理他，
其他人都在做自己的事 XD
有這些認真的同學在真好，
不然都沒人理他真的會有點尷尬 XD

▼考試作業▼

小考35% + 程式作業20% + 期中考20% + 期末考25%

(1) 小考 35%

老師用一個很特殊的方式，
小考是考「當週」要教的東西，
也就是要你先回家預習。

老師會訂一個schedule，
上面列了每週要我們讀的章節和作業，
小考就是考那個範圍。

我覺得小考題目不難，
回去有讀書應該就會寫。
有少數幾次會出現比較困難的應用題，
那幾題是以前放在期中考or期末考裡的題目。

作業我覺得只是讓我們練習用，
有些作業題目很難，但通常那種都不會出現在小考，
(像是叫你設計一個演算法之類的那種)
但有些比較簡單的題目就有可能會出現在小考。

老師都是兩節課的那天考，
期中考前是第一節課的前10分鐘考，
然後很準時收捲，有時候會寫不完...
期中考後是第二節課的最後10~15分鐘考，
可能是graph演算法要算比較久，
老師會給我們比較充裕的時間寫。
(但graph演算法很重視熟練，你不熟一樣寫不完)

小考成績佔非常重，總共35%，
這學期考了13次，每次考兩題、滿分10分，
最後取最高的10次加總。

不過大家的小考都考的不是很好...
最後13次小考班級總平均約4分。


(2) 程式作業 20%

總共六次:
a. find peak in 1D/2D array => 課外補充，老師上課會講解，不會很難
b. 實作3種quicksort
c. hash table
d. dynamic programming
e. greedy algorithm (Huffman encoding/decoding)
f. all-pairs shortest path & maximum-flow的應用題

我覺得程式作業算簡單，
大部分都是把課本的pseudo code改成C++就可以了。
(前提是你上學期的資料結構有學好)

善用C++偉大的STL，真的很好用，
如果不用STL，資結都自己寫，
那我覺得會花滿多苦工在這些程式作業上，
用STL一堆東西都可以輕鬆搞定。

這些程式作業都要先用程式檢定系統(online judge system)去跑看結果對不對，
然後也要同時上傳到E3，
助教會抓抄襲，如果被抓到就是0分。

聽說現在是用一個判斷程式碼抄襲的程式，
看程式parse出來的結構、或是用一些text mining的技術，
所以不是變數名稱改改、函式位置改一下就可以。
我覺得還是不要抱持著僥倖的心態，
這學期有不少人被抓到。

每次作業滿分100分，
最後所有作業班級總平均62分。


(3) 期中考 20%

範圍: ch1、2、3、4、6、7、8、9、11、13、14、15、17

題目有70%跟考古題類似，
剩下的部分有些會從小考出來。
考試前先看考古題，
大概就知道老師會怎麼考了。

通常會考一題設計演算法的題目，
這就要憑真本事了。

滿分100分，班平均63分。


(4) 期末考 25%

範圍: ch15、16、22、23、24、25、26、34、35

老師期末考前一週，
有給我們練習去年的考古題，
他會帶著我們一起做。

而今年的題目我覺得比較難，
大概只有5成跟考古題類似。
(ch35的部分竟然考了15分...)

題目很多，我最後寫不完...
我graph的題目花太多時間了 囧

然後很有趣的一點，
有一題跟期中考一模一樣的題目考出來了，還佔14分 XD
那題也出現在其中一次小考和程式作業裡，
老師上課有一直強調這題很重要，
結果竟然考了三次 XD

滿分100分，班平均51分。


(5) 學期成績

我小考取最高的10次加總為81分，
程式成績平均99分，
期中考92分，期末考78分。

原始成績為86分，最後被調到99分!!

原始成績，班上大概只有3成的人及格，平均約53分，
若每人都調13分左右，則最後只當約15%的人。

感覺老師給分滿甜的說...
雖然老師上課時，
一直恐嚇我們他不會調分，被當就是被當 XD
而且也聽一些修過課的人說，他給分算不甜，
但我覺得調13分算調很大吧 @@


￥其他￥（是否註重出席率or嚴禁遲到？需要的基礎？）

出席率很慘，
每次大概只有20%的人會去上課。
我全勤，整學期沒有點過名。(印象中...還是有點過一次我忘了)

需要的基礎，我覺得就資料結構要學好吧，
程式能力也要有一定的基礎。

老師是用自己做的投影片上課，
但內容有些好像是第二版的，
所以有一些跟第三版的不太一樣。(像是ch22的DFS)

我雖然全勤，
但每堂課幾乎都在做自己的事，
沒在聽老師上課...


￠最後想說的話￠

每次的小考要好好把握，
因為期中、期末的範圍非常大，
不可能考前兩三天就讀的完。

我每週約花8小時在讀演算法，
每次小考都把他視為一次期中考般、
很認真的去準備。
雖然很累，但期中考、期末考前就很輕鬆。

我後來覺得這種每週小考的方式很棒，
可以督促自己讀書，
才不會全部積在大考前才在準備。

演算法是資工核心科目之一，
也是研究所推甄必看的科目，
一定要很認真的去修這門課。


＆誰適合修這門課＆

不喜歡程式作業太難、喜歡自己讀書的人

--
※ Origin: 交大次世代(bs2.to)
◆ From: 182.235.242.149
 作者從 182.235.242.149 修改文章於 2014/07/11 Fri 01:49:56
推 kougousei：改變數名字和函數名字對現在的抓抄襲程式效用=0         07/12 15:05
→ ian031545：你說你沒聽老師上課，為什麼又說老師講解很清楚         07/14 00:55
→ ian031545：很多地方感覺要有聽課才能寫出的心得，對應後面的沒聽課 07/14 00:57
→ ian031545：不知道可信度高不高 ＠＠                              07/14 00:58

我是沒有很認真一直在聽老師上課，
但偶爾有些章節會聽一下，
所以才用「應該」、「吧」這種講法，
沒有直接肯定他講解的「很清楚」。

像是他後來教到all-pairs最短路徑與maximum-flow，
以及最後一堂課的考古題練習，
他都有帶著我們練習，那部分我算是很認真在聽。

這門課我全勤，
就算沒從頭到尾都很認真的在聽老師講課，
也都有去教室，偶爾會聽聽老師上課。

然後我覺得剛好跟你講的相反，
這篇文章中需要聽課才能寫出的心得佔的比例非常少。

如果你覺得哪邊是沒聽課不可能寫出來的心得、
或是有其他覺得不可信的地方，
可以再向我提出來，我會好好解釋清楚，謝謝。

 作者從 182.235.242.149 修改文章於 2014/07/14 Mon 13:35:19
→ chia228：聽說助教很帥                                           07/18 14:17
推 kevinqtt：推薦這篇文章                                          07/29 03:15
推 tingyagami：個人覺得圖論的部分老師教得蠻好的, 雖然老師英文表達  07/29 10:10
→ tingyagami：不是那麼的流暢, 但是下課去問問題他都會很認真的回答, 07/29 10:10
→ tingyagami：我覺得他蠻照顧外系學生的, 不錯的老師!!!!!           07/29 10:12
→ evan09900966：我是外系的，想修修看資工演算法概論，不過感覺      12/21 13:26
→ evan09900966：英文授課對我來講會有困難，請問會影響很大嗎        12/21 13:27


※ 發信站: 批踢踢實業坊(ptt.cc)
※ 轉錄者: neoneon (106.105.175.48), 07/12/2016 04:04:06











演算法 - 維基百科，自由的百科全書































 







演算法

維基百科，自由的百科全書


					前往：					導覽，					搜尋










應對燈泡不亮的簡單演算法流程圖


在數學和電腦科學/算學之中，算法/演算法/算則法（Algorithm）為一個計算的具體步驟，常用於計算、資料處理（英語：Data processing）和自動推理。精確而言，演算法是一個表示爲有限長[1]列表的有效方法（英語：Effective method）。演算法應包含清晰定義的指令[2]用於計算函式[3]。
演算法中的指令描述的是一個計算，當其執行（英語：Execution (computing)）時能從一個初始狀態和初始輸入（可能爲空）開始，[4]經過一系列有限[5]而清晰定義的狀態最終產生輸出[6]並停止於一個終態。一個狀態到另一個狀態的轉移不一定是確定的。隨機化演算法在內的一些演算法，包含了一些隨機輸入。[7][8]
形式化演算法的概念部分源自嘗試解決希爾伯特提出的判定問題，並在其後嘗試定義有效可計算性（英語：Effective calculability）[9]或者有效方法（英語：Effective method）[10]中成形。這些嘗試包括庫爾特·哥德爾、雅克·埃爾布朗和史蒂芬·科爾·克萊尼分別於1930年、1934年和1935年提出的遞歸函式，阿隆佐·邱奇於1936年提出的λ演算，1936年埃米爾·萊昂·珀斯特（英語：Emil Leon Post）的Formulation 1和艾倫·圖靈1937年提出的圖靈機。即使在當前，依然常有直覺想法難以定義爲形式化演算法的情況。[11]



目錄


1 歷史
2 特徵
3 基本要素

3.1 常用設計模式
3.2 常用實現方法


4 形式化演算法
5 複雜度

5.1 時間複雜度
5.2 空間複雜度


6 非確定性多項式時間（NP）
7 實現
8 範例

8.1 求最大值演算法
8.2 求最大公約數演算法


9 分類
10 參看
11 參考文獻
12 外部連結
13 參見



歷史[編輯]
演算法在中國古代文獻中稱為「術」，最早出現在《周髀算經》、《九章算術》。特別是《九章算術》，給出四則運算、最大公約數、最小公倍數、開平方根、開立方根、求素數的埃拉托斯特尼篩法，線性方程組求解的演算法。三國時代的劉徽給出求圓周率的演算法：劉徽割圓術。
自唐代以來，歷代更有許多專門論述「算法」的專著：

唐代：《一位算法》 一捲，《算法》 一捲；
宋代：《算法緒論》 一捲、《算法秘訣》 一捲；最著名的是楊輝的《楊輝算法》；
元代：《丁巨算法》；
明代：程大位 《算法統宗》
清代：《開平算法》、《算法一得》、《算法全書》。

而英文名稱「Algorithm」來自於9世紀波斯數學家花拉子米（比阿勒·霍瓦里松，波斯語：خوارزمی ‎，拉丁轉寫：al-Khwarizmi），因為比阿勒·霍瓦里松在數學上提出了演算法這個概念。「演算法」原為「algorism」，即「al-Khwarizmi」的音轉，意思是「花拉子米」的運演算法則，在18世紀演變為「algorithm」。
歐幾里得演算法被人們認為是史上第一個演算法。
第一次編寫程式是愛達·勒芙蕾絲（Ada Byron）於1842年為巴貝奇分析機編寫求解解伯努利微分方程的程式，因此愛達·勒芙蕾絲被大多數人認為是世界上第一位程式設計師[12]。因為查爾斯·巴貝奇（Charles Babbage）未能完成他的巴貝奇分析機，這個演算法未能在巴貝奇分析機上執行。
因為「well-defined procedure」缺少數學上精確的定義，19世紀和20世紀早期的數學家、邏輯學家在定義演算法上出現了困難。20世紀的英國數學家圖靈提出了著名的圖靈論題，並提出一種假想的電腦的抽象模型，這個模型被稱為圖靈機。圖靈機的出現解決了演算法定義的難題，圖靈的思想對演算法的發展起到了重要的作用。
特徵[編輯]
以下是高德納在他的著作《電腦程式設計藝術》裡對演算法的特徵歸納：


輸入：一個演算法必須有零個或以上輸入量。
輸出：一個演算法應有一個或以上輸出量，輸出量是演算法計算的結果。
明確性：演算法的描述必須無歧義，以保證演算法的實際執行結果是精確地符合要求或期望，通常要求實際執行結果是確定的。
有限性：依據圖靈的定義，一個演算法是能夠被任何圖靈完備系統模擬的一串運算，而圖靈機只有有限個狀態、有限個輸入符號和有限個轉移函式（指令）。而一些定義更規定演算法必須在有限個步驟內完成任務。
有效性：又稱可行性。能夠實現，演算法中描述的操作都是可以通過已經實現的基本運算執行有限次來實現。

基本要素[編輯]
演算法的核心是建立問題抽象的模型和明確求解目標，之後可以根據具體的問題選擇不同的模式和方法完成演算法的設計。
常用設計模式[編輯]
完全遍歷法和不完全遍歷法：在問題的解是有限離散解空間，且可以驗證正確性和最優性時，最簡單的演算法就是把解空間的所有元素完全遍歷一遍，逐個檢測元素是否是我們要的解。這是最直接的演算法，實現往往最簡單。但是當解空間特別龐大時，這種演算法很可能導致工程上無法承受的計算量。這時候可以利用不完全遍歷方法——例如各種搜尋法和規劃法——來減少計算量。
分治法：把一個問題分割成互相獨立的多個部分分別求解的思路。這種求解思路帶來的好處之一是便於進行平行計算。
動態規劃法：當問題的整體最優解就是由局部最優解組成的時候，經常採用的一種方法。
貪婪演算法：常見的近似求解思路。當問題的整體最優解不是（或無法證明是）由局部最優解組成，且對解的最優性沒有要求的時候，可以採用的一種方法。
線性規劃法：見詞條。
簡併法：把一個問題通過邏輯或數學推理，簡化成與之等價或者近似的、相對簡單的模型，進而求解的方法。
常用實現方法[編輯]
遞迴方法與疊代方法
順序計算、平行計算和分散式計算：順序計算就是把形式化演算法用程式語言進行單執行緒序列化後執行。
確定性演算法和非確定性演算法
精確求解和近似求解
形式化演算法[編輯]
演算法是電腦處理資訊的本質，因為電腦程式本質上是一個演算法來告訴電腦確切的步驟來執行一個指定的任務，如計算職工的薪水或列印學生的成績單。一般地，當演算法在處理資訊時，會從輸入裝置或資料的儲存位址讀取資料，把結果寫入輸出裝置或某個儲存位址供以後再呼叫。
複雜度[編輯]
時間複雜度[編輯]
演算法的時間複雜度是指演算法需要消耗的時間資源。一般來說，電腦演算法是問題規模n 的函式f(n)，演算法的時間複雜度也因此記做





T
(
n
)
=


O


(
f
(
n
)
)


{\displaystyle T(n)={\mathcal {O}}(f(n))}



演算法執行時間的增長率與f(n) 的增長率正相關，稱作漸近時間複雜度（Asymptotic Time Complexity），簡稱時間複雜度。
常見的時間複雜度有：常數階O(1),對數階O(log2n),線性階O(n), 線性對數階O(nlog2n),平方階O(n2)，立方階O(n3),...， k次方階O(nk),指數階O(2n)。隨著問題規模n的不斷增大，上述時間複雜度不斷增大，演算法的執行效率越低。
空間複雜度[編輯]
演算法的空間複雜度是指演算法需要消耗的空間資源。其計算和表示方法與時間複雜度類似，一般都用複雜度的漸近性來表示。同時間複雜度相比，空間複雜度的分析要簡單得多。
非確定性多項式時間（NP）[編輯]
主條目：NP (複雜度)
實現[編輯]
演算法不單單可以用電腦程式來實現，也可以在人工神經網路、電路或者機械裝置上實現。
範例[編輯]
求最大值演算法[編輯]
這是演算法的一個簡單的例子。
我們有一串隨機數列。我們的目的是找到這個數列中最大的數。如果將數列中的每一個數字看成是一顆豆子的大小，可以將下麵的演算法形象地稱為「撿豆子」：

首先將第一顆豆子放入口袋中。
從第二顆豆子開始檢查，如果正在檢查的豆子比口袋中的還大，則將它撿起放入口袋中，同時丟掉原先口袋中的豆子。反之則繼續下一顆豆子。直到最後一顆豆子。
最後口袋中的豆子就是所有的豆子中最大的一顆。

以上演算法在中國大陸的教科書中通常被叫做「打擂法」或者「迴圈打擂」[13][14][15]：在一個for迴圈中，每輪迴圈都有新的挑戰者。若挑戰者勝的話，挑戰者做新擂主，否則擂主衛冕。for迴圈結束後輸出最後的擂主。
下麵是一個形式演算法，用ANSI C代碼表示


int max(int *array, int size)
{
  int mval = *array;
  int i;
  for (i = 1; i < size; i++)
    if (array[i] > mval)
      mval = array[i];
  return mval;
}

求最大公約數演算法[編輯]
求兩個自然數的最大公約數 設兩個變數M和N

如果M < N，則交換M和N
M被N除，得到餘數R
判斷R＝0，正確則N即為「最大公約數」，否則下一步
將N賦值給M，將R賦值給N，重做第一步。

用ANSI C代碼表示


//交換2數
void swapi(int *x, int *y)
{
  int tmp = *x;
  *x = *y;
  *y = tmp;
}

int gcd(int m, int n)
{
  int r;
  do
  {
    if (m < n)
      swapi(&m, &n);
    r = m % n;
    m = n;
    n = r;
  } while (r);
  return m;
}

利用if函式以及遞迴則能做出更為精簡的程式碼，更可省去交換的麻煩。（但是也因為遞迴呼叫，其空間複雜度提高）


int gcd(int a,int b)
{
    if(a%b)
        return gcd(b,a%b);
    return b;
}

分類[編輯]

基本演算法

列舉
搜尋

深度優先搜尋
廣度優先搜尋
啟發式搜索
遺傳演算法




資料結構的演算法
數論與代數演算法
計算幾何的演算法

凸包演算法


圖論的演算法

哈夫曼編碼
樹的遍歷
最短路徑演算法
最小生成樹演算法
最小樹形圖
網路流演算法
符合演算法


動態規劃
其他

數值分析
加密演算法
排序演算法
檢索演算法
隨機化演算法
關於並列演算法，請參閱平行計算一文。



參看[編輯]

抽象機器
垃圾進，垃圾出
演算法導論
計算理論

可計算性理論
計算複雜性理論


高階綜合

參考文獻[編輯]


^ "Any classical mathematical algorithm, for example, can be described in a finite number of English words"（Rogers 1987:2）.
^ Well defined with respect to the agent that executes the algorithm: "There is a computing agent, usually human, which can react to the instructions and carry out the computations"（Rogers 1987:2）.
^ "an algorithm is a procedure for computing a function（with respect to some chosen notation for integers） ... this limitation (to numerical functions) results in no loss of generality",（Rogers 1987:1）
^ "An algorithm has zero or more inputs, i.e., quantities which are given to it initially before the algorithm begins"（Knuth 1973:5）
^ "A procedure which has all the characteristics of an algorithm except that it possibly lacks finiteness may be called a 'computational method'"（Knuth 1973:5）
^ "An algorithm has one or more outputs, i.e. quantities which have a specified relation to the inputs"（Knuth 1973:5）
^ Whether or not a process with random interior processes (not including the input) is an algorithm is debatable. Rogers opines that: "a computation is carried out in a discrete stepwise fashion, without use of continuous methods or analogue devices... carried forward deterministically, without resort to random methods or devices, e.g., dice" Rogers 1987:2).
^ Whether or not a process with random interior processes (not including the input) is an algorithm is debatable. Rogers opines that: "a computation is carried out in a discrete stepwise fashion, without use of continuous methods or analogue devices ... carried forward deterministically, without resort to random methods or devices, e.g., dice" Rogers 1987:2).
^ Kleene（史蒂芬·科爾·克萊尼）1943 in Davis 1965:274
^ Rosser（巴克利·羅瑟）1939 in Davis 1965:225
^ Moschovakis, Yiannis N. What is an algorithm?. (編) Engquist, B.; Schmid, W. Mathematics Unlimited—2001 and beyond. Springer. 2001: 919–936 (Part II). 
^ Ada Lovelace honoured by Google doodle. The Guardian. 10 December 2012 [10 December 2012]. 
^ 2.4 賽場統分. 讀書頻道-IT技術圖書-51CTO.COM. 
^ 實驗3-9：循環打擂. 湖南科技大學程式設計線上評測（Online Judge）. 
^ 高中,算法與程序設計,教案. 在點網. 



Rogers, Jr, Hartley. Theory of Recursive Functions and Effective Computability. The MIT Press. 1987. ISBN 0-262-68052-1. 
Davis, Martin. The Undecidable: Basic Papers On Undecidable Propositions, Unsolvable Problems and Computable Functions. New York: Raven Press. 1965. ISBN 0-486-43228-9.  Davis此書中有列出許多相關的論文，包括哥德爾、邱奇、圖靈、巴克利·羅瑟（英語：Rosser）、史蒂芬·科爾·克萊尼及埃米爾·波斯特（英語：Emil Post）的論文。在參考文獻中也會列出原作者的姓名。

外部連結[編輯]

20世紀十大演算法
演算法筆記
計算幾何演算法概覽

參見[編輯]


電腦和資訊科技主題











閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。











權威控制



LCCN: sh85003487
GND: 4001183-5
BNF: cb119358199（資料）
NDL: 00560337
BNE: XX527980












 
						取自 "https://zh.wikipedia.org/w/index.php?title=算法&oldid=44665340"					
5 個分類：代數演算法電腦科學理論電腦科學問題解決隱藏分類：含有英語的條目含有波斯語的條目使用2號參數傳遞Portal模板圖像的頁麵包含規範控制資訊的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AfrikaansAlemannischአማርኛAragonésالعربيةمصرىঅসমীয়াAsturianuAzərbaycancaتۆرکجهБашҡортсаБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBosanskiCatalàکوردیČeštinaCymraegDanskDeutschΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiFøroysktFrançaisGaeilgeGalegoעבריתहिन्दीHrvatskiMagyarՀայերենInterlinguaBahasa IndonesiaIlokanoIdoÍslenskaItaliano日本語ქართულიQaraqalpaqshaGĩkũyũҚазақша한국어KurdîКыргызчаLatinaLëtzebuergeschLumbaartລາວLietuviųLatviešuОлык марийМакедонскиമലയാളംМонголमराठीBahasa MelayuMirandésမြန်မာဘာသာनेपालीनेपाल भाषाNederlandsNorsk nynorskNorsk bokmålOccitanOromooਪੰਜਾਬੀPolskiپنجابیPortuguêsRomânăРусскийРусиньскыйСаха тылаSicilianuScotsSrpskohrvatski / српскохрватскиසිංහලSimple EnglishSlovenčinaSlovenščinaShqipСрпски / srpskiBasa SundaSvenskaதமிழ்తెలుగుТоҷикӣไทยTagalogTürkçeТатарча/tatarçaУкраїнськаاردوOʻzbekcha/ўзбекчаTiếng ViệtWalonWinarayייִדישBân-lâm-gú粵語 
編輯連結 





 本頁面最後修訂於2017年6月7日 (週三) 16:24。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 

























遊戲自動化: ToS2 搜尋演算法概論 (2)



































































遊戲自動化




遊戲自動化的心得、技術討論與交流。





















外部連結

外部連結ToS2 (神魔之塔 Bot) Source CodeToS2 (神魔之塔 Bot) Binary (x64)
















































































2014年3月4日 星期二








ToS2 搜尋演算法概論 (2)





前情提要：先產生最佳盤面再找路徑看起來也不是很方便

既然直接產生最佳盤面，再去找一條從初始盤面一直到最佳盤面的路徑，看起來也不是很容易做到，而且甚至也不容易設計演算法，想法自然就又回到直接作搜尋。但是先前也已經提到，直接以暴力法作搜尋， Search space 實在太大，根本不可能搜得完。所以勢必要縮短搜尋的步數。先用最直覺最簡單的作法來想，神魔之塔的盤面在考慮斜轉的情況底下，每一步都可以有九種選擇，分別是上、右上、右、右下、下、左下、左、左上以及停在當時的位置。在搜尋的過程當中，除了停下不走以外，在不考慮碰到邊界的情況下，其餘的選擇都可以再接下去作原本的這九種選擇，因此若將搜尋的總步數設為 N ，那麼搜尋的時間複雜度小於 9^N ，約比 8^N 略大一點。簡單來說，這個複雜度是指數成長的。因此我們只能選擇一個很小的 N ，目前我的程式選用的 N = 8 。這個數字取決於使用者能忍受計算一個盤面花多少的時間， N 每增加 1 ，計算時間就會變為八倍，因此就算有很好的電腦協助運算，這個 N 也沒辦法再增加多少。但在上一篇文章當中，我也提到，以目前 Bluestacks 的使用狀況來看，在五秒的轉珠時間裡面，大約可以允許最多 70 步。因此，將搜尋範圍從 8^70 ，縮小到只剩下 8^8 ，這樣找到一個好的解的機會自然大大降低。如果不去比較這個數字，光從概念去想，如果只允許移動 8 次，就算把所有的可能都考慮進來，要把整個盤面整理好還是很困難。直接縮小搜尋的範圍有一個非常明顯的缺點，那就是總步數不足，根本就不可能把盤面整理好。

其實這邊的想法和人在玩的時候是很像的，人在玩的時候事實上也是在腦中作搜尋，只是可能搭配更多經驗等綜合判斷，但決策的過程還是很相像。我不知道高手的思考方式是不是不一樣，還是只是記住一些特徵來加快搜尋的速度，但至少我自己在理解這個遊戲的時候，並沒有想到什麼特別的技巧。所以，為了要解決總步數不足的問題，最簡單的作法就是多做幾次搜尋，再把一段一段的路徑接起來。簡單的想法就是，先搜尋 8 步，找到長度為 8 的路徑當中最好的一條，並將當時的盤面記下。接著再從這個盤面出發，再搜尋 8 步，再找到長度為 8 的路徑當中最好的一條。只要把這兩條路徑接起來，就可以得到一條長度為 16 的路徑。這個作法大概是我白天被問到可不可以寫神魔之塔的 Bot ，然後搭車回家的路上就想得到的第一個解法。想法很簡單，也很實用，如果有興趣的人也可以自己直接實作這個作法，會得到「還不錯」的結果，但是它的缺點也會非常明顯，那就是它會很直接地被卡在 Local optimal solution 裡面。找出來的解其實不盡理想。

接下來我會舉兩個簡單的例子來表達這個概念，在這些例子裡面，我們先假設所謂最好的路徑就是可以形成最多 combo 的路徑。假設我們一開始有的盤面是這樣。





盤面的左半邊看起來是比較容易形成 combo 的區域，所以在 8 步以內找到的最佳解可能是這樣。







但是再往下搜尋 8 步，可能就找不到更多的 combo ，因為會破壞原本已經形成的 combo 。但事實上在 16 步之內，可以形成更多的 combo ，例如這樣。









只要先把右上角整理好，再去走原本的路徑，就可以多得到 1 combo 。但先往右上角整理的走法，在 8 步以內可能沒有足夠的步數走到左半邊形成 4 combo ，因此這條路徑在搜尋第一個 8 步的時候，就會被捨棄。簡單地說，這種作法會捨棄很多一開始看起來不好，但實際上很好的走法。再舉另外一個例子，假設在第一個 8 步之後，可以把盤面整理成這樣。









我們用眼睛看會覺得超棒，因為只要再動七步，就可以形成漂亮的 6 combo 。







但是這個盤面本身卻連 1 combo 都沒有，因此它也會被捨棄。在某些搜尋的問題裡面，困在 Local optimal solution 裡面，可能不是太嚴重，因為只要大部份的地方都得到不錯的解，那麼最後的解也不會比最佳解差太多。但在神魔之塔這樣的轉珠遊戲裡面，這個問題相對較為嚴重，因為每一次的移動都有副作用，導致在得到一個 Local optimal solution 以後，對於那些會拆掉現有的 combo 以追求更高 combo 的路徑，在下一次搜尋範圍之內，若是無法將原有的 combo 組合回來，那麼得到的解將比原本的更差，這些很有潛力的路徑就被捨棄了。

對於上述的狀況，有種極端的例子。假設在疊珠疊很多層的情況底下，走 9 步就可以完成整個疊珠，可以得到很高的 combo 數。但是在 8 步的時候，就是沒辦法將最下層啟動的符石擺好，導致這個盤面最後連 1 combo 都沒有。在這樣的情況底下，即使只差 1 步，還是無法求得這個很棒的解。那麼這樣的問題要怎麼解決呢？或許有些人會覺得，那我就多搜尋 1 步就可以了，這個想法很直覺，但沒有用。因為不管搜尋幾步，總是有那種差一兩步就得到好解的情況會發生，但每多搜尋 1 步，複雜度就變成原本的 8 倍，因此實際上搜尋的範圍就只能被限縮在短短的幾步之內。要跳出 Local optimal solution 也有一些現成的搜尋演算法可以用，例如 Simulated Annealing (SA ，模擬退火法)或者是 Genetic Algorithm (GA ，基因演算法)，但這兩種很厲害的技巧(我認為發明的人真的很厲害，不過用這兩種演算法解問題倒不用什麼高深的學問)，在轉珠問題裡面似乎也派不上用場。 SA 和 GA 的作法都是隨機變動一部份的參數來看看整體解是否能夠得到改進， GA 則是混合目前不錯的解的不同部份來得到一組新的解。如果今天要解的問題有某種「區域性」，也就是改變一部份的參數，影響只會在特定的範圍之內，那麼這種嘗試方式就很有用，我們可以透過累積部份的改進，來達到整體的改進。但轉珠問題只要走的路徑有 1 步不一樣，最後的結果可能就大不相同，特別是在疊珠當中，只要在前期中斷，後面所有的 combo 都沒辦法產生。因此透過 SA 或 GA 這種帶有亂數變動的演算法來試著跳出轉珠問題當中的 Local optimal solution ，似乎也不是很恰當。當然如果有對這兩個演算法有深入瞭解的人，有想到套用的方式，也很歡迎分享。不過在我目前的理解之下，我認為這種先進的演算法似乎不適合這個問題，所以最後還是回到比較傳統的作法。因為篇幅的原因，怎麼處理困在 Local optimal solution 的作法就下篇再講了。





張貼者：

Sitos



於

下午11:14















以電子郵件傳送這篇文章BlogThis！分享至 Twitter分享至 Facebook分享到 Pinterest














沒有留言:







張貼留言

















較新的文章


較舊的文章

首頁




訂閱：
張貼留言 (Atom)
















搜尋此網誌




























網誌存檔








        ▼ 
      



2014

(8)





        ▼ 
      



三月

(4)

神魔之塔 世界的啃蝕者/飢餓的毒龍 龍隊零石通關
ToS2 搜尋演算法概論 (3)
ToS2 神魔之塔擬人轉珠/記憶的教誨/突破界限之門/追憶旅人 零石通關/示範影片
ToS2 搜尋演算法概論 (2)








        ► 
      



二月

(4)



























































只是讓這頁有個縮圖可用...

























































