多核心計算環境—NUMA與CPUSET簡介  │ 	編輯室 │ 臺大首頁 │ 計中首頁 │ 	     第0015期 	• 2010.12.20 發行  ISSN 2077-8813      歷史回顧   	訂閱/取消   校務服務   專題報導 	   技術論壇    推薦刊物       首頁 >技術論壇     技術論壇    多核心計算環境—NUMA與CPUSET簡介作者：周秉誼 / 			臺灣大學計算機及資訊網路中心作業管理組碩士後研究人員 			多核心處理器的普及化，使得計算環境和軟體及系統設計有了很大的變化。NUMA架構帶來異質的記憶體存取環境，也變成系統管理和使用計憶體的一個挑戰。在瞭解硬體的NUMA架構後，配合CPUSET功能，適當地分配應用程式或高效能計算工作到特定的處理器上，是一個簡便卻能夠減少記憶體存取時間、提高計算效能的方式。  前言 中央處理器 (Central Processing Unit, CPU) 			是執行計算程式指令的元件，也是影響計算效能最重要的部份。從1970年代開始，中央處理器的進步速度就像著名的摩爾定理 (Moore’s 			Law) 			所描述，每十八個月處理器中的電晶體數量就會成長一倍，處理器的效能也隨著電晶體數量增加，而能夠用更快的速度進行計算工作。但是，當電晶體的數量成長到一定的規模，處理器龐大的架構和設計的複雜程度也成為增進處理器效率和研發新架構的包袱。為了讓小小的處理器能夠做更多的事情，就產生了另一種想法：為何不在同一個處理器裡放入更多的核心呢，因而出現了多核心處理器 			(multi-core processor)。  多核心處理器 多核心處理器是指，在同一個處理器的晶片封裝 (chip package) 中放入多個處理器核心 			(core)，而這些核心在作業系統中都可以被視為是獨立的處理器單元，讓多個程式或執行緒 (thread) 			可以同時在不同的核心中進行計算工作。在處理器的架構上，這些核心就是實際在執行計算指令 (instruction) 			的部份，在常見的架構中同一個封裝的核心會共享底層的資源，如快取記憶體 (cache)，並使用同一個匯流排 (bus) 			來與處理器外部溝通。不同架構的多核心處理器也已經被廣泛地使用在各種計算需求的領域，如GPU、DSP、網路路由器、手機及電視遊戲主機等。 			Intel及AMD等主流個人電腦中央處理器供應商，在時脈提升和能源散熱的問題碰到瓶頸後，也開始推出個人電腦市場的多核心中央處理器。目前市場上最新的Core 			i7在單一封裝中可以達到6個核心，而更多核心的處理器也在設計當中，在單一電腦中擁有數十個計算核心，也將不是昂貴的大型主機才有的特徵。 			這樣的進步也造福了高效能運算的使用者，多核心處理器使同樣的機房、機櫃空間中，可以放入更多的計算核心，也可以提供更多的計算能力。以往八個核心的平行計算，要使用兩三台電腦才能進行，還需要呼叫MPI 			(Message Passing Interface) 			的函式庫、透過高速網路才能在不同電腦間同步及資料交換；現在只需要一臺具有兩個四核心處理器的電腦就可以完成了，還可以利用共享記憶體 			(shared memory) 來進行資料交換，延遲時間 (latency) 比使用gigabit乙太網路快上不少。  NUMA架構 			然而，就算在同一臺電腦中，尤其是有多個處理器的系統，不同核心之間訊息傳遞的速率會有些不同，不同核心存取不同區段記憶體的速率也可能會不一樣。這是因為當系統中的核心數量較多時，原本的對稱式多處理器 			(Symmetric Multi-Processor, SMP) 			設計，在處理器和記憶體間的匯流排將會成為資料存取的瓶頸，會嚴重地影響到系統效能。NUMA (Non-Uniform Memory 			Access) 的設計簡化了匯流排的複雜程度，NUMA把系統切成數個節點 			(node)，每個處理器及記憶體就位在某一個節點上，當處理器存取同一個節點的記憶體時，可以有較高的存取速度；而存取其他節點的記憶體時，就需要透過節點間的資料傳遞，會耗費較多時間。   			作業系統中為了提高記憶體存取的效率，會針對硬體的NUMA配置來設定記憶體存取的策略 (policy)，並提供NUMA相關的程式介面 			(API) 來查詢系統NUMA配置和修改存取策略。以GNU Linux為例，作業系統的核心 (kernel) 			在2.6版後，就會依據硬體架構的NUMA設計，進行記憶體的配置，並提供NUMA相關的系統呼叫函式 (system call) 			供程式使用；在 /proc這個程序虛擬檔案系統 (proc file system) 裡，也有numa_maps檔案可以查詢某個程序 			(process) 的記憶體配置。另外也有numactl指令，可以查詢系統的NUMA狀況及改變記憶體配置的策略。   			因為NUMA架構的影響，當利用共享記憶體進行需要資料交換的平行計算時，如果進行計算的執行緒在不同節點的核心的話，共享記憶體存取的效率就會下降，所以需要瞭解每個執行緒是被那一個核心所執行。在Linux的環境中，要觀察目前正在執行的程式狀態可以使用top指令，配合-H參數可以顯示所有的執行緒，進入top指令的介面後，打開Last 			used CPU的資訊，就可以瞭解每一個執行緒是被那一個核心執行的。參考numactl指令得到的NUMA架構資訊，可以知道每一個核心所屬的節點和每個節點的記憶體配置，利用這些資訊就能規劃執行緒與核心的分配。    CPUSET功能 在Linux中要控制每一個程序在那個核心執行，可以使用CPUSET的功能。CPUSET是Linux核心2.6版中的一個小模組，它可以讓使用者將多核心的系統切割成不同區域，每個區域包括了處理器和實體記憶體的區段。使用者可以指定某個程式只能在特定的區域執行，而且該程式不能使用該區域之外的計算資源。一般的應用，如網頁伺服器 			(web server)、有多種不同性質程式一同運作的伺服器，或有NUMA架構的高效能運算伺服器，都可以使用CPUSET的功能來增進效率。想確認自己的Linux核心是否有開啟CPUSET功能，可以在/boot下的Linux核心config檔案裡，尋找CONFIG_CPUSET的旗標 			(flag) 有沒有開啟。 			要使用CPUSET來建立區域和調整程序執行位置的其中一個方式，是使用CPUSET虛擬檔案系統 (CPUSET pseudo 			filesystem)。首先以mount指令將CPUSET檔案系統掛載在/dev/cpuset下，/dev/cpuset這個目錄就代表了整個系統可用的資源，是最基本的一個CPUSET區域。在/dev/cpuset目錄裡可以找到一些檔案，其中cpus檔的內容是在這個CPUSET下可用的處理器編號；mems檔的內容是這個CPUSET下可用的實體記憶體區段；tasks檔的內容是可在這個CPUSET下執行的程序編號 			(Process ID, PID)。如果要建立一個新的CPUSET，就在/dev/cpuset下使用mkdir指令建立一個目錄，目錄建立後會自動產生cpus、mems、tasks等檔案。要修改這個CPUSET可用的處理器就用echo指令將處理器編號寫入cpus檔案，要新增程序到這個CPUSET就用echo指令將程序編號寫入tasks檔案。也可以在一個CPUSET下建立多個子集合，進行比較複雜的資源設定。要移除一個CPUSET就用rmdir指令直接移除該CPUSET的目錄就可以了，但是如果該CPUSET中還有程序在進行或還有子集合存在，就沒有辦法移除。   			　  CPUSET使用實例 工作排程系統 (job scheduler, batch system, queuing system) 在高效能運算的叢集系統 			(cluster) 上，一直扮演很重要的角色，讓計算資源可以公平公正地分享給所有計算工作。而在工作排程系統上使用CPUSET功能，可以讓工作排程系統在多核心的計算環境中，做到更精確地計算資源控制。TORQUE是一套開放原始碼 			(open source) 的工作排程系統，它是從PBS (Portable Batch System) 及OpenPBS延伸出來的，廣泛地使用在各種高效能計算領域的資源管理。TORQUE從2.3版之後開始支援Linux 			2.6核心的CPUSET，只要在編譯時打開CPUSET功能，就會在後端計算節點開啟CPUSET並自動配置計算資源。當計算節點的TORQUE服務啟動時，就會先在/dev/cpuset建立一個TORQUE的CPUSET；當有計算工作開始進行，TORQUE服務會依據該工作提出的處理器數量需求，建立一個CPUSET子集合，再把該工作的程序都分配到這個CPUSET中。因為被限制在某一個CPUSET中執行，這樣就能防止單一工作佔用其他工作的計算資源。  結語 隨著處理器的核心數量一直增加，NUMA架構的計算環境也會更為常見。配合CPUSET能夠有效地控制執行每個應用程式或系統服務的處理器，將會增進系統和計算工作的效能；反之，如果忽略了NUMA架構的特性，會對系統效能有很大的衝擊。例如，VMWare等提供虛擬化 			(virtualization) 系統環境的產品，都有針對NUMA架構最佳化的設計和演算法。在個人使用的環境下，想要調效多核心環境的計算效能，Linux核心提供的CPUSET功能會是一個簡單而方便的操作方式。      版權所有 © 國立台灣大學計算機及資訊網路中心 All				Rights Reserved. 電話：02-33665022 或 3366-5023 傳真： 02-23637204				讀者意見信箱：ntuccepaper@ntu.edu.tw 				  地址：10617 臺北市羅斯福路四段一號				  建議最佳螢幕解析度 1024*768 


















苦命工程師: [轉載] 多核心計算環境—NUMA與CPUSET簡介




































































苦命工程師































































































2012年10月16日 星期二








[轉載] 多核心計算環境—NUMA與CPUSET簡介







原文網址: http://www.cc.ntu.edu.tw/chinese/epaper/0015/20101220_1508.htm





多核心計算環境—NUMA與CPUSET簡介
作者：周秉誼 / 臺灣大學計算機及資訊網路中心作業管理組碩士後研究人員

多核心處理器的普及化，使得計算環境和軟體及系統設計有了很大的變化。NUMA架構帶來異質的記憶體存取環境，也變成系統管理和使用計憶體的一個挑戰。在瞭解硬體的NUMA架構後，配合CPUSET功能，適當地分配應用程式或高效能計算工作到特定的處理器上，是一個簡便卻能夠減少記憶體存取時間、提高計算效能的方式。

前言中央處理器 (Central Processing Unit, CPU) 是執行計算程式指令的元件，也是影響計算效能最重要的部份。從1970年代開始，中央處理器的進步速度就像著名的摩爾定理 (Moore’s Law) 所描述，每十八個月處理器中的電晶體數量就會成長一倍，處理器的效能也隨著電晶體數量增加，而能夠用更快的速度進行計算工作。但是，當電晶體的數量成長到一定的規模，處理器龐大的架構和設計的複雜程度也成為增進處理器效率和研發新架構的包袱。為了讓小小的處理器能夠做更多的事情，就產生了另一種想法：為何不在同一個處理器裡放入更多的核心呢，因而出現了多核心處理器 (multi-core processor)。

多核心處理器多核心處理器是指，在同一個處理器的晶片封裝 (chip package) 中放入多個處理器核心 (core)，而這些核心在作業系統中都可以被視為是獨立的處理器單元，讓多個程式或執行緒 (thread) 可以同時在不同的核心中進行計算工作。在處理器的架構上，這些核心就是實際在執行計算指令 (instruction) 的部份，在常見的架構中同一個封裝的核心會共享底層的資源，如快取記憶體 (cache)，並使用同一個匯流排 (bus) 來與處理器外部溝通。不同架構的多核心處理器也已經被廣泛地使用在各種計算需求的領域，如GPU、DSP、網路路由器、手機及電視遊戲主機等。

Intel及AMD等主流個人電腦中央處理器供應商，在時脈提升和能源散熱的問題碰到瓶頸後，也開始推出個人電腦市場的多核心中央處理器。目前市場上最新的Core i7在單一封裝中可以達到6個核心，而更多核心的處理器也在設計當中，在單一電腦中擁有數十個計算核心，也將不是昂貴的大型主機才有的特徵。

這樣的進步也造福了高效能運算的使用者，多核心處理器使同樣的機房、機櫃空間中，可以放入更多的計算核心，也可以提供更多的計算能力。以往八個核心的平行計算，要使用兩三台電腦才能進行，還需要呼叫MPI (Message Passing Interface) 的函式庫、透過高速網路才能在不同電腦間同步及資料交換；現在只需要一臺具有兩個四核心處理器的電腦就可以完成了，還可以利用共享記憶體 (shared memory) 來進行資料交換，延遲時間 (latency) 比使用gigabit乙太網路快上不少。

NUMA架構然而，就算在同一臺電腦中，尤其是有多個處理器的系統，不同核心之間訊息傳遞的速率會有些不同，不同核心存取不同區段記憶體的速率也可能會不一樣。這是因為當系統中的核心數量較多時，原本的對稱式多處理器 (Symmetric Multi-Processor, SMP) 設計，在處理器和記憶體間的匯流排將會成為資料存取的瓶頸，會嚴重地影響到系統效能。NUMA (Non-Uniform Memory Access) 的設計簡化了匯流排的複雜程度，NUMA把系統切成數個節點 (node)，每個處理器及記憶體就位在某一個節點上，當處理器存取同一個節點的記憶體時，可以有較高的存取速度；而存取其他節點的記憶體時，就需要透過節點間的資料傳遞，會耗費較多時間。



作業系統中為了提高記憶體存取的效率，會針對硬體的NUMA配置來設定記憶體存取的策略 (policy)，並提供NUMA相關的程式介面 (API) 來查詢系統NUMA配置和修改存取策略。以GNU Linux為例，作業系統的核心 (kernel) 在2.6版後，就會依據硬體架構的NUMA設計，進行記憶體的配置，並提供NUMA相關的系統呼叫函式 (system call) 供程式使用；在 /proc這個程序虛擬檔案系統 (proc file system) 裡，也有numa_maps檔案可以查詢某個程序 (process) 的記憶體配置。另外也有numactl指令，可以查詢系統的NUMA狀況及改變記憶體配置的策略。



因為NUMA架構的影響，當利用共享記憶體進行需要資料交換的平行計算時，如果進行計算的執行緒在不同節點的核心的話，共享記憶體存取的效率就會下降，所以需要瞭解每個執行緒是被那一個核心所執行。在Linux的環境中，要觀察目前正在執行的程式狀態可以使用top指令，配合-H參數可以顯示所有的執行緒，進入top指令的介面後，打開Last used CPU的資訊，就可以瞭解每一個執行緒是被那一個核心執行的。參考numactl指令得到的NUMA架構資訊，可以知道每一個核心所屬的節點和每個節點的記憶體配置，利用這些資訊就能規劃執行緒與核心的分配。



CPUSET功能在Linux中要控制每一個程序在那個核心執行，可以使用CPUSET的功能。CPUSET是Linux核心2.6版中的一個小模組，它可以讓使用者將多核心的系統切割成不同區域，每個區域包括了處理器和實體記憶體的區段。使用者可以指定某個程式只能在特定的區域執行，而且該程式不能使用該區域之外的計算資源。一般的應用，如網頁伺服器 (web server)、有多種不同性質程式一同運作的伺服器，或有NUMA架構的高效能運算伺服器，都可以使用CPUSET的功能來增進效率。想確認自己的Linux核心是否有開啟CPUSET功能，可以在/boot下的Linux核心config檔案裡，尋找CONFIG_CPUSET的旗標 (flag) 有沒有開啟。

要使用CPUSET來建立區域和調整程序執行位置的其中一個方式，是使用CPUSET虛擬檔案系統 (CPUSET pseudo filesystem)。首先以mount指令將CPUSET檔案系統掛載在/dev/cpuset下，/dev/cpuset這個目錄就代表了整個系統可用的資源，是最基本的一個CPUSET區域。在/dev/cpuset目錄裡可以找到一些檔案，其中cpus檔的內容是在這個CPUSET下可用的處理器編號；mems檔的內容是這個CPUSET下可用的實體記憶體區段；tasks檔的內容是可在這個CPUSET下執行的程序編號 (Process ID, PID)。如果要建立一個新的CPUSET，就在/dev/cpuset下使用mkdir指令建立一個目錄，目錄建立後會自動產生cpus、mems、tasks等檔案。要修改這個CPUSET可用的處理器就用echo指令將處理器編號寫入cpus檔案，要新增程序到這個CPUSET就用echo指令將程序編號寫入tasks檔案。也可以在一個CPUSET下建立多個子集合，進行比較複雜的資源設定。要移除一個CPUSET就用rmdir指令直接移除該CPUSET的目錄就可以了，但是如果該CPUSET中還有程序在進行或還有子集合存在，就沒有辦法移除。



　

CPUSET使用實例工作排程系統 (job scheduler, batch system, queuing system) 在高效能運算的叢集系統 (cluster) 上，一直扮演很重要的角色，讓計算資源可以公平公正地分享給所有計算工作。而在工作排程系統上使用CPUSET功能，可以讓工作排程系統在多核心的計算環境中，做到更精確地計算資源控制。TORQUE是一套開放原始碼 (open source) 的工作排程系統，它是從PBS (Portable Batch System) 及OpenPBS延伸出來的，廣泛地使用在各種高效能計算領域的資源管理。TORQUE從2.3版之後開始支援Linux 2.6核心的CPUSET，只要在編譯時打開CPUSET功能，就會在後端計算節點開啟CPUSET並自動配置計算資源。當計算節點的TORQUE服務啟動時，就會先在/dev/cpuset建立一個TORQUE的CPUSET；當有計算工作開始進行，TORQUE服務會依據該工作提出的處理器數量需求，建立一個CPUSET子集合，再把該工作的程序都分配到這個CPUSET中。因為被限制在某一個CPUSET中執行，這樣就能防止單一工作佔用其他工作的計算資源。

結語隨著處理器的核心數量一直增加，NUMA架構的計算環境也會更為常見。配合CPUSET能夠有效地控制執行每個應用程式或系統服務的處理器，將會增進系統和計算工作的效能；反之，如果忽略了NUMA架構的特性，會對系統效能有很大的衝擊。例如，VMWare等提供虛擬化 (virtualization) 系統環境的產品，都有針對NUMA架構最佳化的設計和演算法。在個人使用的環境下，想要調效多核心環境的計算效能，Linux核心提供的CPUSET功能會是一個簡單而方便的操作方式。





張貼者：



adaam




於

下午9:36





反應： 















以電子郵件傳送這篇文章BlogThis！分享至 Twitter分享至 Facebook分享到 Pinterest














沒有留言:







張貼留言





















較新的文章


較舊的文章

首頁




訂閱：
張貼留言 (Atom)
















追蹤者



















網誌存檔








        ► 
      



2016

(2)





        ► 
      



07/17 - 07/24

(1)







        ► 
      



02/28 - 03/06

(1)









        ► 
      



2015

(4)





        ► 
      



09/20 - 09/27

(1)







        ► 
      



06/07 - 06/14

(2)







        ► 
      



01/04 - 01/11

(1)









        ► 
      



2014

(7)





        ► 
      



12/28 - 01/04

(1)







        ► 
      



10/26 - 11/02

(1)







        ► 
      



09/21 - 09/28

(2)







        ► 
      



09/14 - 09/21

(1)







        ► 
      



03/23 - 03/30

(1)







        ► 
      



03/16 - 03/23

(1)









        ► 
      



2013

(1)





        ► 
      



02/10 - 02/17

(1)









        ▼ 
      



2012

(20)





        ► 
      



10/28 - 11/04

(1)







        ► 
      



10/21 - 10/28

(1)







        ▼ 
      



10/14 - 10/21

(4)

[轉載] ZFS的測試結果分析整理：(3) 我所瞭解的ZFS特性
[轉載] Open vSwitch 架構概觀
[轉載] 雲中的網絡：Open vSwitch帶來的巨變
[轉載] 多核心計算環境—NUMA與CPUSET簡介








        ► 
      



10/07 - 10/14

(1)







        ► 
      



09/23 - 09/30

(1)







        ► 
      



07/15 - 07/22

(1)







        ► 
      



07/01 - 07/08

(1)







        ► 
      



06/17 - 06/24

(1)







        ► 
      



06/10 - 06/17

(1)







        ► 
      



06/03 - 06/10

(1)







        ► 
      



05/27 - 06/03

(2)







        ► 
      



04/29 - 05/06

(1)







        ► 
      



04/22 - 04/29

(1)







        ► 
      



04/01 - 04/08

(1)







        ► 
      



03/25 - 04/01

(2)









        ► 
      



2011

(5)





        ► 
      



11/06 - 11/13

(1)







        ► 
      



06/19 - 06/26

(1)







        ► 
      



05/15 - 05/22

(1)







        ► 
      



04/03 - 04/10

(1)







        ► 
      



01/09 - 01/16

(1)









        ► 
      



2010

(4)





        ► 
      



06/13 - 06/20

(1)







        ► 
      



06/06 - 06/13

(1)







        ► 
      



05/30 - 06/06

(2)









        ► 
      



2009

(5)





        ► 
      



11/29 - 12/06

(1)







        ► 
      



10/25 - 11/01

(1)







        ► 
      



09/27 - 10/04

(1)







        ► 
      



07/26 - 08/02

(2)

















關於我自己




adaam


小小工程師一枚，對於Linux、網路以及虛擬化技術有高度興趣，研究所應該也會研究相關的主題吧(菸)

檢視我的完整簡介













































多核心計算環境—NUMA與CPUSET簡介-寂寞巷


























寂寞巷
nothing but lonely.



私信私信
歸檔歸檔
RSSRSS




 







 

多核心計算環境—NUMA與CPUSET簡介

 			多核心處理器的普及化，使得計算環境和軟體及系統設計有了很大的變化。NUMA架構帶來異質的記憶體存取環境，也變成系統管理和使用計憶體的一個挑戰。在瞭解硬體的NUMA架構後，配合CPUSET功能，適當地分配應用程式或高效能計算工作到特定的處理器上，是一個簡便卻能夠減少記憶體存取時間、提高計算效能的方式。前言中央處理器 (Central Processing Unit, CPU) 			是執行計算程式指令的元件，也是影響計算效能最重要的部份。從1970年代開始，中央處理器的進步速度就像著名的摩爾定理 (Moore’s 			Law) 			所描述，每十八個月處理器中的電晶體數量就會成長一倍，處理器的效能也隨著電晶體數量增加，而能夠用更快的速度進行計算工作。但是，當電晶體的數量成長到一定的規模，處理器龐大的架構和設計的複雜程度也成為增進處理器效率和研發新架構的包袱。為了讓小小的處理器能夠做更多的事情，就產生了另一種想法：為何不在同一個處理器裡放入更多的核心呢，因而出現了多核心處理器 			(multi-core processor)。多核心處理器多核心處理器是指，在同一個處理器的晶片封裝 (chip package) 中放入多個處理器核心 			(core)，而這些核心在作業系統中都可以被視為是獨立的處理器單元，讓多個程式或執行緒 (thread) 			可以同時在不同的核心中進行計算工作。在處理器的架構上，這些核心就是實際在執行計算指令 (instruction) 			的部份，在常見的架構中同一個封裝的核心會共享底層的資源，如快取記憶體 (cache)，並使用同一個匯流排 (bus) 			來與處理器外部溝通。不同架構的多核心處理器也已經被廣泛地使用在各種計算需求的領域，如GPU、DSP、網路路由器、手機及電視遊戲主機等。			Intel及AMD等主流個人電腦中央處理器供應商，在時脈提升和能源散熱的問題碰到瓶頸後，也開始推出個人電腦市場的多核心中央處理器。目前市場上最新的Core 			i7在單一封裝中可以達到6個核心，而更多核心的處理器也在設計當中，在單一電腦中擁有數十個計算核心，也將不是昂貴的大型主機才有的特徵。			這樣的進步也造福了高效能運算的使用者，多核心處理器使同樣的機房、機櫃空間中，可以放入更多的計算核心，也可以提供更多的計算能力。以往八個核心的平行計算，要使用兩三台電腦才能進行，還需要呼叫MPI 			(Message Passing Interface) 			的函式庫、透過高速網路才能在不同電腦間同步及資料交換；現在只需要一臺具有兩個四核心處理器的電腦就可以完成了，還可以利用共享記憶體 			(shared memory) 來進行資料交換，延遲時間 (latency) 比使用gigabit乙太網路快上不少。NUMA架構			然而，就算在同一臺電腦中，尤其是有多個處理器的系統，不同核心之間訊息傳遞的速率會有些不同，不同核心存取不同區段記憶體的速率也可能會不一樣。這是因為當系統中的核心數量較多時，原本的對稱式多處理器 			(Symmetric Multi-Processor, SMP) 			設計，在處理器和記憶體間的匯流排將會成為資料存取的瓶頸，會嚴重地影響到系統效能。NUMA (Non-Uniform Memory 			Access) 的設計簡化了匯流排的複雜程度，NUMA把系統切成數個節點 			(node)，每個處理器及記憶體就位在某一個節點上，當處理器存取同一個節點的記憶體時，可以有較高的存取速度；而存取其他節點的記憶體時，就需要透過節點間的資料傳遞，會耗費較多時間。			作業系統中為了提高記憶體存取的效率，會針對硬體的NUMA配置來設定記憶體存取的策略 (policy)，並提供NUMA相關的程式介面 			(API) 來查詢系統NUMA配置和修改存取策略。以GNU Linux為例，作業系統的核心 (kernel) 			在2.6版後，就會依據硬體架構的NUMA設計，進行記憶體的配置，並提供NUMA相關的系統呼叫函式 (system call) 			供程式使用；在 /proc這個程序虛擬檔案系統 (proc file system) 裡，也有numa_maps檔案可以查詢某個程序 			(process) 的記憶體配置。另外也有numactl指令，可以查詢系統的NUMA狀況及改變記憶體配置的策略。			因為NUMA架構的影響，當利用共享記憶體進行需要資料交換的平行計算時，如果進行計算的執行緒在不同節點的核心的話，共享記憶體存取的效率就會下降，所以需要瞭解每個執行緒是被那一個核心所執行。在Linux的環境中，要觀察目前正在執行的程式狀態可以使用top指令，配合-H參數可以顯示所有的執行緒，進入top指令的介面後，打開Last 			used CPU的資訊，就可以瞭解每一個執行緒是被那一個核心執行的。參考numactl指令得到的NUMA架構資訊，可以知道每一個核心所屬的節點和每個節點的記憶體配置，利用這些資訊就能規劃執行緒與核心的分配。CPUSET功能在Linux中要控制每一個程序在那個核心執行，可以使用CPUSET的功能。CPUSET是Linux核心2.6版中的一個小模組，它可以讓使用者將多核心的系統切割成不同區域，每個區域包括了處理器和實體記憶體的區段。使用者可以指定某個程式只能在特定的區域執行，而且該程式不能使用該區域之外的計算資源。一般的應用，如網頁伺服器 			(web server)、有多種不同性質程式一同運作的伺服器，或有NUMA架構的高效能運算伺服器，都可以使用CPUSET的功能來增進效率。想確認自己的Linux核心是否有開啟CPUSET功能，可以在/boot下的Linux核心config檔案裡，尋找CONFIG_CPUSET的旗標 			(flag) 有沒有開啟。			要使用CPUSET來建立區域和調整程序執行位置的其中一個方式，是使用CPUSET虛擬檔案系統 (CPUSET pseudo 			filesystem)。首先以mount指令將CPUSET檔案系統掛載在/dev/cpuset下，/dev/cpuset這個目錄就代表了整個系統可用的資源，是最基本的一個CPUSET區域。在/dev/cpuset目錄裡可以找到一些檔案，其中cpus檔的內容是在這個CPUSET下可用的處理器編號；mems檔的內容是這個CPUSET下可用的實體記憶體區段；tasks檔的內容是可在這個CPUSET下執行的程序編號 			(Process ID, PID)。如果要建立一個新的CPUSET，就在/dev/cpuset下使用mkdir指令建立一個目錄，目錄建立後會自動產生cpus、mems、tasks等檔案。要修改這個CPUSET可用的處理器就用echo指令將處理器編號寫入cpus檔案，要新增程序到這個CPUSET就用echo指令將程序編號寫入tasks檔案。也可以在一個CPUSET下建立多個子集合，進行比較複雜的資源設定。要移除一個CPUSET就用rmdir指令直接移除該CPUSET的目錄就可以了，但是如果該CPUSET中還有程序在進行或還有子集合存在，就沒有辦法移除。			　CPUSET使用實例工作排程系統 (job scheduler, batch system, queuing system) 在高效能運算的叢集系統 			(cluster) 上，一直扮演很重要的角色，讓計算資源可以公平公正地分享給所有計算工作。而在工作排程系統上使用CPUSET功能，可以讓工作排程系統在多核心的計算環境中，做到更精確地計算資源控制。TORQUE是一套開放原始碼 			(open source) 的工作排程系統，它是從PBS (Portable Batch System) 及OpenPBS延伸出來的，廣泛地使用在各種高效能計算領域的資源管理。TORQUE從2.3版之後開始支援Linux 			2.6核心的CPUSET，只要在編譯時打開CPUSET功能，就會在後端計算節點開啟CPUSET並自動配置計算資源。當計算節點的TORQUE服務啟動時，就會先在/dev/cpuset建立一個TORQUE的CPUSET；當有計算工作開始進行，TORQUE服務會依據該工作提出的處理器數量需求，建立一個CPUSET子集合，再把該工作的程序都分配到這個CPUSET中。因為被限制在某一個CPUSET中執行，這樣就能防止單一工作佔用其他工作的計算資源。結語隨著處理器的核心數量一直增加，NUMA架構的計算環境也會更為常見。配合CPUSET能夠有效地控制執行每個應用程式或系統服務的處理器，將會增進系統和計算工作的效能；反之，如果忽略了NUMA架構的特性，會對系統效能有很大的衝擊。例如，VMWare等提供虛擬化 			(virtualization) 系統環境的產品，都有針對NUMA架構最佳化的設計和演算法。在個人使用的環境下，想要調效多核心環境的計算效能，Linux核心提供的CPUSET功能會是一個簡單而方便的操作方式。 3.5 Linux Cpuset Support3.5.1 Cpuset OverviewLinux kernel 2.6 Cpusets are logical, hierarchical groupings of CPUs and units of memory. Once created, individual processes can be placed within a cpuset. The processes will only be allowed to run/access the specified CPUs and memory. Cpusets are managed in a virtual file system mounted at /dev/cpuset. New cpusets are created by simply making new directories. Cpusets gain CPUs and memory units by simply writing the unit number to files within the cpuset.3.5.2 Cpuset SupportWhen started, pbs_mom will create an initial top-level cpuset at /dev/cpuset/torque. This cpuset contains all CPUs and memory of the host machine. If this "torqueset" already exists, it will be left unchanged to allow the administrator to override the default behavior. All subsequent cpusets are created within the torqueset.When a job is started, the jobset is created at /dev/cpuset/torque/$jobid and populated with the CPUs listed in the exec_host job attribute. Also created are individual tasksets for each CPU within the jobset. This happens before prologue, which allows it to be easily modified, and it happens on all nodes.The top-level batch script process is executed in the jobset. Tasks launched through the TM interface (pbsdsh and PW’s mpiexec) will be executed within the appropriate taskset.On job exit, all tasksets and the jobset are deleted.3.5.3 Cpuset ConfigurationAt the moment, there are no run-time configurations. The support is disabled by default at build-time. Run configure with --enable-cpuset if you would like to test the code. If enabled and run on a machine without cpuset support, pbs_mom  still executes the jobs, but it  logs errors in the log file. A run-time pbs_mom boolean needs to be created to enable/disable it.On the Linux host, the virtual file system must be mounted:mount -t cpuset none /dev/cpuset3.5.4 Cpuset advantages / disadvantagesPresently, any job can request a single CPU and proceed to use everything available in the machine. This is occasionally done to circumvent policy, but most often is simply an error on the part of the user. Cpuset support will easily constrain the processes to not interfere with other jobs.Jobs on larger NUMA systems may see a performance boost if jobs can be intelligently assigned to specific CPUs. Jobs may perform better if striped across physical processors, or contained within the fewest number of memory controllers.TM tasks are constrained to a single core, thus a multi-threaded process could seriously suffer.




2012-03-20
/

標簽：
Linux





上一篇 
下一篇 


 

評論





© 寂寞巷|Powered by LOFTER


回到頂部











多核心處理器 - 維基百科，自由的百科全書






























 







多核心處理器

維基百科，自由的百科全書


					跳轉至：					導航，					搜索






本條目需要精通或熟悉相關主題的編者參與及協助編輯。（2015年12月14日） 
請邀請適合的人士改善本條目。更多的細節與詳情請參見討論頁。 







本條目需要編修，以確保文法、用詞、語氣、格式、標點等使用恰當。 
請按照校對指引，幫助編輯這個條目。（幫助、討論） 







本條目需要補充更多來源。（2015年1月17日） 
請協助添加多方面可靠來源以改善這篇條目，無法查證的內容可能會因為異議提出而移除。 







多核心處理器（英語：Multi-core processor），又稱多微處理器核心，是在單個計算元件中，加入兩個或兩個以上的獨立實體中央處理單元（核心，即Core）。這些核心可以分別獨立的執行程式指令，利用平行計算的能力加快程式的執行速度。只有兩個核心的處理器，稱為雙核心處理器（dual-core processor）。「多核心」通常是對於中央處理器（Central Processing Unit，CPU）而論的，但是某些時候也指數字信號處理器（DSP）和系統芯片（SoC）。
通常，將兩個或更多獨立處理器封裝在一個單一集成電路（IC）中的方案，稱為多核心處理器；而封裝在不同IC中的獨立處理器形成的計算機系統被稱為多處理器。在某些情況中（比如廣告中），有些人會將在同一個集成電路中的多個獨立的單核心微處理器（或多核心微處理器）稱做“多處理模塊”、“多核心”等，其實是在說“多處理器”而不是“多核心處理器”。除非特別說明，本文將使用“多核心”指代在同一集成電路中集成的CPU（即“多核心處理器”）。
通常，多核心處理器可以在不將每個核心分別獨立物理封裝的情況下進行多任務處理（線程級並行處理（Thread-Level Parallelism，TLP），這種形式的TLP通常被認為是晶片級多處理）。



目錄


1 商業化的例子
2 開發動機

2.1 技術壓力
2.2 商業誘因
2.3 優勢
2.4 劣勢


3 軟件影響

3.1 編程問題
3.2 許可


4 普遍誤解
5 註釋
6 參見
7 外部鏈接



商業化的例子[編輯]

IBM的POWER4，2000年發佈的第一個雙核心模塊處理器。
IBM的POWER5雙核心芯片，還有應用在蘋果電腦PowerMac G5中的[PowerPC 970|PowerPC 970MP]]雙核心處理器。
Broadcom SiByte（SB1250, SB1255, SB1455）
PA-RISC（PA-8800）
Sun Microsystems UltraSPARC IV, UltraSPARC IV+, UltraSPARC T1
AMD在2005年4月22日發佈了它的雙核心Opteron服務器/工作站用處理器，還有2005年5月31日發佈的雙核心桌面處理器Athlon 64 X2家族，AMD還發佈了FX-60和FX-62高性能桌面處理器，以及Turion 64 X2移動處理器。
Intel的雙核心Xeon處理器，開發代號為Paxville和Dempsey，初始頻率為3 GHz。該公司當前還在開發雙核心版本的Itanium高端服務器CPU架構並生產了Pentium D，Pentium 4的移動版。一個更新的處理器芯片Core Duo，應用在蘋果電腦的iMac、高端的Mac mini、MacBook以及MacBook Pro中，以及其他多種如索尼、東芝、華碩等廠家的筆記本電腦中。下一代版本Core 2 Duo，開發代號Conroe，在2006年7月發佈。


Microsoft的Xbox 360游戲終端使用了三核心的PowerPC微處理器。
Raza Microelectronics的XLR處理器擁有8個MIPS核心。
Cavium Networks的Octeon處理器擁有16個MIPS核心。
Intel® Xeon Phi™ Coprocessor 7100 Series處理器擁有61核心，運算能力可達1.208 TeraFLOPS。
Intel 發佈的Broadwell-E架構處理器，最高型號——6950X就集成了10核心

開發動機[編輯]
技術壓力[編輯]
CMOS製造技術不斷改善、單個邏輯閘不斷變小，基於半導體的微電子學的物理極限變成主要的設計考量。
商業誘因[編輯]
由於商用電腦要求提升，處理器向高效能的方向發展。兩粒同效能的處理器理論上的處理能力是原來的兩倍。早年的Intel就曾推出可安裝多粒單核心Xeon的伺服器底板。此外，家用電腦也出現過可以安裝最少2粒pentium III的底板。但由於能源、成本、空間等問題，今天的底板已向「多核心」發展。
優勢[編輯]
由於採用了相對簡單的微處理器作為處理器核心，多核心處理器具有高主頻、設計和驗證周期短、控制邏輯簡單、擴展性好、易於實現、功耗低、通信延遲低等優點。此外，多核心處理器還能充分利用不同應用的指令級並行和線程級並行，具有較高線程級並行性的應用可以很好地利用這種結構來提高性能。
劣勢[編輯]
儘管多核心有比單核心運行速度更快的優勢，但如果應用程序不支援多核心處理，這個優勢就不能發揮。例如早期的軟件和Windows只支援宏核心處理，不會自動使用多個核心作分工處理。
軟件影響[編輯]
編程問題[編輯]
對於多核心的電腦，若在程式編寫或編譯時無法把程式線性化，就不能充分利用多核心的特色，結果程式只能在一個核心上運行，白白浪費中央處理器的資源。
許可[編輯]
另外一個問題是對多核心處理器的軟件授權。企業級的伺服器軟件是以處理器為單位授權。從前，中央處理器只有一個核心而多數電腦只有一個處理器，並不存在這個問題。在雙核心處理器剛面世時，有些軟件是以核心為單位授權，而雙核心處理器需要兩個授權。現在的主流是把雙核心或多核心處理器計算成一個處理器，而微軟、英特爾和超微支持這個觀點，甲骨文也支持這個觀點，但是甲骨文只計算英特爾和超微的多核心處理器為一個處理器，但是把其他的多核心處理器當成多個處理器。國際商業機器、惠普和微軟把多處理器模組當成多處理器，理由是如果把多處理器模組當成一個處理器，處理器廠商會製造大型、昂貴的多處理器模組來幫助客戶節省軟件費用，所以現在行業上漸漸把一枚晶片當作一個處理器。
普遍誤解[編輯]
很多人以為中央處理器的核心數目越多，其效能會越高。缺乏對處理器運算速度的理解，軟體的支援問題等。例如：4核486MHz的處理器與單核3.0GHz處理器相比，雖然前者可同時有四條運算，而後者只有一條運算，但是時脈明顯有差距。而且不是全部軟體都支持多核心及多處理器的工作環境。
若是以上述的例子來做簡單的說明， 4核486MHz的處理器就像是一個部門可以一次處理四個單位的工作，但每個處理單位卻只有一個人慢慢完成；而單核3.0GHz的處理器像是一個部門一次只處理一個單位的工作，但該處理單位卻有好幾個人來快速的完成工作。
註釋[編輯]

^ Digital signal processors, DSPs, have utilized dual-core architectures for much longer than high-end general purpose processors. A typical example of a DSP-specific implementation would be a combination of a RISC CPU and a DSP MPU. This allows for the design of products that require a general purpose processor for user interfaces and a DSP for real-time data processing; this type of design is suited to e.g. mobile phones.
^ Two types of operating systems are able to utilize a dual-CPU multiprocessor: partitioned multiprocessing and symmetric multiprocessing (SMP). In a partitioned architecture, each CPU boots into separate segments of physical memory and operate independently; in an SMP OS, processors work in a shared space, executing threads within the OS independently.

參見[編輯]

超線程
多線程
對稱多處理機（SMP）
多任務
平行計算

外部鏈接[編輯]

AMD HyperTransport Technology
Hyper-Threading Technology Intel
Intel First to Ship Dual Core – By Michael Singer, internetnews.com, 12 April 2005
Findings of a test carried out by Anandtech showed that dual-core chips produced by AMD and Intel had individual performance merits under different situations of application
Intel® Xeon Phi™ Product Family






規範控制



GND: 7598578-0












 
						取自“https://zh.wikipedia.org/w/index.php?title=多核心處理器&oldid=44397740”					
分類：電腦架構數字信號處理微處理器並行計算隱藏分類：自2015年12月需要專業人士關註的頁面需要校對的頁面自2015年1月需補充來源的條目拒絕當選首頁新條目推薦欄目的條目包含規範控制信息的維基百科條目 



導航菜單


個人工具

沒有登錄討論貢獻創建賬戶登錄 



命名空間

條目
討論




不轉換



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






視圖

閱讀
編輯
查看歷史



更多







搜索



 







導航


首頁分類索引特色內容新聞動態最近更改隨機條目 



幫助


幫助維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



打印/導出


下載為PDF 



工具


鏈入頁面相關更改上傳文件特殊頁面打印頁面固定鏈接頁面信息維基數據項引用本頁 



其他語言


العربيةБългарскиCatalàČeštinaDanskDeutschEnglishEspañolEestiفارسیSuomiFrançaisHrvatskiItaliano日本語Қазақша한국어МакедонскиNederlandsNorsk bokmålPolskiPortuguêsRomânăРусскийSimple EnglishСрпски / srpskiไทยTürkçeУкраїнськаTiếng Việt 
編輯鏈接 





 本頁面最後修訂於2017年5月17日 (星期三) 18:44。
本站的全部文字在知識共享 署名-相同方式共享 3.0協議之條款下提供，附加條款亦可能應用。（請參閱使用條款）
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發者
Cookie聲明
手機版視圖



 

 






僅使用多核心系統中的單一核心時，Communications Server 未正確報告 CPU 使用量 (問題 1344) (Sun GlassFish Communications Server 2.0 版本說明) Documentation Home  > Sun GlassFish Communications Server 2.0 版本說明    > 第 3 章 Sun GlassFish Communications Server 的已知問題與限制    > Communications Server 管理     > 僅使用多核心系統中的單一核心時，Communications Server 未正確報告 CPU 使用量 (問題 1344)Sun GlassFish Communications Server 2.0 版本說明Previous: 使用 3.5 GB Java 堆疊會導致實例在收到流量時重新啟動 (問題 1169)Next: 整合負載平衡器僅使用多核心系統中的單一核心時，Communications Server 未正確報告 CPU 使用量 (問題 1344)
說明
在 Solaris 平臺上，Communications Server 會根據可用的處理器數目和每個核心的 CPU 使用量，來計算 CPU 的使用量。然而，Communications Server 考量的是核心數目的靜態值，而非 JVM 所使用的核心數目。 
解決方案
如果您沒有使用機器中的所有核心，請重新計算 CPU 臨界值。
Previous: 使用 3.5 GB Java 堆疊會導致實例在收到流量時重新啟動 (問題 1169)Next: 整合負載平衡器

© 2010, Oracle Corporation and/or its affiliates


Communications Server 管理 (Sun GlassFish Communications Server 2.0 版本說明) Documentation Home  > Sun GlassFish Communications Server 2.0 版本說明    > 第 3 章 Sun GlassFish Communications Server 的已知問題與限制     > Communications Server 管理Sun GlassFish Communications Server 2.0 版本說明Previous: 第 2 章 關於 Sun GlassFish Communications Server 2.0 Next: 整合負載平衡器Communications Server 管理
Communications Server 不會偵測與叢集活動訊號連接埠的衝突 (問題編號 1967)
說明
叢集建立時，Communications Server 會為其隨機指定 1026 到 45556 之間的活動訊號連接埠。對於預設叢集 (亦即 Communications Server 安裝所建立的預設叢集)，系統會隨機選取介於 0 至 45556 之間的數字。叢集建立程序不會精確偵測是否已有其他服務使用該活動訊號連接埠。
解決方案
如果自動叢集建立配置選取了與另一服務 (已使用該連接埠) 衝突的活動訊號連接埠，請將叢集活動訊號連接埠更新為系統未使用的連接埠。
要變更叢集的活動訊號連接埠，請使用下列 asadmin  指令：

asadmin set cluster-name.heartbeat-port= newportnumber

執行 64 位元 Linux 的 NFS 伺服器停止建立網域 (問題編號 1961)
說明
在執行 64 位元 Linux 的 NFS 伺服器上，asadmin create-domain 指令在嘗試於掛載 Network File System (NFS) 的檔案系統上建立網域時可能會失敗。
解決方案
無已知解決方案。
流量極小或沒有流量時，CPU 使用率居高不下 (問題編號 1966)
說明
啟用了 CPU 超載保護時，即使在流量極小或沒有流量時，Communications Server 實例有時也會顯示很高的 CPU 使用量。這個問題是由於 JDK 錯誤所造成的： 6693490。這個錯誤已經在 JDK 6 Update 18 中解決。
解決方案
請將 JDK 6 Update 18 配合 Communications Server 使用。
在未連結 SIP/SIPS 連接埠的情況下，Communications Server 實例仍會啟動 (問題編號 998)
說明
在無法連結到 SIP 或 SIPS 連接埠的情況下，Communications Server 實例仍會啟動。 
解決方案
請在啟動伺服器實例之前，確認連接埠可以使用。請檢查記錄檔 (server.log) 以確認啟動期間沒有發生過任何 SIP 容器錯誤或異常。 
Communications Server 不會使用 ––javahome 選項所指定的 JDK (問題編號 789)
說明
您可以使用 ––javahome 選項，以預先安裝的 JDK 替代安裝的預設版本。依照預設，Communications Server 會使用來自 as-install/jdk 的 JDK 版本。
解決方案

asenv.conf 檔案中的 AS_JAVA 變數永遠會指向 as-install/jdk。如果您想要使用不同的 JDK 版本，請手動更新 asenv.conf 檔案並變更 AS_JAVA 的值。
使用 3.5 GB Java 堆疊會導致實例在收到流量時重新啟動 (問題 1169)
說明
當 JVM 堆疊大小設為 3.5 GB 時，如果接收到流量，Communications Server 實例會失敗並重新啟動。
解決方案
確認最大 JVM 堆疊大小已設為 3.0 GB 或更低。
僅使用多核心系統中的單一核心時，Communications Server 未正確報告 CPU 使用量 (問題 1344)
說明
在 Solaris 平臺上，Communications Server 會根據可用的處理器數目和每個核心的 CPU 使用量，來計算 CPU 的使用量。然而，Communications Server 考量的是核心數目的靜態值，而非 JVM 所使用的核心數目。 
解決方案
如果您沒有使用機器中的所有核心，請重新計算 CPU 臨界值。
Previous: 第 2 章 關於 Sun GlassFish Communications Server 2.0 Next: 整合負載平衡器

© 2010, Oracle Corporation and/or its affiliates




高效多核與平行計算技術 | Moldex3D :: 塑膠射出成型CAE模流軟體領導品牌




 





















































合作夥伴登入   |   聯絡我們   |   




繁體中文
English
日本語
한국어
簡體中文












HOME
Can Moldex3d?
Products
Support
Partners
Learning
About



代理產品
Solution Add-on
晶片封裝解決方案
Advanced
Professional
eDesign
Moldex3D Viewer
R15 最新功能




首頁 / 產品 / eDesign / 高效多核與平行計算技術



高效多核與平行計算技術

對於工業界的使用者而言，模流分析最重要的三個要素就是：使用便利性、正確性與速度。三維實體模流分析技術可以提供許多傳統2.5D模流分析技術所不能提供的優點，例如與CAD的整合、分析正確性、模型最少簡化…等等。然而，三維模流分析在完全不簡化模型的情況下，無可避免增加了許多計算上的負擔，使得計算時間增長。Moldex3D所採用的高效能有限體積法(HPFVM, High-Performance Finite Volume Method)，雖然已經是目前商用CAE軟體中計算效能最高的一種，但是當面臨大型模具，以及客戶快速分析的期望時，仍有相當大的改進空間。
Moldex3D 在業界率先支援平行計算，以求大量增進分析計算效能，在最短時間內完成複雜、內含大量網格元素的模型分析數據。高效率的平行化計算核心可進行完整的充填、保壓、冷卻、翹曲、玻纖排向、反應射出…等計算。此外，Moldex3D 平行計算技術可同時支援多CPU和叢集式電腦計算。
在計算速度的提升上，CPU的速度雖然年年推陳出新，在某種程度上可以加速計算的效率。但是單由CPU內頻速度與外頻速度所提升的效能，仍無法完全滿足工業界對分析速度與分析複雜度的要求。例如汽車關鍵零組件、纖維補強複合材料成型、精密光學零件…等等，對於分析速度與複雜度的要求皆由於產業的快速變遷，而與日俱增。分析複雜度越高，所需的計算時間與記憶體就越多，因此現有的單CPU電腦一般來說無法完全滿足工業界的需求。多核心CPU電腦組成的叢集平行計算，便成為最可行的解決方案。

效能顯著的案例探討
Moldex3D身為CAE專業領導廠商，是市面上唯一完整支援全平行計算的模流軟體，包含流動、保壓、冷卻、翹曲、多材質射出等分析。運用多核心或者多CPU的高計算能力，計算時間能受大幅的縮短，例如以雙核心的電腦為例，計算效率有機會提升50%到80%以上。Moldex3D高效多核與平行計算技術能降低您的成本並產生極高的效益。





eDesign
流動分析模組 Flow
保壓分析模組 Pack
冷卻分析模組 Cool
翹曲分析模組 Warp
多材質射出成型模組 MCM
反應射出成型分析 RIM
Designer
高效多核與平行計算技術
Studio




最新消息

科盛科技捐贈中央大學50套模流分析軟體  縮短學用落差


Moldex3D歐非中東代理商大會荷蘭落幕  22國熱烈響應


科盛科技與台科大簽訂產學合作備忘錄  致力人才與技術交流


全新Moldex3D R15.0 提供更流暢的模擬流程 加速塑膠產品設計開發


 

其他推薦課程

2017 Moldex3D Professional基礎訓練課程


2017 Moldex3D CAE 認證課程 – Professional


2017 Moldex3D eDesign基礎訓練課程






優勝
北京化工大學
控制2.5英寸儲罐封頭螺紋精度





挑戰
目前國內生產塑膠儲罐封頭無法進入歐洲市場，原因就是螺紋尺寸精度低，無法到達歐洲的通規、止規測試要求。本案例目標為針對2.5英寸NPSM螺紋，優化工藝條件，在不影響製品品質的前提下，減小製品尺寸收縮率；在此基礎上，進行模具型腔的尺寸設計，將螺紋的尺寸控制在公差要求範圍內。

解決方案
影響製品收縮的主要因素是保壓壓力及保壓時間，北京化工大學採用Moldex3D模流分析軟體，在優化充填工藝條件的基礎上，進行設計變更與改變保壓條件，最終達到螺紋尺寸公差要求。

效益
– 優化螺紋精度
– 大幅度降低廢品率，由90%降低到5%以下

使用產品 (模組)
Moldex3D Advanced
– 流動分析模組 (Flow)
– 保壓分析模組 (Pack)
– 翹曲分析模組 (Warp)



×

優勝
國立雲林科技大學
共射出成型成品之翹曲變形行為與物理機制之探討





挑戰
共射出成型成品翹曲變形和機械性質往往和皮層料與核心料的比例有很大的關係，國立雲林科技大學運用Moldex3D共射出成型模組來預測皮層料與核心料的分佈情形，並針對以下幾點對成品翹曲變形做探討:
– 皮層/核心料比例的影響
– 製程參數的影響
– 翹曲變形的行為

解決方案
在研究初期透過Moldex3D模流分析軟體比較不同的分析結果，並從中找出潛在的問題點以及可能影響的因素，接著透過實際試模與Moldex3D模擬結果比對分析。藉由Moldex3D模流分析軟體與實驗驗證得到成品皮層料與核心料的分佈情形，另外也證實可藉由核心料的比例以及降低塑料溫度與第一射的流率加以改善翹曲值，並在時間與成本上節省不必要的花費。

效益
– 有效預測及協助改善翹曲變形
– 協助優化製程參數

使用產品 (模組)
Moldex3D Advanced
– 流動分析模組 (Flow)
– 翹曲分析模組 (Warp)
– 共射出模組 (Co-Injection)



×

優勝
國立嘉義大學
靜態混合器應用於射出成型多模穴模組改善流道系統轉角效應分析





挑戰
射出成型製程中，為了降低成本並實行大量生產，常設計為一模多穴流道系統提升一定時間內的生產效率，但是大部分多模穴流道系統存在流動不平衡問題，平均每增加一個模穴，產品尺寸精度會降低4%左右。

解決方案
採用Moldex3D模流分析軟體，精準模擬多模穴流道系統之射出製程，觀察嵌入靜態流動平衡元件後，不同位置塑流之切割、旋轉及混合情形，並比較分析數據驗證混合器運用於流道系統之成效，嘗試分析兩組不同的混合器，以找出最佳的混合器幾何設計。

效益
– 提升流動平衡
– 改善轉角效應造成的溫度不均

使用產品 (模組)
Moldex3D Advanced
Moldex3D eDesign



×

優勝
國立臺灣科技大學
纖維配向對聚乳酸塑膠複材拉伸試片之機械強度分析研究





挑戰
近年來高分子材料大量使用，對環境帶來極大衝擊，目前具有綠能環保性質材料正是解決此問題最佳方法之一，聚乳酸(Polylactic Acid, PLA)為一種生物可降解高分子材料，主要利用玉米澱粉製造而成，可完全為生物分解，除食品容器外，可作為醫療用之骨釘及骨板等製備。本研究分別探討玻璃長、短纖維(Glass Fiber)對聚乳酸(Poly Lactic Acid, PLA)塑膠複材之機械性質的影響，並觀察有效射出成型參數數據，進而提供日後開發其相關製程之應用。

解決方案
首先利用Moldex3D模流分析軟體來觀察純PLA 添加玻纖與無添加玻纖其應力、位移與翹曲變化量，進而分析短纖與長纖差異，再進一步利用Moldex3D FEA介面輸出射出成型模擬結果至ANSYS結構分析軟體來探討產品機械性質。透過Moldex3D 模擬分析PLA 添加玻纖複材之纖維配向，得知纖維配向與流場有關，可看出固化層(Freeze Layer)、剪切層(Shear Layer)與核心層(Core Layer)變化，並透過ANSYS進行應力和位移分析，結果顯示長纖維其配向性、抗拉伸強度、衝擊強度與翹曲變形量皆優於短纖。

效益
– 節省PLA複材開發之時間與金錢
– 加速PLA複材在行動裝置外殼應用之潛在市場
– 提升新製程開發可靠性

使用產品 (模組)
Moldex3D Advanced
– 應力模組 (Stress)
– FEA介面功能模組 (ANSYS)



×

優勝
國立高雄應用科技大學
塑膠厚件產品錶面凹陷之解析與動態量測之研究





挑戰
厚件成型射出是汽車車燈未來一大趨勢，但厚件產品凹陷造成品質不良是一大問題。厚件產品由於內部積熱，造成脫模後產品錶面溫度回升，導致錶面凝固層被二次加熱，產生軟化及錶面凹陷的現象。

解決方案
採用Moldex3D射出成型模擬軟體進行分析，預測問題並進行優化，在開模生產之前找到潛在問題並即刻解決，節省開模後變更設計修改的時間人力和經費。

效益
– 節省人力成本
– 減少試模時間成本
– 降低試誤法結果對於二次修模的風險

使用產品 (模組)
Moldex3D eDesign
– 光學分析模組 (Optics)



×

優勝
國立高雄應用科技大學
應用多層射出製程於厚件光學產品成型之研究





挑戰
隨著汽車產業的發展，輕量化、環保回收、節約能源已經成為了發展趨勢。其中車燈罩早期都是使用玻璃當作原料，近代為了輕量化，使用了塑膠材料來取代玻璃材料，但是塑膠厚件產品的射出成型問題層出不窮，錶面凹陷、噴流痕、真空泡等是常見的瑕疵，冷卻時間長也是影響生產效率的主因。

解決方案
本案例為一12mm厚的光學透鏡成品，利用分層多次射出的概念將成品以BAB的形式進行射出成型，藉由Moldex3D來分析A 層與B層的厚度改變對冷卻時間及光學性質的影響，來找到A層與B層的最佳厚度比例，成功縮短冷卻時間和改善產品凹陷問題。

效益
– 冷卻時間縮短45%-55%
– 凹陷量降低56-85%

使用產品 (模組)
– 光學分析模組 (Optics)
– 多材質射出成型模組 (MCM)



×

第三名
美國俄亥俄州立大學-精密工程實驗室
微射出成型Alvarez自由曲面光學鏡片





挑戰
微射出成型是經濟優惠且可大量生產光學元件的應用技術。然而，因其複雜的成型技術，常有產品變形和不規則折射率分佈的情形，造成光學元件精度不佳的產品缺陷。

解決方案
透過Moldex3D光學模擬分析技術，瞭解利用微射出成型來生產Alvarez自由曲面光學鏡片的過程，其中包括光學波前現象等重要參數等，進一步降低光學像差。 

效益
俄亥俄州立大學的精密工程實驗室，透過利用Moldex3D光學模組分析得以：
– 利用產品變形量和折射率模擬結果，計算出光學像差的數據
– 對光學鏡面進行錶面設計變更，以最佳光學調制傳遞函數，達到降低光學像差

使用產品 (模組)
– 光學分析模組 (Optics)



×

第二名
國立高雄應用科技大學
陶瓷粉末射出成型應用於多材質氧化鋯人工牙根之收縮變形量研究





挑戰
本案例利用多材射出方式來製作中心高強度(一次射出)、外層多孔隙率 (二次射出)的氧化鋯牙根。多材射出成型與一般射出成型的差別在於，將兩種或以上不同的材料進行模內接合，產品的外形結構與包覆結合情形易導致流動不平衡，造成應力集中或殘留應力的發生，影響產品之界面結合強度與使用壽命，因此在射出過程會因成型材料的特性、幾何形狀尺寸的不同，產生許多成形的問題，導致收縮與變形，影響成品的品質。

解決方案
利用Moldex3D模流分析軟體進行射出成型模擬分析，判斷產品結構設計是否恰當，有無造成短射、包封、壓力過大、冷卻不均、翹曲等問題。為達成更好的產品品質，本研究藉由 Moldex3D 粉末射出模組(PIM)、多材質射出模組(MCM)，觀察粉末與黏著劑的相分離現象、外形結構與嵌入件包覆結合情形，進而預測粉末濃度分佈及應力集中或殘留應力的發生，有效減少體積收縮、變形翹曲等問題。

效益
– 有效改善產品充填結束後之粉末濃度分佈
– 大幅改善產品翹曲變形
– 射出品質總上升71.15%

使用產品 (模組)
Moldex3D eDesign
– 粉末射出成型模組 (PIM)
– 多材質射出成型模組 (MCM)



×

第一名
中原大學
成型參數及添加玻璃纖維對於產品真圓度影響之研究





挑戰
光學相機鏡頭外殼的真圓度十分重要，鏡片與鏡片的組合所呈現出的影像，會因塑膠鏡頭外殼件的同心度與真圓度精密度不足，造成影像的失真。在本案例中，為了增加光學相機鏡頭外殼機械強度而考慮添加玻璃纖維，但卻影響產品的真圓度。

解決方案
藉由Moldex3D模流分析軟體釐清纖維含量以及不同參數條件(料溫、模溫及射速)對產品真圓度的影響，並將模擬分析與實際成型進行驗證比對，發現兩者高度吻合。確認分析準確性後，進行含纖量對真圓度的影響之分析，依照分析結果進行設計變更，最終將真圓度提升到許可範圍內。

效益
– 改善產品整體真圓度35%以上
– 獲得流動平衡

使用產品 (模組)
Moldex3D Advanced
– 流動分析模組 (Flow)
– 翹曲分析模組 (Warp)
– 纖維配向模組 (Fiber)



×

優勝
Linear Mold & Engineering
利用模流分析 協助優化射出成型週期





挑戰
傳統冷卻方法讓射出成型的成型週期往往過長。除了週期過長的問題，翹曲變形也是其中一個嚴重的問題。為了要縮短週期，經常得經歷數次的試誤。本案例的目的為協助客戶利用異型水路縮短成型週期，特別是冷卻的部分。

解決方案
Linear Mold使用Moldex3D的冷卻及翹曲分析功能，進行原始設計傳統水路的模擬分析，預測可能會造成成型週期過長或是翹曲問題的區域。針對Moldex3D的模擬結果，Linear Mold得以開發出對應的解決方案，將客製化的異型水路置入原始設計，取代原有的部分水路，改善冷卻不均和冷卻效率。將改善後的設計再次進行分析，比較異型水路可以節省的卻時間。結果顯示，客戶使用異型水路組設計，將可以在有限的生產時間內，獲得最大生產效益。

效益
– 縮短成型週期 50%
– 改善翹曲問題
– 提升市場競爭力

使用產品 (模組)
Moldex3D Advanced
– Flow
– Pack
– Cool
– Warp
– Fiber
– Stress
– CADdoctor



×

優勝
佳凌科技股份有限公司
Moldex3D模流分析在投影鏡片產品應用





挑戰
本案列的產品因有肉厚差問題，在實際成型過程中，融膠流動至中間時因厚度變薄、流動變慢，造成產品在外觀面上有明顯的縫合線。因為考量光學因素，成品必須要達到應力分佈均勻，才能保有良好光學效果。

解決方案
在模具設計部份，佳凌科技導入Moldex3D模流分析軟體進行電腦試模，由成型視窗找出最佳條件組合，利用Moldex3D提供的最佳參數組合搭配補償技術，佳凌科技進行了射出成型驗證，確保產品精度可以達到設計標準。

效益
– 改善縫合線，符合產品外觀要求
– 獲得均勻剪切應力分佈

使用產品 (模組)
Moldex3D Advanced
Moldex3D eDesign
– Flow
– Pack
– Cool
– Warp
– Optics



×

優勝
KOPLA
結合射出模擬分析和結構分析解決翹曲問題





挑戰
本案例為一車門組件，上面有許多孔洞，主要目的為組裝使用。因此，組裝孔的位置非常關鍵，如果該位置發生翹曲造成尺寸收縮，將會影響之後的組裝工作，因此必須在生產前，確保產品的結構符合組裝需求。

解決方案
KOPLA 利用Moldex3D模流分析判別最佳澆口位置，達到流動平衡和最低翹曲變形量。接著利用Moldex3D FEA介面模組，將翹曲分析的結果輸入至ANSYS結構分析軟體。結果顯示變形的孔洞位置和之前翹曲模流分析預測的結果高度相符，提升結構分析的準確度。

效益
– 提升結構分析真實性
– 縮短成型週期
– 提升產品良率

使用產品 (模組)
Moldex3D eDesign
– FEA Interface
– Flow
– Pack
– Cool
– Warp



×

優勝
金屬工業研究發展中心
雷射投影機陣列鏡片光學品質分析研究





挑戰
光學鏡片需要透光，所以多為非結晶材料，塑料從低溫低壓到高溫高壓，再到低溫低壓所承受的應力變化很大，成型收縮不易控制，在鏡片射出成型後，塑膠材料在冷卻過程中易發生收縮變形，收縮量和收縮方向不易控制；但因為材料的特性，給予過多的壓力會使塑料脆裂，而溫度過高塑料可能又會熱裂解，所以如何有效優化光學成型參數，是本案例的研究目標。

解決方案
金屬中心運用Moldex3D模流分析軟體，針對其模溫、射速、以及保壓壓力做變動，找出影響殘留應力及翹曲量的關鍵因子，進行實際射出驗證以及比較光彈、光程差。結果發現，射出速度的增大，會大幅改善光程差和光彈條紋；而保壓壓力及保壓時間增加，則會改善翹曲量。

效益
– 成功改善光程差值約50%
– 消除光彈條紋微結構應力
– 改善翹曲量約30%

Software used:
Moldex3D Advanced
– Flow
– Pack
– Cool
– Warp
– Optics
– DOE



×

優勝
聖萬提註塑工業有限公司 (Synventive Molding Solutions)
利用Moldex3D模擬activeGate™ 控制技術





挑戰
許多射出成型模具業者使用含閥澆口的熱澆道進行生產，透過時序控制器來達到更好的充填效果可以說是相當普遍。然而進行時序控制時，很有可能會造成一些產品缺陷，如：未噴漆的產品可能會留下流痕、漆乾了之後留下光澤不均痕跡或在澆口噴嘴的反面產生熱點。這些有缺陷的產品往往會遭到廢棄，造成時間和金錢成本損失。

解決方案
在此案例中，Synventive藉由Moldex3D軟體進行了兩個模擬分析。第一個分析是模擬時序閥澆口，這個分析的目的主要是確認模擬軟體可以幫助預測潛在成型瑕疵。第二個分析也是模擬時序閥澆口，但是閥針的開啟速度受到控制，目的在於驗證軟體是否可以模擬activeGate™ 控制技術。透過Moldex3D 模擬分析，Synventive可以提前預測可能發生的生產問題，

效益
– 利用軟體模擬閥針，偵測activeGate可以消除的成型瑕疵
– 節省時間和金錢成本，提昇良率

使用產品 (模組)
Moldex3D Advanced
– 進階熱澆道分析模組



×

優勝
宏碁股份有限公司
平板電腦後蓋 – 含玻纖材料於 IMR 薄件成型之澆口沖墨及澆口應力痕的改善





挑戰
平板電腦追求輕薄的使用者感受，而後蓋厚度挑戰薄形設計和材料添加玻璃纖維使後蓋的剛性提昇，並搭配模內裝飾(IMR)製程，對模具澆口發生薄膜沖墨現象和澆口應力痕明顯的外觀瑕疵項目，需要透過澆口設計改善，否則無法進入生產。而主要影響澆口沖墨及澆口應力痕的關鍵因素為融膠剪切應力造成。宏碁使用 Moldex3D 模流分析軟體，針對澆口流道設計進行優化，成功剋服模內飾(IMR)製程，於使用 PC+GF 的材料於澆口沖墨和澆口應力痕明顯的外觀瑕疵問題。

解決方案
以 8 吋平板電腦背蓋產品初始厚度 0.8mm 搭配 IMR 外觀裝飾，發生澆口位置局部沖墨現象 以及澆口處發生明顯的應力痕存在，透過模流分析軟體，進行沖墨象現的解析，及透過 DOE 模組進行澆口改善，以軟體進行疊代驗證，以取代傳統的修模試誤法，以科學論證掌控修模方向，達成節省大量修模次數並壓縮研發週期，提升產品競爭力。

效益
– 解決產品沖墨與應力痕
– 平板下蓋肉厚降低至 0.8mm，減薄近48%
– 產品重量減輕近40%

使用產品 (模組)
Moldex3D eDesign
DOE



×

第三名
堤維西交通工業
解決BMC反射鏡突變肉厚設計的包封問題





挑戰
BMC反射鏡是汽車頭燈關鍵技術零件，其錶面品質需要保持良好，才有利於二次加工錶面電鍍處理。然而，因產品母模面有突變肉厚造型，塑料充填到未端時，發生氣體無法逃竄情形，造成包封問題。堤維西經歷18次試模，仍無法剋服錶面包封問題，同時也面臨訂單出貨的時程壓力。

解決方案
堤維西使用Moldex3D模擬分析軟體分析包封位置，並針對突變肉厚設計以及澆口位置進行局部優化：將突變肉厚儘量以平均肉厚設計，使模穴內的流動能夠達到層流現象；改變澆口位置，調整流動方向，使積風處的空氣能夠順利的排出。最後透過實際試模，證實包封的問題獲得解決。

效益
– 剋服錶面包封問題
– 減少實際試模成本

使用產品 (模組)
Moldex3D Advanced
– Flow



×

第二名
通騰科技(TomTom)
解決玻纖材料之翹曲變形成功案例: 大型連結車衛星導航機車架





挑戰
大型連結車衛星導航車架之前蓋使用尼龍加50%玻纖材質，射出成型過程中遭遇塑件翹曲變形，調整成型參數無法有效掌控變形，採用整形治具後，製程穩定性與良率成為隱憂，與後蓋之組配產生過大的間隙，超出所定義之外觀規範(需小於0.3mm)。

解決方案
通騰科技利用Moldex3D 模流分析探究翹曲變形之貢獻因子，進而優化產品與模具設計有效降低翹曲變形，不僅成功解決產品之組裝與外觀問題，也降低開發期間之修模成本。

效益
– 產品前後蓋組裝間隙從原始2.3mm 降低至小於0.3mm
– 有效改善外觀，且降低螺絲鎖覆力道，減低組裝風險
– 良率也從原先使用整形治具55%提升至92%

使用產品 (模組)
Moldex3D eDesign
– Fiber
– Flow
– Pack
– Cool
– Warp



×

第一名
光寶科技股份有限公司
應用Moldex3D FEA 結合LS-DYNA 改善接觸式影像感測器架翹曲變形問題





挑戰
接觸式影像感測器(CIS)架主要用於固定CIS為主，若設計不當，成品射出後會發生翹曲變型，導致玻璃貼合不確實，影響後續CIS的景深，進而降低影像品質；嚴重時會引起灰塵汙染，造成影像雜點。本案例主要因量產後CIS 架與玻璃組裝後，在運送過程因應力釋放，造成產品有二次變形，導致玻璃與CIS 架產生脫膠問題，希望可以改善產品變形問題，提升產品良率。

解決方案
光寶科技採用Moldex3D 針對CIS架進行分析，瞭解影響變形的成因，藉由分析不同進澆位置，搭配不同溫控，及針對產品進行減膠斷筋處理分析；藉由分析結果比對，瞭解各組分析上的差異。藉由不同組別比較，找出翹曲變形差異最小的一組，將其分析結果藉由Moldex3D FEA 模組匯出至結構分析軟體LS-DYNA裡面去進行玻璃貼合力的驗證分析，瞭解在貼合力上是否有獲得改善。藉由Moldex3D及LS-DYNA兩者搭配進行分析，發現在不增加太多的成本下，可以透過移動澆口與優化射出條件，即可將產品變形降至公差內，符合產品設計規範。

效益
– 減少產品開發週期13%
– 解決了產品變形問題，提升良率至99%
– 解決了產品與玻璃貼膠後脫落的問題

使用產品 (模組)
Moldex3D Advanced
– FEA介面功能模組 (與LS-DYNA整合)
– Flow
– Pack
– Cool
– Warp



×


















Can Moldex3D?
可以整合的CAD?
模擬哪些製程?
可以應用的產業?


產品
Viewer
eDesign
Professional
Advanced
晶片封裝解決方案
Solution Add-on
代理產品


服務支援
專業服務
客戶支援
軟體下載


合作夥伴
全球經銷商
軟體合作夥伴
技術合作夥伴
材料量測合作夥伴


訓練學習
開課資訊
學習資源庫
影音資源區


關於我們
品牌願景
品牌故事
成功案例
新聞專區
電子報
活動專區
人才招募
聯絡資訊





Quick Link: 軟體下載  |  訓練學習  |  線上Demo  |  成功案例  |  人才招募  |  訂閱電子報  |  隱私權聲明
Copyright © 2017  Moldex3D. All rights reserved. Site by DLAB

OurCommunity












請問CPU四核心Q6600和雙核心E8400 | Yahoo奇摩知識+




















 









   ⌂首頁信箱新聞股市名人娛樂氣象運動App下載購物中心商城拍賣更多⋁知識+汽車機車電影字典遊戲旅遊理財房地產時尚美妝折扣城   Yahoo 奇摩知識+                        👤 登入    ✉ 信箱     ⚙ 服務說明    帳號資料 服務說明 意見回報        
















Yahoo奇摩知識+ 首頁











所有分類
 
健康
 
商業與財經
 
娛樂與音樂
 
家居與園藝
 
家庭與人際關係
 
寵物
 
懷孕與育兒
 
政治與政府
 
教育與參考
 
新聞與活動
 
旅遊
 
汽車與交通
 
消費電子產品
 
環境
 
社會科學
 
社會與文化
 
科學
 
美容與造型
 
藝術與人文
 
遊戲與休閒活動
 
運動
 
電腦與網際網路
 
食品與飲料
 
餐廳與小吃
 





世界Yahoo 








阿根廷





澳洲





巴西





加拿大





法國





德國





印度





印尼





義大利





馬來西亞





墨西哥







紐西蘭





菲律賓





魁北克





新加坡





香港





西班牙





泰國





英國與愛爾蘭





美國





越南





西班牙文







關於





關於 Yahoo奇摩知識+
社群指南
排行榜
點數與等級
部落格
如何安全地使用 Yahoo奇摩

 








 電腦與網際網路

 硬體

 附加元件


 看另一則問題 










            請問CPU四核心Q6600和雙核心E8400
        


四核心Q6600和雙核心E8400他們差在哪 價錢又差不多!! 
我朋友用E8400用起來比我Q6600還要順! 
竟然這樣大家就買E8400就好 為啥還要有Q6600ㄋ ??

更新: 
那E8400和Q6600哪ㄍ溫度比較高ㄋ?





 
1 個人正在追蹤 


 
 3 個解答 
3


檢舉不當使用









您確定要刪除此解答嗎？
是
否












 









抱歉，似乎發生一些問題。



Trending Now





 

解答


評分


最新
最舊














最佳解答: 
             E8400 的優點在於他的時脈比較高，但是他的核心數是兩顆；而 Q6600 雖然時脈比較低，但是時脈數有四顆。 
對於一般只用單核心記型計算、評估的程式來說，當然高時脈雙核心會佔優勢！因為他只用到一顆核心，Q6600 的多核心優勢就沒有了～而目前其實很多程式，都還是單執行緒的，也有不少，其實是針對雙核心寫的；因此用四核心的優點其實不見得能發揮。 
但是如果你用的是大量平行化的程式的話，四核心就可以透過工作分散，來贏過雙核心高時脈的 CPU；比如說你如果跑 3D Mark06 的 CPU 測試的話，應該會發現四核心高很多分。 


這方面的評論或許可以參考《平行處理，第一部：CPU 核心》，裡面也有提到： 


就我們所見，跑單、二或四核的 Core 2 處理器的環境之間出現了可觀的效能差異。像《雷神之鎚 4》、《獵魂》或《決戰時刻 2》等常見遊戲，由於未針對多核心處理器最佳化，所以體驗到的差異最小。在愈新的遊戲中，你愈可能受益於雙核或四核處理器，但就目前而言，高時脈速度的雙核是遊戲的最佳 (也是最合理) 選擇。  

像繪圖轉譯 (rendering) 套餐 3DStudio Max、Cinebench 或 Mainconcept H.264 編碼器等專業應用程式，則是恰恰相反的情況－這些程式需要儘可能多的效能，而且它們也已經最佳化，可以善用雙核與四核處理器。這三款程式呈直線延展性，在核心數加倍時的效能也接近加倍。  

SYSmark 2007 預覽版的延展性結果取決於效能測試項目而定：3D 與視訊建立比電子學習與生產力程式，更明顯受益於四核處理器。  

音訊與視訊轉碼 (transcoding) 效能測試明顯受益於第二個核心，但四核心仍不明顯。最後，3DMark06 與 PCMark05 綜合效能測試呈直線延展，這並不令人意外。  

整體上而言，目前的四核處理器世代的確提供了英特爾宣稱的效能潛力，不過目前仍有許多應用程式仍無法善用超過雙核的潛力。我們的結論很簡單：如果你可以稍高出雙核的小價差取得類似時脈的四核，那就放心購買；否則請購買價位較為合理的雙核處理器。 

 2008-04-13 21:08:22 補充： 
Q6600 比較熱。 
不但因為 Q6600 是四顆核心，他也還是 65nm 製成的；相對起來，E8400 雙核心的 45nm 會好上不少。 




 參考資料： 
 


Heresy
 · 9 年前 





0
真讚



0
真遜





檢舉不當使用


意見





 




新增意見











送出












 · 剛才不久













                  發問者的評分
                















 補充回答一的. 

就打個最簡單的比方,兩顆Total 測試上性能相當的 CPU 

1顆是 4核, 1.8Ghz 
1顆是 2核, 2.4Ghz 

當然整體性能上接近,可是若碰到不吃多重處理器的應用軟體(還很多,尤其一堆LKK 軟體) 

對那隻應用程式而言,雙核心處理器其實只有用到 1 顆 , 2.4Ghz 
四核心也是只有用到 1 顆, 1.8Ghz 

因此實際運算上當然是 2.4Ghz 來的比較快. 

 2008-04-13 10:06:48 補充： 
然而若有人講乾脆用單核 3.0G 不是更快?  

可是要有一個觀念就是性能跟時脈取決平衡性,因為即使你的應用軟體只有支援單處理器,可是系統還是可以把剩餘的處理器時間分配給其他程式使用(系統本身內部就有許多程式要運作,如檔案I/O次系統,顯示次系統,網路次系統) 

而這些系統程式若是在單處理器上運作,他就會去瓜分那顆處理器的時間,而造成你那隻應用軟體的運作 delay. 

 2008-04-13 10:06:54 補充： 
早在以前 Pentium 2 時代,雖然很多很多應用軟體都不支援多重處理器,可是平臺實際跑起來就不會ㄎㄟ  ㄎㄟ (頓頓). 

相同的軟體丟到單處理器就是ㄎㄟ 來 ㄎㄟ去,因為系統必須隨時派CPU時間給檔案次系統(尤其若該軟體屬於重度存取硬碟的), 

整個電腦滑鼠幾乎都動不了,視窗也無法切換 

可是雙處理器的系統,滑鼠隨便點,視窗隨便切換都沒問題. 

用雙賽楊(以前的賽楊可以搞雙處理器)組出來的雙處理器系統, 

使用上比 P3-933 單處理器系統還順暢. 

 2008-04-13 10:09:37 補充： 
所以個人認為現在比較有優勢的是雙核處理,除非你要做的工作已經非要榨出處理器所有極限,越多核越好(動態影像處理就很需要,如影像壓縮因為他可以把一條帶子,很多個畫面,切割成很多段同時壓縮轉檔) 

不然四核甚至三核,對一般使用者而言,實在沒太大必要性. 

丟下去的錢,產生出來的漣漪不會讓你有感覺差別.....





陳
 · 9 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久























 用感覺怎麼準 
用途不一樣





快樂做自己
 · 9 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久













 

檢舉不當使用

 我認為此問題違反社群指南 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此問題違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此解答違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此解答違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此意見違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此意見違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消



 

你可能對以下搜尋感興趣：


解決你的網頁設計問題

海外代購超輕鬆

暑假趴趴走輕鬆訂房出遊去

防毒軟體為您抵擋病毒攻擊












發問問題
通常可在幾分鐘內獲得解答！







展開»






詳細資料



詳細資料






現有問題




更多





請多詳述您的問題
上傳處理中




上傳失敗。 請上傳大於 100x100 像素的檔案
目前發生問題，請再試一次。
您只能上傳 PNG、JPG 或 JPEG 等類型的檔案。
您只能上傳 3GP、3GPP、MP4、MOV、AVI、MPG、MPEG 或 RM 等類型的檔案。
您只能上傳不超過 5 MB 的相片。
您只能上傳不超過 600 MB 的影片。
您只能上傳相片 (png, jpg, jpeg) 或影片 (3gp, 3gpp, mp4, mov, avi, mpg, mpeg, rm)。
您只能上傳相片或影片。
影片不應超過 <b>600mb/5 分鐘</b>
相片不應超過 <b>5mb</b>
影片不應超過 <b>600mb/5 分鐘</b>相片不應超過 <b>5mb</b>
  







解答問題


Intel Core2 QUAD Q9550的內顯?



 

請問我最近想換主機板我要怎麼知道我的電腦可不可以換?還有RX460適合的主機板有哪些便宜又大碗的?



 

3.1A旗艦旅充USB 4Port 電源供應器?



 

想煮火鍋料宅配哪裡買.冰品?



 


發燒問題




幫我看看我應該要買哪一種CPU?

                  4 個解答
              

 

CPU E4500跟intel I5 4570 哪個比較好?
他們有什麼差別? GTX980跟GTX1060哪個好有什麼差別? NVIDIA Quadro FX 380 LP 跟GTX1060差在哪呀?
顯卡記憶體要怎麼看呢?

                  3 個解答
              

 

小弟首次組電腦,請問以下的零件有沒有問題?還有用什麼主機板?

                  5 個解答
              

 
更多問題





請問顯卡的6pin線是要自己買嗎 還是裡面會附 型號GeForce GTX 950 GAMING 2G?

             4 個解答
         

 

有關於 時序邏輯 電路的問題。
請問，鎖存器(SR-Latch)是藉由 S 與 R 兩個腳位的狀態來決定輸出Q 的狀態。
那為何不直接決定以一個腳位決定Q的狀態就好，要那麼大費周章?
不好意思，本身非專科系，因此可能問了笨問題，希望我有將問題說清楚，謝謝大家!?

             5 個解答
         

 

請問主機板寫說支援DDR4
那DDR3的記憶體可以裝嗎?

             4 個解答
         

 

  








服務條款


隱私權


RSS















細數雲計算的核心技術-Salesforce - 每日頭條每日頭條細數雲計算的核心技術-Salesforce2017-03-03 由 IT智囊 發表於 科技
...
雲計算的使用場景有很多，例如：IDC雲，企業雲，雲存儲系統，虛擬桌面雲，開發測試雲，大數據處理雲，協作雲，遊戲雲。不同場景使用的核心技術略有不同。下麵我們一起走進Salesforce來看一看他們的雲產品和雲服務
簡介
...
在雲計算方面，Salesforce應該算是業界的領袖了，核心雲產品主要在SaaS和PaaS領域。Force.com是Saleforce的一款PaaS雲產品，主要特點如下：ADVERTISEMENT
強大的定製功能：可以定製UI，工作流和表格等等
完善的開發環境：在可視化角度有自己的Visualforce工具方便地使用拖拽來設計頁面，同時在IDE方面可以使用Eclipse進行快速定製開發
複雜事務和流程支持：使用Apex語言設計和開發複雜的事務和流程
優秀的整合能力：提供對外的服務接口，可以無縫集成其他系統，如：SAP，SharePoint等。
多租戶
...
多租戶是雲計算比較典型的技術，就是單獨軟體實例可以為多個組織服務，對各個組織間進行數據和操作隔離，保證數據安全等等的一種常見的SaaS雲服務模式。軟體需要在設計上對數據和配置信息進行虛擬分區。多租戶說起來相對簡單，在實現上並非易事，需要對軟體架構進行修改，並且對資料庫結構進行特殊設計，同時在安全和隔離性方面要求相對比較高。ADVERTISEMENT
和多用戶的區別：多用戶在於不同用戶擁有不同訪問權限，多租戶實現了虛擬的實例和數據等進行隔離，各個租戶相互不知道其他人的存在，而且完全獨立。
和虛擬化的區別：多租戶和虛擬化很類似，都使用了虛擬的概念。區別在於虛擬化關註在作業系統，而多租戶關註在應用實例。
優缺點：優點是經濟、易於更新和開發、管理方便，同時也有不足之處，技術相對複雜，而且在安全方面要求比較高，也存在很多挑戰，值得我們不斷提高和改進。
三種實現模型：私有表，擴展表和通用表
私有表：最簡單的擴展模式，為每個租戶自定義數據表，優點簡單，但是缺點是高成本的DDL操作，並且在優化難度比較高。
擴展表：和私有表類似，擴展表會被多個租戶共享，比私有表有更高的整合度和優化的可能性，架構上要比私有表複雜，設計成本比較高。
通用表：用於存儲公用的統一的數據信息，存在很多列和空值（稀疏列），在整合和優化方面更高，但是設計和實現難度更大。
所以在多租戶設計和實現過程中，根據實際的業務場景選擇最適合的模型去實現，而且不同的階段合適的模型也不一樣。ADVERTISEMENT
架構
...
POD實際上是一組伺服器集群，通過負載均衡實現來平衡相互之間的工作壓力，應用伺服器是無狀態的請求處理伺服器（http/https）。
總結
其實多租戶的設計和實現遠遠不是短短一篇文章就能夠說清楚的，還有很多設計和實現細節值得我們深入探索。
設計理念：以數據為驅動，實現規模經濟（支持多個租戶），並且保證租戶數據和操作安全，同時要以在業務上滿足客戶的業務需求為前提。所以在實際設計和實現中要進行一定的權衡，從設計、實現、整合以及優化的角度考慮。並且軟體的架構是一個漸進的過程，不能夠一次就達到「彼岸」，所以需要不斷的優化改進去適應業務的需要。
釋放價值，分享知識和經驗，解讀IT前沿和技術。幫助他人，提升自己。更多交流關註公眾號Itboxes(IT智囊)。

相關文章今天我來給虛擬防火牆拍拍磚！2016-06-21最常見的網絡安全產品是什麼？非防火牆莫屬也許古代打仗最有威脅的戰術是火攻，所以人們要高築城牆抵禦這種攻擊。這陣式，豈止是防火？後來，在網絡世界，人們為了防禦來自於外部網絡的各種攻擊，也「築」起了一道牆，這就是網絡防火牆。諾基亞Nuage Networks軟體定義網絡（SDN）助力中國移動邁入公有雲新時代2017-01-10諾基亞所投資的專註於軟體定義網絡（SDN）解決方案的Nuage Networks公司今日宣佈，中國移動（CMCC）已選擇其虛擬化服務平臺（VSP）來落地中國移動首個基於SDN技術的商用公有雲項目。中國移動目前正在迅速擴展其龐大的數據中心網絡及其服務。從定製開發，到多租戶架構 ¦ 看SAAS 的4級成熟度模型2017-02-21公眾號（ID：9z營銷大數據）SaaS的成功，不僅源於其對商業模式的變革，還有賴技術架構上的創新。前者簡言之，是軟體從「產品」到「服務」的思維轉變；後者簡言之，便是伴隨「軟硬體、網絡、系統維護」等重任轉嫁「軟體開發者」所帶來的規模效應的發揮。聽雲APMCon: AWS 雲計算之上Linux實例的優化2016-09-05中國應用性能管理行業盛宴——2016中國應用性能管理大會（簡稱APMCon2016）於8月18日至19日在北京新雲南皇冠假日酒店隆重召開。雲計算的關鍵技術之大規模多租戶技術2015-11-16▶與傳統的軟體運行和維護模式相比，雲計算要求硬體資源和軟體資源能夠更好地共享，具有良好的可伸縮性，任何一個企業用戶都能夠按照自己的需求對SaaS軟體進行客戶化配置而不影響其他用戶的使用。多租戶(Multi一Tenant)技術就是目前雲計算環境中能夠滿足上述需求的關鍵技術。天璣數據與Intel展開深度戰略合作，建立聯合創新研發中心2016-08-20隨著雲計算和大數據時代的到來，基於「軟體定義」的數據中心下一代浪潮正在從根本上改變今天企業IT基礎架構的建設和運行方式。越來越多的企業開始致力於將IT建構在更為開放、靈活的雲環境中，這讓業界看到了這一領域的廣闊前景。用友UAP何冠宇：重新思考雲計算技術2013-11-27雲計算這個時髦的詞彙自從2007年提出來之後，得到了產業界的極力追捧，幾乎涵蓋了IT產業的方方面，覆蓋範圍非常廣，例如IAAS、PAAS、SAAS、移動網際網路、大數據、商業分析等等。SDN和SDS如何影響未來的雲構架2015-05-07使用雲服務——不論是私有雲還是混合雲——的租戶，都希望能夠沿用典型的本地數據中心的控制機制。企業不想放棄虛擬存儲區域網絡(vSAN)、防火牆、訪問控制、管理方式、合規審查等所有這些和安全、控制相關的系統管理權限。淺談SDN和NFV之間的關係2016-11-30一個行業固定設備的折舊周期很長，任何變革的發生都絕非易事，但是網絡卻一次性面臨兩項革新——軟體定義網絡（SDN）和網絡功能虛擬化（NFV），在變革網絡的過程中，二者若想取得成功可能會依賴彼此的技術，或者和諧共處。但是那個點在哪裡是未來需要共同探討的。百度雲磁碟CDS、對象存儲BOS技術深度解析2017-06-27在 BAT 中，百度在公有雲也有很多技術創新。比如 2013 年引起廣泛關註的 ARM 存儲伺服器就是一個很好的例子。最近兩年，百度雲開始發力，其雲存儲體系有諸多創新之處。目前百度雲存儲形成了以塊存儲、對象存儲、文件存儲為核心，VPN/ 專線、數據導入、存儲網關為支撐的產品體系。 Copyright © 2017 / 服務條款 / DMCA / 聯絡我們

Excel 2010 效能：改良效能與限制










































開發人員中心






















https://www.yammer.com/


http://feeds.feedburner.com/office/fmNx













Office 開發



Office 開發




Office 開發

















Office 開發 

Office 增益集 

SharePoint 增益集 

增益集和 Web Apps 的Office UI 工具組 

將增益集和 Web Apps 提交至 Office 市集 

Exchange Server 

Office 365 

Office 用戶端 

OneDrive 開發 

API OneNote 

SharePoint 

Skype 



TOC

 
摺疊目錄
展開目錄




本文件已封存並已停止維護。



本文件已封存並已停止維護。


Excel 2010 效能：改良效能與限制



                Office 2010
            









摘要：本文討論 Microsoft Excel 2010 和 Microsoft Office Excel 2007 中的效能增進。本文是一系列的三篇文章之一，討論關於您在設計和建立工作表時，可以用來增進 Excel 效能的技術。 
如需如何增進 Excel 效能的詳細資訊，請參閱＜Excel 2010 效能：改良計算效能＞及＜Excel 2010 效能：最佳化效能阻礙的秘訣＞。





前次修改時間：  2015年3月9日


適用於：  Excel | Excel 2010 | Office 2010 | SharePoint Server 2010 | VBA


本文內容

Excel 2010 效能增進

Excel 2007 效能增進

結論

關於作者

其他資源



發佈日期：   2010 年 6 月

提供者：  Charles Williams, Decision Models Limited │ Allison Bokone, Microsoft Corporation │ Chad Rothschiller, Microsoft Corporation │ 關於作者

內容




Excel 2010 效能增進




Excel 2007 效能增進




結論




其他資源











Excel 2010 效能增進












以下各節討論在 Excel 2010 中導入，可讓您用來增進效能的一些功能。
功能增進

根據使用者對 Excel 2007 的意見回應，Excel 2010 提出數項功能增進。




功能


增進





印表機和版面配置檢視



為了增進基本使用者互動在版面配置檢視中的效能，例如輸入資料、使用公式或設定邊界，Excel 2010 會快取印表機設定，並導入最佳化的轉譯計算。快取印表機設定可減少網路呼叫，以及減少對緩慢或未回應之印表機的相依性。此外，也可以取消連線至印表機，這樣使用者就不需要等候緩慢或未回應的印表機。





圖表



從 Excel 2010 開始，圖表的轉譯速度加快，尤其是處理大型資料集時，而且文字轉譯效能也增進了。此外，Excel 2010 會快取圖表的圖像，並且在可能的情況下使用快取版本，以避免不必要的計算和轉譯。





VBA 解決方案



與 Excel 2007 相較，在 Excel 2010 中執行時，物件模型的增進及其與 Excel 互動的方式增加了許多 VBA 解決方案的效能速度。




 

大型資料集和 64 位元 Excel

64 位元版 Excel 2010 不像 32 位元應用程式有 2 GB RAM 的限制。因此，64 位元 Excel 2010 可讓使用者建立大很多的活頁簿。64 位元 Windows 啟用較大的可定址記憶體容量，而且 64 位元 Excel 的設計就是要利用該容量。例如，使用者能夠將資料填入比舊版 Excel 更多的方格。當有更多 RAM 新增至電腦，Excel 就會使用該新增的記憶體，以容許愈來愈大的活頁簿，並隨可用的 RAM 數量調整。
此外，因為 64 位元 Excel 啟用較大的資料集，所以 32 位元和 64 位元 Excel 2010 導入了一般大型資料集工作的增進功能，例如輸入和填入資料、排序、篩選，以及複製並貼上資料。在 32 位元和 64 位元版 Excel 中，記憶體使用量也已最佳化，以提升效率。 
如需「大方格」的詳細資訊，請參閱＜Excel 2007中的「大方格」及增加的限制＞。如需 64 位元版 Office 2010 的詳細資訊，請參閱＜32 位元和 64 位元版本的 Office 2010 相容性＞。



圖案

Excel 2010 在 Excel 的圖形效能方面有很大的增進。從高層次來看，這些增進分為兩個領域：擴充性和轉譯。因為工作表上包含大量圖形的關係，擴充性的增進對 Excel 案例有很大的影響。通常這些大量圖形是從網站複製並貼上資料時，或是一般執行自動化建立圖形時，不小心建立的，但從未將其移除。這些大量圖形結合圖形與 Excel 資料格的關係，顯現出幾項獨特的效能挑戰。Excel 2010 的增進，增加了包含許多圖案之工作表的效能速度。此外，從 Excel 2010 開始，對硬體加速的支援也增進了轉譯效能。Excel 2010 也對 VBA 物件模型中 Shape 物件的 Select 方法提供效能增進。




功能


增進





基本使用



Excel 2010 中的第一組效能增進以基本使用案例為主。這些案例包括的作業和功能如排序、篩選、插入或調整列或欄大小、或合併儲存格。當這些作業發生時，可能需要更新方格上的圖形物件位置。在最糟的情況下，還需要更新工作表上的每一個物件。在 Excel 2010 中，即使工作表上有幾千個物件，這些基本案例的效能還是會增進。透過單一功能或修正並不能達到這些增進效能，而是要專註在效能上，包括增進圖案查閱機制、測試重點檔案及研究障礙所在。





文字連結



圖案上的文字連結是在使用者指定公式 (例如 "=A1") 來定義指定圖案的文字時建立的。在含有大量物件的工作表上，及/或對儲存格內容進行變更時，這些特定圖案可能會造成效能問題。從 Excel 2010 開始，Excel 追蹤和更新這些圖案的方式已增進，可最佳化變更儲存格內容的效能。此工作可增進的情況像是在儲存格中輸入新值，或是執行複雜的物件模型作業。





大方格



從 Excel 2007 開始，方格大小就已從 65,000 列擴充至一百萬列。在較大方格的新區域中處理圖形物件時，此擴充會導致一些效能和轉譯問題。從 Excel 2010 開始，Excel 最佳化仰賴使用左上方格做為來源的功能，以增進在方格新區域中處理圖形的效能。相對於 Excel 2007，轉譯的精確度和效能都已增進。





轉譯：硬體加速



從 Excel 2010 開始，新增了在轉譯 3-D 物件時的硬體加速支援，以增進圖形平臺效能。由於 GPU 轉譯這些物件的速度比 CPU 快，所以 Excel 2010 的效能取決於工作表的內容。如果您的工作表中全都是 3-D 圖案，就會比在只有 2-D 圖案的工作表 (不使用 GPU) 上，更能看出硬體加速增進的好處。




 

計算增進

從 Excel 2007 開始，多執行緒計算增進了計算效能。如需詳細資訊，請參閱＜多執行緒計算＞。從 Excel 2010 開始，又有其他效能增進，以進一步增加計算速度。Excel 2010 可以非同步呼叫使用者定義函數。非同步呼叫函數可以讓數項計算作業同時執行，進而增進效能。當您在運算叢集上執行使用者定義函數時，非同步呼叫函數可以使用數台電腦來完成計算。如需非同步使用者定義函數的詳細資訊，請參閱＜Asynchronous User-Defined Functions＞。

多核心處理程序

我們投入更多資源來利用多核心處理器的優勢，以及增加例行工作的效能。從 Excel 2010 開始，下列功能會使用多核心處理器：儲存檔案、開啟檔案、重新整理樞紐分析表 (適用於外部資料來源，但 OLAP 和 SharePoint 除外)、將儲存格資料表排序、將樞紐分析表排序，以及自動調整欄大小。
針對有關讀取和載入或寫入資料的作業，例如開啟檔案、儲存檔案或重新整理資料，將作業分割成兩個程序可增加效能速度。第一個程序會取得資料，而第二個程序會將資料載入記憶體中適當的結構，並將資料寫入檔案。這樣一來，只要第一個程序一開始讀取一部分資料，第二個程序就可以立刻開始載入或寫入該資料，而第一個程序可繼續讀取下一部分的資料。在以前，第一個程序必須完成讀取某區段中的所有資料，第二個程序才能將該區段的資料載入記憶體，或將資料寫入檔案。

PowerPivot

PowerPivot 是指應用程式與服務的集合，提供端對端的方法，在 Excel 活頁簿中建立資料導向、使用者管理的商務智慧解決方案。PowerPivot for Excel 是一種資料分析工具，可以直接在 Excel 中提供無與倫比的計算能力。運用熟悉的 Excel 功能，使用者可以將幾乎任何來源的大量資料，以驚人的速度轉換成有意義的資訊，幾秒內就能取得其所需的答案。
PowerPivot 也與 SharePoint 整合。在 SharePoint 伺服器陣列中，PowerPivot for SharePoint 是伺服器端應用程式、服務與功能的組合，可支援對商務智慧資料的小組共同作業。SharePoint 提供可跨小組及大型組織共同作業及共用商務智慧的平臺。活頁簿作者及擁有者可將其開發的商務智慧發佈至 SharePoint 站台，並加以管理。
如需 PowerPivot 的詳細資訊，請參閱＜PowerPivot Overview＞。

HPC Services for Excel 2010

Excel 2010 具有許多統計分析函數、建構複雜分析的支援、以及廣大的擴充性，是商務資料分析工具的最佳選擇。隨著模型愈來愈大，而活頁簿變得愈來愈複雜，所產生的資訊值也會增加。然而，愈複雜的活頁簿也需要愈多時間來計算。針對複雜的分析，使用者常常會花上幾小時、幾天，甚至幾週的時間來完成這類複雜的活頁簿。
解決方案之一，就是使用 Windows HPC Server 2008，Windows 高效能運算 (HPC) 叢集中的多重節點，平行擴充 Excel 計算。有三種方法可以在 Windows HPC Server 2008 叢集中執行 Excel 2010 計算：在叢集中執行 Excel 活頁簿、在叢集中執行 Excel 使用者定義函數 (UDF)，以及將 Excel 用作叢集服務導向架構 (SOA) 用戶端。如需 HPC Services for Excel 2010 的詳細資訊，請參閱利用 Windows HPC Server 2008 加速 Excel 2010










Excel 2007 效能增進












以下各節將討論 Excel 2007 中所導入，您可以用來增進效能的一些功能。


Excel 2007中的「大方格」及增加的限制

從 Excel 2007 開始，「大方格」將每個工作表的列數上限從 65,536 增加到 1 百萬以上，而欄數從 256 (IV) 增加到 16,384 (XFD)。 
如果您處理大型活頁簿，可能已經發現最近幾個 Excel 版本增加的記憶體容量較常表示您已達到某些其他 Excel 規格限制。從 Excel 2007 開始，Excel 在這些限制中包含許多變更，以配合列和欄容量的大量增加 (其中某些限制也對計算速度有很大的影響)。下列是 Excel 2007 中的限制變更清單：




功能


增進





記憶體



可用於公式及樞紐分析表快取的記憶體，已從 Microsoft Office Excel 2003 中的 1 GB、Microsoft Excel 2002 中的 128 MB 及 Microsoft Excel 2000 中的 64 MB，增加到 2 GB。





智慧重新計算限制



啟用智慧重新計算而非完整計算的相依性限制，現在只受限於可用記憶體，而非相依於單一區域及具相依性之 64,000 個區域的 8,000 個儲存格。





陣列公式



現在容許完整欄參照，而且參照其他工作表的陣列公式數限制從 65,000 增加為可用記憶體。





樞紐分析表



樞紐分析報表中顯示的列數上限為 1 百萬。樞紐分析表中顯示的列數上限為 16,000。單一樞紐欄位中的唯一項目數上限為 1 百萬。[欄位] 清單中顯示的欄位數上限為 16,000。





排序



層級從 3 增加到 64。





自動篩選



下拉式清單長度從 1,000 個項目變更為 10,000 個項目。





公式長度上限



從 1,000 增加到 8,000。





公式巢狀層級



從 7 增加到 64。





函數中的引數



從 30 增加到 255。





每個儲存格的條件化格式



從 3 增加到可用記憶體。





活頁簿中的唯一儲存格樣式



從 4,000 增加到 64,000。





每個活頁簿的唯一色彩



從 56 增加到 43 億。





儲存格中可顯示及列印的字元



增加到 32,000。




 



多執行緒計算

從 Excel 2007 開始，Excel 現在可跨多處理器或核心來分割計算。當 Excel 載入活頁簿時，會從作業系統判斷有多少可用處理器，然後為每處理器各建立一個計算執行緒。然後這些執行緒就可以平行執行。此系統的妙處在於它會隨著處理器數目而擴充。
在具有多核心的系統上，大部分活頁簿都會在計算速度方面顯示大幅增進。增進的幅度取決於活頁簿包含多少獨立計算樹。如果您建立的活頁簿包含一個連續公式鏈，就不會顯示任何多執行緒計算 (MTC) 效能增進，而包含數個獨立公式鏈的活頁簿，則會顯示接近可用處理器數目的增進。
在雙核心系統上使用 Excel 對介於 840K 和 23K 公式之間的活頁簿範圍進行的測試，顯示使用範圍從 1.9 到無增進之 MTC 的增進因素，較大活頁簿的增進似乎最多。 
在與 Intel Corporation 共同合作之下，Microsoft 對一組使用者建立的試算表進行測試，並且在 Excel 2007 與 Excel 2003 之間做比較。(使用 Excel 2007 的發行前版本版本，但是預期與最後版本的差異極小或無差異。)
結果顯示，在雙核心和四核心系統上，計算時間的範圍都是從無增進到優於理論的 (2x/4x) 增進。針對 Intel 雙核心 Pentium 4/速度 3.0 GHz/1 GB RAM 的系統，相較於在 Excel 2003 中的相同檔案計算，一般 (中間) 增進為百分之 48，或加速 1.92x。針對 Intel 四核心 Xeon/速度 3.0 GHz/4 GB RAM 的系統，一般 (中間) 加速百分之 76，或加速 4.17x。在其他處理器和平臺上也觀察到類似的速度增進。增進程度高於理論的加速程度 (因為多執行緒的關係)，要歸功於從 Excel 2007 開始的其他效能增進，例如函數執行速度的增進。
有些 Excel 功能不使用多執行緒計算。例如：


運算列表計算 (但是對資料表的結構化參照的確使用 MTC)。


使用者定義函數 (但是 XLL 函數可以啟用多執行緒)。


XLM 函數。


使用 format2 或 address 選項的 INDIRECT、CELL 函數。


參照樞紐分析表或 Cube 的 GETPIVOTDATA 及其他函數。



Range.Calculate 及 Range.CalculateRowMajorOrder。


循環參照迴圈中的儲存格。


Excel 第一次在具有多個處理器的電腦上計算活頁簿時，您會在 Excel 檢查相依性時，招致一些額外負荷。因此，您可以在第二次及後續的計算中看到最大效能增加 (雖然與在具有單一處理器的同速電腦上所執行的同類工作相較，通常第一次計算還是會有所增進)。
如果您第一次用來計算活頁簿之多處理器電腦的處理器數目，大於您上次用來儲存活頁簿的活頁簿，也會招致此額外負荷。如果您關閉 MTC，或是在具有單一處理器的系統上執行 Excel，並不會因為 MTC 功能造成效能增加或減損。您可以在 Excel 中使用 MTC (甚至是在相容模式下)，而且即使在使用舊版 Excel 來計算和儲存活頁簿之後，還是可以重複使用計算所儲存的資訊。
圖 1. 控制 Excel 中的計算執行緒數目


您可以手動指定要同時執行的執行緒數目。此數可大於電腦上的處理器數目。如果 (例如) 您有 XLL 使用者定義函數，且其仰賴對資料庫伺服器長時間執行的外部呼叫，這會很有用。如果資料庫伺服器可以平行處理多個要求，即使是在單一處理器系統上，您都可以有效率地使用多執行緒。
若要控制多執行緒計算選項，請按一下 [檔案] 索引標籤，然後按一下 [選項]。在 [Excel 選項] 對話方塊中，按一下 [進階]。在 [公式] 區段底下，設定多執行緒計算選項。

增加的記憶體容量及限制

舊版 Excel 對於為智慧重新計算功能追蹤的相依性數目有幾項限制。當您超出這些限制時，Excel 一律會進行完整計算，而且狀態列會顯示 [計算]。
從 Excel 2007 開始，這些限制都已移除。受制於整體 2-GB Windows 記憶體限制，大型 Excel 活頁簿一律可以使用智慧重新計算，通常其計算速度會比完整計算快很多。

Workbook.ForceFullCalculation

您可以使用 Excel 物件模型，以程式設計方式設定新的活頁簿屬性 Workbook.ForceFullCalculation。當此屬性設為 True 時，不會在開啟時載入相依性，而且活頁簿的每個計算都是完整計算。
如果您的活頁簿有很多複雜的相依性，以致於在活頁簿開啟時載入相依性會花很長的時間，或是重新計算的時間比完整計算還長，則您可以使用此屬性來強制 Excel 略過載入相依性的程序，而一律使用完整計算。

SUMIFS、COUNTIFS 及 AVERAGEIFS

從 Excel 2007 開始，Excel 有三個新函數可讓您利用多項準則來用於 SUM、COUNT 或 AVERAGE。在舊版 Excel 中，您必須使用計算緩慢、難以理解的陣列公式或 SUMPRODUCT 來使用多項準則。新函數的設計可讓您輕鬆使用及快速計算。


VBA




複製




SUMIFS(sum_range, criteria_range1, criteria1 [,criteria_range2, _
    criteria2...])
COUNTIFS(criteria_range1, criteria1 [,criteria_range2, criteria2...])
AVERAGEIFS(average_range, criteria_range1, criteria1 _
    [,criteria_range2, criteria2...])




這些函數會利用特殊的空儲存格處理技術，有效率地處理完整欄參照 ($A:$A)。評估文字儲存格的準則可以使用萬用字元 (*) (任何字元組合) 及 (?) (任何單一字元)。因為這些函數的計算速度比同等陣列公式快這麼多，所以請儘可能用它們來取代陣列公式。
IFERROR

下列 IFERROR 函數會簡化並加速錯誤檢查。


VBA




複製




IFERROR(Formula, value_if_error)




在舊版 Excel 中，常會看到因為重複公式而導致公式發生錯誤。


VBA




複製




=IF(ISERROR(VLOOKUP("Charles",$A$1:$C$10000,3,False),"NotFound", _ VLOOKUP("Charles",$A$1:$C$10000,3,False))




使用此公式時 (如果 VLOOKUP 中沒有發生錯誤)，Excel 會執行兩次。從 Excel 2007 開始，您可以使用 IFERROR 來避免此重複計算時間。


VBA




複製




=IFERROR(VLOOKUP("Charles",$A$1:$C$10000,3,False),"NotFound")





名稱資料表及結構化參照

Excel 2007 導入名稱資料表，用以定義公式及資料的區塊。您可以使用結構化參照 (如 Sales[2004])，更輕鬆地以公式來參照名稱資料表及其欄，以參照 Sales 資料表中的 2004 欄，而不是普通的 Excel 參照 (如 C2:C50)。
使用此技術的主要優點是，對資料表的參照會隨著您新增資料至資料表的列和欄而自動調整。使用結構化參照會比使用動態範圍有效率，因為它不會將動態函數 (如 OFFSET) 與計數函數 (如 COUNTA) 牽連在一起。另一個優點是，一個工作表上可以有多個名稱資料表，而且您可以在每個名稱資料表上使用 [自動篩選]。
如果您目前使用陣列公式，請儘可能嘗試使用結構化參照，以減少陣列公式中計算的儲存格數目。

使用者定義函數

從 Excel 2007 開始，所有使用者定義函數 (無論用來開發的語言和增益集方法為何) 現在都可以支援 Excel 2007 中增加的限制。其中包括函數引數和「大方格」的數目。當程式碼假設上限為 256 欄或 65,536 列時，要完整支援「大方格」可能就需要變更使用者定義函數，此外，可能需要變更 XLL，才能支援新的 Excel C API。
能夠利用多執行緒計算的唯一一種使用者定義函數，就是 XLL。藉由更新 XLL 函數來進行多執行緒重新計算，可以讓您的 XLL 在不同執行緒上同時執行。所有其他使用者定義函數 (未更新以在多執行緒上運作的 VBA、自動增益集、XLM 函數及 XLL) 一律在主要執行緒上執行，所以無論使用多少處理器或執行緒，都只能一次執行一項。
從 Excel 2007 開始，Excel 有了更新的 C API，可為下列功能提供支援：


「大方格」。


多執行緒計算。


其他函數引數。


若要使用這些新功能，您必須更新 XLL 函數。如需詳細資訊，請參閱＜Developing Excel 2010 XLLs＞。如果您不更新增益集函數，它們就會繼續運作，但無法使用 Excel 2007 中導入的新功能。

範圍計算

從 Excel 2007 開始，Excel 有兩個 Range 計算方法。執行這些計算方法並沒有標準的使用者介面；您必須使用 VBA 或某些其他程式設計語言來呼叫它們。當您只想計算一小個儲存格區塊，並將所有其他公式保留不變時，這些方法很有用。
Range.Calculate


Range.Calculate 會以一次一列、由左至右、由上至下的方式來計算範圍，然後解析該範圍內的所有相依性。這是 Excel 2002 和 Excel 2003 所使用的相同方法，只是已改良為可在手動模式下處理反覆運算。

Range.CalculateRowMajorOrder


Range.CalculateRowMajorOrder 會以一次一列、由左至右、由上至下的方式來計算範圍，但會完全忽略所有相依性。這是 Microsoft Excel 97 及 Excel 2000 所使用的相同方法。因為 CalculateRowMajorOrder 不會嘗試解析相依性，所以通常會比 Range.Calculate 快很多。
如果您可以確定整個公式區塊的任何相依性一律反向參照儲存格至左邊或上方，則 Range.CalculateRowMajorOrder 可以是單一處理器系統上 Excel 中最快的計算方法。

Range.CalculateRowMajorOrder 是 Excel 中效能最佳化的最有效工具之一，因為您可以用它來計時及比較不同公式的計算速度，並忽略相依性的作用。


Excel Services

從 Excel 2007 開始，Excel Services 是包含在 SharePoint Server 中的新伺服器技術。您可以使用 Excel Services，將耗時的計算從桌面卸載至更強大 (且昂貴) 的伺服器。在八核心伺服器上使用多執行緒計算可以獲得主要效能增進。如需 Excel Services 的詳細資訊，請參閱＜Creating Custom Solutions With Excel Services＞。










結論












Excel 2010 及 Excel 2007 在數個領域導入效能和限制的增進，從個別功能和物件模型的增進，到多執行緒計算和多核心處理的導入。從 Excel 2010 開始，64 位元版 Excel 可讓使用者處理甚至更大的資料集。PowerPivot 在 Excel 2010 中提供完善的資料分析工具，而 HPC Services for Excel 2010 可讓使用者將活頁簿或 UDF 卸載至 Windows 高效能運算叢集。這些增進全都可以讓 Excel 和硬體一起擴充，隨著電腦的 CPU 和 RAM 容量擴充增進效能。









關於作者












Charles Williams 在 1996 年成立 Decision Models，提供進階諮詢、決策支援解決方案，以及以 Microsoft Excel 和關聯式資料庫為基礎的工具。Charles 是 FastExcel (廣泛使用的 Excel 效能分析工具及效能工具集) 的作者，以及 Name Manager (用來管理定義名稱的熱門公用程式) 的共同作者。如需 Excel 計算效能及方法、記憶體使用量及 VBA 使用者定義函數的詳細資訊，請瀏覽 Decision Models 網站。
此技術文章是與 A23 Consulting 共同製作。
Allison Bokone (Microsoft Corporation) 是 Office 小組的程式設計師。
Chad Rothschiller (Microsoft Corporation) 是 Office 小組的程式經理。









其他資源












如需 Excel 2010 的詳細資訊，請參閱下列資源：




Excel 2010 效能：改良計算效能






Excel 2010 效能：最佳化效能阻礙的秘訣





Excel 開發人員入口網站




部落格：Microsoft Excel 2010











顯示:

受繼承
        

受保護
        







列印

匯出 (0)
            







列印

分享
            













本文內容



















本頁對您有幫助嗎？
是
否





其他意見反應？


剩餘 1500 個字元

提交
略過此項







謝謝！
我們非常感謝您提供的意見反應。



















            本頁對您有幫助嗎？
        

            您對此內容的意見反應十分重要。請告訴我們您的想法。
        

是
否





            其他意見反應？
        



                剩餘 1500 個字元
            

提交
略過此項





            謝謝！
        

            我們非常感謝您提供的意見反應。
        













社群資源


O365 Technical Network


MSDN 論壇


UserVoice


堆疊溢位










關註我們


Twitter


Facebook


Office 開發部落格









© 2017 Microsoft


台灣 - 繁體中文





使用規定


商標


隱私權聲明










© 2017 Microsoft










多執行緒和 Excel 中的記憶體爭用








































開發人員中心






















https://www.yammer.com/


http://feeds.feedburner.com/office/fmNx











Excel XLL sdk (英文)
開發 Excel 2013 xll (英文)

多執行緒及記憶體管理





多執行緒及記憶體管理
多執行緒和 Excel 中的記憶體爭用




多執行緒和 Excel 中的記憶體爭用




多執行緒和 Excel 中的記憶體爭用

















在 Excel 中的記憶體管理 

多執行緒和 Excel 中的記憶體爭用 

在 Excel 中的多執行緒重算 



TOC

 
摺疊目錄
展開目錄




本文件已封存並已停止維護。







本文為機器翻譯文章。如需檢視英文版，請選取 [原文] 核取方塊。您也可以將滑鼠指標移到文字上，即可在快顯視窗顯示英文原文。



譯文


原文





本文件已封存並已停止維護。


多執行緒和 Excel 中的記憶體爭用



                Office 2013 和更新版本 
            







前次修改時間:2011年7月1日


適用於:Excel 2013 | Office 2013 | Visual Studio



稍早版本的 Microsoft Excel Excel 2007比使用單一往來書信時的所有工作表進行計算。不過，從Excel 2007，Excel 可以設定為使用介於 1 到 1024年並行執行緒工作表計算。多處理器或多核心電腦上，預設的執行緒數目等於處理器或核心數目。因此，安全執行緒，儲存格只包含函數之執行緒安全，可以是以分配給並行執行緒，可能隨時需要計算後其前導參照的一般的重新計算邏輯。








安全執行緒函數














大部分的啟動Excel 2007中的內建的工作表函數是安全執行緒。您也可以撰寫和登錄為安全執行緒 XLL 函數。Excel 會使用一個執行緒 (其主要執行緒)，呼叫所有命令、 執行緒不安全的功能、 xlAuto函數 (除了xlAutoFree和xlAutoFree12) 和 COM 及 Visual Basic for Applications (VBA) 函數。




其中一個 XLL 函數會傳回XLOPER或XLOPER12xlbitDLLFree設定，Excel 會使用相同的執行緒函數呼叫上次進行呼叫xlAutoFree或xlAutoFree12。xlAutoFree或xlAutoFree12撥打之前下一個函數呼叫的執行緒上。




XLL 開發人員有建立安全執行緒功能的優點：






它們可進行最多處理器或多核心電腦的 Excel。






他們敞開學習遠端伺服器更有效率地使用比您可以選擇在其中使用單一往來書信時。






假設您已設定要使用，假設N執行緒的單一處理器電腦已。假設已執行讓大量的 XLL 函數呼叫，以開啟將要求傳送至遠端伺服器或伺服器的叢集執行計算或資料的試算表。受限於相依性樹狀目錄的拓撲，Excel 無法幾乎同時呼叫函數 N 時間。提供的伺服器都會足以 fast 或平行，無法藉由減少試算表的重新計算時間為 1/N 因數更加




撰寫安全執行緒函數的重要問題正確處理資源爭用。這通常是表示記憶體爭用，它可以分為兩個問題：






如何建立您知道的記憶體只會使用此執行緒。






如何確保共用的記憶體由多執行緒中安全地存取。






最先感知是在 XLL 為何記憶體是存取所有執行緒功能只可供目前正在執行的執行緒存取。





存取所有的執行緒







變數、 結構，以及類別執行個體宣告外之函數的主體。






靜態之函數的內文中所宣告的變數。






在下列兩種情況下，記憶體為預留的 DLL 記憶體區塊建立 DLL 的執行個體中。如果另一個應用程式執行個體載入 DLL，以便從這些資源外此執行個體的 DLL 沒有爭用情形會取得它自己的記憶體的位置。





只能透過目前的執行緒可供存取







自動函式 (包括函數引數) 的程式碼內的變數。






在此例中記憶體為預留上的每個執行個體函數呼叫堆疊。







註意事項






動態記憶體的範圍，取決於它會指向指標的範圍： 如果將滑鼠指標是存取所有執行緒，也是記憶體。如果將滑鼠指標是函數中的自動變數，記憶體為有效私人該執行緒。













只能由一個執行緒可存取的記憶體： 執行緒本機記憶體














假設之函數的內文中的靜態變數可存取的所有執行緒，使用這些功能不清楚執行緒安全。當另一個執行個體上另一個執行緒會假定它完全不同的某個項目，一個執行個體上一個執行緒函數無法變更的值。




有兩個原因宣告靜態變數內函數：






靜態資料無法從一個呼叫下一步]。






此函數可以安全地傳回靜態資料指標。






但如果是第一個原因而可能會想要有的資料，依然存在，並有意義的所有呼叫函數： 或許簡單計數器，每次任何的執行緒上呼叫此函數會遞增或在每次呼叫收集使用狀況與效能資料結構。問題是如何保護共用的資料或資料結構。最佳做法是使用關鍵] 區段中下, 一節說明如下。




如果資料預定僅用於此執行緒，這可能是原因 1 大小寫，且永遠都是原因 2 的大小寫，問題是如何建立依然存在，但只會從這個執行緒存取的記憶體。一個解決方案是使用的執行緒本機存放區 (TLS) API。




例如，請考慮函數，會傳回XLOPER的指標。




C#




複製




LPXLOPER12 WINAPI mtr_unsafe_example(LPXLOPER12 pxArg)
{
    static XLOPER12 xRetVal; // memory shared by all threads!!!
// code sets xRetVal to a function of pxArg ...
    return &xRetVal;
}




此函數不安全執行緒，因為一個執行緒可以傳回靜態XLOPER12 ，而另一個覆寫它。這種情形發生可能性大於仍如果XLOPER12需要傳遞至xlAutoFree12。一個解決方案是配置XLOPER12、 返回指標及實作xlAutoFree12 ，以便釋放XLOPER12記憶體本身擷取。這個方法用於許多在 Excel 中的記憶體管理所示的範例函數。


C#




複製




LPXLOPER12 WINAPI mtr_safe_example_1(LPXLOPER12 pxArg)
{
// pxRetVal must be freed later by xlAutoFree12
    LPXLOPER12 pxRetVal = new XLOPER12;
// code sets pxRetVal to a function of pxArg ...
    pxRetVal->xltype |= xlbitDLLFree; // Needed for all types
    return pxRetVal; // xlAutoFree12 must free this
}




這個方法會更容易實作比依賴 TLS API，[下一步] 區段中所述的方法，但有一些缺點。首先，Excel 必須先呼叫xlAutoFree/xlAutoFree12傳回XLOPER列傳的類型 /XLOPER12。其次，有問題時傳回XLOPER/XLOPER12s 所呼叫的 C API 回呼函數的傳回值。XLOPER/XLOPER12可能會指向釋放 Excel，但XLOPER的所需的記憶體 /XLOPER12本身必須釋放所配置的方式相同。如果這類XLOPER/XLOPER12是做為 XLL 工作表函數的傳回值，沒有簡單方法，通知xlAutoFree/xlAutoFree12的需要兩個指標空閒適當的方式。(設定xlbitXLFree和xlbitDLLFree無法解決問題，如XLOPER/XLOPER12s在 Excel 中使用這兩個集的處理方式未定義，並可能會變更版本對版本。)若要解決此問題，XLL 可以進行所有 Excel 配置XLOPER/XLOPER12s ，則會傳回至工作表的深層的複本。解決方案，可以避免這些限制會填入及傳回執行緒本機XLOPER/XLOPER12，必須該xlAutoFree/xlAutoFree12方法不釋放XLOPER/XLOPER12指標本身擷取。


C#




複製




LPXLOPER12 get_thread_local_xloper12(void);

LPXLOPER12 WINAPI mtr_safe_example_2(LPXLOPER12 pxArg)
{
    LPXLOPER12 pxRetVal = get_thread_local_xloper12();
// Code sets pxRetVal to a function of pxArg setting xlbitDLLFree or
// xlbitXLFree as required.
    return pxRetVal; // xlAutoFree12 must not free this pointer!
}





下一個問題是如何設定及擷取執行緒本機記憶體中，如何換句話說，在前一個範例中實作函數get_thread_local_xloper12 。作法是使用執行緒本機存放區 」 (TLS) API。第一個步驟是使用TlsAlloc，必須最終要發行使用TlsFree取得 TLS 索引。同時最佳已完成從DllMain。


C#




複製




// This implementation just calls a function to set up
// thread-local storage.
BOOL TLS_Action(DWORD Reason); // Could be in another module

BOOL WINAPI DllMain(HINSTANCE hDll, DWORD Reason, void *Reserved)
{
    return TLS_Action(Reason);
}

DWORD TlsIndex; // Module scope only if all TLS access in this module

BOOL TLS_Action(DWORD DllMainCallReason)
{
    switch (DllMainCallReason)
    {
    case DLL_PROCESS_ATTACH: // The DLL is being loaded.
        if((TlsIndex = TlsAlloc()) == TLS_OUT_OF_INDEXES)
            return FALSE;
        break;

    case DLL_PROCESS_DETACH: // The DLL is being unloaded.
        TlsFree(TlsIndex); // Release the TLS index.
        break;
    }
    return TRUE;
}




取得索引之後下, 一步是為每個執行緒配置記憶體區塊。Windows 開發文件建議這麼做，每次DllMain回呼函數呼叫與DLL_THREAD_ATTACH事件，並釋放上每個DLL_THREAD_DETACH的記憶體。不過，遵循此建議將會導致執行不必要的工作的重新計算的未使用的執行緒 DLL。但是，最好是使用配置在首次使用策略。首先，您必須定義您想要為每個執行緒配置結構。傳回XLOPERs或XLOPER12s的上一個範例，下列滿足，但是您可以建立滿足您的需求任何結構。


C#




複製




struct TLS_data
{
    XLOPER xloper_shared_ret_val;
    XLOPER12 xloper12_shared_ret_val;
// Add other required thread-local data here...
};




下列函數取得指標的執行緒本機執行個體，或將其中一個配置，如果這是第一次呼叫。


C#




複製




TLS_data *get_TLS_data(void)
{
// Get a pointer to this thread's static memory.
    void *pTLS = TlsGetValue(TlsIndex);
    if(!pTLS) // No TLS memory for this thread yet
    {
        if((pTLS = calloc(1, sizeof(TLS_data))) == NULL)
        // Display some error message (omitted).
            return NULL;
        TlsSetValue(TlsIndex, pTLS); // Associate with this thread
    }
    return (TLS_data *)pTLS;
}




現在您可以查看如何取得執行緒本機XLOPER/XLOPER12記憶體： 首先，您取得指標TLS_data，執行緒的執行個體，然後您會回到指標XLOPER/XLOPER12包含內，，如下所示。


C#




複製




LPXLOPER get_thread_local_xloper(void)
{
    TLS_data *pTLS = get_TLS_data();
    if(pTLS)
        return &(pTLS->xloper_shared_ret_val);
    return NULL;
}

LPXLOPER12 get_thread_local_xloper12(void)
{
    TLS_data *pTLS = get_TLS_data();
    if(pTLS)
        return &(pTLS->xloper12_shared_ret_val);
    return NULL;
}






mtr_safe_example_1和mtr_safe_example_2函數可以登錄為安全執行緒工作表函數，當您執行 Excel。不過，您不能混合中一個 XLL 這兩種方法。您 XLL 只可以匯出一個實作xlAutoFree和xlAutoFree12，及每個記憶體策略需要以不同的方法。使用mtr_safe_example_1，傳遞至xlAutoFree/xlAutoFree12指標必須釋放以及其指向任何資料。使用mtr_safe_example_2，應釋放僅指向的資料。Windows 也會提供函數GetCurrentThreadId，它會傳回目前的執行緒唯一整個系統的識別碼。這會提供開發人員與另一種方式，讓程式碼執行緒安全，或將其行為執行緒特定。






只能由多個執行緒可存取的記憶體： 重要區段














您應該保護使用關鍵章節的多個執行緒的可存取的讀取/寫入記憶體。您需要名為關鍵] 區段中每個區塊的您想要保護的記憶體。您可以初始化期間呼叫xlAutoOpen函數，這些和釋出其xlAutoClose函數呼叫期間將其設為 null。則您需要包含每個存取內呼叫EnterCriticalSection和LeaveCriticalSection一對受保護的區塊。任何時候只有一個執行緒允許將 [要徑] 區段中。以下是範例初始化、 未初始化及使用呼叫g_csSharedTable一節。




C#




複製




CRITICAL_SECTION g_csSharedTable; // global scope (if required)
bool xll_initialised = false; // Only module scope needed

int WINAPI xlAutoOpen(void)
{
    if(xll_initialised)
        return 1;
// Other initialisation omitted
    InitializeCriticalSection(&g_csSharedTable);
    xll_initialised = true;
    return 1;
}

int WINAPI xlAutoClose(void)
{
    if(!xll_initialised)
        return 1;
// Other cleaning up omitted.
    DeleteCriticalSection(&g_csSharedTable);
    xll_initialised = false;
    return 1;
}

#define SHARED_TABLE_SIZE 1000 /* Some value consistent with the table */

bool read_shared_table_element(unsigned int index, double &d)
{
    if(index >= SHARED_TABLE_SIZE) return false;
    EnterCriticalSection(&g_csSharedTable);
    d = shared_table[index];
    LeaveCriticalSection(&g_csSharedTable);
    return true;
}

bool set_shared_table_element(unsigned int index, double d)
{
    if(index >= SHARED_TABLE_SIZE) return false;
    EnterCriticalSection(&g_csSharedTable);
    shared_table[index] = d;
    LeaveCriticalSection(&g_csSharedTable);
    return true;
}




另一個、 甚至更安全方式來保護記憶體區塊是建立自己的CRITICAL_SECTION其建構函式、 編寫解構函數，會包含一個類別，以及 accessor 方法需要註意的用途。這個方法的優點是新增的保護之前xlAutoOpen執行時，或倖免於呼叫xlAutoClose之後, 可能會初始化的物件，但是您應謹慎建立太多重要章節與作業系統額外負荷，這會建立。當您同時需要存取多個區塊的受保護的記憶體的程式碼時，您需要非常謹慎考慮要徑各節會進入和離開的順序。例如，下列兩個函數無法建立死結。


C#




複製




// WARNING: Do not copy this code. These two functions
// can produce a deadlock and are provided for
// example and illustration only.
bool copy_shared_table_element_A_to_B(unsigned int index)
{
    if(index >= SHARED_TABLE_SIZE) return false;
    EnterCriticalSection(&g_csSharedTableA);
    EnterCriticalSection(&g_csSharedTableB);
    shared_table_B[index] = shared_table_A[index];
// Critical sections should be exited in the order
// they were entered, NOT as shown here in this
// deliberately wrong illustration.
    LeaveCriticalSection(&g_csSharedTableA);
    LeaveCriticalSection(&g_csSharedTableB);
    return true;
}

bool copy_shared_table_element_B_to_A(unsigned int index)
{
    if(index >= SHARED_TABLE_SIZE) return false;
    EnterCriticalSection(&g_csSharedTableB);
    EnterCriticalSection(&g_csSharedTableA);
    shared_table_A[index] = shared_table_B[index];
    LeaveCriticalSection(&g_csSharedTableA);
    LeaveCriticalSection(&g_csSharedTableB);
    return true;
}




如果同時在另一個執行緒上的第二個進入g_csSharedTableB一的執行緒上的第一個函數就會進入g_csSharedTableA ，這兩個執行緒停止回應。正確的方法是輸入一致的順序，並結束相反順序，如下所示。


C#




複製




    EnterCriticalSection(&g_csSharedTableA);
    EnterCriticalSection(&g_csSharedTableB);
    // code that accesses both blocks
    LeaveCriticalSection(&g_csSharedTableB);
    LeaveCriticalSection(&g_csSharedTableA);




請儘可能，最好是從執行緒共同作業的觀點來看隔離存取相異區塊，如下所示。


C#




複製




bool copy_shared_table_element_A_to_B(unsigned int index)
{
    if(index >= SHARED_TABLE_SIZE) return false;
    EnterCriticalSection(&g_csSharedTableA);
    double d = shared_table_A[index];
    LeaveCriticalSection(&g_csSharedTableA);
    EnterCriticalSection(&g_csSharedTableB);
    shared_table_B[index] = d;
    LeaveCriticalSection(&g_csSharedTableB);
    return true;
}




其中有許多的共用資源，例如經常短時間存取權要求、 爭用您應該考慮使用 [要徑] 區段中的功能來微調。這是一種技術，讓等候較少大量處理器資源。為達成此目的，您可以使用任一InitializeCriticalSectionAndSpinCount時初始化區段或SetCriticalSectionSpinCount一次初始化設定執行緒會之前等待的資源，可供使用的次數。等待作業是昂貴，，因此旋轉情況下避免此資源會同時釋放。在單一處理器系統上，有效地忽略微調計數，但您仍然可以指定它而不需要執行任何傷害。記憶體堆積管理員使用 4000 微調計數。如要徑區段的使用需詳細資訊，請參閱 ＜ Windows SDK 文件。






請參閱












概念


在 Excel 中的記憶體管理




在 Excel 中的多執行緒重算




增益集管理員及 XLL 介面函數










顯示:

受繼承
        

受保護
        







列印

匯出 (0)
            







列印

分享
            













本文內容



















本頁對您有幫助嗎？
是
否





其他意見反應？


剩餘 1500 個字元

提交
略過此項







謝謝！
我們非常感謝您提供的意見反應。



















            本頁對您有幫助嗎？
        

            您對此內容的意見反應十分重要。請告訴我們您的想法。
        

是
否





            其他意見反應？
        



                剩餘 1500 個字元
            

提交
略過此項





            謝謝！
        

            我們非常感謝您提供的意見反應。
        













社群資源


O365 Technical Network


MSDN 論壇


UserVoice


堆疊溢位










關註我們


Twitter


Facebook


Office 開發部落格









© 2017 Microsoft


台灣 - 繁體中文





使用規定


商標


隱私權聲明










© 2017 Microsoft








