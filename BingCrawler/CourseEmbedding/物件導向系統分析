


物件導向程式設計 - 維基百科，自由的百科全書






























 







物件導向程式設計

維基百科，自由的百科全書


					前往：					導覽，					搜尋












中國大陸
面向對象程序設計


臺灣
物件導向程式設計


港澳
物件導向程式設計


物件導向程式設計（英語：Object-oriented programming，縮寫：OOP）是種具有物件概念的程式編程典範，同時也是一種程式開發的抽象方針。它可能包含資料、屬性、程式碼與方法。物件則指的是類別的例項。它將物件作為程式的基本單元，將程式和資料封裝其中，以提高軟體的重用性、靈活性和擴充功能性，物件裡的程式可以存取及經常修改物件相關連的資料。在物件導向程式編程裡，電腦程式會被設計成彼此相關的物件[1][2]。
物件導向程式設計可以看作一種在程式中包含各種獨立而又互相呼叫的物件的思想，這與傳統的思想剛好相反：傳統的程式設計主張將程式看作一系列函式的集合，或者直接就是一系列對電腦下達的指令。物件導向程式設計中的每一個物件都應該能夠接受資料、處理資料並將資料傳達給其它物件，因此它們都可以被看作一個小型的「機器」，即物件。目前已經被證實的是，物件導向程式設計推廣了程式的靈活性和可維護性，並且在大型專案設計中廣為應用。此外，支持者聲稱物件導向程式設計要比以往的做法更加便於學習，因為它能夠讓人們更簡單地設計並維護程式，使得程式更加便於分析、設計、理解。反對者在某些領域對此予以否認。
當我們提到物件導向的時候，它不僅指一種程式設計方法。它更多意義上是一種程式開發方式。在這一方面，我們必須瞭解更多關於物件導向系統分析和物件導向設計（Object Oriented Design，簡稱OOD）方面的知識。許多流行的程式語言是物件導向的,它們的風格就是會透由物件來創出實例。
重要的物件導向程式語言包含Common Lisp、Python、C++、Objective-C、Smalltalk、Delphi、Java、Swift、C#、Perl、Ruby 與 PHP等。



目錄


1 特徵

1.1 分享非物件導向程式前身語言
1.2 類別與物件
1.3 動態配置與訊息傳遞機制
1.4 封裝性
1.5 繼承
1.6 多型
1.7 抽象性


2 歷史
3 物件導向編程語言

3.1 腳本中的OOP


4 參見
5 參考文獻
6 延伸閱讀
7 外部連結



特徵[編輯]
物件導向程式編程的定義是使用「物件」來做設計，但並非所有的程式語言都直接支援「物件導向程式編程」相關技術與結構。對於OOP的準確定義及其本意存在著不少爭論。通常，OOP被理解為一種將程式分解為封裝資料及相關操作的模組而進行的編程方式。有別於其它編程方式，OOP中的與某資料類別型相關的一系列操作都被有機地封裝到該資料類別型當中，而非散放於其外，因而OOP中的資料類別型不僅有著狀態，還有著相關的行為。
OOP理論，及與之同名的OOP實踐相結合創造出了新的一個編程架構；OOP思想被廣泛認為是非常有用的，以致一套新的編程典範被創造了出來。（其它的編程典範例如函數語言程式設計或程序式編程專註於程式執行的過程，而邏輯編程專註於引發程式代碼執行的斷言）。對面向模擬系統的語言（如：SIMULA 67）的研究及對高可靠性系統架構（如：高效能作業系統和CPU的架構）的研究最終導致了OOP的誕生。其中由Deborah J. Armstrong進行的長達40年之久的電腦著作調查中，顯示出了一系列物件導向程式設計的基本理論。物件導向程式特徵被條列如下[3][4][5][6]
分享非物件導向程式前身語言[編輯]
物件導向程式設計通常共享高階編程語言的低階功能。可用於建構一個程式的基本工具包括：

變數 能儲存一些內建型態的資訊如整數與字元，也有些是資料結構像是字串、串列與雜湊表等包含內建或複合的變數如指標。
程式：也稱為函式、方法或常式，是指輸入資料產生輸出結果，現代語言還包含結構化編程結構如程式迴圈與條件。

類別與物件[編輯]
支援物件導向編程語言通常利用繼承其他類別達到代碼重用和可擴展性的特性。而類別有兩個主要的概念：

類別（Class）：定義了一件事物的抽象特點。類別的定義包含了資料的形式以及對資料的操作。
物件：是類別的實例。

其中類別別（Class）定義了一件事物的抽象特點。類別的定義包含了資料的形式以及對資料的操作。舉例來說，「狗」這個類別會包含狗的一切基礎特徵，即所有「狗」都共有的特徵或行為，例如它的孕育、毛皮顏色和吠叫的能力。類別可以為程式提供模版和結構。一個類別的方法和屬性被稱為「成員」。 我們來看一段虛擬碼：

類別 狗
開始
    公有成員:
        吠叫():
    私有成員:
        毛皮顏色:
        孕育:
結束


在這串代碼中，我們聲明瞭一個類別，這個類別具有一些狗的基本特徵。關於公有成員和私有成員，請參見下麵的繼承性一節。
物件（Object）是類別的例項。物件有時會對應到現實世界中的事物，舉例來說，一個圖形程式可能有圓形、矩形與畫面等物件，一個線上購物系統可能有購物車、顧客與產品等類別。[7]。有時物件會表示更抽象的實體，比如一個被開啟的檔案或是一個提供美國慣用量測轉換的服務。每個物件就是一個特定類別的實例（例如，名稱是「瑪麗」的物件可能是類別雇員的一個實例）。程式在物件導向編程當中被視為方法，變數被視為成員或屬性。例如，「狗」這個類別列舉狗的特點，從而使這個類別定義了世界上所有的狗。而萊絲這個物件則是一條具體的狗，它的屬性也是具體的。狗有皮毛顏色，而萊絲的皮毛顏色是棕白色的。因此，萊絲就是狗這個類別的一個例項。一個具體物件屬性的值被稱作它的「狀態」。（系統給物件分配記憶體空間，而不會給類別分配記憶體空間。這很好理解，類別是抽象的系統不可能給抽象的東西分配空間，而物件則是具體的。）
假設我們已經在上面定義了狗這個類別，我們就可以用這個類別來定義物件：

定義萊絲是狗
萊絲.毛皮顏色:棕白色
萊絲.吠叫()

我們無法讓狗這個類別去吠叫，但是我們可以讓物件「萊絲」去吠叫，正如狗可以吠叫，但沒有具體的狗就無法吠叫。
類別和物件就好比是「實型」和「1.23」，「實型」是一種資料的類別型，而「1.23」是一個真正的「實數」（即物件）。所有的「實數」都具有「實型」所描訴的特徵，如「實數的大小」，系統則分配記憶體給「實數」儲存具體的數值。
動態配置與訊息傳遞機制[編輯]
定義上動態配置是指方法會隨著實例動態的改變。而訊息傳遞機制（Message Passing）是指一個物件通過接受訊息、處理訊息、傳出訊息或使用其他類別的方法來實作一定功能。如：萊絲可以通過吠叫引起人的註意，從而導致一系列的事發生。
封裝性[編輯]
具備封裝性（Encapsulation）的物件導向程式設計隱藏了某一方法的具體執行步驟，取而代之的是通過訊息傳遞機制傳送訊息給它。封裝是通過限制只有特定類別的物件可以存取這一特定類別的成員，而它們通常利用介面實作訊息的傳入傳出。舉個例子，介面能確保幼犬這一特徵只能被賦予狗這一類別。通常來說，成員會依它們的存取權限被分為3種：公有成員、私有成員以及保護成員。有些語言更進一步：Java可以限制同一包內不同類別的存取；C#和VB.NET保留了為類別的成員聚集準備的關鍵字：internal（C#）和Friend（VB.NET）；Eiffel語言則可以讓使用者指定哪個類別可以存取所有成員。
具備封裝性（Encapsulation）的物件導向程式設計隱藏了某一方法的具體執行步驟，取而代之的是通過訊息傳遞機制傳送訊息給它。因此，舉例來說，「狗」這個類別有「吠叫()」的方法，這一方法定義了狗具體該通過什麼方法吠叫。但是，萊絲的朋友並不知道它到底是如何吠叫的。
從例項來看：

/* 一個程序導向的程式會這樣寫： */
定義萊絲
萊絲.設定音調(5)
萊絲.吸氣()
萊絲.吐氣()

/* 而當狗的吠叫被封裝到類別中，任何人都可以簡單地使用： */
定義萊絲是狗
萊絲.吠叫()

繼承[編輯]
繼承性（Inheritance）是指，在某種情況下，一個類別會有「子類別」。子類別比原本的類別（稱為父類別）要更加具體化。例如，「狗」這個類別可能會有它的子類別「牧羊犬」和「吉娃娃犬」。在這種情況下，「萊絲」可能就是牧羊犬的一個例項。子類別會繼承父類別的屬性和行為，並且也可包含它們自己的。我們假設「狗」這個類別有一個方法（行為）叫做「吠叫()」和一個屬性叫做「毛皮顏色」。它的子類別（前例中的牧羊犬和吉娃娃犬）會繼承這些成員。這意味著程式設計師只需要將相同的代碼寫一次。
在虛擬碼中我們可以這樣寫：

類別牧羊犬:繼承狗

定義萊絲是牧羊犬
萊絲.吠叫()    /* 註意這裡呼叫的是狗這個類別的吠叫方法。*/

回到前面的例子，「牧羊犬」這個類別可以繼承「毛皮顏色」這個屬性，並指定其為棕白色。而「吉娃娃犬」則可以繼承「吠叫()」這個方法，並指定它的音調高於平常。子類別也可以加入新的成員，例如，「吉娃娃犬」這個類別可以加入一個方法叫做「顫抖()」。設若用「牧羊犬」這個類別定義了一個例項「萊絲」，那麼萊絲就不會顫抖，因為這個方法是屬於吉娃娃犬的，而非牧羊犬。事實上，我們可以把繼承理解為「是」或「屬於」。萊絲「是」牧羊犬，牧羊犬「屬於」狗類別。因此，萊絲既得到了牧羊犬的屬性，又繼承了狗的屬性。 我們來看虛擬碼：

類別吉娃娃犬:繼承狗
開始
   公有成員:
      顫抖()
結束
類別牧羊犬:繼承狗

定義萊絲是牧羊犬
萊絲.顫抖()    /* 錯誤：顫抖是吉娃娃犬的成員方法。 */

當一個類別從多個父類別繼承時，我們稱之為「多重繼承」。如一隻狗既是吉娃娃犬又是牧羊犬（雖然事實上並不合邏輯）。多重繼承並不總是被支援的，因為它很難理解，又很難被好好使用。
多型[編輯]
多型（Polymorphism）是指由繼承而產生的相關的不同的類別，其物件對同一訊息會做出不同的回應[8]。例如，狗和雞都有「叫()」這一方法，但是呼叫狗的「叫()」，狗會吠叫；呼叫雞的「叫()」，雞則會啼叫。 我們將它體現在虛擬碼上：

類別狗
開始
   公有成員:
       叫()
       開始
          吠叫()
       結束
結束

類別雞
開始
   公有成員:
       叫()
       開始
          啼叫()
       結束
結束

定義萊絲是狗
定義魯斯特是雞
萊絲.叫()
魯斯特.叫()

這樣，雖然同樣是做出叫這一種行為，但萊絲和魯斯特具體做出的表現方式將大不相同。多型性的概念可以用在運算子過載上，本文不再贅述。
抽象性[編輯]
抽象（Abstraction）是簡化複雜的現實問題的途徑，它可以為具體問題找到最恰當的類別定義，並且可以在最恰當的繼承級別解釋問題。舉例說明，萊絲在大多數時候都被當作一條狗，但是如果想要讓它做牧羊犬做的事，你完全可以呼叫牧羊犬的方法。如果狗這個類別還有動物的父類別，那麼你完全可以視萊絲為一個動物。
歷史[編輯]
物件導向程式設計的雛形，早在1960年的Simula語言中即可發現，當時的程式設計領域正面臨著一種危機：在軟硬體環境逐漸複雜的情況下，軟體如何得到良好的維護？物件導向程式設計在某種程度上通過強調可重複性解決了這一問題。20世紀70年代的Smalltalk語言在物件導向方面堪稱經典——以至於30年後的今天依然將這一語言視為物件導向語言的基礎。
電腦科學中物件和例項概念的最早萌芽可以追溯到麻省理工學院的PDP-1系統。這一系統大概是最早的基於容量架構（capability based architecture）的實際系統。另外1963年Ivan Sutherland的Sketchpad應用中也蘊含了同樣的思想。物件作為編程實體最早是於1960年代由Simula 67語言引入思維。Simula這一語言是奧利-約翰·達爾和克利斯登·奈加特在挪威奧斯陸電腦中心為模擬環境而設計的。（據說，他們是為了模擬船隻而設計的這種語言，並且對不同船隻間屬性的相互影響感興趣。他們將不同的船隻歸納為不同的類別，而每一個物件，基於它的類別，可以定義它自己的屬性和行為。）這種辦法是分析式程式的最早概念體現。在分析式程式中，我們將真實世界的物件對映到抽象的物件，這叫做「模擬」。Simula不僅引入了「類別」的概念，還應用了例項這一思想——這可能是這些概念的最早應用。
20世紀70年代全錄PARC研究所發明的Smalltalk語言將物件導向程式設計的概念定義為，在基礎運算中，對物件和訊息的廣泛應用。Smalltalk的建立者深受Simula 67的主要思想影響，但Smalltalk中的物件是完全動態的——它們可以被建立、修改並銷毀，這與Simula中的靜態物件有所區別。此外，Smalltalk還引入了繼承性的思想，它因此一舉超越了不可建立例項的程式設計模型和不具備繼承性的Simula。此外，Simula 67的思想亦被應用在許多不同的語言，如Lisp、Pascal。
物件導向程式設計在80年代成為了一種主導思想，這主要應歸功於C++——C語言的擴充版。在圖形化使用者介面（GUI）日漸崛起的情況下，物件導向程式設計很好地適應了潮流。GUI和物件導向程式設計的緊密關聯在Mac OS X中可見一斑。Mac OS X是由Objective-C語言寫成的，這一語言是一個仿Smalltalk的C語言擴充版。物件導向程式設計的思想也使事件處理式的程式設計更加廣泛被應用（雖然這一概念並非僅存在於物件導向程式設計）。一種說法是，GUI的引入極大地推動了物件導向程式設計的發展。
蘇黎世聯邦理工學院的尼克勞斯·維爾特和他的同事們對抽象資料和模組化程式設計進行了研究。Modula-2將這些都包括了進去，而Oberon則包括了一種特殊的物件導向方法——不同於Smalltalk與C++。
物件導向的特性也被加入了當時較為流行的語言：Ada、BASIC、Lisp、Fortran、Pascal以及種種。由於這些語言最初並沒有物件導向的設計，故而這種糅合常常會導致相容性和維護性的問題。與之相反的是，「純正的」物件導向語言卻缺乏一些程式設計師們賴以生存的特性。在這一大環境下，開發新的語言成為了當務之急。作為先行者，Eiffel成功地解決了這些問題，並成為了當時較受歡迎的語言。
在過去的幾年中，Java語言成為了廣為應用的語言，除了它與C和C++語法上的近似性。Java的可移植性是它的成功中不可磨滅的一步，因為這一特性，已吸引了龐大的程式設計師群的投入。
在最近的電腦語言發展中，一些既支援物件導向程式設計，又支援程序導向程式設計的語言悄然浮出水面。它們中的佼佼者有Python、Ruby等等。
正如程序導向程式設計使得結構化程式設計的技術得以提升，現代的物件導向程式設計方法使得對設計模式的用途、契約式設計和建模語言（如UML）技術也得到了一定提升。
物件導向編程語言[編輯]
支援部分或絕大部分物件導向特性的語言即可稱為基於物件的或物件導向的語言。Simula (1967)被視為第一個具有物件導向特性的語言。早期，完全物件導向的語言主要包括Smalltalk等語言，目前較為流行的語言中有Java、C#、Eiffel等。隨著軟體工業的發展，比較早的程序導向的語言在近些年的發展中也紛紛吸收了許多物件導向的概念，比如C→C++，C→Objective-C，BASIC→Visual Basic→Visual Basic .NET，Pascal→Object Pascal，Ada→Ada95。「純粹」的物件導向語言, 因為所有的東西都是由物件所組成，例如: Eiffel, Emerald,[9] JADE, Obix, Ruby, Scala, Smalltalk, Self.
腳本中的OOP[編輯]
近年來，物件導向的程式設計越來越流行於手稿語言中。Python和Ruby是建立在OOP原理的指令碼語言，Perl和PHP亦分別在Perl 5和PHP 4時加入物件導向特性。
參見[編輯]

一次且僅一次（once and only once，OAOO）
Distributed Component Object Model
UML

參考文獻[編輯]


^ Kindler, E.; Krivy, I. Object-Oriented Simulation of systems with sophisticated control. International Journal of General Systems: 313–343. 2011. 
^ Lewis, John; Loftus, William. Java Software Solutions Foundations of Programming Design 6th ed. Pearson Education Inc. 2008. ISBN 0-321-53205-8. , section 1.6 "Object-Oriented Programming"
^ Deborah J. Armstrong. The Quarks of Object-Oriented Development. A survey of nearly 40 years of computing literature which identified a number of fundamental concepts found in the large majority of definitions of OOP, in descending order of popularity: Inheritance, Object, Class, Encapsulation, Method, Message Passing, Polymorphism, and Abstraction.
^ John C. Mitchell, Concepts in programming languages, Cambridge University Press, 2003, ISBN 0-521-78098-5, p.278. Lists: Dynamic dispatch, abstraction, subtype polymorphism, and inheritance.
^ Michael Lee Scott, Programming language pragmatics, Edition 2, Morgan Kaufmann, 2006, ISBN 0-12-633951-1, p. 470. Lists encapsulation, inheritance, and dynamic dispatch.
^ Pierce, Benjamin. Types and Programming Languages. MIT Press. 2002. ISBN 0-262-16209-1. , section 18.1 "What is Object-Oriented Programming?" Lists: Dynamic dispatch, encapsulation or multi-methods (multiple dispatch), subtype polymorphism, inheritance or delegation, open recursion ("this"/"self")
^ Booch, Grady. Software Engineering with Ada. Addison Wesley. 1986: 220. ISBN 978-0805306088. Perhaps the greatest strength of an object-oriented approach to development is that it offers a mechanism that captures a model of the real world. 
^ 譚浩強：《C++物件導向程式設計》，清華大學出版社，2006年1月第一版。ISBN 978-7-302-12315-6
^ The Emerald Programming Language. 2011-02-26. 


延伸閱讀[編輯]

Abadi, Martin; Luca Cardelli. A Theory of Objects. Springer Verlag. 1998. ISBN 0-387-94775-2. 
Abelson, Harold; Gerald Jay Sussman. Structure and Interpretation of Computer Programs. MIT Press. 1997. ISBN 0-262-01153-0. 
Armstrong, Deborah J. The Quarks of Object-Oriented Development. Communications of the ACM. February 2006, 49 (2): 123–128 [8 August 2006]. ISSN 0001-0782. doi:10.1145/1113034.1113040. 
Booch, Grady. Object-Oriented Analysis and Design with Applications. Addison-Wesley. 1997. ISBN 0-8053-5340-2. 
Eeles, Peter; Oliver Sims. Building Business Objects. John Wiley & Sons. 1998. ISBN 0-471-19176-0. 
Gamma, Erich; Richard Helm, Ralph Johnson, John Vlissides. Design Patterns: Elements of Reusable Object Oriented Software. Addison-Wesley. 1995. ISBN 0-201-63361-2.  引文使用過時參數coauthors (幫助)
Harmon, Paul; William Morrissey. The Object Technology Casebook - Lessons from Award-Winning Business Applications. John Wiley & Sons. 1996. ISBN 0-471-14717-6. 
Jacobson, Ivar. Object-Oriented Software Engineering: A Use Case-Driven Approach. Addison-Wesley. 1992. ISBN 0-201-54435-0. 
Kay, Alan. The Early History of Smalltalk. 
Meyer, Bertrand. Object-Oriented Software Construction. Prentice Hall. 1997. ISBN 0-13-629155-4. 
Pecinovsky, Rudolf. OOP - Learn Object Oriented Thinking & Programming. Bruckner Publishing. 2013. ISBN 978-80-904661-8-0. 
Rumbaugh, James; Michael Blaha; William Premerlani; Frederick Eddy; William Lorensen. Object-Oriented Modeling and Design. Prentice Hall. 1991. ISBN 0-13-629841-9. 
Schach, Stephen. Object-Oriented and Classical Software Engineering, Seventh Edition. McGraw-Hill. 2006. ISBN 0-07-319126-4. 
Schreiner, Axel-Tobias. Object oriented programming with ANSI-C. Hanser. 1993. ISBN 3-446-17426-5. hdl:1850/8544.  參數|id=值左起第40位存在刪除符 (幫助)
Taylor, David A. Object-Oriented Information Systems - Planning and Implementation. John Wiley & Sons. 1992. ISBN 0-471-54364-0. 
Weisfeld, Matt. The Object-Oriented Thought Process, Third Edition. Addison-Wesley. 2009. ISBN 0-672-33016-4. 
West, David. Object Thinking (Developer Reference). Microsoft Press. 2004. ISBN 0735619654. 

外部連結[編輯]



維基語錄上的相關摘錄：Object-orientation





維基學院中的Topic:Object-Oriented Programming相關學習資源：

物件導向程式設計






您可以在維基教科書中尋找此百科條目的相關電子教程：
Object Oriented Programming



開放式目錄計劃中和Object-oriented programming相關的內容
Introduction to Object Oriented Programming Concepts (OOP) and More by L.W.C. Nirosh
Discussion about the flaws of OOD
OOP Concepts (Java Tutorials)









閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類別型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類別系統進行分類別。











權威控制



LCCN: sh87007503
GND: 4233947-9
BNF: cb12115131k（資料）
NDL: 00937980
BNE: XX537453












 
						取自 "https://zh.wikipedia.org/w/index.php?title=面向對象程序設計&oldid=43533641"					
2 個分類：編程典範物件導向的程序設計隱藏分類：使用ISBN魔術連結的頁面含有英語的條目含有過時參數的引用的頁面引文格式1錯誤：不可見字符包含規範控制信息的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AfrikaansالعربيةAzərbaycancaБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBosanskiCatalàČeštinaDanskDeutschΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiFrançaisGalegoעבריתहिन्दीHrvatskiMagyarՀայերենBahasa IndonesiaIlokanoIdoÍslenskaItaliano日本語ქართულიҚазақша한국어КыргызчаLatinaLietuviųLatviešuМакедонскиമലയാളംМонголBahasa Melayuမြန်မာဘာသာNorsk nynorskNorsk bokmålPolskiPortuguêsRomânăРусскийРусиньскыйSicilianuScotsSrpskohrvatski / српскохрватскиSimple EnglishSlovenčinaShqipСрпски / srpskiSvenskaதமிழ்ไทยTürkçeУкраїнськаاردوTiếng Việt吳語粵語 
編輯連結 





 本頁面最後修訂於2017年3月8日 (週三) 22:43。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 










系統分析與設計


系統分析與設計
This document is copyrighted and provided as is. You are welcomed 
to use it for non-commercial purpose.

為什麼要系統分析與設計?
從一個人可以完成的數百行至數萬行的程式以至於到數十人才能完成的
專案, 想想看它的複雜性.

系統分析與設計的進行方式有哪些?

 結構化系統分析與設計 (本文的主題)
 物件導向式系統分析與設計

系統的種類?

 Operational Systems (操作性系統)
 Management Information Systems (管理資訊系統; MIS)
 Decision Support Systems (決策支援系統; DSS)
 Executive Information Systems (高階主管資訊系統; EIS)
 Expert Systems (專家系統)
 Office Automation Systems (辦公室自動化系統; OA)

系統分析與設計的目標

 使得錯誤降低
 完成使用者所需要的系統
 使得專案人員的合作更容易
 使系統的完成更有效率
 使系統能重複使用
 使系統易於維護

參考書籍

 Gary G. Shelly, Thomas J. Cashman, Judy Adamski,
and Joseph J. Adamski, "Systems Analysis and
Design", 2nd Edition, Boyd & Fraser, 1995. (新月代理)
 Edward Yourdon, "Modern Structured Analysis", Yourdon Press, 1989.
 Jefferey A. Hoffer, Joey F. George, and Joseph S. Valacich,
"Modern Systems Analysis and Design", Benjamin/Cummings, 1996. (智勝代理)
 Kenneth E. Kendall and Julie E. Kendall, "Systems Analysis and
Design", 3rd Edition, Prentice Hall, 1995. (新月代理)
 季延平 and 郭鴻志, "系統分析與設計", 華泰書局, 1995.

何謂系統發展生命週期?
系統發展生命週期 (System Development Life Cycle; SDLC) 是一有組織的方式用來
開發一個企業的資訊系統。 SDLC 又稱為瀑布模式 (Waterfall Model)， 它將系統發展
的流程分為幾個階段來進行。 雖然每本書的作法大同小異， 本文以 
(Shelly 1995) 為主。

 初步調查 (Preliminary Investigation)
 系統分析 (System Analysis)
 系統設計 (System Design)
 系統開發 (System Development)
 系統實施與評估 (System Implementation and Evaluation)

系統分析師的基本條件

 具有資訊管理， 資訊科學， 或管理相關領域。
 合群。
 溝通能力強。
 瞭解商業資訊系統。
 有二至三年的程式寫作經驗。

初步調查
一個 SDLC 是由使用者提出 System Request 開始。 系統分析師於接收到
System Request 後， 進行：

 可行性評估
 排定優先順序
 進一步調查
 口頭與書面報告

可行性評估

 技術性的可行性評估
 操作性的可行性評估
 經濟性的可行性評估

進一步調查的目的

 瞭解問題的真正原因
 定義專案的範圍與限制
 確認可帶來的利益
 估計專案的成本

進一步調查的進行步驟

 授權
 確認所需的資訊
 完成組織圖
 進行面談
 閱讀現有的系統文件與觀察現行的操作方式
 分析收集到的資料
 將結果向管理者與使用者報告

系統分析
系統分析的工作大概分為下列幾個步驟：

 需求確認 (Requirement Determination)
 需求分析 (Requirement Analysis)
 評估各項可行方案 (Evaluation of Alternatives)
 完成系統需求規格書 (System Requirement Specifications)

進行時， 可不斷尋求下列的解答來完成。



需求確認需求分析


What is done?Why is it done?What should be done?


Where is it done?Why is it done there?Where should it be done?


When is it done?Why is it done at this time?When should it be done?


How is it done?Why is it done this way?How should it be done?


Who does it?Why does this person it do it?Who should do it?



需求的五個種類

 Outputs (輸出)
 Inputs (輸入)
 Processes (處理程序)
 Timings (時機)
 Controls (控制)

收集資料的方法

 面談：
  
 決定面談對象
   決定面談的目的
   面談前的準備
   面談的進行
   面談中的記錄
   面談的事後評估
  
 資料收集：
  
 系統文件
   表單與報表
   現有程式
  
 觀察現行的作業流程
 問捲調查
 研究：
  
 報章雜誌
   專業書籍與期刊
   與其他專家討論
   廠商拜訪
  
 Joint Application Design (JAD)
 雛形方法

需求分析
目前最普及的需求分析方法為資料流圖 (Data Flow Diagram; DFD)。
DFD is a structured analysis technique that shows how data
moves and changes through an information system in a graphical,
top-down fashion. (Shelly 1995)
Data Flow Diagram
DFD 有兩種主要的表示方法。 一種是 DeMarco/Yourdon 提出的， 而另一種是
Gane/Sarson 提出的。 不論哪一種方法， 其 DFD 的組成元件有四種：

 處理程序 (Process)
 資料檔 (Data Store)
 外在個體 (External Entity)
 資料流 (Data Flow)

個案討論

 成績系統
 請假系統 （練習）

Data Dictionary
Data Dictionary 記錄了處理程序， 資料檔， 外在個體， 與資料流
的內容與彼此之間的關係。 Data Dcitionary 的最小組成單位稱
data element (資料元素)。

如何記錄資料元素?

 名稱
 其他名稱
 型態與長度
 輸出格式
 預設值
 標題
 資料來源
 安全性
 負責人
 可接受的值與其他驗證的方式
 計算公式
 描述與註解


     範例：

     名稱: name
     其他名稱: s_name
     型態與長度: Char(20)
     輸出格式: 
     預設值:
     標題: 學生姓名
     資料來源: 學生基本資料
     安全性: update: 人事室
             query:  每一個人
     負責人: 人事室
     可接受的值與其他驗證的方式: 不能含有阿拉伯數字
     計算公式:
     描述與註解: 學生的姓名

如何記錄資料流?

 名稱
 其他名稱
 縮寫
 記錄
 描述
 數量與頻率


     範例：
          
     名稱: COMMISION
     其他名稱: COMMISION EARNED
     縮寫:
     記錄: COMMISION
     描述: 一個業務員應得之佣金
     數量與頻率: 約每天 20 筆

如何記錄記錄?

 名稱
 其他名稱
 定義
 所包含的資料元素


     範例：
          
     名稱: CREDIT STATUS
     其他名稱: 
     定義: 顧客之信用情形
     所包含的資料元素:
           CUSTOMER NUMBER PK
           CUSTOMER STATUS CODE
           REMAINING CREDIT LIMIT

如何記錄處理程序?

 名稱
 目的
 輸入的資料流
 輸出的資料流


     範例：

     名稱: 登錄學生資料
     目的: 將學生名冊上的學生資料登錄到資料庫
     輸入的資料流: 學生名冊
     輸出的資料流: 學生資料
     處理程序的描述：
       for each STUDENT on the 學生名冊
         get STUDENT_NAME
         get STUDENT_ID
         get STUDENT_ADDR
         get STUDENT_PHONE
         write STUDENT_NAME, STUDENT_ID, STUDENT_ADDR, 
               STUDENT_PHONE to 學生資料檔

如何記錄外在實體?

 名稱
 其他名稱
 輸入的資料流
 輸出的資料流
 描述


     範例：
     
      名稱: 學生
      其他名稱:
      輸入的資料流: 改過的作業
      輸出的資料流: 作業
      描述


程序描述
常用的程序描述的方法有：

 Structured English: 結構化英文的三個基本組成結構為： 
（1） Sequence， （2） Selection， 與 （3） Iteration。

     範例：

     for each COMMISION EARNED
       if EXTRA BONUS equals Y
         if PAYMENT TOTAL is greater than $50,000
            add 2% to COMISSIOSN PERCENT
            output SPECIAL LETTER
            output AWARD LIST
         else
            add 1% to COMISSIOSN PERCENT
            output AWARD LIST
       else
         if PAYMENT TOTAL is greater than $50,000
            add 1% to COMISSIOSN PERCENT
            output SPECIAL LETTER
       calculate COMMISION = COMMISION PERCENT times PAYMENT TOTAL

 Decision Table
 Decision Tree

其他系統分析的工具

 System Flowchart
 Nasi-Shneiderman Diagram

狀態轉換圖 (State-Transition Diagram; STD)
DFD， STD， 與 ERD (Entity-Relationship Diagram) 合稱系統分析與設計
的三大工具。 STD is a graphical tool for showing events, states,
and time-dependent behavior of a real-time or on-line system.
(Shelly 1995)。 此類即時系統的特性為：

 高速的外來資料輸入。
 必須提供足夠快的反應。
 系統一般來說是屬事件驅動式的。

STD 的組成元件有：

 狀態 (state)
 轉換 (transition)
 事件 (event)

什麼是 CASE?
CASE 即 Computer-Aided Software 
Engineering 是一種電腦工具， 是用以將資訊系統的開發與維護
的流程自動化的利器。 其優點包括：

 提昇生產力
 將無聊的行政工作自動化
 提供一個標準化與一致性的環境給所有開發者
 改進系統品質

但是它也有缺點：

 成本增加
 因為並無國際標準， 會受限於某一特定產品
 有可能需更改你目前系統的開發與維護方式
 有取代系統分析師的危機

評估解決方案
完成一個資訊系統有四個方向：

 自製 (developemtn of in-house software)
 外購 (purchase of a software package)
 外包 (contracting other company)
 使用者自行開發 (end user computing)

系統設計
系統設計分為邏輯設計 (logical design) 和實體設計 (physical design)。

 一個資訊系統的邏輯設計需定義出這個系統的所有輸入， 由這個系統
所產生的輸出， 以及為達成此系統的需求所必須執行的處理程序， 而此定義
卻與完成這系統的方式與工具毫不相干。
 一個資訊系統的實體設計是依照邏輯設計而進行設計， 它是用來敘述
所有系統元件是如何被完成的。

邏輯設計， 實體設計， 與開發程式的差別
舉例來說：

 邏輯設計： 需要排序功能 
 實體設計： 敘述排序的方法
 開發程式： 選擇開發工具並完成排序程式

系統設計究竟做些什麼?

 依照 (Shelly, 1995)，  邏輯設計以在系統分析階段完成，
在此階段僅需完成實體設計， 而其工作則包含資料庫設計， 表單與報表的設計，
所有 I/O 介面的設計等。
 依照 (Hoffer, 1996)， 邏輯設計的工作包含
資料庫設計， 表單與報表的設計，所有 I/O 介面的設計等。 而
實體設計的工作包含實際檔案與資料庫的設計與程式與處理程序的設計。

系統設計的進行步驟
一般來說， 建議的進行方式為先複習系統需求規格書， 然後依照下列步驟進行
後， 將結果報告給管理者與使用者。

 設計系統輸出
 設計系統輸入
 設計系統檔案與資料庫
 設計系統的處理程序
 設計軟體

系統設計的準則
一般的準則是以下列三個方向來考量：

 使用者的方面
  
 系統與使用者互相交談的地方
   預估未來使用者的需求
  
 資料的方面
  
 資料在產生的時候， 便在產生的地點輸入系統。
   資料輸入後馬上檢查。
   盡可能使用自動的方法作資料輸入。
   控制資料的存取， 並記錄每一重大資料的改變。
   資料避免重複輸入。
   避免重複的資料儲存在檔案或資料庫中。
  
 處理程序方面
  
 處理程序愈簡單愈好 （？？）
   使用獨立的模組， 且此模組只執行單一功能
  


模組的內聚力與聯結力
一般來說，一個系統設計的好壞很難直接判斷，於是內聚力
與聯結力就常被用來判斷系統設計好壞的基礎。

 內聚力 (cohesion): 如果一個模組內的組成元件之間的相關性很高， 
而且都是為了完成同一目標而組成的， 那我們說這個模組的內聚力很高。
在系統設計時， 我們要求模組的內聚力愈高愈好。 Constantine 與
Yourdon 認為內聚力有七個層次， 其由低而高的次序為：
  
 偶然的內聚力 (coincidental cohesion)
   邏輯的內聚力 (logical cohesion)
   時間性的內聚力 (temporal cohesion)
   程序的內聚力 (procedual cohesion)
   聯絡的內聚力 (communication cohesion)
   依序的內聚力 (sequential cohesion)
   功能的內聚力 (functional cohesion)
  
 聯結力 (coupling)： 如果一個模組內的組成元件之間緊密的結合在一起，
而且彼此的相依性很高， 那我們說這個模組的聯結力很高。
在系統設計時， 我們要求模組的聯結力愈低愈好。 Constantine 與
Yourdon 認為聯結力有七個層次， 其由低而高的次序為：
  
 無直接聯結 (no direct coupling)
   資料聯結 (data coupling)
   郵戳聯結 (stamp coupling)
   控制聯結 (control coupling)
   外部聯結 (external coupling)
   共同聯結 (common coupling)
   內容聯結 (content coupling)
  


Last Updated:  
Written by: Eric Jui-Lin Lu





UML物件導向系統分析與設計(第二版)-金石堂網路書店














































會員功能列

 


加入會員
登入




您好
登出


會員專區
客服中心
查訂單


 
（ 0 件）0 元
結帳












購物車
（ 0 件）0 元
結帳



金石堂及銀行均不會請您操作ATM!  如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當!
    (詳情)




UML物件導向系統分析與設計(第二版)－金石堂網路書店歡迎您加入博客和facebook 臉書粉絲團！The largest retail books store chains in Taiwan! 





TOP關鍵字

2017希望書包
怪獸的產地
七龍珠
肆一 
蠟筆小新套票
抽EC






全館搜尋
中文書
英文書

雜誌
MOOK
文具
玩具親子
美妝配飾
3C
家電
運動休閒
居家生活
動漫部屋
日用清潔
食品




 

天花版bn

12345678910





購物目錄


首頁
3h快送
中文書
英文書

雜誌
MOOK
文具
美妝配飾
玩具親子
3C
家電
運動休閒
居家生活
日用清潔
動漫精品
食品






商品次目錄


新書
預購書
推薦書
套書
暢銷書排行榜
書展 / 特惠
讀者書評
出版社專區
香港出版品




 

    您的位置：金石堂網路書店
中文書
電腦資訊
網路／安全／概論
系統分析／設計
商品詳情

 


UML物件導向系統分析與設計(第二版)
                        










作者：游峰碩
追蹤



出版社：博碩文化  
出版社追蹤


出版日：2011/6/24

ISBN：9789862014851
語言：中文繁體
適讀年齡：全齡適讀


定價：560 元

特價：79 折 442 元 (可得紅利4點)
紅利優惠價：77 折 429 元 (折抵說明)紅利可抵：13 元 
信用卡紅利：可折抵多家銀行 (扣抵說明)
運送方式：全球配送　香港到店　國內宅配國內店取　












<<



>>


https://cdn.kingstone.com.tw/book/images/product/20131/2013120182257/2013120182257b.jpg














                           參考庫存量:1本立即購買 預計出貨日：2017/7/22



金石堂讀者好評
 
1 個人說讚，看排行 >






電腦資訊分類追蹤
使用此功能請先登入金石堂網路書店正式會員。這是什麼？




分享：
                            
                           	  










書籍介紹
其他讀者也買
強力推薦
讀者好評(0)
下標籤
團體專屬服務






內容簡介作者目錄
詳細資料






內容簡介 top 
《UML物件導向系統分析與設計(第二版)》
                                本書以物件導向技術為主軸，輔以UML為塑模工具來闡述有關近代資訊系統開發之方法。適用對象包含任何對系統開發有興趣之同學，程式設計師，軟體工程師，及系統分析師。本書主要是從以下幾個觀點來介紹系統的分析與設計的過程：1.功能觀點：著重於需求分析的捕捉，使用案例圖(Use Case Diagram)的塑模，以及活動圖(Activity Diagram)的流程分析及輔助性。2.靜態觀點：著重於概念模型(Conceptual Modeling)的基本概念，類別圖(Class Diagram)的塑模原則，以及物件圖(Object Diagram)的輔助性。3.動態觀點：著重於分析物件(Analysis Object)的應用，循序圖(Sequence Diagram)的塑模，以及建立原則。4.部署觀點：強調軟體元件的封裝管理(Component Diagram)，配置與部署(Deployment Diagram)。5.設計觀點：內容強調類別以及類別庫的架構設計原則，並介紹基本的設計樣式(Design Pattern)以及框架(Framework)的概念。附件CD內容1.JUDE使用手冊2.UML圖(for JUDE)3.範例計畫4.文件樣版與範例5.範例計劃壓縮檔6.範例資料庫
                            


作者top 


作者介紹

                                        游峰碩現任：崑山科技大學資管系助理教授學歷：美國愛荷華大學（The University of Iowa）數學博士經歷：美國愛荷華大學Hygenic Lab系統分析師、ABC Virtual Communications資深軟體工程師，以及Allied Insurance、Hi-Bred International、Wellmark Blueshield Bluecross、The State of Iowa、Northwest Enterprise等資訊部門顧問、美國愛荷華大學數學系客座助理教授。

                                    




目錄 top 
UML物件導向系統分析與設計(第二版)－目錄導覽說明

第1章 系統開發概論第2章 UML簡介第3章 建議計畫與實施第4章 需求分析與擷取第5章 使用案例圖第6章 情節第7章 活動圖第8章 類別圖第9章 概念模型第10章 物件圖第11章 互動圖第12章 進階分析第13章 操作第14章 狀態圖第15章 元件圖與部署圖第16章 設計原則第17章 設計樣式簡介第18章 框架與MVC設計樣式 
                                





詳細資料top 

                               語言：中文繁體規格：平裝分級：普級開數：18開17*23cm頁數：480
                               出版地：台灣















系統分析／設計相關書籍
延伸閱讀推薦















共0篇好評top 
寫書評去 >










商品標籤 (什麼是標籤？)

CG設計正夯!JAVA生活影音應用達人



我的標籤新增









團體專屬服務top

團體專屬服務














訂購須知top 
防治詐騙，提醒您!!金石堂及銀行均不會請您操作ATM! 如接獲電話要求您前往ATM提款機，請不要聽從指示，以免受騙上當! 

商品運送說明：
當商品送達金石堂門市或便利商店後，您會收到E-mail及APP出貨/到貨通知，您也可透過【訂單查詢】確認到貨情況。
建議您可下載『金石堂APP』並開啟推撥設定，即可收到相關出貨/到貨通知訊息。
並請您於指定期限內取貨付款，若逾期未取，您取貨的金石堂門市或便利商店將會辦理退貨作業。
產品顏色可能會因網頁呈現與拍攝關係產生色差，圖片僅供參考，商品依實際供貨樣式為準。 

退換貨說明：
依據「消費者保護法」第19條及行政院消費者保護處公告之「通訊交易解除權合理例外情事適用準則」，以下商品購買後，除商品本身有瑕疵外，將不提供7天的猶豫期：

                            1、 易於腐敗、保存期限較短或解約時即將逾期。（如：生鮮食品）
                            2、 依消費者要求所為之客製化給付。（客製化商品）
                            3、 報紙、期刊或雜誌。（含MOOK、外文雜誌）
                            4、 經消費者拆封之影音商品或電腦軟體。
                            5、 非以有形媒介提供之數位內容或一經提供即為完成之線上服務，經消費者事先同意始提供。（如：電子書、電子雜誌、下載版軟體、虛擬商品…等）
                            6、 已拆封之個人衛生用品。（如：內衣褲、刮鬍刀、除毛刀…等）
若非上列種類商品，商品均享有到貨7天的猶豫期（含例假日）。
辦理退換貨時，商品（組合商品恕無法接受單獨退貨）必須是您收到商品時的原始狀態（包含商品本體、配件、贈品、保證書、所有附隨資料文件及原廠內外包裝…等），請勿直接使用原廠包裝寄送，或於原廠包裝上黏貼紙張或書寫文字。退回商品若無法回復原狀，將請您負擔回復原狀所需費用，嚴重時將影響您的退貨權益。










中文書籍分類

文學財經企管生活風格飲食料理心理勵志醫療保健旅遊宗教命理教育/親子教養童書羅曼史輕小說漫畫語言／字辭典藝術設計電腦資訊
程式設計
網頁設計
繪圖／影音／多媒體
辦公軟體／應用軟體
作業系統
資料庫
3C數位生活
APPLE專區
認證考試
網路／安全／概論
網路技術
雲端技術
系統分析／設計
計算機概論
電腦專業辭典


其他電腦資訊

自然科普人文歷史社會哲思考試書／政府出版品參考書全部的分類 >>



手機版
UML物件導向系統分析與設計(第二版)




相關商品


雜誌



PC DIY! 7月2017第245期
數位狂潮DIGITREND 2017第44期
PC HOME 電腦家庭 7月2017第258期
MAXIMUM PC Spcl: BUILD IT:The Perfect PC Vol.2 2017
PC DIY! 6月2017第244期









外嵌連結
UML物件導向系統分析與設計(第二版)



在金石堂門市找此書
                         選擇縣市：

請選擇
基隆市
臺北市
新北市
桃園市
新竹市
新竹縣
宜蘭縣
苗慄市
苗慄縣
南投縣
臺中市
雲林縣
彰化縣
嘉義市
臺南市
高雄市
屏東縣

查詢












↑回上方

金石堂網路書店

首頁
關於金石堂網路書店
人才招募
客服中心
異業合作
出版情報
手機版
關於金石堂書店
金石堂書店全台門市



客服專線：02-2364-9989
傳真：02-2364-4672
客服時間：週一至週五 9：00∼12：30 及 13：30∼18：00（例假日除外）
地址：100 台灣臺北市中正區汀州路三段 160 巷 3 號 2 樓
Copyright©2016, Digital Kingstone Co., Ltd. 金石網絡股份有限公司






瀏覽本站建議使用：Internet Explorer 8.0 以上或 FireFox、Google Chrome、Safari 等瀏覽器。
本網站已依台灣網站內容分級規定處理且符合電子商務、安全交易















金石堂APP出/到貨提醒不漏接，讓您便利隨行
















.14





物件導向的系統分析 - 維基百科，自由的百科全書






























 






物件導向的系統分析

維基百科，自由的百科全書
(已重新導向自 面向對象系統分析)

					前往：					導覽，					搜尋






本條目需要精通或熟悉計算機科學的編者參與及協助編輯。 
請邀請適合的人士改善本條目。更多的細節與詳情請參見討論頁。
另見其他需要計算機科學專家關註的頁面。 


物件導向的分析方法是利用物件導向的信息建模概念，如實體、關係、屬性等，同時運用封裝、繼承、多態等機制來構造模擬現實系統的方法。
傳統的結構化設計方法的基本點是面向過程，系統被分解成若干個過程。而物件導向的方法是採用構造模型的觀點，在系統的開發過程中，各個步驟的共同的目標是建造一個問題域的模型。在物件導向的設計中，初始元素是對象，然後將具有共同特徵的對象歸納成類，組織類之間的等級關係，構造類庫。在應用時，在類庫中選擇相應的類。




 
						取自 "https://zh.wikipedia.org/w/index.php?title=面向對象的系統分析&oldid=29070482"					
分類：計算機科學隱藏分類：需要計算機科學專家關註的頁面 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


ČeštinaDanskDeutschEnglishEspañolFrançais日本語NederlandsРусскийTürkçeУкраїнська 
編輯連結 





 本頁面最後修訂於2013年10月30日 (週三) 20:08。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 








物件導向系統分析與設計（第二版） - 魯明德 | Readmoo 分享書















































 




















 


 




 
























Readmoo 分享書
分類總覽
電機資訊類
資訊
物件導向系統分析與設計（第二版）







編輯書籍資訊




想讀



想讀
正在讀
已讀完
工具書
放棄閱讀
移出書櫃




我的評分







物件導向系統分析與設計（第二版）



0 / 0 



作者：魯明德 出版社：新文京開發


語言：繁體中文
ISBN：9789862367810
出版日期：2013/07/15 








 選擇網路書店

博客來
PChome 24h書店









                                        ＜內容簡介＞ 一個資訊系統的開發，所需要的人力、財力、物力非常的大，如果一開始的系統分析工作沒有做好，日後在系統維護階段，將會耗費相當多的成本，而沒有實質的產出。因此，系統分析是資訊相關科系非常重要的一門課程，隨著資訊科技的進步，系統分析的方法論，早已從結構化的系統分析方法邁入物件導向的系統分析方法。 本書以深入淺出的案例，介紹UML的九種圖形，讓讀者藉由實際案例瞭解這些圖形之間的關係，以及繪製方法，是一本好教易學的教材。 對於初學的入門讀者及修課學生，作者先以第一章到第三章對資訊系統、系統開發、軟體特性及物件導向的基本概念做一概論性的介紹，對於已對資訊系統略有基礎的讀者，則從第四章開始介紹UML的基本概念、架構及法則，接著以一虛擬案例貫串各章，探討各種圖形的概念及應用。 作者在每一章節中都留有發揮的空間，可讓讀者在學習的過程中，有自我練習的機會，適合教師於授課時，讓學生實作後在課堂上討論之用，也適合自我學習的讀者，在學習後有一案例可以自我學習。最後則以個案說明各章所學的各種圖形在個案中如何繪製、應用，讓讀者可以邊學邊做，磨練實作能力。 系統分析的方法論，是一門實作的學問，唯有透過不斷的實作才能累積經驗。本書是作者累積其豐富的教學與實務經驗編寫而成，讀者依作者所規劃的學習方向，應該很快會對物件導向的系統分析方法有一認識。 第二版系依最新資訊更新部份內容，並在書末增加新的個案研討，從第一版一個個案研討增加到兩個個案研討，提供讀者更多自我實作演練的機會。 ★目錄： Chapter 1資訊系統概論 1-1 資訊系統定義 1-2 資訊系統的演進 1-3 資訊系統的種類 1-4 本書架構 Chapter 2軟體危機 2-1 軟體的特性 2-2 系統開發遭遇的問題 2-3 專案生命週期 2-4 系統開發的方法論 Chapter 3物件導向的基本概念與UML的發展 3-1 物件導向的概念 3-2 UML的發展 Chapter 4UML的基本概念 4-1 事物 4-2 關係 4-3 圖形 4-4 UML一般機制 Chapter 5進入UML的殿堂 5-1 為何要塑模 5-2 塑模的法則 5-3 UML架構 5-4 軟體開發生命週期 Chapter 6使用案例圖 6-1 使用案例 6-2 使用案例圖 6-3 使用案例圖的個案說明 Chapter 7順序圖與合作圖 7-1 互動 7-2 順序圖 7-3 合作圖 7-4 順序圖的個案說明 7-5 合作圖的個案說明 Chapter 8狀態圖 8-1 狀態機 8-2 塑造物件的生命週期 8-3 狀態圖 8-4 狀態圖的案例說明 Chapter 9活動圖 9-1 基本觀念 9-2 活動區 9-3 活動圖的應用 9-4 活動圖的案例說明 Chapter 10類別圖 10-1 類別圖基本概念 10-2 進階類別 10-3 類別圖的個案說明 Chapter 11物件圖 11-1 物件與實例 11-2 物件圖 11-3 物件圖的個案說明 Chapter 12元件圖 12-1 元件 12-2 塑造元件的技巧 12-3 元件圖 12-4 元件圖的個案說明 Chapter 13部署圖 13-1 部署 13-2 部署圖 13-3 部署圖的個案說明 Chapter 14UML的個案研討一 14-1 個案背景說明 14-2 建立需求模型 14-3 需求分析 14-4 設計 Chapter 15UML的個案研討二 15-1 個案背景說明 15-2 建立需求模型 15-3 需求分析 15-4 系統設計 ＜作者簡介＞ 魯明德 學歷 ‧ 國立政治大學資訊管理學系碩士班 ‧ 中正理工學院機械工程學系 ‧ 中正理工學院機械工程科 經歷 ‧ 新心科技有限公司顧問 ‧ 創新與智慧財產權推廣協會理事長 ‧ 中山科學研究院智財經營管理辦公室主任 ‧ 中山科學研究院電子系統研究所助理研究員 ‧                                    










 完讀書評 0




 劃線註記 0





書評




註記










還沒有人寫書評喔，快來寫第一篇書評吧！


















 






作者簡介

 魯明德



作者其他作品








出版社簡介

 新文京開發

出版社作品













相關書單

 書單




新增書單





在 0 人的書櫃中


























個人

個人書櫃
關註動態
書單
書評



瀏覽

書籍

熱門書籍
最新書籍
編輯嚴選



書單

熱門書單
最新書單
編輯嚴選





網站導覽

買書
看書
閱讀最前線



會員中心

會員中心
登出













×
活動開催中！











Readmoo 祝您猴年行大運！
新年期間 Readmoo 電子書全站3本75折！





























物件導向分析方法的七大好處 | iThome





















移至主內容















































 





物件導向分析方法的七大好處
 沒時間讀UML/OOAD書之挑讀筆記第 22 回物件導向分析（三）系統分析是挖掘系統需求的過程，除了物件導向分析外，還有三種重要的方法

 






 
按讚加入iThome粉絲團









 




 
文/iThome
|
2009-07-17發表
  

 









 系統分析方法是一種思考工具，可以協助我們思索並表達需求（requirements）。但是，「系統分析」（systems analysis）又是個什麼東西呢？簡單來說，我們在採取行動之前，先對問題（problem）進行瞭解且研究，這個事先研究的過程就是所謂的「系統分析」。更進一步來說，系統分析是一個挖掘系統需求的過程，它關註的是系統必須做些什麼（what）才能夠滿足客戶，而不是如何（how）實作出系統。正是因為系統分析關註的焦點是客戶對系統的要求，所以系統分析師開始動手進行系統分析的第一步驟，通常是從研讀客戶提供的文件和訪談客戶，開始著手。「需求文件」（requirement document）是系統分析過程中極為重要的產出，它主要具備下述特色：● 許多人士都會需要瞭解甚至同意需求文件的內容，常見的人士有客戶、問題領域專家、開發人員。● 在需求文件中，系統分析師將詳述系統所需，而這份需求聲明必須是完整的、一致的而且是可行的。● 在需求文件中所記載的需求，在落實之前或之後都必須持續維護且追蹤。● 在需求文件中，系統分析師不僅要記錄系統的功能性需求，還需要記錄非功能性需求。譬如，資料需求、性能需求、產能需求和測試需求等等，都是十分常見的非功能性需求。● 其他諸如系統必須處理的介面、必須適應的環境，及任何必須遵守的設計限制，都需明確記載在需求文件中。除了物件導向分析方法外，還有功能分解（Funcational Decomposition）、資料流程（Data Flow）和資訊建模（Information Modeling）這三種古典且重要的系統分析方法，物件導向分析方法可說是集大成者，它吸取這三種方法的精華，並且剔除其不理想的部分。功能分解顧名思義，「功能分解」就是把一整個系統細分成數個次系統（sub-system），再把一個次系統往下細分成數個功能，接著再繼續把一個功能往下細分成數個次功能（sub-function），然後再把次功能往下細分成更細小的次次功能；如此細分、細分、再細分…，一直到系統分析師心裡頭覺得可以了為止。總之，功能分解有著下列幾項主要的缺點，分別為：● 系統分析師必須高度仰賴過往開發過相似系統的經驗，才能夠得知該將系統細分成哪些次系統、功能及次功能。● 問題領域無法直接對映成功能，因此需要靠著系統分析師人工的方式來將問題領域對映成功能與次功能。● 也因此，到底要分解成幾個功能，而且又得往下細分到哪個層級，都沒有一定，隨著系統分析師的不同而有不同的決定。因為自由度太高，所以產出的結果難以理解，也難以形成共識，同時日後也不容易重用與維護。● 整個系統由數個次系統所組成；每一個次系統又由數個功能所組成；每一個功能再由數個次功能所組成…一層一層往下功能分解，再一層一層往上組成整個系統。由於功能的變動性太高，也因此造成系統的結構不穩定。因此，物件導向分析不以功能做為系統結構。主要是因為功能的變動頻率高，所以如果以功能做為系統結構，會導致系統結構經常隨著功能的變動而變動，因此導致系統結構的不穩定。取而代之的是，物件導向分析把功能分解的技術應用在分解服務上頭，將服務分解成小片的功能，再將這些小功能分派給物件。同時，還將這些變動頻率高的功能封裝在物件內部，使得功能隨著需求變動而改變時，不會影響到其他物件，而且也就不會導致系統陷入牽一髮而動全身的險境了。資料流程其實，資料流程方法就是鼎鼎有名的「結構化分析」（structured analysis）。許多人耳熟能詳的「資料流程圖」（Data Flow Diagram），正是結構化分析方法中非常具有代表性的技術。在套用資料流程方法時，系統分析師將真實世界化成資料流與程序（process），各式的資料會流進或流出不同的處理程序。請看到圖1，這是張資料流程圖片段，訂單資料隨著資料流的箭頭方向流進結帳程序，待結帳程序執行完畢之後，將輸出另一份名為出貨單的資料，並且繼續流入下一個出貨程序。圖1：資料流程圖（片段）不僅如此，資料流程也有層級的概念，套用功能分解的技術，可以將程序往下細分成次程序。資訊建模在資訊建模方法中，最赫赫有名的技術便是「實體關聯圖」（Entity Relationship Diagram）了。相信多數使用關聯式資料庫的開發人員，到目前為止，可能都還在使用這項技術呢！請看到圖2，這是一張局部的實體關聯圖，圖中有兩個實體（Entity），分別名為顧客與訂單。而且，顧客與訂單兩者之間存在著一對多（1：N）的關聯性，也就是說，一個顧客擁有多筆訂單，而每一筆訂單只能被一個顧客所擁有。再者，以橢圓圖示代表實體的屬性（Attribute），所以顧客有兩個屬性，分別名為：姓名與電話。訂單實體也有兩項屬性，分別名為：金額與日期。圖2：實體關聯圖甚至到了1970年代中期，資訊建模還添加了物件概念。不過，雖說如此，相較於物件導向方法，資訊建模仍舊只是個不完全的方法，因為它缺少了下列幾項在物件導向中非常重要的概念：● 服務（Service）：也就是「操作」（operation），它會與屬性一塊被封裝在物件中。● 訊息（Messgae）：物件之間藉由傳遞訊息來進行溝通，以便協力合作達成特定目標。● 繼承（Inheritance）：把數個類別裡頭相同的屬性與操作獨立出來，再透過繼承關係來重用這些相同的部分。● 結構（Structure）：諸如一般化-特殊化關係、整體-部分關係，這些人類慣用的組織方法。物件導向對於想要說服部屬採用物件導向分析方法的主管，以及對於想要說服主管採用物件導向分析方法的部屬而言，物件導向分析可以帶來下列七項好處：1. 物件導向分析重視問題領域，因此能夠面對豐富多樣的問題領域。物件導向分析並沒有鎖定特定的問題領域，可以用來分析各式不同的問題領域。2. 物件導向分析採用人們慣用的組織方法來表達系統分析與規格內容，因此增進了系統分析師與領域專家之間的溝通、互動與瞭解。3. 物件導向分析將屬性與操作整合在同一個類別中，使得系統內部的資料結構（屬性）與行為結構（操作）一致。對比於古典的結構化分析方法，以實體關聯圖呈現資料結構，且以結構圖（Structure Chart）呈現行為結構，使得系統內部的資料結構與行為結構不一致。相反地，物件導向分析則將系統內部的資料結構與行為結構整合在一起，並且以類別圖呈現出來。4. 物件導向分析透過繼承概念，明顯地表達出可以共用的相同屬性與操作。5. 物件導向分析以穩定的問題領域結構來封裝易變的部分，以此形成具有彈性的系統結構，使得系統能夠順應需求的變動。6. 物件導向分析採用問題領域做為系統內部結構，因此提升了分析產出的重用（reuse）程度，無論是現在的重用或者是日後的重用。這是因為問題領域比較穩定，變化速度較為緩慢，所以結構的雷同性高，相對的重用程度當然就會提升。7. 無論是系統分析或系統設計都採用物件導向技術，因此從分析到設計都採用一致性的思維與圖示。此外，物件導向分析方法由五個主要的活動所組成，分別為：尋找類別與物件、確立結構、確立主題、定義屬性與定義服務。雖然，這五個活動並不需要依照順序進行，不過後續各回中，會依照此順序來介紹。
 


































 




 







 Advertisement


 

 

更多 iThome相關內容


  
 不能說的秘密背後的學問 

 歡迎來到資料監控的世界 

 產品如何讓人上癮靠這招 

 史丹佛名師的創業實現術 

 創投專家給創業者的忠告 

 新顛覆：平臺正吞噬世界 
 
 






 







 

熱門新聞






 


英國Wi-Fi業者使壞，讓2.2萬名用戶無意中同意去掃流動廁所

2017-07-18
 
 






 


Google 兩步驟驗證將以手機提示取代簡訊

2017-07-17
 
 






 


【AI關鍵技術】三大熱門深度學習框架新進展

2017-07-19
 
 






 


硬體不相容，部份英特爾Atom裝置無法升級Windows 10 Creators Update

2017-07-18
 
 






 


災難！CoinDash首度發行貨幣當天就被駭，損失近700萬美元

2017-07-18
 
 






 


微軟亞洲研究院院長洪小文：越複雜越不管用，AI最適合封閉型的高重複性任務

2017-07-17
 
 






 


安撫使用者不滿情緒，Skype聯絡人狀態顯示功能回來了!

2017-07-17
 
 






 


南韓代管業者Nayana遭勒索軟體攻擊，與駭客達成協議將支付110萬美元贖金

2017-06-21
 
 






 


2017年AI開始普及化，技術競賽白熱化

2017-07-15
 
 






 


國際警方聯手關閉暗網市集AlphaBay

2017-07-17
 
 



 

專題報導




企業行動化管理解決方案採購大特輯 


AI 100（上） 


公有雲儲存服務大盤點 


富士通AI新戰略 


企業身分驗證雲端服務採購特輯 

更多專題報導
 

 









物件導向系統分析與設計的價格 共有301筆 - 比價BigGo
 























 

































 全部 拍賣 商城 購物網站 



相關搜尋：
系統分析與設計  

頁面分享：












綜合排序
價格低到高
價格高到低


 價格範圍：  至

確定


請輸入正確的價格資訊





物件導向系統分析與設計共有301筆資料
(搜尋時間:0.017秒) 














    


UML物件導向系統分析與設計(第三版)



$442  約可獲點 4 點數  一點抵一元喔！ 


 樂天市場樂天書城(2112)地區：中山區 
分享 









收藏
已收藏






    


UML物件導向系統分析與設計



游峰碩，博碩，出版日期：2010-05-28 本書以物件導向技術為主軸，輔以UML為塑模工具來闡述有關近代資訊系統開發之方法。適用對象包含任何對系統開發有興趣之同學，程式設計師，軟體工程師，及系統分析師。 本書主要是從以下幾個觀點來介紹系$504 


 博客來付款：

 
分享 









收藏
已收藏






    


UML物件導向系統分析與設計(第三版)



作者：游峰碩。本書以物件導向技術為主軸，輔以UML為塑模工具來闡述有關近代資訊系統開發之方法。適用對象包含任何對系統開發有興趣之同學，程式設計師，軟體工程師，及系統分析師。本書主要是從以下幾個觀點來介紹系統的分析與設計的過程：■ 功能觀點：著重於需求分析的捕捉，使用案例圖(Use Case Diagram)的塑模，以及活動圖(Activity Diagram)的流程分析及輔助性。■ 靜態觀點：著重於概念模型(Conceptual Modeling)的基本概念，類別圖(Class Diagram)的塑模原則，以及物件圖(Object Diagram)的輔助性。■ 動態觀點：著重於分析物件(Analysis Object)的應用，循序圖(Sequence Diagram)的塑模，以及建立原則。■ 部署觀點：強調軟體元件的封裝管理(Component Diagram)，配置與部署(Deploym$400  首購會員送$200購書金 


 樂天Kobo電子書付款：

 
分享 









收藏
已收藏






    


系統分析與設計：物件導向與UML 4/e(三版)



Ray Farmer,Simon Bennett,Steve McRobb，東華，出版日期：2015-05-22 本書所採取的方法適用於包括即時系統在內的大多數資訊系統，前三章在這樣背景下以資訊系統發展做為開始。在本書的教學與訓練中，使用案例研究做為導覽與練習作業的依據，也使用同樣的案例研究提供範例做為$646 


 博客來付款：

 
分享 









收藏
已收藏






    


UML物件導向系統分析與設計(第二版)(附 CD)



游峰碩，博碩，出版日期：2011-06-24 本書以物件導向技術為主軸，輔以UML為塑模工具來闡述有關近代資訊系統開發之方法。適用對象包含任何對系統開發有興趣之同學，程式設計師，軟體工程師，及系統分析師。 本書主要是從以下幾個觀點來介紹系統$370 


 博客來付款：

 
分享 









收藏
已收藏






    


物件導向系統分析與設計：結合MDA與UML(五版)



吳仁和，智勝，出版日期：2015-11-12 本書明白揭示結合MDA與UML的物件導向分析與設計，擴充系統之動態行為與靜態結構塑模方法論，以強化物件導向系統分析與設計之實用性與易用性。此外，擴充MDA之轉換方法論及其與CASE工具之整合，以強化系統$665 


 博客來付款：

 
分享 









收藏
已收藏






    


軟體工程：物件導向程式設計與UML系統分析實作



陳湘揚等，博碩，出版日期：2004-09-16 本書以UML及JAVA實作一個訂房系統，透過這些開發的過程，講述軟體工程的精要，讓學生可以透過實際的案例來瞭解軟體工程的概念，為後續實際開發軟體系統奠定穩固的基礎。 此外每章的案例與習題，可以加深$405 


 博客來付款：

 
分享 









收藏
已收藏






    


物件導向系統分析與設計(第二版)



魯明德，新文京，出版日期：2013-07-15 一個資訊系統的開發，所需要的人力、財力、物力非常的大，如果一開始的系統分析工作沒有做好，日後在系統維護階段，將會耗費相當多的成本，而沒有實質的產出。因此，系統分析是資訊相關科系非常重要的一門$399 


 博客來付款：

 
分享 









收藏
已收藏






    


UML物件導向系統分析與設計(第三版)



游峰碩，博碩，出版日期：2017-01-23 本書以物件導向技術為主軸，輔以UML為塑模工具來闡述有關近代資訊系統開發之方法。適用對象包含任何對系統開發有興趣之同學，程式設計師，軟體工程師，及系統分析師。 本書主要是從以下幾個觀點來介紹系$420 


 博客來付款：

 
分享 









收藏
已收藏






    


【書寶二手書T6／大學資訊_YBA】物件導向系統分析與設計結合MDA與UML_吳仁和



$269  約可獲點 2 點數  一點抵一元喔！ 


 樂天市場書寶二手書店(771)地區：泰山區 
分享 









收藏
已收藏






    


電子書 UML物件導向系統分析與設計(第二版)



作者：游峰碩出版社：博碩文化股份有限公司ISBN：978-986-201-485-1出版日期：2011-06-24線上出版日期：2013-01-29發行格式：EPUB,PDF$392  ※【此商品為電子書非實體書】※訂購前請務必註意  


 udn買東西購物中心付款：

 
分享 









收藏
已收藏






    


UML 3函數物件導向視覺化系統分析與設計寶典(附光碟)



孫惠民，易習圖書，出版日期：2014-05-01 ■ 市面第一本詳述最新系統分析與設計方法的教材 ■ 本書附贈高達90M以上的UML範例模型圖 ■ 第一本詳細教導讀者如何塑造ORM的系統分析用書 ■ 使用最新的UML設計發工具來塑造各類UML模型 「物件導向$618 


 博客來付款：

 
分享 









收藏
已收藏






    


UML物件導向系統分析與設計(第二版)



$442 


 Yahoo超級商城金石堂網路書店(2678) 
分享 









收藏
已收藏






    


【書寶二手書T6／大學資訊_YBA】物件導向系統分析與設計結合MDA與UML_吳仁和



$269 


 Yahoo超級商城書寶二手書店(1006) 
分享 









收藏
已收藏






    


物件導向系統分析、設計與實作



出版商: 博碩 出版日期: 2006-03-17 定價: $480 售價: 7.8 折 $374 語言: 繁體中文 頁數: 368 ISBN: 9575278925 ISBN-13: 9789575278922$374 


 天瓏網路書店付款：

 
分享 









收藏
已收藏






    


物件導向系統分析、設計與實作



$374 


 天瓏網路書店付款：

 
分享 









收藏
已收藏






    


物件導向系統分析與設計



一個資訊系統的開發，所需要的人力、財力、物力非常的大，如果一開始的系統分析工作沒有做好，日後在系統維護階段，將會耗費相當多的成本，而沒有實質的產出。因此，系統分析是資訊相關科系非常重要的一門課程，隨著資訊科技的進步，系統分析的方法論，早已從結構化的系統分析方法邁入物件導向的系統分析方法。本書以深入淺出的案例，介紹UML的九種圖形，讓讀者藉由實際案例瞭解這些圖形之間的關係，以及繪製方法，是一本好教易$378 


 三民網路書店付款：





 
分享 









收藏
已收藏






    


物件導向系統分析與設計－結合 MDA 與 UML, 4/e



出版商: 智勝 出版日期: 2012-06-12 定價: $700 售價: $700 貴賓價: 9.5 折 $665 語言: 繁體中文 頁數: 666 ISBN: 9577298850 ISBN-13: 9789577298850$665 


 天瓏網路書店付款：

 
分享 









收藏
已收藏






    


物件導向系統分析與設計－結合MDA與UML, 5/e



出版商: 智勝 出版日期: 2015-10-31 定價: $700 售價: $700 貴賓價: 9.5 折 $665 語言: 繁體中文 ISBN: 9864570129 ISBN-13: 9789864570126$665 


 天瓏網路書店付款：

 
分享 









收藏
已收藏






    


物件導向系統分析與設計, 2/e



出版商: 文京 出版日期: 2013-07-14 定價: $420 售價: $420 貴賓價: 9.5 折 $399 語言: 繁體中文 頁數: 308 ISBN: 9862367814 ISBN-13: 9789862367810$399 


 天瓏網路書店付款：

 
分享 









收藏
已收藏






    


UML物件導向系統分析與設計, 3/e



出版商: 博碩 出版日期: 2017-01-22 定價: $560 售價: 7.8 折 $437 語言: 繁體中文 頁數: 480 ISBN: 9864341812 ISBN-13: 9789864341818$437 


 天瓏網路書店付款：

 
分享 









收藏
已收藏






    


UML物件導向系統分析與設計, 3/e



$437 


 天瓏網路書店付款：

 
分享 









收藏
已收藏






    


UML物件導向系統分析與設計教程（簡體書）



本書是由多年從事軟體工程教學的教師和科研人員根據教學的特點精心組織和編寫的。$194 


 三民網路書店付款：





 
分享 









收藏
已收藏






    


UML物件導向系統分析與設計 (第3版)



作者:游峰碩
博碩文化股份有限公司 本書以物件導向技術為主軸，輔以UML為塑模工具來...$504 


 誠品書店付款：

 
分享 









收藏
已收藏






    


系統分析與設計: 物件導向與 UML 4/e Bennett (授權經銷版)



作者：黃協弘 譯；Bennett, McRobb,... ISBN：9789863411789$680 


 東華書局付款：

 
分享 









收藏
已收藏






    


UML 3 函數物件導向視覺化系統分析與設計寶典



出版商: 易習(知城) 出版日期: 2014-05-17 定價: $650 售價: 9.0 折 $585 貴賓價: 8.5 折 $553 語言: 繁體中文 頁數: 576 ISBN: 9865835762 ISBN-13: 9789865835767$553 


 天瓏網路書店付款：

 
分享 









收藏
已收藏






    


物件導向系統分析與設計技術經典─視覺化 CASE 軟體與 UML 2.0 實作解析



出版商: 松崗 出版日期: 2007-10-25 定價: $450 售價: 5.0 折 $225 語言: 繁體中文 ISBN: 9862040777 ISBN-13: 9789862040775$225 


 天瓏網路書店付款：

 
分享 









收藏
已收藏






    


物件導向系統分析與設計技術經典─視覺化 CASE 軟體與 UML 2.0 實作解析



$225 


 天瓏網路書店付款：

 
分享 









收藏
已收藏







加入BigGo粉絲團，掌握即時特價訊息







 即時熱搜商品    新疆嚴選若羌紅棗 小包裝300g 【樂活生活館】 $110  13:02:34  樂天市場  Pet's Talk~澳洲EZYDOG-DFD-STANDARD 標準浮水衣/救生衣 - XL號 $1,950  13:02:37  Yahoo超級商城  佳味珍奶香塔塔醬250G/瓶【愛買冷藏】 $59  13:01:57  Yahoo超級商城  ［Lasko 美國］AirSmart智多星 小鋼砲渦輪噴射風扇-白 U11300 送除甲醛車用清淨機 $3,550  13:02:31  Yahoo超級商城  日本NPG╱慾望女- 激情內褲 ( 特製內褲+震動器 ) 情趣用品 $550  13:01:39  樂天市場  CASIO G-SHOCK 悍將分層運動腕錶/GST-210B-1ADR $8,925  13:02:07  樂天市場  【行車百匯】 HP 原廠電力線 適用 F550G F555G F890G ONPRO Z01 F800X $990  13:02:42  Yahoo超級商城  KOOPIN K歌神麥 無線藍芽麥克風 K8 $3,690  13:02:21  myfone購物  〔小禮堂〕大耳狗 造型彈性水壺套《藍白.粉紅蝴蝶結》襪子材質 $220  13:01:43  樂天市場  樂天小熊巧克力餅乾37g $40  13:02:49  GoHappy快樂購物網  美圖 Meitu T8 4G/128G 智慧手機 魔力橙 $17,300  13:01:42  機迷坊  Lenovo MiiX 720 12吋筆電(i7-7500U/16GB/F512/win pro $46,990  13:02:27  Yahoo購物中心  【愛鐵強】TP7000強效引擎全面保護劑(luxgen納智捷 hyundai現代 honda本田 MAZDA馬自達 toyota 豐田) $650  13:02:45  momo購物網  登山包-07寒區攜行具軍用背包登山包男背囊旅行70L升大【智多星3C館】TW $1,090  13:03:00  Yahoo超級商城  【sunlong 三榮行】韓國 印尼 原裝家電專用雙向變壓器 110V 轉 220V 1500W 免運費 $1,600  13:02:35  蝦皮商城  ★含標準安裝★【格力】變頻分離式冷氣GSE-29CO/GSE-29CI《4坪》 $17,553  13:02:54  神腦線上  【名流寢飾家居館】靜香．100%天絲．60支．超柔觸感．特大雙人床罩組 $8,200  13:02:30  樂天市場  C181微型攝影機警用密錄器800萬高階HDR感光組件 $1,315  13:02:44  樂天市場  多用途不鏽鋼伸縮桿(1組入) $210  13:02:05  momo購物網  SOBDEALL 沙伯迪澳 - 植鞣牛皮拉鍊短夾 $3,510  13:02:06  Yahoo購物中心  







 即時熱門搜尋：
周大福  耐熱線  義大 樂園 門票  日本 TAACHAN  萬年曆 翻頁鐘  



123456789下一頁 




































三民網路書店>物件導向：系統分析與設計-黃仁伯























會員登入

                | 購物車
                | 會員專區
                | 客服中心



TOP
















                                             
              首頁  
              三民‧東大出版品  
              親子  
              文具禮品  
              生活市集  
              漫畫  
              教科考用  
              簡體  
              外文  
      學習網 




燙手新書 |
搶先預購 |
暢銷書榜 |
得獎作品 |
政府出版品 |
精選套書 |
大學出版社 |
加價購 |





│紅利積點兌換 | 
啟用通關密碼


                      
                











所有欄位關鍵字
商品名稱
ISBN
作者
出版社/品牌
繁體書
簡體書
港版書
文具/禮品
生活市集
設計文創
影音商品
紅利兌換商品






















































                一般分類
            









親子共讀
電腦書
財經企管
文學作品
語言學習
藝術設計
休閒生活
社會人文
宗教命理
科學‧科普
醫療保健









中國圖書分類




000 總論
100 哲學類
200 宗教類
300 科學類
400 應用科學類
500 社會科學類
600 史地類一
700 史地類二
800 語文類
900 美術類

 


























物件導向：系統分析與設計





ISBN13：9789868950252
ISBN9：986895025
出版社： 歐亞書局有限公司
作者：黃仁伯
規格(高/寬)：26*19cm
出版日：2013/12/01
中國圖書分類：電腦程式設計


 








定  價：NT$500元
單次購買 10 本以上 95折
可得紅利積點： 15 點 
參考庫存： 無庫存，下單後立即進貨(採購期約7~10個工作天)










                                    分享： 



























































首頁 │ 
                            公司簡介 │ 
                            異業合作 │ 
                            人才招募 │ 
                            圖書館採購／編目 │ 
                            門市公告&三民禮券兌換處 │ 
                            好站連結 │ 
                            三民‧東大‧弘雅圖書目錄 │ 
                            古籍‧古典圖書目錄





















軟體工程(Software Engineering;SE)
















軟體工程(Software Engineering;SE)
本網頁以打造無障礙閱讀為目標，可以用任何瀏覽器來觀看本網頁


      軟體工程這門課程在國內教育上，資工與資科等系所會列為必修而資管僅列為選修而已，資管會列為必修的是系統分析與設計，但系統分析與設計只是整個軟體工程的一小部分而已，所以資管出身的資訊人是一定要瞭解的啦....。
    


簡介

軟體工程

軟體開發架構的演進

系統分析與設計


結構化技術

物件導向技術


統一塑模語言(Unified Modeling Language,UML)

樣式理論(Pattern Theory)

資料庫正規化

CMMI(Capability Maturity Mode Integrated)

參考書目

網路資源



      簡介

      1968年秋季，NATO（北約）的科技委員會召集了近50名一流的編程人員、計算機科學家和工業界巨頭，討論和制定擺脫“軟體危機”的對策。在那次會議上第一次提出了軟體工程（softwareengineering）這個概念。 
      大多數軟體開發項目的失敗，並不是由於軟體開發技術方面的原因。它們的失敗是由於不適當的管理造成的。遺憾的是，盡管人們對軟體專案管理重要性的認識有所提高，但在軟體管理方面的進步遠比在設計方法學和實現方法學上的進步小，至今還提不出一套管理軟體開發的通用指導原則。
「新技術一直冒出來，學都學不完了，那裡有空搞軟體工程」、「計畫趕著進行，做都做不完了，那裡有空搞軟體工程」...... 就在這一個又一個的藉口中，原本可以幫助軟體產業進步的軟體工程，竟然變成他們口中阻礙軟體產業進步的絆腳石似的，怎不令人對他們的無知感到心寒。

      寫程式的難度愈來愈低，因為程式語言越來越高階，API 越來越多，開發工具越來越好用，寫程式的門檻自然就大大地降低了。想要開發出有價值的中大型系統，軟體工程就很重要了，以蓋房子來說，你可以隨便找一兩個工人用磚或木材來蓋一棟矮房，但是如果想蓋一百多層樓的101大樓，你非得有良好的工程規劃不可，軟體不也是如此？程式設計師名片上的頭銜都是工程師，雖然和建築工程師、機械工程師... 一樣都被稱為工程師，但比較起來，軟體產業的工程師卻是最不工程導向的 。



      軟體工程

      軟體工程包括兩方面內容：軟體開發技術和軟體專案管理。 
    

軟體開發技術包括軟體開發方法學、軟體工具和軟體工程環境。 
軟體專案管理包括軟體度量、項目估算、進度控制、人員組織、配置管理、項目計畫等。 

      軟體工程是為瞭解決軟體危機而誕生，近來最熱門的技術有
      
UML
Design Patterns
re-engineering
XP 



        軟體架構
      
      已成為軟工熱門的研究之一。
開發流程由強調瀑布式流程(waterfall)轉為強調反覆式流程(iterative)。 反覆式流程的主要精神是分析一些，設計一些，實作一些，執行一些，也就是將整個開發流程切割成數個週期(iteration)，每個週期都是一個叫小型的直線式流程，並且強調週期結束時都有可以執行的結果，而每個週期都是以前一週期的結果為基礎，在新增需求的方式進行，直到所有的軟體需求都滿足為止。因此反覆式流程也是一種漸增式流程(降低風險)。以結果來看，瀑布式流程只會交付一次產品，反覆式流程會交付多次產品。


      SA -> SD -> coding -> test -> installation -> maintance 
    
process

Quality Assurance
Configuration Management
Project Management
CMM 

software system


      bussiness application
      
TPS,DSS,MIS,ES


      web application
      
Web System
Web Service 
E-service : marketing+MIS

real-time
safety-critical

safety critical system

      常用的formal工具 : Petri Nets
    

Petri Nets 的 reachability graph 常因可能的狀況太多而不可能分析，所以有許多論文會討論如何簡化它
現今也常用在電子商務上

軟體開發架構的演進
      

      隨著Internet的興起，分散式系統的環境日趨成熟，要將整個Internet視為區域網路般的存取資源與交換資料，程式設計上就必須考慮到所謂的3層式架構 
    


        展示層(Presentation Tier) 
      

        將UI的部分獨立出來，除了可讓專業的美工處理之外，還要考慮到程式邏輯的變動不會影響到畫面，或是畫面的變動不會影響到程式邏輯 
      

        商業邏輯層(Business Logic Tier) 
      

        將企業運作的邏輯獨立成元件，以方便更新程式碼時只需要異動相關的元件即可 
      

        資料層(Data Tier) 
      

        將關於資料存取的部分獨立出來，如此一來在變動資料庫架構時便不需要更改程式邏輯或畫面 
      

    接下來，讓我們來瞭解程式開發架構是如何由1-Tier走向N-Tier的
    單機架構(1-Tier)

      展示層，商業邏輯層，資料層都在單機上處理，適用於文字處理，個人資料處理(PIM)等單機架構，其瓶頸為
    

檔案型的資料有傳輸浪費頻寬與異動需鎖定等問題
商業邏輯或使用者介面改變，需重新部署

主從架構(Client/Server , 2-Tier)

      將資料層分離出來，儲存到資料庫伺服器，適用於多人存取資料的環境，其瓶頸為
    

商業邏輯或使用者介面改變，需重新部署
資料庫伺服器容易成為效率的瓶頸，例如Client端的連線數會增加伺服器connection紀錄負擔 
      
        //因此我們應該只在取用資料與將資料回存時才進行connection
      

      商業邏輯應該放在client或server端的問題
      
放在前端，資料庫可不受限制的抽換，但商業邏輯改變，需重新部署
放在後端，通常是利用Stored Procedure，但這樣就不易抽換資料庫軟體


分散式架構(N-Tier)

      將展示層，商業邏輯層(放在AP Server)，資料層(放在Database Server)都各自獨立，適用於平臺不同，網際網路的環境。
      
      若展示層以一般開發工具開發稱為
      
        Rich Client
      
      ，若利用動態網頁技術運作於瀏覽器上則稱之為
      
        Thin Client
      
      。 
      
      其瓶頸為
    

AP Server 與 Database Server除了穩定運作的需求外，也易成為效率的瓶頸
需要能將商業邏輯包裝成元件的技術，門檻較高

網路服務(Web Service)

      將整個網際網路視為區域網路甚或是作業系統般，徹底實踐分散式系統的美麗新天地，使用網際網路上的資源就如同取用單機資源一般容易，主要是利用XML作為資料轉換的標準，透過SOAP通訊協定穿過防火牆，打破網際網路的隔閡，目前有Sun 的Java One架構與Microsoft的.NET架構可供參考。
    


      系統分析與設計(Systems Analysis & Design)
資訊系統的種類

交易處理系統(Transaction Processing System;TPS) 
管理資訊系統(Management Information system;MIS)
決策支援系統(Decision Support System;DSS)
高階主管資訊系統(Executive Information System,EIS)

      專家系統(Expert System;ES)
      
使用者介面
推理機
知識庫

操作性系統(Operational Systems)
辦公室自動化系統(Office Automation Systems;OA)

資訊系統的建置策略


      公司內部獨力完成
      
使用者自建(End User Development;EUD)
資訊部門發展


      公司外部取得
      
委外開發(Outsourcing)
套裝軟體(Application Package)


      其他方式
      
與軟體公司合作等


系統開發模式(SoftWare Process Model)
瀑布式(Waterfall)



        編碼與修正模式(Code-andfix Model)
      


        階段模式(Stagewise Model)：Benington(1956)
      

      瀑布模式(Waterfall Model)：Royce(1970)
      = 系統發展生命週期(System Development Life Cycle;SDLC)
      

        特徵
        
適用於需求明確，領域知識(Domain KnowHow)容易取得的專案
強調開發過程需有完整的規劃，分析，設計，測試及文件等管理控制
前一階段完成後才能進入下一階段，各階段僅循環一次
沒有明確規定要劃分成多少個階段，每一階段皆有文件產出


        至少劃分3階段
        
分析
設計
實施


        通常劃分5~7階段不等(每一家學說都不同,掌握精神即可)
        
初步調查 (Preliminary Investigation) 
系統分析 (System Analysis) 
系統設計 (System Design) 
系統開發 (System Development) 
系統實施與評估 (System Implementation and Evaluation) 




      反覆式(Iterative)


      漸增模式(Incremental Model)：Mills(1971)
      
強調需求可分成幾個部分
開發週期可反覆進行


      雛形模式(Prototyping Model)：Bally(1977)
      
適用於需求不明確，專案小，應用領域不熟悉或高風險之專案
強調雛形之快速開發，以雛形作為使用者與資訊人員溝通之工具，使用者高度參與等

        雛形策略
        
演進式雛形(Evolutionary Prototyping)
用後丟棄式雛形(Rapid Throwaway Prototyping)：因成本較高，故適用於風險最高的情形



      螺旋模式(Spiral Model)：Boehm(1988)
      
強調「風險分析」結合了SDLC與雛形模式

        螺旋模式的4個步驟
        
找出系統目標，可行方案與限制
依目標與限制評估方案
開發雛形
使用者評估，決定下一步驟



      同步模式(Concurrent Model)：Aoyama(1993)
      
構想源於製造業的同步工程(Concurrent Engineering)目的在於縮短產品開發時間，適用於套裝軟體的專案

        同步模式的構想
        
活動同步(Activity Concurrency)：不同團隊平行開發
資訊同步(Information Concurrency)：不同團隊資訊共享
整合性的管理系統：協調各種資源的互動關係



需求擷取與分析
使用者需求的分類

巨觀需求：欲電腦化的環境，作業程序與範圍，輸出與輸入所需之資訊或表單及系統目標，限制，主要功能等，盡可能在需求分析階段中釐清與確定。
細部需求：使用者介面之要求，例外狀況之處理，錯誤及輔助訊息之顯示，通常到設計階段處理。

需求的擷取方式

查閱文件 
實地觀察(Observation)

      訪談(Interview)
      
開放式訪談(Open Interview)：類似交談
結構化訪談(Structured Interview)：類似詢問


      問捲
      
簡單隨機抽樣
分層抽樣
便利抽樣
判斷抽樣

開會討論

      聯合開發(Joint Application Development;JAD)
      
範圍界定
關鍵人員的熟悉
會議準備
會議進行
文件產生


需求的表達工具


      流程圖(Flow Chart)
      
□：表達作業處理，可配合
        處理描述
◇：表達流程控制
→：表達資訊流向
波浪形：表達資訊的展示與儲存，可配合
        藍圖(Drawing)
        與
        資料詞彙(Data Glossary)


需求分析文件的樣版

問題描述
新系統目標
新系統限制

      使用者需求
      

        流程圖
        
處理描述
藍圖
資料詞彙



系統分析與設計的兩大技術


結構化技術
      ：將資料與流程分開考慮
      
流程塑模：主要透過資料流程圖(DFD)
資料塑模：主要透過實體關係模式(E-R Diagram)
使用者介面塑模


物件導向技術



      結構化技術


      結構化設計(1960)：強調系統的結構化與可維護性，決定系統應有哪些模組(模組名稱,輸入,輸出,內部資料,處理邏輯)
      

          結構化技術所需工具
        


            文件
          

            工具
          

            經驗法則
          

            評估準則
          



            結構圖(Structure Chart)
          
 
            
          

            模組大小：小模組200行以內
          

內聚力




            HIPO圖(Hierarchical Input Process Output)
          
 
            
          

            控制間距：(Magic Number 7±2)
          

耦合力




            處理規格描述(Process Specification)
            
結構化英語(Structured English) 
程式設計語言(Program Design Language;PDL)


 
            
          

            影響範圍
          
 
            
          



            資料字典(Data Dictionary;DD)
          
 
            
          

            控制範圍
          
 
            
          



      結構化分析(1970)：利用圖形化文件工具(Graphic Documentation Tools)進行企業流程及企業資料格式塑模
      

        事件列(Event List)
        
資料流導向：客戶輸入代號
時間導向：下午3點要簽發支票
控制導向：系統的開啟或關閉


        環境圖(Context Diagram)
        
○：系統
□：外部實體
→：資料流


        資料流程圖(Data Flow Diagram;DFD)：表達系統作業處理與資料流之關係
        

          表示符號
          
□：外部實體(Entity)
→：資料流(Data Flows)
○：處理(Process)
二：資料儲存(Data Store)


          建構方式
          
由上往下分割(Top-Down Partitioning)
由中間往外分割(Middle-Out)：Yourdon-1988



        實體關係圖(Entity-Relationship Diagram;ERD)
        

          表示符號
          
矩形：代表實體類型 (Entity Type) 
菱形：代表實體類型與實體類型間之關係 (Relationship) 
橢圓：代表實體類型或關係之屬性 (Attribute) 
直線：把屬性連結到實體類型或把實體類型連結到關係 
基數率(Cardinality Ratio)：代表實體類型與實體類型間之關係程度。常見的基數率是「1:1」、「1:N」及「M:N」三種
參與限制(Participation Constraint)：個體的存在是否藉由與另一個個體之間的關係而存在。參與限制分為「全部參與（Total Participation）」、「部份參與（Partial Participation）」兩種。


處理規格描述(Process Specification)
狀態轉移圖(State Transition Diagram;STD)


      結構化程式設計(1969)：Dijkstra提出，避免GOTO所造成的混亂
      
循序(Sequence)：compute,read,write
選擇(Condition)：if then else, case 
重複(Repetition)：do while 


      由上而下發展
      
由上而下設計(Top-Down Design)
由上而下編碼(Top-Down Coding),由下而上編碼(Bottom-Up Coding)

        由上而下實施(Top-Down Implementation)由上而下測試(Top-Down Integration Test)
        

          白箱測試：由上而下或由下而上依功能測試
          
單元測試
整合測試


          黑箱測試：情況極端與例外的測試
          
系統測試
驗收測試




結構化分析與設計的評估準則
    良好的設計希望達到模組的內聚力為功能內聚力，耦合力為資料耦合力
    

      內聚力(Cohesion)：衡量模組完成一件工作的程度



        功能內聚力(Function Cohesion)
      
      ：單獨處理一件工作


        順序內聚力(Sequential Cohesion)
      
      ：模組順序執行，一個模組的輸出會成為下一組的輸入


        溝通內聚力(Communication Cohesion
      
      )：使用相同的資料
暫時內聚力(Tempral Cohesion)：模組執行無順序關係但須在一定時間內完成一件工作
程序內聚力(Procedural Cohesion)：按照順序執行而不共用資料
邏輯內聚力(Logical Cohesion)：根據上層模組傳來的參數決定執行的功能
偶發內聚力(Coincidental Cohesion)：模組可做好幾件不相干工作，各模組具有功能內聚力



      耦合力(Coupling)：衡量模組間相互關連的程度


        資料耦合力(Data Coupling)：模組間藉由資料傳遞參數

        資料結構耦合力(Stamp Coupling)：模組各自使用資料結構的一部份
控制耦合力(Control Coupling)：A模組傳遞旗標控制B模組
共同耦合力(Common Coupling)：兩模組使用相同的資料區
內容耦合力(Content Coupling)：A模組可使用B模組的程式碼或改變其變數



      物件導向技術(Object-Oriented Technique，OOP)

針對日趨複雜之軟體需求的挑戰，軟體業界發展出了物件導向 (OO) 的軟體發展模式，作為針對「軟體危機」的最佳對策。
物件導向之觀念起源於模擬語言(1966, Simula 語言)，以物件模式來描述真實系統，並將資料抽象化(Data Abstraction)、封裝、繼承與同名異式的觀念融入於物件系統開發中。 
第一個純粹的OOP語言：1980全錄(Xerox)公司的PARC研究中心所開發的
      
        Smalltalk-80
      


      OOP的先驅 Brad Cox 曾提出Software-IC的概念，而要達到軟體IC的概念，則需要下列特性
    

物件 & Message 
繼承性(inheritance)
封裝性(encapsulation)
動態連結(dynamic binding)

抽象化(Abstraction) 

抽象化所描述的過程，就是由許多物件中抽離出重要的特性來，而這些特性，足以讓被抽象化的物件，與別的物件分別開來。同時，對於物件抽象化的結果，也因我們的需要不同，而有所變化。
所有的抽象化都是系統的發展，為了維繫存在，必須適應變化的唯一路途。
抽象化的目標與物件導向一樣，就是『讓我們更容易模擬世界，並加以處理』。



      物件(Object)=案例(Instance)

由一群具有相同資料結構與相同行為的物件所描述的集合中，某一個特定且存在的物件。
物件是一個具有狀態(State)、行為(Behavior)與識別(Identity)的實體或抽象化概念(Abstract Concept)，且其行為會影響其狀態。
物件是一個封包，包括了名稱(name)、
      
        屬性(attribute)
      
      及
      
        操作(operation)
      
      3部分。
      
在C++中稱為
        
          資料成員(Data Member)
        
        與
        
          成員函式(Member Function)
        

      在Java中稱為
      
        欄位(Field)
      
      與
      
        方法(Method)
      
每一個物件都是一個被class所分類的instance (Every object is an instance of a class)



      類別(Class)=物件類型(Object Type)=抽象化資料型態(Abstract Data Type;ADT)

由一群具有相同資料結構與相同行為的物件描述，所形成的集合，經由抽象化(Abstraction)後稱之為類別。
類別是一種定義(Definition)、描述(Description)、樣版(Template)，故可以類別建立新的物件。

封裝(Encapsulation)

將資料與操作此資料的方法包裝成一個物件稱之為封裝。

      封裝後物件的結構分為2部分
      1.介面(Interface)2.實作(Implementation)
封裝將物件的實作細節隱藏，使其與外界環境隔離，只允許該物件所包含之操作修改其資訊，稱之為資訊隱藏(informatiion hiding)。

繼承(Inheritance)


      所謂繼承就是從基底類別(base class)，建立衍生類別(derived class)。衍生類別除了繼承基底類別的所有特性外，可依據需求建立新的功能或修改，其基底類別不會受任何影響。繼承可提升程式碼的重複使用性(reusability)。
      

        多重繼承(multiple inheritance)：一個類別可以直接繼承多個基底類別─網路結構。多重繼承最常引發的麻煩便是「模稜兩可」(ambiguity) 。
簡單繼承(single inheritance)：一個類別最多只能直接繼承一個基底類別─樹結構。


      類別間的層級關係
      
父類別(Superclass)、泛化、一般化(Generalization)：萃取類別的相同屬性與操作所成的上層類別。
子類別(Subclass)、繼承、特殊化(Specialization)：在既存類別下，加上專門的特性所成的下層類別。
「is a」的關係：子類別 is a 父類別，如鋼琴是樂器。


同名異式(Polymorphism)=多型=動態繫結(Dynamic binding)

定義相同名稱的操作，以不同的方式處理不同類型的資料。
多型在程式執行期利用動態連結(Dynamic Binding)的方式判斷訊息參數的類型與個數來決定運作的方法。

      達到物件導向中「多型」的方法
      
抽象類別 (abstract class)：抽象類別是為了讓方法的使用更多樣化，物件轉換型別為抽象類別後，即使方法名稱相同，其實作的內容與執行結果卻不同。 


物件導向的系統開發方法(Process)

      物件導向的系統開發是一個反覆(Iterative)的過程，包括了三個階段
    

需求分析 ->
      
      (需求模式) 主要以使用個案圖、活動圖、藍圖、資料詞彙、介面元件等作為表達工具。
系統分析與設計 -> 
      
      (分析模式) 將需求模式中的系統表達成一個物件架構，包括了物件圖與類別圖 
      
      (設計模式) 將物件架構至現況之實施環境，包括了循序圖、合作圖、狀態圖、活動圖。
實施與測試 ->
      
      (實施模式)元件圖、部署圖。
      
      (測試模式)

    這種反覆的開發方式，在每個iteration(反覆的期間)結束後，希望能產生具備產品品質、測試、整合過的軟體出來，所以會有多個發行版本(release)存在
    

        重要的物件導向的系統開發方法
      


          方法名稱
        

          方法論者(3 Amigo)
        



          Booch
        

          Grady Booch 
        



          OMT(Object Modeling Technique)物件塑模技術
        

          Jim Rumbaugh 
        



          OOSE(Object-Oriented Software Engineering)物件導向軟體工程
        

          Ivar Jacobson 
        



          RUP(Rational Unified Process)Rational統一流程
        

          Rational / IBM 
        



          XP(eXtreme Programming)極致程式設計
        

          Kent Beck 
        



          要看看還有哪些系統開發方法，可參考： 
          http://www.cetus-links.org/oo_ooa_ood_methods.html



Booch

      Booch之方法將系統開發過程分為
      觀念期、分析期、設計期、進化期、維護期，常用於大型軟體專案。
    

觀念期：確定核心需求
分析期：發展系統行為模式
設計期：建構系統架構
進化期：改良系統
維護期：改良移交後之系統

OMT

      Rumbaugh之OMT方法將系統開發過程分為 觀念形成、物件導向分析、物件導向設計三個階段，常用於企業資訊系統。
    
OOSE

      Jacobson之OOSE方法將系統開發過程分為 分析、建構、測試三個階段，以使用個案著名。
    
RUP

初始階段(inception)
詳述階段(elaboration)
建構階段(construction)
轉換階段(transition)

物件導向的塑模 = 軟體架構

      軟體開發如同音樂譜曲及建築設計，其過程中必須將需求、分析、設計、實作、佈署等各項工作流程之不同觀點予以呈現，這就是軟體系統之塑模(Modeling)。 
    

      Booch等人 / Rational Software 提出可從4+1觀點(4+1 view)來看軟體系統架構(凸顯使用個案的重要性)
    

使用個案觀點(Use Case View)：以使用個案充分表達軟體功能需求
設計觀點(Design View)：以物件的觀念，表達出軟體設計結果 (Logical View) 
流程觀點(Process View)：
實施觀點(Implementation View)
佈署觀點(Deployment View)


      根據上述5個觀點我們可以整理出6種塑模
    

使用個案塑模：使用個案圖
物件資料結構塑模：類別圖、物件圖
物件互動行為塑模：互動圖(包含了循序圖、合作圖)
作業行為塑模：活動圖、狀態圖
使用者介面塑模：
系統元件與組織結構塑模：元件圖、部署圖

物件導向的軟體維護

軟體的維護就是軟體的再生，維護較開發而言要花更多的金錢與時間
軟體維護的思維上就是要考慮到
      
        可維護性(Maintainability)
      
      與
      
        可重複使用性(Reuseability)
      
傳統的重複使用方案並無法兼顧可維護性與可重複使用性的目標，物件導向設計的重複使用方式可在含有宏觀商業邏輯的抽象層次的上層結構來考量，以達到可維護與可重複使用的目標。

物件導向類別設計的法則

開閉原則(Open-Closed Principle ; OCP)
Liskov代換原則(Liskov Substitution Principle ; LSP)
依賴倒轉原則(Dependency Inversion Principle ; DIP)
介面隔離原則(Interface Segregation Principle ; ISP)
組合/聚合重複使用原則(Composition / Aggregation Principle ; CARP)
Demeter原則(Law of Demeter; LoD)


開閉原則(Open-Closed Principle ; OCP)



        模組應當敞開擴充大門，但關閉修改之窗
      
      。
如何達成開閉原則，關鍵在抽象化。
不允許更改的是系統的抽象層，允許擴充的是系統的實作層。
OCP的另一個角度是EVP對可變性的封裝原則(Principle of Encapsulation of Variation)即找到一個系統的可變因素，並將之封裝起來。
可變性必須被封裝，那不同的可變性呢？應用繼承來處理，因此繼承應被視為封裝變化的方法，但繼承的層數避免超過2層以免不同的可變性混和。
應避免將單純的流程控制轉移語句改寫成多型，除非內含了某種商務邏輯。
所有的設計樣式(Design Pattern)都是針對不同的可變性封裝，使系統在不同的角度上達到開閉原則。


      Liskov代換原則(Liskov Substitution Principle; LSP)



        子類別應該可以使用其基礎類別替代
      
      。
Liskov代換原則是繼承之所以能重複使用的基石，只有當衍生類別可以替換掉基礎類別，且軟體的功能不受影響時，其類別才算真正的被重複使用，而衍生類別也才能夠在基礎類別的基礎上增加新的行為。
Liskov代換原則要求凡是基礎類別使用的地方，衍生類別一定適用，故衍生類別必須包含全部基礎類別的介面

      針對違反LSP設計時可行的重構(Refactoring)方式
      
當類別A錯誤的繼承類別B時，可建構一個新的抽象類別C，作為2個具體類別A,B的父類別
當類別A錯誤的繼承類別B時，可重構為類別B委派(Delegate)類別A



      依賴倒轉原則(Dependency Inversion Principle; DIP)



        要依賴於抽象，而不要依賴於具體
      
      。

      依賴倒轉原則的策略是依賴介面或抽象方法及類別，而不是具體方法或類別，包括了下列情況都得遵循DIP
      
變數的類別宣告
參數的類別宣告
方法的傳回型態宣告
型態的轉換

抽象層級含有宏觀和重要的商務邏輯，具體層級含有與實作有關的演算法語次要的商業邏輯，而傳統的程序性設計或錯誤的類別規劃會讓抽象層級依賴於具體層級，因此依賴倒轉原則可倒轉此一現象，讓實作改變時，商業邏輯無須變動。
一個具體Java類別應當只實作Java介面和抽象Java類別中宣告的方法，而不應當給出多餘的方法。

      若Java程式要參照一個物件，若此物件有一個抽象型態，則應使用此抽象型態作為靜態型態(Static Type)
      
靜態型態(Static Type) = 實際型態(Apparent Type)：變數被宣告時的類別
實際型態(Actual Type)：變數所參照的物件真實型態

若一個物件存在其抽象類別，就應當在任何參照此物件的地方使用抽象類別

      Java語言中建構一個物件的程式是違背OCP與DIP的，但可在此類別被建構出來後過多型性使得使用端依賴於其抽象類別。
      
List employees = new Vector();

DIP是最難實作的原則，因為會使用到物件工廠就會產生大量的類別。
DIP假定所有的具體類別都是會變化的並不完全正確，因為某些具體類別是相當的穩定因此並不需要為此發明一個抽象型態。


      介面隔離原則(Interface Segregation Principle; ISP)

由客戶端指定的許多介面比一個一般用途的介面好。 
使用多個專門的介面比使用單一的總介面要好，否則會造成對介面的污染(Interface Contamination)。
一個類別對另一個類別的依賴性應當是建立在最小的介面上的。


      組合/聚合重複使用原則(Composition / AggregationPrinciple ; CARP)
Demeter原則(Law of Demeter; LoD)


      統一塑模語言(Unified Modeling Language ; UML)

由Rational software corporation融合了物件導向三劍客的方法論，統一了以物件導向分析與設計的表示法，於1997年11月由
      OMG(Object Management Group)
      公佈為物件導向視覺化塑模的標準，目前
      最新的版本為 2.0 (2003/06/01)
UML是一種塑模語言，而非方法論，它並沒有規範符號的使用時機與次序僅利用符號來達到溝通的目的，從分析，設計到實作都可以使用同一套符號來表達，因此應用時可以搭配適合的方法論。
UML之所以重要，就是因為他有助於軟體開發人員之間的溝通。我們必須在某種程度上使用他以協助溝通，而非阻礙溝通。
循序圖、合作圖合稱互動圖。

      UML設計的理念
      
使用個案導向(強調以使用者的角度來定義功能需求)
軟體架構設計(強調系統開發要有藍圖)
往覆，漸增式流程(強調降低專案風險)


使用個案圖(Use Case Diagram)

以OO技術開發系統時在需求分析時常利用典型的情節(Scenario)來進行需求塑模，這種個案模式一直沒有統一的表達方式直到Ivar Jacobson等人(1996) 才將使用個案的表達正式化。 
使用個案圖表示從使用者之觀點描述系統的行為者與系統間之互動行為與關係，包含了行為者和使用個案二個元件，此法在資料與展示格式上僅利用文字描述，若能搭配結構化中的藍圖與資料詞彙則可補強其不足之處。
使用案例是專業分工的依據，是專案進度評量的重要因素。

行為者(Actor) = 參與者

環境中與系統有互動關係的人或事物，有該使用個案的啟動者即
      
        主要行為者(Primary Actor)
      
      與其他參與者即
      
        次要行為者(Secondary Actor)
      
      。
參與者被繪製成一個火柴棒形狀的小人並將名稱置其下方。 

使用個案(Use Case)

使用者透過介面要求系統所做一系列相關的事件流，包含了最主要的事件即
      
        基本路徑(Basic Course)
      
      與其他衍生事件或可能發生的錯誤即
      
        替代路徑(Alternative Courses)
      
      。
使用案例被繪製成橢圓形並將名稱置於圖形內部或底部來表示 

      使用個案間的關係：
      
關聯(association)：使用個案與行為者之間的關係，以實線段表示。

        包含(Include)：一個使用個案會用到另一個使用個案，二個或以上的使用個案具有相同的行為模式時，可將該段行為模式獨立出來成為一個新的使用個案，再建立包含的關係，用一個虛線實心箭頭的線段並含有關鍵字 <<include>>  。
延伸(Extend)：在某情況下，使用個案會插入另一使用個案的定義中，用一個虛線實心箭頭的線段並含有關鍵字 <<extend>> 。

        一般化(Generalization)：一個使用個案繼承另一個使用個案的行為，
        用一個實線空心箭頭表示的線段從子使用個案指向父使用個案，且箭頭朝向父使用個案端。


情節(Scenario)

      使用個案中的某一個單一執行路徑，可能是基本路徑也可能是替代路徑。
    
建構使用個案圖的步驟

找出行為者：從環境圖找
找出使用個案：由行為者找出使用個案
描述使用個案：可用自然語言或事件條列式
找出使用個案間的關係：
繪製使用個案圖

類別圖(Class Diagram)

表示系統存在之類別、介面及它們間之靜態資料結構與邏輯關係

      通常以三層表示
      
類別名：正體字：具體類別，斜體字：抽象類別，介面：<interface>
屬性層：
方法層：


      屬性與方法有四種封裝方式
      
public:以符號
        
          + 
        
        表示
private:以符號
        
          -
        
        表示
protected:以符號
        
          # 
        
        表示
static:以符號
        
          _ 
        
        表示

描述介面的類別圖：沒有private的封裝
描述物件的類別圖：描述類別的實體，名稱下需加底線

關係

      類別間的關係包括了
    


      依賴 / 相依(Dependency)
      
使用的關係，表達一個類別會用到另一個類別
另一個類別的改變會影響到使用他的類別，但反之不必然
一類別的區域變數，方法參數，方法返回值，對靜態方法呼叫時是另一個類別時稱之
以虛線開箭頭表示。------->


      一般化(Generalization)
      
繼承的關係，包括了類別間的繼承，介面間的繼承，類別對介面的實作等
以實線空心箭頭表示。


      關聯/結合(Association)
      
同一層級的類別間靜態的結構關係
Java語言中是使用實體屬性實作的
其關係有雙向與單向，建議多用單向
關係有基數(Multiplicity)，關係有名稱，但通常均予以省略

        以實線段表示。 —
        

          依關聯的類別個數來分
          
二元關聯(Binary Association)
多元關聯(n-ary Association)


          依描述整體與部分的關係來分(不同層級的類別)
          
聚合 / 聚集(Aggregation)：以實線且整體端加一個空心的菱形表示。◇—
合成 / 組合(Composition)：整體物件需負責部分物件的生命週期，以實線且整體端加一個實心的菱形表示。◆—




      實現化(Realization)
      
以介面實現其他類別之描述
以虛線空心箭頭表示。


基數(Multiplicity) =多重性 

      在類別連線上與類別之旁以數字標示與之關聯的數量。
    
物件圖(Object Diagram)

描述系統於某一時間點的靜態結構，也稱為案例圖，包含了
      物件
      與連線二個元件。
物件間的關係稱為連線(Link)。

循序圖(Sequence Diagram)

以時間發生之先後順序來表達物件間的訊息傳遞與處理之程序，包含了類別之物件、訊息、操作、生命線與控制焦點等元件。

      循序圖有2個象線
      
垂直象線依照訊息呼叫發生的時間順序，來描述訊息呼叫的先後次序。
水平象線描述一個物件實體傳送訊息給哪一個物件實體。


訊息(Message) =刺激(Stimuli)

      由某一物件傳送訊息至另一物件以啟動操作，以上下位置表示順序。
    
生命線(Lifeline)

      表達物件再某時段的存在，以物件下與物件垂直之虛線表示。
    

      控制焦點 (Focus of Control) =啟動條(ActivationBar)

      表達物件執行某動作之時段，與生命線重疊且以高瘦的矩形表示。
    
系統邊界 (System Border) 

      系統與外界溝通之介面，通常放置在循序圖的最左側。
    
建構循序圖的步驟

確認物件
描述操作
描述訊息
繪製循序圖

合作圖(Collaboration Diagram)

著重表達物件間之連結結構，並能同時展現物件間的訊息傳遞與處理之程序，包含了類別之物件、連結、訊息與操作等元件。
Rational Rose可將循序圖直接轉換成合作圖。 
合作圖與循序圖相比較，少了物件生命線與焦點控制，多了路徑與序數

連結(Link)

      以直線連接二個物件也就是物件間的路徑(Path)。
    
訊息(Message)

      訊息發生順序以自然數或杜威數等編號來表達。
    
活動圖(Activity Diagram)
狀態圖(State Diagram)
元件圖(Component Diagram)
部署圖(Deployment Diagram)


      樣式理論(Pattern
      Theory)

研究一再發生的典型事例，以便研究者可以研習至融會貫通，舉一反三，推陳出新的理論，叫做樣式理論。
樣式不是發明，而是發現

      現代樣式理論：建築設計學家 亞歷山大 Christopher Alexander提出
      
無名之
        
          質
        
        (The Quality Without a Name ; QWAN)


          門
        
        (The Gate)


          道
        
        (The Way)：又稱作「永恆之道」(The Timeless Way)

Alexander認為 透過追尋「道」，可以通過「門」到達「質」是任何一種工程設計的發展過程


        「樣式是某外在背景環境 (Context) 下﹐對特定問題 (Problem) 的慣用解決之道 (Solution)
        」 
      
      。
樣式是不斷的重複發生，而有其重複性。但重複的不是問題的本身，而是問題的本質，所以要把不同問題以相同的樣式來處理，勢必要擷取其本質，也就是『抽象』。所以研究樣式必須重視問題本質而非問題的表象。同樣的問題的背景環境及解決之道也是抽象的。 
設計樣式是對軟體設計模型進行不斷追求完善的使用工具，但樣式的使用無絕對的公式，需要經過大量的個人實踐才能熟練掌握。
重構(Refacotrying)是對不滿意的程式碼進行彌補的時候所需要的技術，因此重構的存在證明瞭樣式並非軟體設計的銀彈(Silver Bullet)

      樣式的要素
      
名字(Name)
問題(Problem)
初始環境(Initial Context)
力(Forces)
解答(Solution)
舉例(Examples)
末態環境(Resulting Context)
推理(Rationale)
相關樣式(Related Patterns)
已知應用(Known Uses)


      樣式的種類
      

        設計樣式(Design Patterns)：GoF提出
        
建構型樣式(Creational Pattern)
結構型樣式(Structural Pattern)
行為樣式(Behavioral Pattern)

架構樣式(Architecture Patterns)
分析樣式(Analysis Patterns)：Martin Fowler提出
反樣式(Anti-Patterns)

物件導向樣式的經典：四人幫(Gang of Four ; GoF) 即Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides等四人，於1995年出版之 
      
        Design Patterns
      
      - Elements of Reusable Object-Oriented Software這本經典著作，包含23種軟體設計樣式，例如MVC Pattern，將軟體設計分為Model、View和Control三個部分，Model是屬於企業邏輯的部分，例如網路購物的交易機制；View是使用者介面的設計；Control則串連Model與View的程式碼。



      關聯式資料庫的正規化(normalization)
定義

      若關聯表中每一欄位的值都是唯一而不可分割的(Atomic)，則稱之為正規化
    
關聯式資料庫的鍵(Key)

候選鍵(Candidate key)：能在資料表中將各列分別出來的欄位(一個資料表可以有多個)
主鍵(Primary key)：從候選鍵中選出來作為主要鍵的欄位
替代鍵(Alternate key)：其他未被選為主鍵的候選鍵欄位
連結鍵(Concatenated key)：指候選鍵是由多個欄位所組成

一階正規化 (First Normal Form; 1NF)

      又稱為平坦檔(Flat File)，若關聯表中的任一行與任一列的交叉格(Cell)上均只有一個值，但會有插入，刪除，更改等異常(Anomalies)
    
二階正規化 (Second Normal Form; 2NF) 

      符合一階正規化的關聯表，再除去資料的
      
        部分功能相依(Partial Dependency)
      

      (將1NF中由部分主鍵就可以決定其值的欄位移出成為另一個關聯表)
    
三階正規化 (Third Normal Form; 3NF) 

      符合二階正規化的關聯表，再除去資料的
      
        遞移相依(Transitive Dependency)
      

      (將2NF中由非由主鍵決定其值的欄位移出成為另一個關聯表)
    
Boyce-Codd正規化 (Boyce-Codd Normal Form; BCNF) 

      符合三階正規化的關聯表，再除去任何因功能相依所造成的異常結果
    
四階正規化 (Fourth Normal Form; 4NF) 

      符合BCNF正規化的關聯表，再除去所有的多值相依
    
五階正規化 (Fifth Normal Form; 5NF) 

      符合四階正規化的關聯表，再除去剩餘的所有異常情況
    


      CMMI(Capability Maturity Model Integrated)
CMMI的由來

      美國國防部對於軟體的策略是希望外包(outsourcing)的，但為了掌握軟體 產品的品質與進度，希望開發過程能夠透明化，因此於1980 年時，提出對軟體承包商的軟體開發能力進行評估的要求。於是美國國防部與卡內基美隆大學(Carnegie-Melon University ; CMU)共同設立了軟體工程研究所(Software Engineering Institute; SEI)  
    

      SEI於1988年研究發佈了軟體開發程序成熟度框架(CMM)，提供了軟體開發程序評估和軟體能力評價兩種評估方法和軟體成熟度提問單，來自產官學的技術和管理專家陸續進駐該機構，開始對工、商、政府提供產品和服務。 1991年，SEI將軟體開發程序成熟度框架 提升為軟體能力成熟度模型(Capability Maturity Model For Software，簡稱SW-CMM)，並發佈了最早的SW-CMM 1.0版。2000年底SEI發表了
      CMMI
      ，
      整合軟體工程(Software Engineeing ; SW)、系統工程(Systems Engineering ; SE)、
      產品與流程發展(Integrated Product and Procss development , IPPD)與供應商來源管理
      (Supplier Sourcing ; SS)的整合模式。從此以後，CMMI就與CMM並行。
    
CMMI的成熟等級

      SEI 試圖在軟體界建立一套工程般的制度，讓個人和組織在軟體開發上能有改進的依據。SEI 的 Capability Maturity Model (CMM) for Software 已經成為許多軟體公司所採行的標準，用作為改進公司內部軟體工程的依據。
      
      根據 CMM 的定義，軟體工程的成熟度分成五個等級，簡單介紹如下： 
    


      CMM-Level 1（initial）：軟體程序漫無章法，程序未被定義。專案流程無統一程序，專案計劃的成功仰賴於工作人員個別的努力。
      
參與範圍：
        
          個人
        

CMM-Level 2（repeatable）：已建立基本的管理與分析的程序(
      
        Measurement and Analysis ; MA
      
      )，對成本、時程、和職務權責能加以追蹤、查詢。已有作業程序所須具有的紀律，所以有能力重覆使用相類似的專案成功的案例與經驗。
      
參與範圍：
        
          專案或團隊
        
流程重點：需求管理(Requirements Management)


      CMM-Level 3（defined）：屬於管理和工程的活動都已設計、定義好，並且文件化，完整地整合成組織內的標準作業程序。各個專案計劃延用標準程序或被認可的標準程序修改程序。
      
參與範圍：
        
          組織或公司
        
流程重點：需求發展(Requirements Development;REQD)，驗證(Verification;VER)，確認(Validation;VAL)


      CMM-Level 4（managed）：組織可收集詳細的軟體程序以及軟體產品的量測資料。軟體作業程序和產品都有一組量測的數據，可讓工程師和經理們瞭解程序和產品的狀況。
      
參與範圍：
        
          組織或公司
        
流程重點：Quantitative Project Management(QPM) 


      CMM-Level 5（optimized）：評估革新性的新技術，做反省與提升，有規則地依序導入採用，以持續不斷地改進程序。
      
參與範圍：
        
          組織或公司
        
流程重點：Causal Analysis and Resolution(CAR) 


CMMI實施

      CMM是一種軟體開發的流程標準，可說是種軟體開發的品質保 証，就像ISO是組織管理的品質保証一樣。細分之下，CMM/CMMI分成五級，從第一級（level 1）到第五級（level 5），分別標示軟體公司流程管理的競爭力程度，一級只要提出申請即可列入，不需經過審查，而到第四級為可做質量管理，第五級則為最佳化，可預防缺陷。
    

      軟體先進國家都已體認到CMM/CMMI的重要性。目前全球約有700餘個包括公司及組織的單位通過CMM認証。其中最難的四、五兩級，全球各自有73與67個單位獲得，多數集中在美國及印度，其他則以個位數分佈在澳洲、蘇俄、以、法、新加坡等國。 
    

      我國行政院於91年11月院頒之『行政院所屬各機關資訊業務委外服務作業參考原則』中，亦明訂通過CMMI 評鑑得列為採購加分項目。
    


      參考書目


      Software Engineering 6th Edition; SOMMERVILLE; addison wesley;ISBN:020139815
吳仁和，林信惠;系統分析與設計;智勝出版 ISBN:9577292194
河合昭男;學習物件導向的第1本書;博碩文化; ISBN:9575275373
Fowler，Scott; UML精華第二版; �眳p; ISBN:9575667557
閻宏 ; Java與樣式理論 ; �眳p ; ISBN:9864214179 
賀元，賴明宗，劉燈 ; 世紀末軟體革命/C++,GUI與物件導向理論;傳徵(股)公司;ISBN:9579996504
賀元，賴明宗，劉燈 ; 世紀末軟體革命2;資訊人文化事業;ISBN:9579964092



      網路資源


UML 參考手冊

物件導向的天空

物件導向的軟體發展

沒人在乎軟體工程

軟體工程的弔詭

點空間

軟體設計的思維

朝陽科大呂瑞麟老師的系統分析與設計講義

淺談UML

測驗




迴首頁 Main Page


主 網 站：http://peterju.notlong.com
(目前轉址至 http://irw.ncut.edu.tw/peterju/)




|

|

|



|

|



This work is licensed under a
Creative
Commons License





