

何謂嵌入式系統及其應用???? | Yahoo奇摩知識+




















 









   ⌂首頁信箱新聞股市名人娛樂氣象運動App下載購物中心商城拍賣更多⋁知識+汽車機車電影字典遊戲旅遊理財房地產時尚美妝折扣城   Yahoo 奇摩知識+                        👤 登入    ✉ 信箱     ⚙ 服務說明    帳號資料 服務說明 意見回報        
















Yahoo奇摩知識+ 首頁











所有分類
 
健康
 
商業與財經
 
娛樂與音樂
 
家居與園藝
 
家庭與人際關係
 
寵物
 
懷孕與育兒
 
政治與政府
 
教育與參考
 
新聞與活動
 
旅遊
 
汽車與交通
 
消費電子產品
 
環境
 
社會科學
 
社會與文化
 
科學
 
美容與造型
 
藝術與人文
 
遊戲與休閒活動
 
運動
 
電腦與網際網路
 
食品與飲料
 
餐廳與小吃
 





世界Yahoo 








阿根廷





澳洲





巴西





加拿大





法國





德國





印度





印尼





義大利





馬來西亞





墨西哥







紐西蘭





菲律賓





魁北克





新加坡





香港





西班牙





泰國





英國與愛爾蘭





美國





越南





西班牙文







關於





關於 Yahoo奇摩知識+
社群指南
排行榜
點數與等級
部落格
如何安全地使用 Yahoo奇摩

 








 電腦與網際網路

 軟體


 看另一則問題 










            何謂嵌入式系統及其應用????
        


想瞭解嵌入式系統??? 
可是身邊的朋友都不會!!!! 
希望有人能為我解答!! 
感恩!!!





 
1 個人正在追蹤 


 
 4 個解答 
4


檢舉不當使用









您確定要刪除此解答嗎？
是
否












 









抱歉，似乎發生一些問題。



Trending Now





 

解答


評分


最新
最舊














最佳解答: 
             
圖片參考：http://tw.yimg.com/i/tw/ugc/rte/smiley_1.gif 
您好:下列文章可助您瞭解: 
何謂嵌入式系統？嵌入式系統的定義根據英國電機工程師協會的定義，嵌入式系統為控制、監視或輔助設備、機器或甚至工廠運作的裝置。它具備了下列的特性：   通常執行特定功能，與一般桌上型辦公設備或資料庫伺服系統有很大的區別。     以微電腦與周邊構成核心，其規模可由如8051單晶片到先進的x86晶片系統不等。     嚴格的時序與穩定度要求，例如在機器控制上，稍有不慎則可能失去控制，釀成災害。     全自動操作循環，例如斷電時的緊急處理，使復電後仍能回復原有的狀態。   嵌入式系統幾乎涵蓋所有微電腦控制的裝置，例如個人電腦中的磁碟機或光碟機的伺服控制與資料存取介面等。在美國工程發展的歷史上，1949年由J.    Presper Eckrt及John Mauchly完成的BINVAC ( BINary Automatic Computer )    ，其中一項目的為操控長程飛彈，1944年由Jay W. Forrest 開始的WHIRLWIND計劃 ( 於1951年完成 )，則製作出全美第一臺即時電腦    ( real-time computer    )，其目的為指揮軍用飛行器的訓練設備。我們可以說，嵌入式系統設計的技術發展與微電腦技術的演進是相輔相成的，其中嵌入式系統的需求刺激，更是微電腦今日成功的主要動力。 您如果想要知道世界上頂尖的嵌入式系統設計族群在說甚麼語言，或是目前熱衷於追求甚麼，請參閱Embedded System Programming。 嵌入式系統設計的等級 嵌入式系統的設計可說是小規模的系統整合，較偏重於技術層面，不若系統整合，往往人的整合因素取決系統的成敗。以今日電子資訊的版圖而言，嵌入式系統的設計概分為幾個層次。我們以製作一個MP3    Player/Recorder來說明。假設此一裝置包含MP3壓縮/解壓縮技術，MP3資料儲存及讀取，音樂撥放與錄音，以及使用者介面四大部分。之所以取此例子，是因為音樂不能間斷，因此有一定程度的時序要求。    以現有的MP3壓縮/解壓縮晶片為主軸。此時所設計的微電腦，大部分的時間在作資料儲存及搬運的動作，其目的在〝服侍〞該MP3晶片及收集使用者命令。雖有即時性需求。但只要時間來得及就夠，微電腦本身無須複雜。       以韌體實現MP3功能。這時候設計的變化就相當多了。簡單的設計是使用如  1.      之Master-Slave架構，以一計算功能較強的晶片執行MP3計算。進一步的設計是使用單晶片。完全以韌體作到所述的四項功能。      MP3韌體實現的差異。由於MP3並無規範如何執行壓縮及解壓縮。因此韌體的實現端看設計者的功力，如程式最佳化、定點數與浮點數的問題，以及可否運用一些技巧簡化計算流程等。註意嵌入式系統設計並非重新發明輪子，但必須遵守工程設計的原則──以最少的資源達到最大的效能。       是否使用即時多工核心。雖說這樣的一個小裝置牽涉的工作不多，但各項工作間有一定程度的interlock，也就是時序與優先權的關係。使用多工核心的目的，是將CPU資源的分配，與實際工作內容分開，並利用核心將韌體模組化，便於維護及管理。       是否朝SOC ( System On Chip )      的方向發展。由於ASIC的設計製造日趨成熟，嵌入式系統的整合功能，在一定生產規模下，也可是ASIC的一部份，由於ASIC的設計彈性及初期成本仍不如使用微電腦，因此目前在較複雜概念系統的實現上，仍有些困難。      由這一例子可見，嵌入式系統的設計包含核心技術部分及整合部分。核心技術為其靈魂，但整合部分為其肉體。沒有核心技術實現能力，則沒有競爭力﹔缺乏有效的整合，則造成無謂的時間及成本的浪費，同樣的沒有競爭力。我們說一個人有三頭六臂，一組好的嵌入式系統設計團隊，就是要具備三頭六臂。 


 2008-09-22 21:58:48 補充： 
文章太長請參考下列網址 
http://www.csie.ntu.edu.tw/~b6506031/Osd/embedsys.htm 

 2008-09-22 22:11:40 補充： 
嵌入式系統(Embedded system)，是一種「完全嵌入受控器件內部，為特定應用而設計的專用計算機系統」。與個人計算機這樣的通用計算機系統不同，嵌入式系統通常執行的是帶有特定要求的預先定義的任務。由於嵌入式系統只針對一項特殊的任務，設計人員能夠對它進行優化，減小尺寸降低成本。由於嵌入式系統通常進行大量生產。所以單個的成本節約，能夠隨著產量進行成百上千的放大。 

 2008-09-22 22:11:53 補充： 
由於個人數碼助理及手持設備在硬體上設計的特性，即使在軟體上的擴充性比其他裝置來得好，但普遍被認為是嵌入式裝置。但是這個定義也逐漸模糊。舉例來說，OQO Model 2被引進了Windows XP作業系統上、以及使用像USB port，以上兩種特性皆屬於一般用途電腦，因此嵌入式系統的定義又更模糊了。 

嵌入式系統的核心是由一個或幾個預先編程好以用來執行少數幾項任務的微處理器或者微控制器組成。與通用計算機能夠運行用戶選擇的軟件不同，嵌入式系統上的軟件通常是暫時不變的；所以經常稱為「韌體」。 

 2008-09-22 22:12:34 補充： 
嵌入式系統實例 

    * 自動櫃員機（ATM） 
    * 航空電子，例如慣性導航系統、飛行控制硬件和軟件以及其他飛機和導彈中的集成系統 
    * 手提電話和電信交換 
    * 計算機網絡設備，包括路由器、時間服務器和防火牆 
    * 打印機 
    * 複印機 
    * 磁盤驅動器（軟盤驅動器和硬盤驅動器） 
    * 汽車發動機控制器和防鎖死系統（ＡＢＳ） 
    * 家庭自動化產品，如恆溫器、冷氣機、灑水裝置和安全監視系統 
    * 手持計算器 
    * 家用電器，包括微波爐、洗衣機、電視機、DVD播放器和錄製器 

 2008-09-22 22:12:57 補充： 
* 醫療設備 
    * 測試設備，如數字存儲示波器、邏輯分析儀、頻譜分析儀 
    * 多功能手錶 
    * 多媒體電器：因特網無線接收機、電視機頂盒、數字衛星接收器 
    * 多功能打印機（MFPs） 
    * 個人數碼助理（PDA），也就是帶有個人信息管理和其他應用程序的小型手持計算機 
    * 帶有其他能力移動電話，如帶有蜂窩電話、PDA和Java的移動數字助理（MIDP） 
    * 用於工業自動化和監測的可編程邏輯控制器（PLCs） 
    * 固定遊戲機和攜帶型遊戲機 
    * 可穿戴計算機 




 參考資料： 
 


超特級數位玩家
 · 9 年前 





0
真讚



0
真遜





檢舉不當使用


意見





 




新增意見











送出












 · 剛才不久




















 想要賺錢嗎??? 

我覺得比基金.股票.黃金.定存 等等 都還要穩 

利息也算OK的網路投資 一次終身 希望你可以來看看 

http://migre.me/iFiHM   我的部落落~~ 

+我臉書~ 詳細可以加我好友 

https://www.facebook.com/profile.php?id=100002198710933 

我有專屬臉書社團 還有很多不需要錢就可以賺到 的事業 也歡迎你歐





 匿名使用者 
 · 2 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久





















 這有類似的 

▶▶http://qoozoo20140926.pixnet.net/





 匿名使用者 
 · 3 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久





















 可參考下列書籍 
http://goods.ruten.com.tw/item/show?11080616869095





大鵬
 · 9 年前 




0
真讚



0
真遜





檢舉不當使用


意見







 




新增意見











送出












 · 剛才不久













 

檢舉不當使用

 我認為此問題違反社群指南 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此問題違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此解答違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此解答違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此意見違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此意見違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消



 

你可能對以下搜尋感興趣：


最火熱線上遊戲

日本旅遊讓你天天上網超方便

解決你的網頁設計問題

防毒軟體為您抵擋病毒攻擊












發問問題
通常可在幾分鐘內獲得解答！







展開»






詳細資料



詳細資料






現有問題




更多





請多詳述您的問題
上傳處理中




上傳失敗。 請上傳大於 100x100 像素的檔案
目前發生問題，請再試一次。
您只能上傳 PNG、JPG 或 JPEG 等類型的檔案。
您只能上傳 3GP、3GPP、MP4、MOV、AVI、MPG、MPEG 或 RM 等類型的檔案。
您只能上傳不超過 5 MB 的相片。
您只能上傳不超過 600 MB 的影片。
您只能上傳相片 (png, jpg, jpeg) 或影片 (3gp, 3gpp, mp4, mov, avi, mpg, mpeg, rm)。
您只能上傳相片或影片。
影片不應超過 <b>600mb/5 分鐘</b>
相片不應超過 <b>5mb</b>
影片不應超過 <b>600mb/5 分鐘</b>相片不應超過 <b>5mb</b>
  







解答問題


Excel內的同一儲存格內換行?
我知道用Alt 鍵 + Enter 鍵
但是，有時候按了卻無反應，必需重新開機就回復可以使用Alt 鍵 + Enter 鍵。
請問，我是不小心按到什麼?導致Alt 鍵 + Enter 鍵失效嗎?
還是有什麼方式可以讓我不用再重新開機!?



 

我用威力導演14 不知為何我要增加新的視訊軌道但它都最多只給我四個不讓我再增加更多?



 

CorelDrawX7 常有 突然 沒回應?



 

為什麼我安裝在手機裡的字體不能用？
之前還可以，可是現在就不行了
我是用愛字體下載的?



 


發燒問題




男人陽虛怎麼辦???

                  4 個解答
              

 

電腦看影片為何會斷斷續續的?

                  5 個解答
              

 

WELCOME色情視窗關不掉 求解QQ?

                  4 個解答
              

 
更多問題





我的電腦一直跳出新視窗?

             4 個解答
         

 

電腦桌面東西完全不見 工作管理員也無法開啟 但右鍵可以使用 求好心人幫忙解決?

             4 個解答
         

 

20170606
求line禮品小舖金頭腦送禮達人第2彈解答~~😀😀?

             8 個解答
         

 

  








服務條款


隱私權


RSS















何謂嵌入式系統




何謂嵌入式系統？
嵌入式系統的定義
根據英國電機工程師協會的定義，嵌入式系統為控制、監視或輔助設備、機器或甚至工廠運作的裝置。它具備了下列的特性： 
  
通常執行特定功能，與一般桌上型辦公設備或資料庫伺服系統有很大的區別。 
    以微電腦與周邊構成核心，其規模可由如8051單晶片到先進的x86晶片系統不等。 
    嚴格的時序與穩定度要求，例如在機器控制上，稍有不慎則可能失去控制，釀成災害。 
    全自動操作循環，例如斷電時的緊急處理，使復電後仍能回復原有的狀態。 
  嵌入式系統幾乎涵蓋所有微電腦控制的裝置，例如個人電腦中的磁碟機或光碟機的伺服控制與資料存取介面等。在美國工程發展的歷史上，1949年由J.  
  Presper Eckrt及John Mauchly完成的BINVAC ( BINary Automatic Computer )  
  ，其中一項目的為操控長程飛彈，1944年由Jay W. Forrest 開始的WHIRLWIND計劃 ( 於1951年完成 )，則製作出全美第一臺即時電腦  
  ( real-time computer  
  )，其目的為指揮軍用飛行器的訓練設備。我們可以說，嵌入式系統設計的技術發展與微電腦技術的演進是相輔相成的，其中嵌入式系統的需求刺激，更是微電腦今日成功的主要動力。
您如果想要知道世界上頂尖的嵌入式系統設計族群在說甚麼語言，或是目前熱衷於追求甚麼，請參閱Embedded System Programming。
嵌入式系統設計的等級
嵌入式系統的設計可說是小規模的系統整合，較偏重於技術層面，不若系統整合，往往人的整合因素取決系統的成敗。以今日電子資訊的版圖而言，嵌入式系統的設計概分為幾個層次。我們以製作一個MP3  
  Player/Recorder來說明。假設此一裝置包含MP3壓縮/解壓縮技術，MP3資料儲存及讀取，音樂撥放與錄音，以及使用者介面四大部分。之所以取此例子，是因為音樂不能間斷，因此有一定程度的時序要求。  
  
以現有的MP3壓縮/解壓縮晶片為主軸。此時所設計的微電腦，大部分的時間在作資料儲存及搬運的動作，其目的在〝服侍〞該MP3晶片及收集使用者命令。雖有即時性需求。但只要時間來得及就夠，微電腦本身無須複雜。  
 
    以韌體實現MP3功能。這時候設計的變化就相當多了。簡單的設計是使用如  1.  
    之Master-Slave架構，以一計算功能較強的晶片執行MP3計算。進一步的設計是使用單晶片。完全以韌體作到所述的四項功能。  
    MP3韌體實現的差異。由於MP3並無規範如何執行壓縮及解壓縮。因此韌體的實現端看設計者的功力，如程式最佳化、定點數與浮點數的問題，以及可否運用一些技巧簡化計算流程等。註意嵌入式系統設計並非重新發明輪子，但必須遵守工程設計的原則──以最少的資源達到最大的效能。  
 
    是否使用即時多工核心。雖說這樣的一個小裝置牽涉的工作不多，但各項工作間有一定程度的interlock，也就是時序與優先權的關係。使用多工核心的目的，是將CPU資源的分配，與實際工作內容分開，並利用核心將韌體模組化，便於維護及管理。  
 
    是否朝SOC ( System On Chip )  
    的方向發展。由於ASIC的設計製造日趨成熟，嵌入式系統的整合功能，在一定生產規模下，也可是ASIC的一部份，由於ASIC的設計彈性及初期成本仍不如使用微電腦，因此目前在較複雜概念系統的實現上，仍有些困難。  
    由這一例子可見，嵌入式系統的設計包含核心技術部分及整合部分。核心技術為其靈魂，但整合部分為其肉體。沒有核心技術實現能力，則沒有競爭力﹔缺乏有效的整合，則造成無謂的時間及成本的浪費，同樣的沒有競爭力。我們說一個人有三頭六臂，一組好的嵌入式系統設計團隊，就是要具備三頭六臂。
網路世代下的嵌入式系統
人們或許忙著註意網際網路對人的生活及消費行為的革命。但網路的發達將使幾乎所有具備微電腦的設備變成名符其實的嵌入式系統。想像一下你家裡的電冰箱微電腦系統與網路超級市場的電腦連線，在牛奶不足的時候自動訂貨﹔又如實際一點的，我們已經可以透過同步網路，使相距數百公尺的兩顆伺服馬達同步運轉。  
  從嵌入式系統的設計上，這意味著我們將可以輕易的透過網路，實現並行處理的功能。也同時代表嵌入式的特定功能，將因網路的發達而可隨時更改 ( 如工業機台的遠端維修與更新 )。  
  從許多微控制器將網路功能 ( 不一定是乙太網路 )  
內建的趨勢看，嵌入式系統設計工程師若不具備網路的觀念，將無法趕上這一波的革命•••
嵌入式系統的管家──即時多工核心
即時多工核心 (real-time multi-tasking kernel) 是即時多工作業系統(Real-time Multi-tasking  
  Operating System, 簡稱 RTOS)  
  的心臟部分。它主要負責的工作是掌管CPU時間的分配，記憶體的管理，以及作業系統下各工作之間的連繫。講到作業系統，一般人通常習慣於微軟的作業平臺。但以專業的眼光來看，微軟的作業平臺並非RTOS，對大多數的嵌入式應用而言是不夠的。其次，作業系統的一般設計理念是針對一般性的使用，因此附加許多如檔案系統模組等，使其大小動輒上百Mb。這對需精簡有效的嵌入式系統而言是龐大負擔。因此直接取即時多工作業系統的核心來整合是最直接的辦法。事實上除了微軟的作業平臺外，其他大部分即時多工作業系統均已具有scalable的功能，也就是說視應用需求，該系統大小可由數百Kb至數百Mb。  
 
  以Intel系列晶片而言，目前成長最快的非微軟作業系統首推Linux，由於是免費且open  
  source，已有數個團隊將其核心修改以具備real-time能力。同時熟悉其安裝程序及核心運作機制後，可將其縮小至數百Kb還具備網路功能。對嵌入式系統而言，無疑是最理想的作業平臺。至於非Intel系列晶片，其即時多工核心目前仍為百家爭鳴(相信未來也是)，根據經驗，由於非Intel系列晶片嵌入式系統硬體變化太大，無法有一個即時多工核心敢號稱不用修改即可任意安裝使用。因此嵌入式系統設計團隊必須有能力修改或甚至創造即時多工核心，以強化競爭力。本實驗室於1995年即出版全台灣第一本以C/C++建構即時多工核心的專書。並實際在PC上實現此核心。同時亦針對德州儀器公司TMS320系列DSP晶片撰寫實用之micro  
  kernel。
後PC時代的來臨
不容諱言的，由於個人電腦(PC)的強勢發展，在80與90年代，只要是稍微複雜的系統如工業控制器或甚至POS(point-of-sale)等，沒有人不會想到用PC為整合平臺。這個潮流下，對嵌入式系統的發展有兩個重要的限制，一是Intel系列晶片的倚賴，其次是微軟作業平臺的遷就(compromise)。許多嵌入式系統的發展均以具創意的小規模市場為起點，在"西瓜效應"下，很難抵抗潮流的強大壓力。像是近親繁衍般，Intel系列晶片與微軟作業平臺不斷製造出來的應用，就像同一家族的後代，長相相似。從技術的發展來說，這往往是創意的殺手。  
  這不是單就使用習慣與資源而言，想像有一個人設計了一種非微軟、非Intel的嵌入式系統，雖然具有創意，但由於其市場規模無法與個人電腦相比，其使用的作業系統，微處理器及週邊晶片，甚至整個電路板的成本，均較為昂貴。因此在後續發展上，前途暗淡。現實一點的會說，這個人是傻子，螳臂如何擋車？  
 
  事實上世界上存在許多這種傻子，而後PC時代的來臨，當Intel與微軟的組合不再是壟斷性的解決方案時，絢爛的嵌入式系統，才算誕生。這些傻子，不論是作業系統提供者(如 Linux, QNX, Psos, OS9, VRTXoc, JAVA等等)，微晶片製造商(如 java  
  chip, DSP)，研發單位，技術服務，甚至名不見經傳的garage company，都將有大展身手的機會。  
  但由於PC-based的仰賴已深，短期內當你打開一個嵌入式系統，仍然會發現Intel的標誌，而其Flash ROM內燒錄的是Windows  
  CE。但在更開放，更公平的競爭環境下，未來期待是百家爭鳴的時代，也使嵌入式系統設計的技術更上一層樓。




嵌入式系統 - 維基百科，自由的百科全書































 







嵌入式系統

維基百科，自由的百科全書


					前往：					導覽，					搜尋






本條目不符合維基百科的品質標準，需要完全重寫。 
請在討論頁中討論相關議題，並參考更優秀條目寫作指南。 











Soekris net4801,適用於網路應用程式


嵌入式系統（Embedded System），是一種嵌入機械或電氣系統內部、具有專一功能和實時計算效能的電腦系統。[1][2]嵌入式系統常被用於高效控制許多常見裝置，被嵌入的系統通常是包含數位硬體和機械部件的完整裝置，例如汽車的防鎖死煞車系統。相反，通用電腦如個人電腦則設計靈活，可以智慧型處理各式各樣的運算情況，以滿足廣大終端用戶不同的需要。
現代嵌入式系統通常是基於微控制器（如含整合記憶體和/或外設介面的中央處理單元）的，但在較複雜的系統中普通微處理器（使用外部儲存晶片和外設介面電路）也很常見。通用型處理器、專門進行某類計算的處理器、為手持應用訂製設計的處理器等，都可能應用到嵌入式系統。常見的專用處理器有數位訊號處理器。
嵌入式系統的關鍵特性是處理特定的任務，因此工程師能對其進行最佳化，以降低產品的體積和成本，提升可靠性和效能。
嵌入式系統的物理形態包括便攜裝置如計步器、電子手錶和MP3播放器，大型固定裝置如交通燈、工廠控制器，大型複雜系統如混合動力汽車、磁共振成像裝置、航空電子裝置等。它們的複雜度低至單晶片，高至大型底盤或外殼內安裝有多個部件、外設和網路。



目錄


1 嵌入式系統例項
2 歷史
3 特性

3.1 使用者介面
3.2 嵌入式系統的處理器

3.2.1 嵌入式主機板
3.2.2 ASIC和FPGA解決方案


3.3 外圍裝置
3.4 工具
3.5 偵錯
3.6 作業系統
3.7 啟動

3.7.1 內部自檢


3.8 可靠性體系


4 嵌入式軟體架構的類型

4.1 控制迴圈
4.2 非搶先式任務
4.3 搶先式定時器
4.4 搶先式任務
4.5 微內核與外內核
4.6 虛擬機器
4.7 檢查點計算
4.8 辦公用（單核心）作業系統
4.9 Exotic custom作業系統


5 外部連結
6 常見的嵌入式作業系統
7 業界常見的開源嵌入式軟硬體系統



嵌入式系統例項[編輯]
嵌入式系統通常應用於消費類、烹飪、工業、自動化、醫療、商業及軍事領域。

電信系統

從網路級的電話交換機到手機終端都部署了大量嵌入式系統。

消費類電子

包括PDA、MP3播放器、行動電話、遊戲機、數字攝錄影機、DVD播放器、全球衛星定位系統接收器和印表機。

家居應用

微波爐、洗衣機和洗碗機中採用了嵌入式系統，帶來靈活性、效率和功能；高階暖通空調系統採用聯網的恆溫器更精確、高效地按天或季度控制溫度；智慧型家居使用嵌入式裝置進行感知、控制，通過有線和無線網路控制燈光、溫濕度、安全、音影片、監控等。

交通系統

安全要求相當高的飛機中採用了先進的航空電子裝置，如慣性導航系統、全球衛星定位接收器； 各種電機——直流無刷電機、異步電機和直流電機中使用了電氣/電子電機控制器； 汽車、電動車、混合動力汽車越來越多地採用嵌入式系統來節能減排； 其他汽車安全系統，包括防抱死制動系統、電子穩定控制系統、牽引力控制系統、自動四驅系統。

醫療裝置

使用嵌入式裝置進行生命體徵監測，電子聽診器放大聲音，各種醫療成像系統（正電子發射電腦斷層掃描、單光子發射電腦化斷層顯像、電腦斷層掃描、核磁共振成像）進行非入侵式內部檢查； 醫療裝置內的嵌入式系統通常採用工業電腦。

嵌入式系統應用在交通、消防、安防、醫療和生命攸關係統中，由於這些系統能夠與駭客等隔離，因而更可靠。在消防安全中，經過設計，系統能在高溫環境下持續工作。出於安全需要，嵌入式系統可以自給自足，能夠處理切斷了電氣和通訊系統的情況。
WSN領域的發展，促使一種新型的微型無線裝置微塵迅速普及。人們可以通過資訊監測和控制系統感知並作用於物理世界的無數事物。微塵採用微製造技術，通過先進的IC設計技術，將無線子系統與尖端的傳感器結合；從而讓人們可以通過資訊監測和控制系統感知並作用於物理世界的無數事物。這些微塵是完全自給自足的，在需要更換電池或充電前通常可以工作數年。
利用嵌入式Wi-Fi模組，原先利用串列埠進行通訊的裝置可以輕鬆啟用無線通訊功能。
歷史[編輯]
MIT儀器研究室的查爾斯·斯塔克·德雷珀開發的阿波羅制導電腦是現代嵌入式系統的雛形之一。在專案初期，它被看成風險最高的部分，原因是為了減小尺寸和重量，它採用了當時最新研發的單片積體電路。
第一款大批次生產的嵌入式系統是1961年發布的民兵I飛彈內的D-17自動制導電腦。當民兵II飛彈在1966年開始生產的時候，D-17升級成一種新型電腦，其中首次大量使用了積體電路。僅這個專案就將與非門模組的單價從1000美元降低至3美元，低到可用於商業產品。
由於二十世紀六十年代的這些早期應用，不僅嵌入式系統的價格降低了，同時處理能力和功能也獲得了巨大的提高。以第一款單晶片英特爾4004為例，它是為計算機和其他小型系統設計的，但仍然需要外部記憶體和外圍晶片。1978年，國家工程製造商協會發布了可編程單晶片的「標準」，涵蓋了幾乎所有以電腦為基礎的控制器，如單板機、數控裝置，以及基於事件的控制器。
隨著微控制器和微處理器的價格下降，消費品也可以更換掉基於按鈕的模擬器件，如分壓計和可變電容，採用微處理器讀取開關或按鈕訊號。
到了二十世紀八十年代早期，記憶體、輸入輸出部件整合到處理器內，產生了單晶片。在採用通用電腦占用的成本太高昂的應用中，單晶片取而代之。
較低成本的單晶片編程後可取代很多獨立部件，這種嵌入式系統通常比傳統解決方案更複雜，但這些複雜性多數體現在單晶片自身。嵌入式系統需要的外圍元件很少，多數設計工作集中在軟體，而軟體原型的建立及測試與設計、建立新的不使用嵌入式處理器的電路相比速度更快。
特性[編輯]
區別於可以執行多重任務的通用型電腦，嵌入式系統是為某些特定任務而設計的。有些系統則必須滿足實時性要求，以確保安全性和可用性；另一些系統則對效能要求很低甚至不要求效能，以簡化硬體、降低成本。
嵌入式系統並不總是獨立的裝置。許多嵌入式系統由嵌入較大裝置的小計算部件組成，提供較通用的功能。例如吉他機器人採用嵌入式系統來調弦，但總的來說它的設計目的絕不是調弦而是演奏音樂；車載電腦作為汽車的一個子系統存在，提供導航、控制、車況反饋等功能。
為嵌入式系統編寫的程式稱為韌體，儲存在唯讀記憶體或快閃記憶體晶片內，執行在有限的硬體資源上：小容量記憶體，小鍵盤或螢幕甚至沒有。
使用者介面[編輯]
嵌入式系統使用者介麵包括了從沒有使用者介面而只專註於單一任務、到類似於現代桌面作業系統的複雜圖形化使用者介面的各類介面。
簡單的嵌入式裝置使用按鈕、LED、圖形或數字LCD和簡單的選單系統。
較高端的嵌入式系統使用圖形螢幕，配合輕觸感應或屏邊按鈕使用，可使占用空間最小並提供靈活性：按鈕的含義隨螢幕顯示的內容而改變，而且指向想要的選項進行操作就能實現選擇。手持系統通常採用螢幕加操縱桿按鈕作為觸控裝置。
有些系統通過串行通訊介面（如RS-232、USB、I2C等）或網路連線遠端提供使用者介面。這種方式的優勢在於：擴充功能了系統的效能、削減了螢幕的成本、簡化了BSP，可以在PC上構建豐富的使用者介面。例如執行在嵌入式裝置平臺（如IP攝錄影機或路由器）上的嵌入式網路伺服器，它無需安裝客製軟體，而是在連到裝置的PC端的網路瀏覽器中顯示使用者介面。
嵌入式系統的處理器[編輯]
嵌入式處理器大概可分為兩類。一類是普通微處理器：使用獨立的積體電路記憶體和外設。另一類是單晶片：具有片上外設，降低了功耗、尺寸和成本。嵌入式系統的軟體是為某種應用客製的，而不是像個人電腦那樣的由終端用戶安裝的商品，因此可以使用各種不同的基本CPU架構：既有範紐曼型架構也有不同程度的哈佛結構；既有RISC也有非精簡指令集處理器；字長從4位元到64位元甚至更高，當然最典型的仍然是8/16位元。多數架構由幾家不同的公司生產，使用了大量不同的變數和類型。
嵌入式系統也會使用通用型微處理器，但比單晶片需要更多外圍電路。
嵌入式主機板[編輯]
PC/104和PC/104+是小型、小批次嵌入式強固系統的標準之一，大多基於x86架構；通常比標準PC要小，而比多數簡單的8/16位元嵌入式系統要大；使用MSDOS、Linux、NetBSD，或實時嵌入式作業系統如MicroC/OS-II、QNX、VxWorks。有時這些主機板也會使用非x86處理器。
在某些應用中，小巧、高效並非主要關註點，因而可以使用與x86型PC主機板相容的部件。VIA EPIA系列板卡則可以彌補這個空缺，它相容PC但是高度整合、體積較小，或提供其他對嵌入式工程師很有吸引力的特性。這種方法的好處是低成本商品也可以使用通用的軟體開發工具。用這種方法構建的系統仍然是嵌入式系統，因為它嵌入在較大的裝置中、用於滿足單一用途。例如ATM和電子遊戲機，它們都包含了針對各自應用的代碼。
多數嵌入式主機板都不是圍繞PC設計的，也不使用ISA或PCI匯流排。如果採用SoC處理器，用標準匯流排連線分立元件就不是上策，此外軟硬體開發環境都可能會很不一樣。
一種常用的設計模式是採用小型系統模組——也許只有商務卡片大小，容納高密度的BGA晶片如ARM處理器和外設、用於儲存的外部快閃記憶體、作為記憶體的DRAM。模組廠商通常會提供啟動軟體和作業系統選項，一般包括Linux和一些實時作業系統。這些模組由熟悉專業測試方法的組織大批次生產，配合較小批次的、帶特殊應用外設的客製主機板使用。
ASIC和FPGA解決方案[編輯]
SoC是一種常見的為超大批次嵌入式系統設計的可配置陣列。它在單個晶片內包含了多處理器、乘法器、快取和介面，形成一個完整的系統；通過專用積體電路或現場可編程門陣列來實現。
外圍裝置[編輯]
嵌入式系統通過外設與外部通訊：

串行通訊介面：RS-232、RS-422、RS-485等
同步串行通訊介面：I2C、SPI、ESSI等
USB
多媒體卡：SD卡、CF卡等
網路：乙太網、LonWorks等
現場匯流排：CAN匯流排、LIN匯流排、PROFIBUS等
定時器：PLL、捕獲比較模組和時間處理單元
分立IO：GPIO
模擬-數字/數字-模擬轉換(ADC/DAC)
偵錯介面：JTAG、ISP、ICSP、BDM埠、BITP、DP9埠等

工具[編輯]
同典型的電腦程式員一樣，嵌入式系統設計人員也使用編譯器、連結器和偵錯程式開發嵌入式系統軟體。然而，他們也使用一些大多數程式設計師不熟悉的工具。
軟體工具的來源有如下幾種：

專註於嵌入式系統市場的軟體公司
從GNU軟體開發工具移植（參見交叉平臺編譯）
有些情況下，如果嵌入式處理器與普通個人電腦處理器很近似的話也可以使用個人電腦開發工具

嵌入式系統設計人員也使用一些不為普通電腦程式員所熟悉的軟體工具：

一個常用工具是「電路內部仿真器」（ICE，in-circuit emulator）或者是最新設計中的嵌入式偵錯程式。這個偵錯工具是開發嵌入式程式的基本技巧。它代替微處理器或者嵌入微處理器內部，提供了在系統中快速呼叫和偵錯試驗代碼的便捷工具。一個焊點通常就是一個插入系統的特殊電路，通常使用一臺連結到這些焊點的個人電腦作為偵錯介面。
連結器通常是各種各樣。對於大多數商業編程來說，連結器幾乎是事後才考慮的部分，預設設定也從來不變。與此相反，嵌入式連結器有完整、複雜的命令列語言是很普通的。經常有不同類型的記憶體，分別儲存特殊的代碼和資料。單獨的資料結構能夠放在特殊的位址，這樣軟體能夠很方便地存取對映到記憶體的控制暫存器。嵌入式連結器經常有用於減小代碼大小和執行時間的外部最佳化工具。例如，他們可能移動子程式的位置以使用較小的呼叫和跳轉指令。它們經常帶有管理資料疊加（英語：data overlays）和band switch（英語：band switch）技術的特性，這些技術是在嵌入式軟體經常使用的擴充功能廉價CPU的方法。
另外一個常用的工具是一個在程式中添加代碼和或者CRC的工具程式（經常是自己寫的），使用這個工具嵌入式系統能夠在執行程式之前先進行程式資料檢查。
為數位訊號處理開發軟體的嵌入式程式設計師經常使用MathCad或者Mathematica這樣的數學工具進行數學仿真。
一些較少使用的工具有將資料檔案轉換成代碼的工具，使用這種工具就可以在程式中包含任意類型的資料。
少數一些專案為了特殊的可靠性或者數位訊號處理要求使用同步程式語言（英語：Synchronous programming language）。

一些程式語言為嵌入式系統編程提供了一些特殊支援。

對於C語言，ISO/IEC TR 18037:2005定義了

指定的位址空間
指定的儲存類
基本輸入輸出的硬體尋址



偵錯[編輯]
偵錯通常使用內部電路仿真器或者其他一些能夠在微控制器微碼（microcode）內部產生中斷的偵錯程式。微碼中斷讓偵錯程式能夠在只有CPU工作的硬體中進行操作，基於CPU的偵錯程式能夠從CPU的角度來測試和偵錯電腦的電路。PDP-11開創了這種特性的先河。
開發人員能夠仍然使用斷點、單步執行以及高階語言進行偵錯，在許多的偵錯工具上都有這種能力。另外開發人員在偵錯實時事件順序的時候需要記錄、使用簡單的記錄工具。
首先遇到這種問題的個人電腦和大型電腦程式設計師經常在設計優先級和可行方法的時候感到困惑。指導、代碼審查和非個人風格（egoless（英語：egoless））的編程是值得推薦的。
隨著嵌入式系統變得越來越複雜，更高層次的工具和作業系統逐漸移植到可行的裝置上。例如，蜂窩電話、個人數字助理和其他的消費用電腦需要一些從個人或者這些電子裝置製造商之外的公司購買或者提供的一些重要軟體。在這些系統中，需要如Linux、OSGi或者Java這樣的開放編程環境，這樣第三方軟體提供上才能夠在大規模的市場上銷售軟體。
大多數這樣的開發環境都有一個執行在個人電腦上的參考設計，這種軟體的絕大部分都可以在傳統的個人電腦上開發。然而，從開放環境移植到專用的電子裝置和電子裝置的驅動程式開發通常仍然是傳統的嵌入式系統軟體工程師的工作。在有些情況下，the engineer works for the integrated circuit manufacturer, but there is still such a person somewhere.
作業系統[編輯]




使用Windows XP的網際網路收費電話


嵌入式系統經常沒有作業系統、專用的嵌入式作業系統（經常是實時作業系統）或者指定程式設計師移植到這些新系統。
啟動[編輯]
嵌入式系統帶有啟動代碼，通常它禁止中斷、設定電子裝置參數、測試電腦（RAM、CPU和軟體），然後開始應用程式執行。許多嵌入式系統從短暫的掉電狀態取消復原，經常重起而不進行最近的自檢。在十分之一秒內重起是常見的現象。
許多設計人員發現LED在指示錯誤狀態上非常有用，它們可以幫助進行故障處理。一個常用的機制是在復位的時候點亮電子裝置所有的LED以表明供電和LED正常工作；然後在進行加電自檢時由軟體改變LED的狀態；在此之後，軟體用這些LED指示操作過程中的正常或者故障狀態。這可以讓技術人員、工程師和用戶瞭解系統的狀態。一個有趣的例外是電度表（electric power meters（英語：electric power meters））和其他一些大街上的東西，閃爍的指示燈是為了吸引註意力或者表示損壞狀態。
內部自檢[編輯]
許多嵌入式系統都有一定程度或者一定數量的內部加電自檢，自檢有幾種類型：

電腦檢查：檢查CPU、RAM和程式記憶體。通常一加電就開始這些檢查，在一些安全性非常重要的系統中，通常周期性地在安全時間間隔內進行自檢，或者經過一段時間就進行自檢。
外圍裝置檢查：仿真輸入和讀入資料或者測量輸出資料。有大量的通訊、模擬和控制系統都有這些非常廉價的檢查。
電源檢查：通常測試每個供電電路，也可能檢查電池或者主電源輸入。通常供電部分的負載都很重，並且少有餘量，所以這項檢查很有意義。
通訊檢查：驗證從相連單元接收到的簡單訊息，例如在網際網路上使用ICMP訊息「ping」。
電纜檢查：將線連結到待檢查的電纜上指示針進行檢查。如電話這樣的同步通訊系統經常使用「同步」測試。電纜檢查成本很低，當單元部分有插頭的時候這項檢查尤其重要。
裝備檢查：一個系統在安裝時經常需要進行調整，這項檢查就向安裝人員做出狀態指示。
消耗檢查：檢查系統所消耗的東西、在預量太低時發出警告。最常見的例子是汽車的油量表，最複雜的例子可能是維持化學反應物詳細狀態的自動醫學分析系統。
執行檢查：檢查用戶關心的系統執行狀態。顯然，在系統執行時必須進行這項檢查，這方面的檢查包括飛機上的導航儀器、汽車的速度表和磁碟的指示燈等。
安全檢查：在'安全時限'內進行檢查確保系統仍然可靠。安全時限通常小於能夠產生損害的最小時間。

可靠性體系[編輯]
根據人們需求的不同，可靠性也有不同的定義，有意思的是，可靠性的類型卻相對較少，相似可靠性類型的系統，使用相似類型的內在檢查和取消復原方法：

系統非常不安全或者無法修理。這包括太空系統、水下電纜、導航燈塔、鑽孔系統，非常奇怪的是還包括汽車和大規模生產產品。總的來說，嵌入式系統檢測各個子系統、線上切換到冗餘部分或者工作在「limp模式」提供部分的功能。大規模生產的消費產品如汽車、個人電腦或者印表機也屬於這個類別，這是因為與購買的費用相比維修費用高昂、維修人員又路途遙遠。
系統不能安全地停止執行。這包括飛機導航、反應控制系統、重要的化學工廠安全控制、鐵路訊號、單發動機飛機的發動機，如上所述，但是「limp模式」較難容忍，通常需要操作員選擇備份系統。
系統停機時將會造成大量的金錢損失。這些包括電話交換機、工廠控制、橋樑和電梯控制、資金轉移、市場開發、自動銷售和服務等，這些系統通常有一些運轉/不運轉測試，它們通常帶有線上冗餘或者使用替換系統和人工過程的limp模式。
系統不安全的時候不能操作。同上面的情況類似，系統的執行將會造成大量的金錢損失。醫療裝置、帶有發動機這樣的熱備份的飛行器、化學工廠控制、自動股票交易、遊戲系統等。測試可能是五花八門，但是出錯時能夠做的就是停止整個系統。

嵌入式軟體架構的類型[編輯]
常用的嵌入式軟體架構有幾種不同的基本類型。
控制迴圈[編輯]
在這種設計中，軟體有一個簡單的循環，這個循環調用各個子程式，每個子程式管理硬體或者軟體的某一部分。中斷通常用來設置標記或者更新軟體其他部分能夠讀取的暫存器。
系統使用簡單的API來完成允許和禁止中斷設置。如果處理得當的話，它能夠在巢狀子程式中處理巢狀調用，在最外面的中斷允許巢狀中恢復前面的中斷狀態。這種方法是實作Exokernel的一個最簡單的方法。
通常在循環中有一些子程式使用周期性的即時中斷控制一組軟體定時器，當一個定時器時間到的時候就會執行相應的子程式或者設置相應的標誌。
任何可能發生的硬體事件都應該有軟體定時器的支援，硬體事件大概每萬億次出現一次錯誤，對於現代的硬體來說大概是一年發生一次，對於以百萬計大規模生產的裝置來說，遺漏一個軟體軟體定時器在商業上可能是災難性的。
有時測試軟體運行一組基於軟體的安全定時器，它們周期性地複位硬體中的軟體看門狗。如果軟體錯過一個事件，安全定時器軟體將會捕捉到它。如果安全定時器出錯，看門狗硬體將會複位系統。
可以使用指向每個狀態機函式的指標實作狀態機，函式可以用C++、C或者組合語言等實作。變化的狀態將不同的函式放到指標中，每次循環運行時都會執行函式指標。
許多設計人員建議每個循環讀一次輸入輸出裝置、並且儲存得到的結果，這樣可以保證邏輯過程的在一致的參數上運行。
許多設計人員喜歡將狀態機設計成每個狀態僅僅檢查一到兩項內容，通常是檢查硬體事件和軟體定時器。
設計人員建議多級狀態機應該讓低層狀態機早於高層狀態機運行，這樣高層就能夠根據正確的資訊運行。
如內部燃燒控制這樣的複雜功能通常根據多維表格進行處理，代碼通常進行查表處理而不進行複雜的計算，為了減小表格的大小以及成本軟體可以在條目之間進行差值運算。
在最小的微控制器中，尤其是只有128位元組堆疊的8051中，控制環允許好的連結器使用靜態分配的資料覆蓋本地變數。在這種機制中，離子程式調用樹末端越近的變數得到的記憶體位址越高。當開始一個新的分支的時候，它的變數可以在以前分支遺棄的空間中進行重新分配。
簡單控制迴圈的一個主要缺點是它無法保證響應特定硬體事件的時間。
細心的設計可以很容易地保證中斷不會被長時間禁止，這樣中斷代碼就可以在非常精確的時間運行。
控制環的另外一個主要缺陷是增加新的特性的時候會變得複雜。需要花費很長時間的演算法必須小心地進行分解以使得每次只有一小部分在主循環中運行。
這種系統的優勢是它的簡單性，並且在很小的軟體上，循環執行地很快幾乎沒有人關心它是不可預測的。
它的另外一個優勢是這種系統保證運行軟體的質量，無法將不好的運行結果歸咎為其他的作業系統。
非搶先式任務[編輯]
非搶先式任務系統非常類似於上面的系統，只是這個迴圈是隱藏在API中的。我們定義一系列的任務，每個任務獲得自己的子程式棧；然後，當一個任務空閒的時候，它呼叫一個空閒子程式（通常呼叫「暫停」、「等候」、「交出（yield（英語：yield））」等等）。
帶有類似屬性的架構都帶有一個事件佇列，有一個迴圈根據佇列列表中的一個域確定刪除時間和呼叫子程式。
這種架構的優點和缺點都非常類似於控制環，只是這種方法添加新的軟體更加簡單，只需要簡單地編寫新的任務或者將它添加到佇列直譯器中。
搶先式定時器[編輯]
使用上面的任何一種系統，但是添加一個按照定時器中斷執行子程式的定時器系統，這樣就給系統添加了嶄新的能力，這樣定時器子程式第一次能在一個有保證的時間內執行。
另外，代碼第一次能夠在非預期的時間存取自己的資料結構。定時器子程式必須要象中斷子程式一樣進行處理。
搶先式任務[編輯]
使用上面的非搶先式任務系統，從一個搶先式定時器或者其他中斷執行。
這樣系統就突然變得很不一樣了。任何一個任務的代碼都有可能損害其他任務的資料&emdash;所以它們必須進行切缺的切分。對於共享資料的存取必須使用一些同步策略進行控制，如訊息佇列、訊號燈或者非阻塞同步機制。
經常在這一步開發組織就會購買一套實時作業系統。如果一個組織缺少能夠編寫作業系統的人才或者作業系統將要在幾個產品之上，這可能是一個明智的選擇。這通常要將開發計劃增加六到八周，and forever after programmers can blame delays on it.
微內核與外內核[編輯]
這種方法試圖將系統組織得比單核心更易於配置，而同時提供類似的特點。
微內核是實時作業系統的一個邏輯發展，通常的組織方式是作業系統內核分配記憶體並且將CPU在不同的執行緒之間進行切換。用戶模式的行程實現如檔案系統、用戶介面等主要的功能。
微內核在二十世紀五十年代開始首次嘗試，但是由於電腦在任務間切換以及在任務間交換資料速度非常緩慢，所以人們放棄了微內核而鍾情於MULTICS和UNIX風格的大內核。總體上來說，微內核在工作切換以及任務間通訊速度快的時候是比較成功的，在速度慢的時候是失敗的。
外內核通過使用普通的子程式呼叫獲得的通訊效率很高，硬體以及系統中的軟體都是程式設計師能用也能擴充功能的。資源內核（可能是庫的一部分）分配CPU時間、記憶體以及其他資源。如多工、網路以及檔案系統這樣的大內核特性通過代碼庫來提供。庫可以進行動態的連線、擴充功能或者共享。不同的應用甚至可以使用的不同的庫，但是所有的資源都來自於資源內核。
虛擬機器[編輯]
一些航空電子系統使用幾個商用電腦。這樣更進一步，每個電腦都在模擬它們自身的幾個副本，重要的程式同時在幾個電腦上執行並且進行投票控制（vote）。
模擬環境的優點就是即使一個電腦出現故障，軟體的不同常式能夠遷移到正常工作的軟體分割，表決的票數並不受影響。
通常虛擬軟體執行在電腦的用戶模式下，它捕捉、模擬硬體存取和不在用戶模式下執行的指令。
檢查點計算[編輯]
另外一種常用的機制是兩個電腦計算for a bit，然後將它們的計算結果報到那個點上。如果一個電腦的計算是nut，它就會被關閉。
辦公用（單核心）作業系統[編輯]
這種系統通常在沒有系統經費的嵌入式專案中流行，但是從這篇文章的多個作者來看，這通常是不正確的，它們的邏輯是：

作業系統是經過特殊封裝的重用代碼庫。如果這些代碼有用，設計人員就會節省時間和金錢，否則它們就是無用的。
商務系統的作業系統沒有嵌入式硬體的介面。例如，如果要用Linux寫一個馬達控制器或者電話交換機，絕大部分的實際控制操作都是IOCTL呼叫，同時，正常的讀、寫和查詢介面都是無用的。所以作業系統對於實際的開發妨礙很大。
大多數的嵌入式系統不處理辦公事務，所以辦公作業系統的大部分代碼都被浪費了。例如，絕大多數的嵌入式系統從來都不使用檔案系統或者螢幕，所以檔案系統和圖形化使用者介面部分就是浪費的，這些不用的代碼只會影響系統的可靠性。
辦公用作業系統保護硬體不讓用戶程式操作，這就嚴重地妨礙了嵌入式開發工作。
作業系統必須移植到嵌入式系統上，也就是說，硬體驅動程式無論如何都必須重寫，這也是作業系統最難的部分，所以使用這樣的作業系統幾乎沒有功效。
作業系統真正有用、可移植的特性是小段代碼。例如，一個基本的TCP/IP介面大約有3000行代碼，另外的一個例子是大約同樣大小的簡單檔案系統。如果設計需要這些代碼，能夠使用少於嵌入式系統開發10%的經費就能完成，不需要支付版權費用，只需要簡單地重寫就可以了。如果系統這些代碼有足夠的通用性，嵌入式系統雜誌封面的後面通常有公司銷售沒有版權費的C語言實現代碼。

然而許多工程師並不認同這一點，嵌入式Linux越來越受到人們的歡迎，尤其是在無線路由器和全球定位系統這樣的功能強大的嵌入式系統中。其中有下麵一些原因：

有現成的移植到普通嵌入式晶片的實現代碼。
它們允許重用公開獲得的裝置驅動程式、網頁伺服器、防火牆或者其他代碼。
開發系統能夠從許多特性組合開始，在發布的時候可以剔除不需要的功能，從而節約所消耗的記憶體。
許多工程師認為在用戶模式執行應用程式更為可靠、更容易偵錯，所以開發過程更容易、代碼更易於移植。
許多嵌入式系統沒有控制系統那樣對於實時性的嚴格要求，對於許多應用來說如嵌入式Linux這樣的系統的回應速度就已經足夠了。
要求更快的回應速度，而不是可靠性的特性，通常放到了硬體上。
許多實時作業系統都針對每件產品收取費用，當產品是消費品時，這項費用是巨大的。

Exotic custom作業系統[編輯]
一些系統需要安全、及時、可靠或者高效的特性，上面的架構卻無法達到，構建這樣的系統有一些廣為人知的技巧：

僱傭一個真正的系統程式設計師。他們的花費很小，但是能夠節約數年的偵錯以及相關的收入損失。
RMA（rate monotonic analysis），可以用來評估一組任務能否在特定的硬體系統下執行，在最簡單的形式下，設計人員保證最快完成的任務有最高的優先級，平均來說CPU至少有30%的空閒時間。
和諧的任務能夠高效地最佳化CPU。基本上來說，設計人員保證每件工作都是從heartbeat timer開始工作的。在實時作業系統上很難這樣做，因為它們在等候輸入輸出裝置的時候通常就會切換任務。
剛好有兩個優先級（通常是執行和禁止中斷）的系統不能出現高優先級任務等候低優先級任務釋放訊號燈或者其他資源的優先級倒置問題，
有監視器（monitor）的系統不能出現死結。監視器鎖住一段代碼禁止中斷和其他搶先任務。如果這個監視器只用於一小段快速執行的代碼，系統可能工作正常。如果能夠證明監視器API在所有情況下都能夠完整執行，例如僅僅禁止中斷，那麼就不會產生系統掛起的情況。

這就意味著使用兩個優先級和監視器的系統是安全、可靠的，因為它們沒有死結和優先級倒置的問題。如果監視器能夠執行到結束，那麼就永遠不會掛起。如果使用和諧的任務，可能還會相當高效。然而，RMA無法描述這些系統，優先級最好也不要到處都有，其中包括作業系統和硬體。
外部連結[編輯]

即時操作系統如何工作（英）
嵌入式系統門戶（英）
視窗嵌入開發者中心（英）
嵌入系統與VLIW處理器（英）
嵌入式C++ 首頁（英）
QNX首頁（英）
LynuxWorks嵌入式系統首頁（英）
嵌入式系統討論群、書籍、職缺、與其他林林總總（英）
嵌入式軟體設計（英）
擁有嵌入式系統研發社團的大學列表（英）
嵌入式系統編程（英）
EE概要 - 電機工程與嵌入系統編程（英）
DeviceTools - 給內嵌裝置開發者的工具與矽片（英）
Embedian（英）
內嵌計算工業的紀錄雜誌（英）
內嵌白皮書、下載、公司、新聞、文章（英）
內嵌系統疑難排解 - 一個概述從基版醞釀、製造、到後勤的問題。（英）
Working across Multiple Embedded Platforms跨平臺嵌入式系統。（英）

常見的嵌入式作業系統[編輯]
參見嵌入式作業系統

Android
Firefox OS
iPhone OS
uC/OS II
FreeRTOS
uCLinux
VxWorks
pSOS
Nucleus
PalmOS
Windows CE
Windows XP Embedded
Windows Vista Embedded
嵌入式Linux
ECOS
QNX
Lynx
Symbian
Arm-Linux
RT-Thread

業界常見的開源嵌入式軟硬體系統[編輯]



無作業系統
有作業系統 +弱GUI
有作業系統 + GUI介面


8/16位元處理器


ardunio開發板（軟硬體全套，開源，目前較熱門）
各家單晶片公司提供參考設計(如Ateml等)




Arduino開發板（軟硬體全套，開源，目前較熱門）
Ethernut/nutos專案（軟硬體配套，開源，偏重電腦網路）
UcosII作業系統(軟體，開源但商業版本需要license費)
FreeRTOS作業系統（軟體，商業公司提供的開源版本，也售賣對應的商業版本）
Keil RTX51 Real-Time Kernel（開源，Keil軟體內建需要license）


/


32位元處理器
/


Ethernut/nutos專案（軟硬體配套，開源，偏重電腦網路）
eCos作業系統（軟體，開源，優點是可以客製化RTOS）
uClinux作業系統（軟體，開源，有對應的硬體板uCsimm專案）
FreeRTOS作業系統（軟體，商業公司提供的開源版本，也售賣對應的商業版本）
Keil RTX Real-Time Kernel（開源，Keil軟體內建需要license）
RT-thread作業系統（軟體，開源，國內開發,有簡單GUI）




Android作業系統
Beagle board專案（軟硬體配套，開源）
Raspberry Pi 專案（軟硬體配套，開源）












閱
論
編


單晶片






總論



單板機
特殊功能暫存器（英語：Special function register）








架構



8051
ARM
AVR
PIC
C166（英語：C166）
TriCore（英語：TriCore）
FR-V（英語：FR-V）
MC6800








家族系列





4位元




TLCS-47（英語：Toshiba TLCS）









8位元




AVR
PIC（8-bit）
COP8
MCS-48（英語：Intel MCS-48）
英特爾MCS-51
Z8（英語：Zilog Z8）
eZ80（英語：Zilog eZ80）
飛思卡爾68HC08（英語：HC08）
飛思卡爾68HC11（英語：HC11）
H8
PSoC
東芝TLCS（英語：TLCS-870）
XC800系列（英語：XC800）









16位元




C166
CR16/CR16C
H8S
MSP430
PIC（16位元）
R8C
東芝TLCS-900
XC 2000
XE166









32位元




Am29000
CRX
富士通FR
FR-V
H8SX
MPC5xx
PIC（32位元）
TLCS-900
TriCore
英飛凌XMC4000
英飛凌AURIX
V850
應用級ARM核心列表











介面





編程




電路線上串列燒錄編程（ICSP）
系統線上燒錄編程（英語：In-system programming）（ISP）
程式和除錯介面（PDI）
高電壓串列編程燒錄（HVSP）
高電壓並列編程燒錄（HVPP）
Bootloader
ROM
aWire









除錯




debugWIRE
Joint Test Action Group（JTAG）
In-circuit debugging（ICD）
In-circuit emulator（ICE）
In-target probe（ITP）











模擬器



gpsim








列表



Common microcontrollers
By manufacturer

Freescale
Intel










參見



嵌入式系統
可程式邏輯控制器













權威控制



LCCN: sh87006632
GND: 4396978-1
BNF: cb12410613b（資料）
NDL: 01064710









^ Michael Barr. Embedded Systems Glossary. Neutrino Technical Library. [2007-04-21]. 
^ Heath, Steve. Embedded systems design. EDN series for design engineers 2. Newnes. 2003: 2. ISBN 978-0-7506-5546-0. An embedded system is a microprocessor based system that is built to control a function or a range of functions. 





 
						取自 "https://zh.wikipedia.org/w/index.php?title=嵌入式系統&oldid=44183591"					
分類：嵌入式系統隱藏分類：維基百科需要重寫的條目含有英語的條目包含規範控制資訊的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源維基教科書 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AlemannischالعربيةAzərbaycancaБългарскиCatalàČeštinaDanskDeutschEnglishEspañolEestiفارسیSuomiFrançaisעבריתहिन्दीMagyarBahasa IndonesiaItaliano日本語한국어Lietuviųമലയാളംမြန်မာဘာသာNederlandsNorsk nynorskNorsk bokmålPolskiPortuguêsRomânăРусскийSrpskohrvatski / српскохрватскиSimple EnglishSlovenčinaСрпски / srpskiSvenskaதமிழ்ไทยTürkçeУкраїнськаاردوTiếng Việt 
編輯連結 





 本頁面最後修訂於2017年4月30日 (週日) 05:39。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 













CTIMES- 掌握嵌入式系統設計的重大趨勢 :嵌入式系統,FPGA,CompactRIO,NI






























  
│C  RUNNING 科技人路跑│智動化SmartAuto│科技論壇│新品中心│資源中心│出版中心│FB服務│


v3.05.2048.104.199.203.235





















帳號：




密碼：






註冊
忘記密碼





















新聞
	
最新新聞
		
Type-C時代來臨 TI推出單晶片降/升壓電池充電控制器
借力研華、英特爾IoT技術支援  全台首座智慧零售店在家樂福 !
Azoteq的觸控產品系列即日起由Digi-Key向全球供貨
TrendForce：醫療AI發展加速，預防醫學導入最迅速
Zytronic 觸摸感測器變革披薩自動售貨機的使用者介面
天奕科技展示iBeacon室內定位系統  落實智慧長照




產業新訊
		
R&S FSW訊號暨頻譜分析儀創內建2 GHz分析頻寬
igus創新塑膠電纜接頭彎角解決方案
凌力爾特高整合度36V降壓電池充電器提供無縫備份電源
意法半導體新款USB Type-C控制器內建保護機制
威鋒電子VL820取得USB 3.1 Gen2集線器控制晶片協會認證
凌力爾特105V、2.3A 同步降壓穩壓器以超低EMI/EMC輻射提供高效




社論
		
[評析]改變產業生態或社會氛圍   先從自己開始
[評析]沒有退路的FPGA與晶圓代工業者
[回應李開復] 創業前輩，請鋪路！
[分析]以低成本UHD TV打開市場
[評析]台灣新定位：與全球創客接軌
最強3D/CNC成形機進駐南分院，請來試試！




單元
	
專題報導

u-blox五大無線模組方案　加速IoT應用成真
引領新世代微控制器的開發與應用 : MCC 與 CIP
最新一代DSC在數位電源的應用
Cadence轉型有成   CDNLive 2014展現全方位實力
智慧建築趨勢：綠能、感測與互聯
Thread切入家用物聯網的優勢探討
家庭能源管理廠商經營模式分析 － PassivSystems
網通無縫接軌 智慧家庭才有搞頭




焦點議題
		
大陸運動控制市場後勢可期
台灣綠色煉金術
4K TV強勢走入客廳 眼球大戰一觸即發
居於領導地位   台灣PCB再求突破
從軟體角度看物聯網世界
CES 2014觀察：PC時代正式終結
Google NB正面迎擊Wintel
App開發：以快打慢 流量決定贏家




產業評析
		
智慧化車隊管理 效率升級
[評析]COMPUTEX轉型之餘 卻未見更大格局
[評析]從半客製化與嵌入式看起-淺談AMD的未來發展
[評析]從晶片量產流程看iPhone 6S晶片門事件
[評析]質比量重要-高通新一代產品藍圖的背後意涵
[評析]我們要如何看Cypress與Spansion的聯姻？
[評析]高通併購CSR的後續發展？
南方有夢：創新創業攜手小工廠打開活路




Tech Review
		
智晶光電持續拓展PMOLED應用的無限可能
手機大數據 揭開電子零組件貴金屬含量的密碼
快速實現大規模的電子垃圾環保回收－Barrel One Automatic Machine
Epson獨門技術 打下工業機器人市場
d&i創新設計獎：iSG愛思達工業熱插拔無托盤機箱
d&i創新設計獎：英豐寶Nextep行動應用整合App
d&i創新設計獎：天瀚科技投影平板
d&i創新設計獎：盟創科技漂浮數位機上盒




CTIMES People
		
福特：我們不只是汽車公司！
從on-Glass到on-Silicon 台灣微光學的下一步
李道根：我靠我的技術賺錢
我的著迷成就聲音的浪漫
唐玄輝：「設計」是為幫助社會
宏觀思考　找到自己的位置！
段曉雷：創新就像算命，要維持犯錯不死
NEC發表可不受天候影響的光解析技術




Change The World
		
智慧單車開啟綠交通時代
Google Project Loon看高空通訊平臺發展趨勢
穿戴式裝置 解放你的雙手
生物感測器開啟感知新價值
遠距親臨機器人投入商業應用
打造現代都市農業──植物工廠
打不過，玩具開發向手機靠攏
Google藉助量子電腦啟動AI研究夢想




獨賣價值

掌握開放硬體成功之道
不挖金礦而賣鏟子 － 奇多比行動軟體公司
在重重專利卡位中，找到自己的獨家配方
眼控技術打開漸凍人的天空
[獨賣價值] 開放＝力量 解開「開放硬體」謎底
轉個念　看見獨賣價值！
NEC發表可不受天候影響的光解析技術
[獨賣價值]讓App變成一桶金






專欄
	
黃俊義
		


[評析]媒體與媒介
心想事成
電子產業的整合之路
走自己的路
現代君子─動手不動口
讓圖書分類更有教育性


詹文男
		


[專欄]大陸創新創業人才磁吸效應的挑戰
[專欄]大陸創新創業人才磁吸效應的挑戰
[專欄]建構物聯網生態系統 加速產業轉型
[專欄]產業轉型需全面加速
[專欄]以5G佈局來加速產業的升級轉型
[專欄]智慧城市發展需產政攜手


洪春暉
		


[專欄]從高通併購恩智浦看半導體發展趨勢
[專欄]台灣半導體國家隊之發展模式探討
[專欄]從新政府五大創新產業 看臺灣半導體業機會
[專欄] 資訊電子產業發展回顧與展望
[專欄]從Apple Watch看電子業投入醫療應用的發展模式(下)
[專欄]從半導體業併購風潮管窺未來產業發展之樣貌


歐敏銓
		


[專欄]物聯網與烏托邦
這是一個重新洗牌的開始
打破傳統思維 擁抱Crowdsourcing吧！
穿戴上身 當超人或凡人？
李遠哲：重回太陽的懷抱吧！
從KANO看「一球入魂」的社群運動


陳俊宏
		


[專欄] 創客與敏捷製造
[專欄]打造 IoT Open Architecture全民運動
[專欄]物聯網架構師：談 IoT Diagram
[專欄]物聯網架構師： 談 IoT Diagram
[專欄]WoT 的成年儀式－通訊協定技術變革
[專欄]開放硬體是實現Personal Things的重要環節


李學文
		


[專欄]不能消滅電視，就盡快與其匯流吧！
[專欄]一個人的電視
[專欄]誰將是客廳匯流場域霸主？
Second screen在英國的成功可以帶給我們甚麼啟示？
匯流電視未來式
[專欄] Apple真正的野心 是無處不在的iOS


Majeed Ahmad
		
[評析]行動裝置與MEMS革命齊頭發展
[評析]電子工程師，加速擁抱App吧！
[專欄]小筆電興衰錄：從後PC時代說起
Sailfish來了 Android開發者接招
[專欄]3D列印：擁抱未來硬體




Gartner
		


觸控控制器將演進為系統解決方案
mHealth穿戴式電子創新技術
Smart TV引爆全功能電視應用處理器需求
平價3D印表機將打入各行各業
物聯網五大關鍵技術分析
NB處理器架構大戰一觸即發


MIC
		


手機規格戰延伸相機模組
Google Fiber前進34城市 推動新興應用發展
2013年眼鏡式3D立體影像顯示技術與市場發展趨勢
Google Project Loon看高空通訊平臺發展趨勢
跨入裸眼3D立體影像時代
行動裝置電池新興技術發展趨勢


陸向陽
		
[專欄]藍牙5的具體距離、速率精進
3GPP LTE V2X車聯網技術標準漸成形
[專欄]App拯救行動早已展開，但收效有限
[專欄]多核十年，增核需求仍在但意義已不同
[專欄]ARM架構伺服器晶片的機會與挑戰
ARM架構的標準軟硬體系統漸成形




EEPW
		
馬航客機失聯事件對航空電子業的啟示
行動通信處理器 一定要8核、64位嗎？
2014年的可穿戴設備：神話or 笑話？
Google收購Nest，這是為何？
悲催的安捷倫EMG，你的名字又該叫什麼？
Big.Little的64位戰略反將Android一軍






焦點
	
Touch/HMI
		
滿足功耗／效能／晶片面積需求 新思推新系列ARC HS處理器
[Computex 2017]  智慧時代來臨 Dialog：AI將推動家居新一波應用
[Computex 2017] 居家照護需求增 麗暘力推Robelf陪伴型機器人
人機交互技術的發展
安全第一 意法STM32H7系列提供加密服務
善用IDM優勢   ST打造多元感測產品線
NV：不管VR能否續存 群策群力才是關鍵
[ARM Tech Day]真實呈現   全域光照目標不只遊戲市場




Android
		
平臺戰略：台灣VR產業的康莊大道
MacBook領軍USB Type-C普及加速
多功能嵌入式系統新未來：從Android到Raspberry Pi 3
從「經濟視角」看臺灣VR產業
感測器集線器之爭  勝負由市場決定
Micro Console混戰局面如何解？
[MWC]Intel：行動處理器將全線升級64位元
[評析]Android成為Windows 8觸控接受度的大功臣？




硬體微創
		
ARM DesignStart計畫再升級 開發者將可迅速客製化SoC設計
創造「微笑曲線」最高價值  自造者是企業轉型契機
Maker轉化Start Up 司圖：先思考合適商業模式
全球夯創客經濟  台灣擁「三大優勢」卡位
紅帽助企業掌握多元資源及多元力量
推廣自造精神 Intel IoT Roadshow盡情發想創意
開放硬體市場夯 晶片大廠也加碼
虛擬熱潮起 現實市場商機爆發




醫療電子
		
桃園市智慧化程度不落五都之後
製藥工業4.0數位化 打造智慧生產效能
[Computex 2017] 工研院健康樂活姿勢追蹤系統 可預防運動傷害
[Computex 2017]工研院智能系統主題館展示多項研發成果
數位治理讓城市更有智慧
打造醫材產業鏈正向循環
復健機器人平臺感測更活力
塑膠圓形醫療連接器選擇指南




物聯網
		
人工智慧於Computex大行其道
借力研華、英特爾IoT技術支援  全台首座智慧零售店在家樂福 !
從VR 與 AI 的發展談VR+工業4.0的結合
Intel:落實工業4.0 需借助科技業力量
桃園市智慧化程度不落五都之後
東元、高聖智慧轉型
Gateway of Taiwan 智慧治理 看見桃園新價值
NXP：語音辨識模組將帶來龐大商機




汽車電子
		
為汽車註入電力以加速實現綠色地球願景
車載新時代 產業新契機
整合車用產品技術 TI提升環保／安全／駕駛體驗
封閉式場域 車載應用新挑戰
車電展登場 瑞薩:台廠可從兩大技術著手切入ADAS應用
搶攻車用電子商機 工研院大展節能車輛技術
智慧化車隊管理 效率升級
共享經濟才正開始！汽車大廠接力備戰新商業模式




多核心設計
		
深度學習效能提高113倍 Intel力推新可擴充處理器
8位元嵌入式設計致勝關鍵
iPhone 7「內在美」升級 將引領手機新革命?
軟銀併購ARM 為物聯網發展打基礎
電競、VR發展成重點
[MWC Asia]高通與聯想攜手打造全新行動AR體驗
深耕電視廣播領域   索思未來對影像壓縮有不同見解
[ARM Tech Day]DesignStart計畫再延伸  ARM與客戶關係更密切




電源/電池管理
		
Type-C時代來臨 TI推出單晶片降/升壓電池充電控制器
具增強隔離效能之馬達控制感測電阻選擇
避免行動裝置充電再爆炸 Dialog推電源轉換器系列晶片
具智慧安全的災害管控裝置
快速trr性能的600V SuperJunction MOSFET PrestoMOS
低功耗藍牙成連結網路／遙控首選
智慧LED照亮車用市場
LED照明設計架構新轉變




面板技術
		
IDC：全球平板組裝產業受市場淡季衝擊 出貨大幅下滑
雷射電視的未來
中日韓3大廠商聚焦OLED
透過擴增實境驅動車用抬頭顯示器發展
面板產能沒有極限 IDC：LCD將會更大尺寸化
智慧家庭新創業者發展現況及關鍵成功因素分析
2016年總結 SEIA：美國太陽能市場成長95％
液晶電視年排行出爐 三星／樂金穩居前二名




網通技術
		
人工智慧於Computex大行其道
解析工業4.0中的硬體商機
資料工程師將成最搶手職缺  Cloudera引進大數據分析培訓計畫
桃園市智慧化程度不落五都之後
Gateway of Taiwan 智慧治理 看見桃園新價值
萬物聯網時代來臨
居家老人關懷系統
愛立信：2022年 約每六人就有一人使用5G




Mobile
		
人工智慧於Computex大行其道
[評析] Flash產能不給力 UFS稱霸江湖夢碎
滿足功耗／效能／晶片面積需求 新思推新系列ARC HS處理器
Type-C應用商機夯 VESA Q3將公佈相關電子產品正式規格
MEMS麥克風技術
您的家庭可能越來越智慧—但防駭客的安全性又如何呢？
電子錢包趨勢成已成 2020年60%交易支付將採用NFC
美元升值 2017年全球IT支出成長不如預期




3D Printing
		
3D列印安規驗證鉅細靡遺
放眼智慧建設大未來 歐特克與台灣建築中心簽訂MOU
3D列印亞太醫療市場將超過7億美元
夢想突圍
產學研齊攻航太3D列印
3D列印迎接光製造世代
Maker轉化Start Up 司圖：先思考合適商業模式
3D列印結合PTC新3D CAD軟體 模具廠生意版圖將受威脅？




穿戴式電子
		
從VR 與 AI 的發展談VR+工業4.0的結合
居家老人關懷系統
滿足功耗／效能／晶片面積需求 新思推新系列ARC HS處理器
Type-C應用商機夯 VESA Q3將公佈相關電子產品正式規格
[Computex 2017] VR遊戲體驗再進化 Tobii眼動追蹤躍上HTC Vive
[Computex 2017] 工研院健康樂活姿勢追蹤系統 可預防運動傷害
[Computex 2017]  智慧時代來臨 Dialog：AI將推動家居新一波應用
CCS Insight：VR／AR未來五年市場可期




工控自動化
		
從VR 與 AI 的發展談VR+工業4.0的結合
桃園市智慧化程度不落五都之後
東元、高聖智慧轉型
Gateway of Taiwan 智慧治理 看見桃園新價值
施耐德電機EcoStruxure Control Advisor軟體全面實現智慧控制
製造思維大翻轉
ARM：機器人將帶來協助而非取代人類
確保食品加工零污染 易格斯推出食品級最新產品




半導體
		
借力研華、英特爾IoT技術支援  全台首座智慧零售店在家樂福 !
解析工業4.0中的硬體商機
SRB論壇落幕 環境與人才將成未來政策重點
萬物聯網時代來臨
居家老人關懷系統
製造思維大翻轉
投50億力挺AI發展 陳良基：第一步先建立生態系統
還在傷腦筋？ 物聯網測試一次通關




WOW Tech
		
TEDxTaipei：創新的關鍵 在於打造一個生態系
Jabra：用科技 可有效提高知識工作者效率！
提升戰鬥力 美國研發軍用Google Glass
社交分享成3C差異化價值
無人機的社會創新契機 - Matternet
盲人福音：智慧導航鞋Lechal
[MWC]EyeSight手勢辨識 智慧眼鏡更便利
決戰穿戴式 三星發表 Gear 2智慧手錶




量測觀點
		
MEMS振動監測：從加速度到速率
東元、高聖智慧轉型
製造思維大翻轉
還在傷腦筋？ 物聯網測試一次通關
具增強隔離效能之馬達控制感測電阻選擇
無線通訊啟動物聯網應用新格局
NI：TSN將加速IT與OT的整合趨勢
智慧LED照亮車用市場




科技專利
		
IDC：全球平板組裝產業受市場淡季衝擊 出貨大幅下滑
雷射電視的未來
中日韓3大廠商聚焦OLED
透過擴增實境驅動車用抬頭顯示器發展
面板產能沒有極限 IDC：LCD將會更大尺寸化
智慧家庭新創業者發展現況及關鍵成功因素分析
2016年總結 SEIA：美國太陽能市場成長95％
液晶電視年排行出爐 三星／樂金穩居前二名






技術
	
專題報
		
【智動化專題電子報】嵌入式技術掀起智慧化浪潮
【智動化專題電子報】智慧製造趨動 CNC數控市場再起風雲
【智動化專題電子報】工業通訊鏈結智慧製造願景
【智動化專題電子報】台灣工具機重塑產業競爭力
【智動化專題電子報】聯網架構全面串連 車隊管理思維升級


關鍵報告
		
掌握嵌入式系統設計的重大趨勢
運用nvSRAM維持企業級SSD的可靠性
UPS最佳化 系統管理最優先
行動安全夯 指紋辨識方興未艾
我們的都市為何需要更智慧化？
銀奈米線替代ITO技術剖析
MEMS感測器在汽車業的創新應用
無線監測應用再進化  技術互補挑戰多




技術文庫
		
超低壓轉換器推動熱電源能量採集的發展
如何採用多種單端訊號驅動低功率ADC
針對35W以下的LED照明應用 可達控製成本效益解決方案
掌握嵌入式系統設計的重大趨勢
摩爾定律對資料記錄的影響
改善資料擷取效能的全新匯流排技術
低成本執行激發與響應量測元件特性
如何依據資料手冊選擇低功耗微控制器？




白皮書
		
德國萊因大中華區發佈《工業機器人和網路安全白皮書》
想要防範偽冒?為設計選用合適安全驗證方法
具智慧安全的災害管控裝置
出騎不意
睡眠姿勢之分析系統
物聯網之萬國插頭
天外騎蹟
大批量製造的裝置疊對方法






軟體
	
資料庫
作業系統
系統工具
一般工具
磁碟與檔案
電腦安全
軟體研發
網際伺服
網際終端
通訊與網路
影像與圖形
語音與音效
驅動程式
IC設計
網際網路
教育與遊戲
科學與工程
電子交易
辦公軟體
硬體研發
硬體工具


WOW!
	
會按摩的Balluga智能床治癒失眠
助你減肥的Bit Bite耳機
LuDela 燭光智慧又安全
力抗日夜溫差的小太陽嬰兒床
萌樣Leka可陪伴自閉兒建立技能









          《報名去》數位行動產業第二屆高峰會
        

          《報名去》數位行動產業第二屆高峰會
        

          《抽大獎》是德科技示波器的前世今生
        

















CTIMES / 文章 / 


				  
				


























掌握嵌入式系統設計的重大趨勢





透過異質架構結合多項處理元件，打造出高效能嵌入式系統

【作者： Carlos Pazos】   2013年06月21日 星期五






瀏覽人次：【7932】


			  


隨著嵌入式應用漸趨複雜，硬體架構與嵌入式系統設計工具也必須有所改良，才能因應各種嚴苛需求，同時縮短設計時間。許多傳統的嵌入式系統必須配備單一 CPU，因此系統設計工程師得提高 CPU 的時脈速度、改用多核心運算技術，同時透過創新，才能滿足複雜應用所需的運算效能。
然而，越來越多的系統設計工程師選用了具有多種不同處理元件的異質運算架構，以便在效能、彈性、成本、延遲時間與其他要素之間取得最佳平衡。這樣一來即可因應新一代嵌入式系統的設計需求。
如要瞭解異質運算架構的優勢，請想像一個由 CPU、FPGA、I/O 所組成的架構。FPGA 可說是平行運算的理想選擇，可透過許多平行資料通道來處理訊號。此外，由於 FPGA 會直接在硬體內執行運算作業，因此可縮短客制化觸發與高速閉迴路控制等作業的延遲時間。
再者，將 FPGA 整合至運算架構後還可以加強嵌入式系統的彈性，比固定邏輯的系統更容易升級，也可隨時因應不同的 I/O 需求。只要在同一個異質架構內整合 CPU 與 FPGA，系統設計工程師就可以同時享有 FPGA 與 CPU 所帶來的優勢，堪稱魚與熊掌兼得。此外，假如單元件解決方案並不適合某項應用，那還不如採用異質架構來得乾脆。
舉例來說，使用單一 FPGA 來處理低延遲時間的平行工作，其功效可能等同於採用多個 CPU 的成效。
配備多個處理元件的嵌入式系統設計可提供多重優勢，但也可能引起軟體開發的相關問題。因為處理元件各有各的特殊架構，而且設定作業需要不同的工具組合與專業技巧，所以設計團隊的規模不容小覷。比如說，FPGA 設定通常需要 VHDL 程式設計的相關知識，這又會需要更多員工、大量的培訓投資，以及更昂貴的外包成本。
此外，為了支援異質架構而開發軟體環境所需的心力也相當可觀，包含驅動程式整合、介面卡支援、銜接元件所需的中介軟體、I/O 介面邏輯等多不勝數。系統設計工程師可透過整合式的軟硬體平臺來解決問題，此平臺由標準的異質架構、可互換 I/O、高階系統設計軟體所組成。
高階設計工具採用基礎硬體的相關知識，可簡化系統架構與 I/O 的開發流程，提高生產力之餘，還可以降低繁瑣的實作管理需求。採用異質架構開發嵌入式系統時，高階系統設計工具有助於簡化個別運算元件的架構(例如 FPGA)，還可提供一致的設定模型，方便工程師在設計嵌入式系統時處理不同的元件並享有其優勢。
此外，高階設計軟體的抽象化功能可簡要說明有效的運作方式，提高程式碼的重複使用率，無論硬體或通訊介面如何改變都沒問題。
圖一 : 在異質運算架構中整合微處理器與 FPGA 後，嵌入式系統設計工程師即可發揮每個運算元件的優勢，同時有效滿足複雜的應用需求。
LabVIEW 可重設 I/O (RIO) 架構
目前採用異質架構的現成嵌入式系統平臺已相當普遍，此平臺可降低客制化硬體的設計需求。以 NI LabVIEW RIO 架構為例，當中結合了 LabVIEW 系統設計軟體與 NI RIO 硬體 ( 採用處理器、FPGA 與模組化 I/O)，並且提供各式各樣的機型與效能選項，包含機板層級的 NI Single-Board RIO 與工業級的 NI CompactRIO 及 PXI。
豐富的 I/O 模組生態系統包含 比與數位量測、工業級匯流排連接選項與其他產品和功能，皆可協助工程師將此平臺用於各種領域，包含電力電子控制與醫療成像。
實用的異質運算技術
嵌入式系統設計的異質架構概念深深影響了許多產業。舉例來說，Thales UK 這家交通運輸解決方案公司採用 LabVIEW 與 CompactRIO，針對虛擬測試火車設計出一種自動化傳訊系統。這項傳訊計畫的目標在於提高 33% 的系統容量 ( 等於每小時多容納 5,000 名乘客)，同時縮短 22% 的旅程時間。
為了模擬實際的客運列車並測試鐵道狀況，Thales UK 團隊選用 FPGA 搭配嵌入式處理器，以透過單一系統提供高速控制、資料擷取、資料分析等功能。該公司使用現成的 CompactRIO 硬體與 LabVIEW，打造出完整的監控系統，不但可以模擬實際火車的訊號，還可以量測測試資料、記錄資訊以便後續審查。
Thales UK 不僅改革了傳統的測試方法，同時把測試時間從好幾天縮短為數小時。而且只要大約一半的人力即可執行全新的虛擬火車測試作業。
圖二 : Thales UK 的工程師採用 CompactRIO 與 LabVIEW，模擬出倫敦地下鐵路網的客運火車
Thales UK 的設計團隊皆採用異質運算架構，打造出創新的高效能嵌入式系統。由此可知，只要有現成硬體與高階的系統設計工具，小型團隊與該領域專家即可充分運用這些架構所帶來的優勢，不必建置客制化硬體，也不用學習多種特定的設計工具，更不需要像以傳統方式設定多種處理元件那麼麻煩。
由於異質架構對嵌入式系統設計來說越來越重要，各組織與團隊都可從中獲得包含優異的功能、成效與彈性等好處。
（本文作者為NI 嵌入式軟體產品行銷工程師)












相關文章







‧
解析工業4.0中的硬體商機


‧
技術趨勢論壇剖析工業4.0浪潮


‧
選擇對的示波器 讓測試事半功倍吧


‧
物聯網的嵌入式安全性


‧
載波聚合的測試新視野
















Please enable JavaScript to view the comments powered by Disqus.
comments powered by Disqus






相關討論










 


















  相關新品




















mbed


原廠/品牌：RS


供應商：RS


產品類別：PC Board





















Arduino


原廠/品牌：RS


供應商：RS


產品類別：PC Board





















Raspberry Pi


原廠/品牌：RS


供應商：RS


產品類別：PC Board
















  相關新聞





» 
Type-C時代來臨 TI推出單晶片降/升壓電池充電控制器


» 
借力研華、英特爾IoT技術支援  全台首座智慧零售店在家樂福 !


» 
Azoteq的觸控產品系列即日起由Digi-Key向全球供貨


» 
天奕科技展示iBeacon室內定位系統  落實智慧長照


» 
SEMICON Taiwan 2017即將登場










  相關產品





» 
R&S FSW訊號暨頻譜分析儀創內建2 GHz分析頻寬


» 
凌力爾特高整合度36V降壓電池充電器提供無縫備份電源


» 
意法半導體新款USB Type-C控制器內建保護機制


» 
威鋒電子VL820取得USB 3.1 Gen2集線器控制晶片協會認證


» 
凌力爾特105V、2.3A 同步降壓穩壓器以超低EMI/EMC輻射提供高效














AD







﻿	
	







刊登廣告
｜
新聞信箱
｜
讀者信箱
｜
著作權聲明
｜
隱私權聲明
｜
本站介紹






︱
Copyright ©1999-2017 遠播資訊股份有限公司版權所有 Powered by O3


地址:臺北市中山北路三段29號11樓 / 電話 (02)2585-5526 / E-Mail: webmaster@ctimes.com.tw 













相關作者
	
Carlos Pazos


相關產業類別
	
電子產業


相關關鍵字
	
Fpga
嵌入式系統
Compactrio


相關組織
	
Ni


相關網站單元
	
多核心設計
技術文庫
儀器設備











天瓏網路書店-ARM 嵌入式系統開發與應用



































天瓏網路書店
全台最齊全
中英文電腦書專賣店







天瓏資訊圖書粉絲專頁




搜尋


資料科學
簡體書
Packt
微服務
工程師必讀經典
英文書新到貨
Python
Tensorflow
無瑕程式碼








        ARM 嵌入式系統開發與應用
        


        吳明暉
        
      




 


出版商:
全華


出版日期:
2005-12-15


定價:
$550


售價:

9.5 折
          $523



貴賓價:

9.0 折
            $495

語言:
繁體中文


ISBN:
9572151789

ISBN-13:
9789572151785





      立即出貨
        (庫存 < 4)













買這商品的人也買了...







 
$420
              貴賓價: $336
          
嵌入式設計及 Linux 驅動開發指南─基於 ARM9 處理器, 2/e





 
$620
              貴賓價: $527
          
ARM 嵌入式常用模組與綜合系統設計實例精選





 
$750
              貴賓價: $675
          
ARM 系統開發者指南 (ARM System Developer's Guide: Designing and Optimizing System Software)





 
$820
              售價: $648
          
鳥哥的 Linux 私房菜－基礎學習篇, 3/e





 
$780
              售價: $663
          
Embedded Linux 嵌入式系統開發實務, 2/e (Embedded Linux Primer: A Practical Real-World Approach, 2/e)





 
$300
              貴賓價: $270
          
ARM Linux 嵌入式系統發展技術





 
$680
              售價: $537
          
嵌入式系統─使用 C 和 GNU 開發工具 (Programming Embedded Systems with C and GNU Development Tools, 2/e)





 
$520
              貴賓價: $442
          
ARM 嵌入式系統設計入門





 
$480
              售價: $379
          
透視 C 語言指標－深度探索記憶體管理核心技術 (Understanding and Using C Pointers)





 
$540
              售價: $459
          
全面攔截 P2P 主流技術(P2P 技術完全攻略)





 
$620
              售價: $527
          
王者歸來－用 Linux 移植各種硬體





 
$550
              貴賓價: $495
          
嵌入式 Linux C 語言程式設計實務





 
$680
              售價: $537
          
建立嵌入式系統－傑出軟體的設計模式 (Making Embedded Systems: Design Patterns for Great Software)





 
              貴賓價: $341
          
嵌入式Linux從入門到精通 (嵌入式開發直通車)





 
              貴賓價: $507
          
Linux設備驅動開發詳解:基於最新的Linux4.0內核





 
              貴賓價: $331
          
Cortex-M3 之 STM32 嵌入式系統設計





 
$400
              貴賓價: $360
          
嵌入式 Linux 程式設計 (修訂二版)





 
$880
              售價: $440
          
王者歸來－Linux C 系統整合開發設計, 2/e





 
$490
              售價: $417
          
4G LTE 新一代行動無線寬頻技術網路規劃與設計





 
$580
              貴賓價: $493
          
Linux 系統程式設計－使用 C 語言, 2/e




產品描述

本書特色

1. 由淺入深的方式來使讀者對ARM系統有全面性的瞭解及認知。2. 
  使用大量實例對視窗函數以及Nano-X中字體的處理、影像繪製、訊息傳遞等有詳細介紹。
 
因ARM的32位元微控制器IP核其卓越的性能和良好的擴充性，為廣大設計者偏好，所以目前大多數的半導體公司都推出了自己的ARMSOC晶片，而ARM晶片構造裡的32位元嵌入式系統成為一個重要的部分，本書由淺入深的方式來使讀者對ARM系統有全面性的瞭解及認知，內容涵蓋了ARM晶片嵌入式系統設計原理及其具體應用，並透過大量實例介紹視窗函數及Nano-X中字體的處理、影像繪製等的應用。本書適合半導體相關業界人員或有興趣的讀者閱讀。
 
本書內容

目　錄第1章　ARM系統結構 1-11.1　ARM處理器概述 
  1-11.1.1　ARM產品背景 1-11.1.2　ARM處理器系列介紹 1-21.1.3　ARM處理器系統結構擴展 
  1-31.2　ARM系統結構概述 1-41.2.1　ARM系統結構版本 1-41.2.2　資料類型 
  1-51.2.3　處理器模式 1-61.2.4　暫存器 1-71.2.5　通用暫存器 1-71.2.6　程式狀態暫存器 
  1-101.2.7　異　常 1-141.2.8　ARM程序呼叫標準（APCS）簡介 1-191.3　ARM指令集 
  1-231.3.1　條件執行 1-231.3.2　ARM指令集列表 1-251.3.3　32位元程式碼基本規則 
  1-601.3.4　ARM指令應用舉例 1-611.4　Thumb指令集 1-631.4.1　Thumb指令集概述 
  1-631.5　IEEE浮點指令集簡介 1-781.6　ARM指令時序 1-861.7　32位元ARM處理器除錯技術 
  1-881.7.1　邊界掃描技術（JTAG） 1-881.7.2　ARM晶片的即時除錯方案（E-TRACE） 
  1-891.7.3　Nexus標準 1-89
第2章　組合語言程式設計 2-12.1　組合語言程式結構 
  2-12.1.1　基於GCC編譯器的組合語言程式結構 2-22.1.2　基於CodeWarrior的組合語言程式結構 
  2-42.2　號資料定義與資料結構 2-62.2.1　號命名規則 2-62.2.2　數值常數的使用與EQU指令 
  2-62.3　變　數 2-72.3.1　數值變數和數值運算式 2-72.3.2　邏輯變數和邏輯運算式 
  2-92.3.3　字串變數和字串運算式 2-102.3.4　變數記憶體空間分配 2-102.3.5　變數初始化 
  2-102.4　資料區分配和管理 2-112.4.1　使用SPACE分配記憶體區域 
  2-112.4.2　使用DCB分配一個或多個位元組的記憶體區域 2-122.4.3　使用ALIGN對齊記憶體資料 
  2-122.4.4　分配一個或多個字的記憶體區域 2-132.5　資料結構的描述 
  2-142.5.1　使用MAP和FIELD描述資料結構 2-142.5.2　相對地址 2-162.5.3　綜合實例 
  2-172.6　分支與轉移組合語言程式設計 2-192.6.1　簡單分支結構 2-192.6.2　複雜的分支結構 
  2-202.7　使用跳躍表解決分支轉移 2-232.7.1　程式實例 2-232.7.2　什麼是跳躍表 
  2-252.7.3　如何使用跳躍表 2-262.8　使用跳躍實作迴圈 2-272.8.1　透過條件跳躍實作do…while迴圈 
  2-272.8.2　透過條件跳躍實作while迴圈 2-282.8.3　多重迴圈程式設計 2-282.9　模組化程式設計 
  2-302.9.1　簡單函數呼叫例子 2-312.9.2　暫存器保護 2-332.9.3　參數傳遞 
  2-332.9.4　函數跳躍表 2-342.9.5　使用巨集定義實作函數功能 2-362.9.6　和函數相關的虛擬指令 
  2-372.10　高階語言和組合語言的混合程式設計 2-382.10.1　嵌入式組合語言語句 
  2-392.10.2　高階語言和組合語言函數間的相互呼叫 2-412.11　其他常見的虛擬指令 
  2-43
第3章　ARM系統啟動程式碼分析和開發 
  3-13.1　ARM的異常與RESET 3-13.2　瞭解與啟動相關的硬體資訊與開發手段 3-33.3　C/C++語言開發和執行環境 
  3-43.3.1　工具鏈準備 3-43.3.2　GNU環境簡介 3-63.3.3　C語言執行環境 
  3-83.3.4　一個簡單boot程式碼例子 3-113.4　BOOT程式碼分析 3-163.4.1　U-BOOT簡介 
  3-163.4.2　程式碼分析和移植相關 3-203.5　韌體開發除錯方法 
3-29
第4章　即時操作系統在ARM上的移植 
  4-14.1　即時操作系統簡介 4-14.2　μC/OS-II作業系統 4-24.2.1　μC/OS-II介紹 
  4-24.2.2　μC/OS-II應用程式開發 4-34.2.3　μC/OS-II移植 4-64.3　eCos簡介及移植介紹分析 
  4-244.3.1　eCos簡介 4-244.3.2　eCos的移植介紹 4-25
第5章　基於ARM的網路協定堆疊實作 
  5-15.1　協定堆疊實作結構 5-25.1.1　系統硬體驅動程式 5-35.1.2　znet協定初始化 
  5-55.1.3　znet協定主任務 5-75.2　協定實作模組程式碼分析 
  5-105.2.1　全域資料結構和μC/OS-II中的介面 5-105.2.2　全域緩衝管理模組 
  5-155.2.3　協定主任務和驅動交互的模組 5-205.2.4　ARP實作模組及主任務的IP資料分發 
  5-245.2.5　ICMP實作模組 5-345.2.6　API實作模組 5-385.2.7　UDP實作模組 
  5-485.2.8　TCP實作模組 5-555.3　協定堆疊實作回顧 5-68第6章　外部匯流排與音頻系統設計 
  6-16.1　IIC（I2C）匯流排基本原理 6-16.1.1　起始和停止條件 6-26.1.2　資料傳輸 
  6-36.1.3　讀寫操作 6-36.2　I2S音頻設備匯流排的原理和應用 6-46.2.1　I2S匯流排簡介 
  6-46.2.2　I2S匯流排協定 6-56.2.3　基於I2S介面的音頻系統硬體設計 
  6-76.2.4　基於CirrusLogic公司多媒體ARM晶片的音頻系統設計 6-86.3　音頻設備驅動 
  6-106.3.1　音頻設備基礎知識 6-106.3.2　Linux驅動程式結構 6-116.3.3　音頻設備檔 
  6-136.3.4　程式和音頻設備間的通信過程 6-166.3.5　設備的初始化和卸載 6-176.3.6　設備打開常式open() 
  6-206.3.7　記憶體映對和mmap常式 6-226.3.8　暫存區的設計 6-266.3.9　ioctl系統呼叫 
  6-306.3.10　音頻資料的播放和錄製常式 6-336.4　音頻應用程式的設計 6-366.4.1　音頻應用程式基本框架 
  6-366.4.2　音頻參數設置 6-386.4.3　混頻器（Mixer）基礎 6-446.4.4　綜合應用實例 
  6-476.4.5　音頻應用程式設計註意事項 6-55第7章　快閃記憶體晶片與嵌入式檔案系統 
  7-17.1　快閃記憶體的物理特性 7-17.2　嵌入式檔案系統概述 7-37.3　NAND設備驅動程式 
  7-47.3.1　NAND晶片 7-47.3.2　NAND控制器 7-97.3.3　NAND設備MTD程式製作 
  7-117.4　NOR設備驅動 7-167.4.1　NOR晶片 7-167.4.2　通用快閃記憶體介面（CFI） 
  7-177.5　針對快閃記憶體晶片的檔案系統 7-217.5.1　用於中間層TrueFFS 
  7-227.5.2　讓TrueFFS和引導磁區共用快閃記憶體 7-247.5.3　TrueFFS的配置與使用 
  7-257.5.4　在使用TrueFFS的快閃記憶體上面安裝Linux 7-277.6　JFFS/JFFS2檔案系統 
  7-317.6.1　日誌檔案系統儲存結構 7-327.6.2　JFFS2 7-357.6.3　在Linux中使用JFFS/JFFS2 
  7-417.6.4　MTD的其他用法：使用RAMDISK製作啟動核心 7-457.7　YAFFS檔案系統 
  7-477.7.1　YAFFS的下載與安裝 7-477.7.2　YAFFS與JFFS/JFFS2的不同點 
  7-497.7.3　YAFFS實作機制 7-50
第8章　嵌入式圖形使用者介面基礎 
  8-18.1　LCD顯示器基本原理 8-18.2　嵌入式GUI 8-38.2.1　MiniGUI 
  8-38.2.2　Microwindows 8-48.2.3　Microwindows_0.90_release的安裝 
  8-58.3　Microwindows的系統結構 8-138.3.1　設備驅動 
  8-138.3.2　MicroGUI—設備無關圖形引擎 8-198.3.3　Microwindows的應用程式介面API 
  8-218.4　圖形引擎層 8-228.5　編譯環境的選項（Makefile檔設置） 
  8-288.6　基於Microwindows類型的API的程式設計 8-308.6.1　視窗的基本元素 
  8-308.6.2　“Helloworld”，你的第一個Microwindows程式 8-318.6.3　圖形繪製函數小節 
  8-428.6.4　MicrowindowsAPI的優缺點 8-43
第9章　基於Nano-X的嵌入式GUI設計 
  9-19.1　Client/Server模式 9-19.2　Nano-X風格的“HelloWorld” 
  9-39.3　Nano-X視窗管理器 9-89.4　程式中使用點陣圖資源 9-99.4.1　將點陣圖變成C語言原始程式 
  9-99.4.2　影像尺寸 9-99.4.3　影像顯示 9-109.4.4　編譯執行 9-129.5　從檔中載入圖片 
  9-139.6　文字輸出與字體 9-159.6.1　文字輸出函數 9-159.6.2　字體的基礎知識 
  9-159.6.3　字體識別字 9-169.7　高階使用者介面設計 9-209.7.1　事件回應 
  9-209.7.2　窗口間通信 9-239.7.3　多視窗應用程式 9-239.7.4　視窗控制項 
  9-289.7.5　遊戲製作 
9-37








中文書籍分類

最新新書
2016 年度暢銷排行
暢銷排行 (2017/06)
暢銷排行 (2017/05)
暢銷排行 (2017/04)



活動主題列表

資料科學
CRC好書上架
簡體中文書最新到貨
PACKT 最新到貨
Effective 系列書
微服務系列書
Ruddy老師的敏捷教室
程式設計必讀經典系列
Springer好書上架
英文書最新到貨
資料視覺化系列書
Python 系列書籍
深度學習系列書籍
無瑕的程式碼 超值合購
Maker小天地



特價書籍

Bootstrap系列76折起
松崗暢銷書展5折起








Embedded Linux嵌入式系統移植實作 - 中華數位，嵌入式系統培訓專家





























 
  
  































姓      名







連絡電話





電子信箱






新舊學員




                                                舊學員


                                                新學員






選擇課程


Embedded Linux系統移植實作 





選擇場次


請選擇您想參加場次
週(一.三.五)7pm-8pm
週(二.四)2pm-3pm
週(六.日)11am-12pm
週(六.日)2pm-3pm
由專人為您安排另約時段




驗證碼







                                              資訊來源
                                            


請選擇
Google
Yahoo
Yes123
104
其他




























嵌入式Android物聯網系統移植培訓
Embedded Linux系統移植實作
Device Driver開發實務課程
Android系統整合移植實務
Android硬體框架整合實務



Android系列相關課程 Microcontroller系列相關課程
單元系列相關課程






課程簡介
｜
課程內容
｜
Embedded專題實作
｜
課程優勢
｜
學習流程
｜
開發板與模組專區























Embedded Linux系統移植實作
                                         上課時數:42小時       
									
( Embedded Linux System  )

































 embedded課程教學實錄





本課程使用業界全新ARM Cortex-A9四核心 Tiny4412開發板，從最底層SOC晶片系統設計理論，                               至上層每個環節的系統建置過程，詳細引導學員做循序漸進的學習。著重嵌入式系統設計架構流程，豐富的實例演練以及完整的移植教材讓學員在最短時間內深入淺出瞭解嵌入式硬體與
                                    系統核心的移植技巧與建置，同時針對開放源碼應用程式移植做詳細的探討，並藉由實作專題演練讓學員更進一步瞭解業界相關產品應用與創新；觀念脈絡的清晰使學員能夠在將來業界遇到不同的嵌入式平臺時能夠有能力移植與建置系統。








 



 





適合對象：


 具備 Linux 程式開發基礎，有志投入Embedded系統技術領域發展者。
 學習Linux程式開發技巧與Embedded實作者。 已在相關領域，欲再增強本身專業技能者。


職涯發展：嵌入式軟體工程師 │韌體工程師 │手持裝置開發工程師│驅動程式工程師│電子書開發工程師│車用電子工程師│







 具備Linux系統安裝與檔案系統架構，熟悉Linux 指令、核心編譯及主機架設。


 具備嵌入式C語言指標使用技巧、位元運算及檔案I/O探究、計憶體管理使用技巧


 具備Linux程式開發技巧與實作能力，System V IPCs 使用、Networking and  Socket Programming。


 掌握從無到有開發自己的嵌入式系統、瞭解Embedded開發各環節障礙及如何剋服 






 









































Introduction to Embedded System &amp; IOT Platforms.(嵌入式系統暨物聯網平臺介紹)






•嵌入式系統&amp;物聯網平臺介紹•嵌入式穿戴式裝置簡介•物聯網平臺應用導論•半導體製程、封裝概論•嵌入式系統硬體架構•嵌入式系統晶片設計流程
•嵌入式系統軟體暨物聯網平臺架構•嵌入式系統軟體設計流程•嵌入式系統建置流程(從底層硬體至上層系統軟體)•物聯網平臺實作•物聯網平臺實務Demo






ARM Architecture ( Exynos 4412) & Introduction to Development Board 
                                                                    (ARM 系統架構& 開發板介紹)






•CPU架構簡介(ARM MIPS x86 PPC)
                                                                    •ARM 公司簡介
                                                                    •ARM CPU 架構介紹
                                                                    •ARM 組合語言
•Exynos 4412  Cortex-A9 四核系統晶片手冊閱讀技巧
                                                                    •實作開發板硬體電路介紹
                                                                    •實作開發板軟體BSP介紹






GNU Software (GNU 工具軟體)






•Linux開發工具軟體介紹            
                                                                    •Makefile 撰寫技巧
                                                                    •建置函式庫
•嵌入式系統程式設計撰寫技巧 Embedded C
                                                                    •深入嵌入式系統程式執行流程
                                                                    •User Space and Kernel Space






Development Tools & Debugging Tools(嵌入式開發工具軟體& 除錯工具)






•跨平臺開發工具介紹(Toolchain)
                                                                    •建構物聯網跨平臺開發工具(Building your own toolchain)
                                                                    •建置嵌入式系統開發環境
•除錯軟體介紹
                                                                    •程式以及系統核心除錯技巧
                                                                    •除錯硬體介紹






Bootloader (開機管理程式)






•PC BIOS 以及Bootloader(U-boot)介紹
                                                                    •移植Bootloader技巧
                                                                    •編譯Bootloader
                                                                    •深入理解Bootloader核心程式
 •修改 Bootloader
                                                                    •Bootloader 驅動程式開發
                                                                    •SD card
                                                                    •LED
•Button
                                                                    •Ethernet






Embedded Linux Kernel (嵌入式系統核心)






•Linux 核心介紹
                                                                    •移植嵌入式系統核心技巧
                                                                    •設定嵌入式系統核心技巧
•修改系統核心
                                                                    •新增硬體裝置
•最佳化系統核心 (Down size)
                                                                    •核心除錯






File System(檔案系統)






•檔案系統介紹
                                                                    •建置檔案系統
                                                                    •NFS
•UBIFS
                                                                    •JFFS2
                                                                    •CRAMFS
•RAMDISK
                                                                    •檔案系統設定技巧
                                                                    •最佳化檔案系統大小






Open Source Application porting guide(開放源碼程式移植)






•應用程式移植介紹 (Porting)
                                                                    •導覽嵌入式系統應用程式
                                                                    •應用程式移植技巧
                                                                    •常見系統工具程式移植
 •常見函式庫移植
                                                                    •應用程式移植
                                                                    •驅動程式移植
                                                                    •GPS
 •Webcam
                                                                    •GPS
                                                                    •USB wifi
                                                                    •ADC






Linux Device Driver (Linux驅動程式)






•裝置驅動程式介紹
                                                                    •編譯系統核心模組
                                                                    •簡易驅動程式撰寫
•LED、溫溼度感測器、大氣壓力、三軸加速度
                                                                    •Button
                                                                    •新增驅動程式至開發板 
•Tiny4412 2D硬體驅動
                                                                    •Tiny4412 3D硬體驅動
                                                                    •Tiny4412 影音解碼硬體驅動






























































•業界專業講師，訓用合一為目標

                                                  •專業實務經驗講師，業界需求導向課程規劃，著重培養科技界即戰力人才。
•實作範例演練，紮實你的開發實力
                                                  •課程專題實作，獨家採用Tiny ARM Cortex-A9 四核心七吋電容觸控開發板實作範例演練  
                                                  •業界師資群自行技術研發，多元化周邊模組搭教學，與業界實際開發不脫節  
•由淺入深連貫性教學，完整的學程規劃
                                                 Linux系統管理→C語言程式設計→嵌入式Linux系統程式設計→Embedded實作→Android BSP Porting
        

循序漸進連貫性教學，掌握每階段的學習方向。
•中華數位F.B技術討論區，提供學員疑難雜症的好幫手
                                                  •不論在學中或結訓後提供你解決學習上的疑難雜症，讓學員學習上不再單打獨鬥。
•業界師資群編譯最新的實作教材
                                                  •業界資深師資群合作編譯最完整的課程教材，規劃更貼近業界需求課程內容，不斷創新。




 





CP值最高的Embedded Linux系統移植實作


※課程獨家採用ARM Cortex-A9 四核心 7吋開發板授課，具實際開發板經驗
業界講師，小班教學，結合實作與應用 。






 












 





 







 







實作範例演練第一階段 -請點選展開
                                



•Bootloader階段驅動LCD液晶螢幕
•開機顯示圖像至LCD螢幕


•Bootloader階段驅動LED
•開機階段控制LED燈號


•Bootloader階段驅動Button
•開機階段判斷按鍵觸發更換螢幕圖像


•Bootloader階段驅動SD card
•移植新版Bootloader


•Bootloader新增指令
•製作Bootloader patch 檔 






實作範例演練第二階段 -請點選展開
									



•建置新版Toolchain
•移植新版Linux Kernel 3.5


•修改MTD
•修改Nand Flash


•移植 LCD
•移植網路晶片


•移植觸控螢幕
•移植音效晶片


•移植RTC晶片
 •製作Linux Kernel patch檔


•嵌入式Linux Kernel選單設定技巧演練
•修改Linux Kernel 新增System Call


 •最佳化Linux Kernel 大小
•新增硬體裝置驅動程式至Linux Kernel


•Linux Kernel開機圖示更改
 






實作範例演練第三階段 -請點選展開
									



•Busybox 檔案系統製作
•移植新版Busybox


•函式庫移植
 •應用程式移植


•驅動程式移植
•ZD1211B無線網卡驅動移植


•Webcam ov511 snc9c10x 視訊晶片驅動移植
•開發板LED Button驅動程式移植


•開發板 ADC 類比轉數位驅動程式移植
•Mediatek GPS 衛星導航驅動函式庫移植


•溫度感測器驅動移植及應用程式撰寫
•圖形化應用程式移植(minigui qtopia…etc)


•系統應用程式移植
(thttpd php vsftp udhcpc wireless
                                          tool…etc)
•一般應用程式移植
(mplayer webcamtest gpstest…etc) 







 













 




 




















開課時間•106年9月3日至106年10月8日　(週日全天班 AM9:30至PM5:30)•106年10月31日至106年11月21日　(二四白天班 AM9:30至PM4:30)
相關課程：嵌入式Android物聯網人才養成

相關課程：嵌入式Android物聯網系統移植培訓      
                                        ................................................................................
報名方式
•電話報名:專線02-2311-7355•線上報名
下載報名錶

•Mail:grace@cadtc.com.tw
•傳真:02-2331-3591
•現場報名：•親洽中華行動數位教育訓練中心 - 臺北中心•(臺北市開封街1段2號9樓)                                      
                                    ................................................................................
上課地點臺北市開封街一段2號9樓　> 地圖 <(臺北火車站│館前路口│麥當勞隔壁大樓)































物聯網感測器傳送系統








 
將M4板子上的LM75溫度週邊模組，透過wifi將數據即時傳送到A9開發板，並進行超溫警報的動作。









 












 


 












                          課程規劃比想像中學得更多
                        

                          結訓學員-陳○宗
                        



        醫學工程研究所畢之後心想要從事linux為基礎的linux Device Driver或android BSP 相關工作。當初學嵌入式的動機是因為想學linux device driver，但是我沒有任何linuxprogramming 的基礎，所以詢問完課程後報名一整套從無到有從基礎、循序漸進上課的課程 ...





 


 














最新Cortex-A9四核開發板
搭配開發板周邊模組教學




模組專區










24-7雲端實驗室
全天後可上線操作練習




詳細內容










學員結訓專題作品發表 課程規劃的專題製作




影片分享










學員結業後服務更貼心 提供F.B.社團技術分享




技術分享









隨時提供學員工作職缺
供求職資訊，訓用合一




相關工作









講師親自撰寫上課講義
定時更新課程講義，掌握最新技術動脈








嵌入式系統書籍
定期訂閱熱門書籍，供學員免費借閱







免費供應飲料
研磨咖啡、特調冷飲、現泡熱茶







環型教室、數位設備
師生互動式廣播教學系統










 





 










                                2010年伴隨著各種技術與應用端產品的出現，近年來嵌入式系統設計應用範圍持續擴張，根據調查指出未來全球將有更多的嵌入式裝置出現於市面，如此龐大的潛在商機，使得許多高科技業者對於嵌入式市場的重視度有增無減，嵌入式產品應用的領域範圍，包括智慧型手機、STB、VoIP產品行動上網裝置(MID)、電子書、數位電子看板、工業控制、網路安全、數位相框、資訊家電、GPS導航裝置、遊樂器等領域與產品都是未來產業發展重點。
                        






 







 






 






課程簡介
｜
課程內容
｜
Embedded實作
｜
課程優勢
｜
學習流程
｜
開發板與模組專區






2017智慧電子人才職訓
|
嵌入式Android物聯網
|
Embedded Linux系統移植
|
Device Driver實務開發


Android BSP/HAL Porting
|
ARM穿戴式物聯網系統開發
|
Android App應用程式
|
Microcontroller 系列課程












































 
其他 | 【考試院二手書】《ARM-S3C4510B 為架構之嵌入式系統設計與應用》│長高│李駒光│ 八成新(31D16) | Yahoo拍賣















ga conf


 













首頁
超級商城
購物中心
中古車
帳務中心






Yahoo!奇摩拍賣


:::商品搜尋框

搜尋
搜尋:


















:::上方功能區塊






件商品已加入





前往購物車







        {{#if items_normal}}
            {{{merchant_name}}}
{{items_normal}}項商品
        {{/if}}
        {{#if items_nextbuy}}
            {{{merchant_name}}}
下次買清單
        {{/if}}
        

 









   拍賣  >    圖書/影音/文具  >    圖書與雜誌  >    電腦/網路  >    其他  






                          
 檢舉商品   tumblr share   facebook share       0 
 {{#if isLoveIcon}}
	
		{{likeNums}}
	
{{else}}
    {{#if trackItem}}已喜愛商品{{else}}喜愛商品{{/if}}
{{/if}}
   


    競標 【考試院二手書】《ARM-S3C4510B 為架構之嵌入式系統設計與應用》│長高│李駒光│ 八成新(31D16)           6 天 22 時 27 分 45 秒結束
      賣家可提前結束拍賣        起標價格    $190 / 0 次出價   出價增額 $10   最高出價者  無   數　　量    1 件      
         結標前 2 小時手機提醒   加入 iOS 行事曆   加入 Google 行事曆    
     自動出價  直接出價              請輸入直接出價金額   請輸入單件出價上限    建議最低出價 $190   系統將按增額，依序遞補出價至上限金額為止   
 
      Yahoo拍賣保障 放心買!我們給你五萬交易保障!     付款方式    信用卡一次付清   Yahoo奇摩輕鬆付   、  現金付款  Yahoo奇摩輕鬆付現金接受付款方式  帳戶餘額 網路ATM 實體ATM FamiPort  ATM提供6家銀行：合作金庫、華南銀行、玉山銀行、臺灣銀行、國泰世華、中國信託，以上6家同行轉帳，免轉帳手續費。  、    、     Yahoo奇摩輕鬆付   、  （想使用貨到付款嗎？）       運　　費   全家取貨付款 - 單件運費$60、消費滿$500免運費、APP全家免運  （合併運送規則）  單件運費$60 滿2件，運費$60 消費滿$500免運費    7-ELEVEN取貨付款 - 單件運費$60、消費滿$500免運費  （合併運送規則）  單件運費$60 滿2件，運費$60 消費滿$500免運費    郵寄掛號 - 單件運費$55、消費滿$500免運費  （合併運送規則）  單件運費$55 滿2件，運費$65 消費滿$500免運費    面交/自取/不寄送 - 免運費   離島寄送 - 單件運費$65、消費滿$600免運費   郵局貨到付款 - 單件運費$150、消費滿$10000免運費     商品狀況 二手品   所在地區   臺中市     商品編號   100073611292       {{#with countdown}}
    {{#if days}}{{days}} 天 {{/if}}{{hours}} 時 {{minutes}} 分 {{seconds}} 秒結束
{{/with}}
   {{#with countdown}}
    {{year}}/{{month}}/{{date}} {{hour}}:{{minute}}:{{second}} 結束
{{/with}}
    




 考試院二手書店 代號 Y7039283681  加入最愛     正評99.86%  評價 2,898 則     關於我 商品問與答 (0) 全部商品 (14390) 












  賣場任意門  廣告            全套成寒英文教材   $15,000              特價~櫻桃屋~玫瑰花餅乾袋 平口烘焙   $70              250元工廠價紅紫檀木開運印鑑印章   $250              (特價)~櫻桃屋~飾品盒 戒指 禮物   $110         看更多商品>   我要曝光>   





{{title}}

            {{#each geList}}
            

                    {{#if thumbnail}}{{/if}}
                    {{desc}}

                {{#if sponsorLink}}
                    {{sponsor}}
                {{else}}
                    {{sponsor}}
                {{/if}}
            
            {{/each}}
        










     商品資訊    出價紀錄   問與答(0)    商品資訊      分級   普級     decoration decoration        【考試院二手書】專賣各類考試用書、參考書、課本、教科書、檢定用書及電腦圖《ARM-S3C4510B 為架構之嵌入式系統設計與應用》│長高│李駒光│ 八成新(31D16)93年9月初版一刷無劃記.無缺頁.無破損.無髒污.無光碟.有泛黃斑.有水漬痕可自取,詳細地點請看關於我的說明.其他關於付款方式、運送方式及運費,請看 網頁上方的說明.單次購書滿500元以上可免運費(請看關於我中的運費說明)若需購買多本書,請分別去下標即可.賣場中的書均可提前結標,可合併運費.請買家下標前,先看看賣家關於我中的交易及運費說明,謝謝!Fanny-31D16-150504       出價紀錄  瀏覽摘要 詳細記錄   record   出價者   拍賣代號   出價金額   數量   出價時間   操作    看更多出價紀錄arrow  看更多出價紀錄arrow  目前沒有人出價    問與答 看更多問與答arrow  目前沒有任何問與答   comments   請先登入再進行發問    

賣家回覆

0/250


取消





 
  app migrate  熱門APP快下載 快下載拍賣APP，第一時間掌握賣家回覆，熱門商品別錯過！   立即下載 再等等  










 






















產業與應用：嵌入式監控

































 我的購物車  |  求助    























嵌入式監控系統
產業與應用：嵌入式監控
能源：電力與可再生能源
能源：石油與天然氣
工業級機器與控制
運輸與重型設備
生命科學
狀態監控
機器人與無人駕駛載具
嵌入式硬體系統與軟體
NI 嵌入式監控的優勢
NI 嵌入式系統設計對產業的影響







 NI首頁 > 產品與服務 > 嵌入式監控系統 > 產業與應用：嵌入式監控
















產業與應用：嵌入式監控
選用 NI 圖形化系統設計 (GSD) 方案，即可降低開發成本並縮短上市時間。 各種嚴苛環境與創新的應用領域皆可採用此方案，以便快速製作原型，並且佈署嵌入式控制/記錄/診斷/監控系統。 
 
能源： 電力
有了 NI 嵌入式系統與 LabVIEW 系統設計軟體，即可迅速製作原型，並且佈署創新的監控解決方案，進一步用於太陽能、風力、水利、能源儲存、電力品質、逆變器控制等更多應用。
深入瞭解
  
能源：石油與天然氣
無論是上游還是中、下游應用，耐用的 NI 嵌入式系統都可針對最高需求的控制/監測/檢驗等應用，同步提升效能與效率。
深入瞭解  
工業級機器與控制
NI 提供了監控系統與可程式化自動控制器 (PAC)，可處理最複雜的控制與即時監測作業，包含客制化運動控制、工業級機器人、機器視覺、機器狀態監控 (MCM) 等事項。
深入瞭解
  
交通運輸與重型設備
NI 高效能硬體搭配 LabVIEW 系統設計軟體，即可用於汽車、船舶、鐵路、農業、礦業載具與設備。此外也可針對各種應用將 NI 系統客制化，其耐用特色還可因應多種嚴苛環境。
深入瞭解
  
生命科學
NI 圖形化系統設計 (GSD) 軟體堪稱理想的解決方案，有助於迅速開發複雜的醫療裝置與儀器。無論是醫療裝置、診斷設備、生技機器，還是高效能的儀器與成像系統，NI 工具都可協助客戶即早推出最新技術，讓競爭對手望塵莫及。
深入瞭解
  
狀態監控
狀態監控功能可協助貴機構預防意外的停機情況、充分發揮機器效能、縮短修復時間，同時降低維護成本。耐用的 NI 高效能軟硬體可用於狀態監控系統，並且佈署於多種渦輪、壓縮機、發電機與其他工業機器內。
深入瞭解
  
機器人與無人駕駛載具
NI LabVIEW 系統設計軟體加上可重設硬體，可提供高度抽象化的感測器通訊、障礙物迴避、路徑規劃、機器運動、機器操作等豐富功能，有助於輕鬆設計複雜的機器人應用。
深入瞭解






 


我的個人檔案 | RSS | 線上隱私保護 | 安全聲明 | 連絡NI © 2014 National Instruments Corporation.  All rights reserved.    |   







































































C/C++ Embedded System Design Tools - National Instruments



 


















 
 
 
 
 
 
 
 
 






















C/C++ Embedded System Design Tools
Publish Date: Sep 20, 2016
				
					|
		4 Ratings | 4.75 out of 5
						|
			        Print


Overview
Embedded designers choose the NI reconfigurable I/O (RIO) architecture for advanced and critical applications because NI embedded devices combine two highly reliable processing targets: a real-time OS (RTOS) and programmable hardware, with the software tools needed to make this architecture a productive choice for embedded system design. 

The NI platform is open and flexible so that you can choose from a variety of programming languages, tools, and design patterns to implement your system and make the best use of your IP and expertise. The pre-validated embedded OS is based on Linux and built with standard OpenEmbedded technologies so that you can write programs using LabVIEW software, C/C++, textual math, or a combination of these.  You can easily recompile code from past projects to reduce new development efforts and even integrate LabVIEW with libraries and applications written in any language. The LabVIEW FPGA Module delivers a high-level programming environment that uses the Xilinx compiler to build optimized FPGA programs. Application-level developers can then connect to I/O immediately and write very powerful algorithms in a graphical language without any VHDL programming experience. The built-in RIO driver handles communication between the processor and FPGA, which frees up your time to focus on application logic rather than low-level driver software. 

Use this document to learn about programming NI embedded systems and download the software tools you need.
Table of Contents
Introduction to the NI Embedded Systems Architecture
NI’s Approach to Programming Heterogeneous Systems
Developer Resources: C/C++ Development Tools for Linux Real-Time
Developer Resources: LabVIEW for FPGA Development

1. Introduction to the NI Embedded Systems Architecture
The NI RIO architecture combines a processor running an RTOS with a user-programmable FPGA in a variety of hardware for factors that include CompactRIO and Single-Board RIO System on Module (SOM). You can use his architecture to optimize your software design for performance and determinism because code can be partitioned across these heterogeneous processing targets based on the criticality of individual tasks. For example, the top-level state machine, network, and peripheral communication can run on the real-time side. The FPGA can handle I/O, high-speed control, safety logic, signal processing, and custom protocols. The high-speed DMA bus between the processor and FPGA handles the low-latency transfer of data streaming, interrupts, and commands.
  
Figure 1. The NI RIO architecture combines a processor, FPGA, and I/O with high-level programming tools.
 
Embedded Processor With RTOS: The NI RIO architecture is built on the highest quality, industry-standard ARM or Intel processors running NI Linux Real-Time. NI Linux Real-Time is a Linux distribution based on standard OpenEmbedded technologies with built-in, industrial-grade, real-time capabilities through the PREEMPT_RT patch set. Through years of R&D development, the work of the Linux open-source community, and partner contributions, NI Linux Real-Time was designed specifically for reliable and deterministic operation in long-term deployments while offering security improvements and increased resiliency to application crashes.
FPGA: The user-programmable Xilinx FPGA, a reprogrammable silicon chip, adds the performance and reliability needed for high-speed control, inline data processing, or complex timing and triggering. In contrast to processors that you find in your PC, programming an FPGA rewires the chip to implement your functionality rather than run a software application. Each independent processing task is assigned to a dedicated section of the chip and can function autonomously without any influence from other logic blocks. As a result, the performance of one part of the application is not affected when you add more processing.
 
 Back to Top 2. NI’s Approach to Programming Heterogeneous Systems
While heterogeneous architectures that combine a processor and FPGA are extremely valuable for advanced and critical applications, programming such systems is a challenge. Challenges exist at every stage and include choosing or building the operating system, developing drivers to talk with I/O, and  communicating between processor and FPGA, as well as finding the expertise needed to write FPGA programs and keep the development cycles of both targets in sync throughout the project.
NI RIO architecture addresses the challenges of heterogeneous software design by delivering a pre-validated software stack and high-level programming tools that you can build on, while maintaining openness and portability to future platforms. The architecture provides fully tested middleware, drivers, and a Linux OS out of the box so you can quickly port your application code to the NI platform. Continue to use your preferred application development tools and leverage the strengths of LabVIEW for real-time and FPGA programming. The true value of LabVIEW FPGA programming is that this abstracted approach to digital design empowers application-level C/C++ developers to implement the most critical portions of their applications in hardware, which they may never have done otherwise without having VHDL experts on staff.

Figure 2. Program the embedded processor with LabVIEW or any Linux compatible tools and use the NI RIO driver to communicate with LabVIEW FPGA.
 
Real-Time Programming
Embedded system designers working with NI hardware can choose from a variety of programming languages and tools when architecting their systems. Developers can program the open embedded processor with LabVIEW, C/C++, or textual math and can reuse source code from past projects to save development time. Programmers can reuse C/C++ libraries from past projects by calling them from within a LabVIEW Real-Time application, which simplifies tasks like real-time thread scheduling. Alternatively, developers can develop, debug, and deploy applications to the embedded processor written entirely in C or C++ using Eclipse or another preferred integrated development environment (IDE).
 
FPGA Programming
Introducing FPGAs into embedded system design makes it possible to create high-performance digital logic without the need for custom ASIC design. Traditionally, text-based hardware description languages such as VHDL or Verilog written by digital design engineers have been used for FPGA development. Unfortunately, due to challenging language semantics, these hardware description languages make it difficult to take advantage of the full capabilities of FPGA design. This is evidenced by the embedded industry’s quest to find higher level abstractions for FPGA design, such as C-to-gates tools, or graphical programming languages such as G in LabVIEW FPGA.
 
The LabVIEW graphical programming environment abstracts the complexity of FPGA hardware and delivers programming constructs familiar to software engineers so users can design high-performance embedded systems faster.
 
 Back to Top 3. Developer Resources: C/C++ Development Tools for Linux Real-Time
Since the NI RIO architecture is based on a standard Linux OS, you can build your embedded application using any Linux-compatible tools. This gives you the flexibility to reuse your IP, expertise, and development tools, but you need to understand where and how these can integrate with LabVIEW Real-Time and LabVIEW FPGA.
 

Figure 3. Choose a software design pattern based on IP reuse and real-time programming expertise.
 
You must use LabVIEW FPGA to program the Xilinx FPGA, but you can use either C/C++ or LabVIEW Real-Time to communicate with the LabVIEW FPGA program. There is both a C API and a LabVIEW API for the communication layer between the processor application and the LabVIEW FPGA program. Thus, the first step in designing your NI Linux Real-Time system is to choose a top-level software design pattern.
Choosing LabVIEW to program the real-time application has many advantages in that LabVIEW Real-Time includes built-in constructs for multithreading, real-time thread scheduling, and many other features specific to building robust, deterministic code. In addition, LabVIEW can interface with shared libraries and applications written in other languages so that this valuable IP can be reused in the LabVIEW Real-Time design pattern.
However, in cases when the top-level application must be written solely in C/C++, you can use LabVIEW only for programming the I/O in the FPGA, and evaluate which critical tasks should be moved to execute in hardware instead of on the processor.

Resources to Get Started

Start by learning about possible software design patterns for your NI embedded system: Choosing a Software Architecture for Programming NI Linux Real-Time Systems.

Set up Eclipse for building, deploying, and debugging a C/C++ shared library or top-level application by following the steps in this tutorial: Getting Started With C/C++ Development Tools for NI Linux Real-Time, Eclipse Edition

Learn how to call C/C++ shared libraries from you LabVIEW Real-Time application by following the steps in this tutorial: Integrating C Code With LabVIEW on a CompactRIO Running NI Linux Real-Time

Learn more about how to communicate with a LabVIEW FPGA program from a C/C++ real-time application using the FPGA Interface C API: Programming with the FPGA Interface C API Whitepaper and Exercise

Visit our active developer forums for answers on advanced questions regarding C/C++ and Linux programming: NI Linux Real-Time Community

 
Software Toolchains Required

For programming your NI Linux Real-Time application, you need at least one of the following tools:

 



Download the LabVIEW Real-Time Module if you plan to build your top level real-time application using LabVIEW.


Download the Eclipse C/C++ development tools if you plan to build a shared library or top-level application using the Eclipse IDE. This download includes GNU/Linux cross compilers for both ARM and x64 Intel processor architectures.


Download just the GNU/Linux cross compiler if you plan to use your own C/C++ development tools to build a shared library or top-level application:

GNU C and C++ Compiler for ARMv7 Linux (Linux host)
GNU C and C++ Compiler for ARMv7 Linux (Windows host)
GNU C and C++ Compiler for x64 Linux (Linux host)
GNU C and C++ Compiler for x64 Linux (Windows host)






Download the FPGA Interface C API (Version 13.0 or later) if you plan to build your top-level real-time application in C/C++. The FPGA Interface C API generates a C header file based on your LabVIEW FPGA bitfile that exposes the named reference variables of your FPGA registers, DMA FIFOs, and interrupts. It also includes an API of functions used to read and write to these variables and manipulate operation of your FPGA code.


FPGA development requires all of the following: 


LabVIEW (Full or above)
LabVIEW FPGA Module
NI-RIO Driver (Version 2013 or later)



 
 Back to Top 4. Developer Resources: LabVIEW for FPGA Development
LabVIEW is distinctly suited for FPGA programming because it clearly represents parallelism and data flow. With LabVIEW FPGA, engineers and scientists with C expertise can take advantage of FPGAs within their designs without the burden of learning hardware design. In addition, the FPGA Interface C API delivers a communication layer between the FPGA and real-time application for I/O control and data streaming. With this API, you can use LabVIEW graphical tools to program the FPGA and choose either LabVIEW or C/C++ tools to program the processor within the system. 
 
LabVIEW FPGA helps you create custom measurement and control hardware without low-level hardware description languages or board-level design. You can use this custom hardware for unique timing and triggering routines, ultra high-speed control, interfacing to digital protocols, digital signal processing, and many other applications requiring high-speed hardware reliability and tight determinism.
Resources to Get Started

Learn more about FPGA technology and its potential use in your application.
Watch a few short videos that demonstrate Getting Started With LabVIEW FPGA.
Download a 90-day evaluation of LabVIEW FPGA Module.

 

Figure 4. Autonomous timed loops in LabVIEW FPGA represent independent tasks running on dedicated sections of the FPGA chip.
 
 
The registered trademark Linux® is used pursuant to a sublicense from LMI, the exclusive licensee of Linus Torvalds, owner of the mark on a worldwide basis.
 

 Back to Top 







Bookmark & Share






Share












Ratings







Rate this document

Select a Rating
1 - Poor
2
3
4
5 - Excellent


Answered Your Question?
 Yes  
				    No 
				   
  Submit 













This site uses cookies to offer you a better browsing experience.  Learn more about our privacy policy.


OK






