


國立成功大學 - 課程地圖







    
 


 首頁 







 通識教育課程地圖 






 院系所課程地圖 








意見回饋 ｜ 
  

English ｜ 
  




 1.
        
請選擇學院
其他文學院理學院工學院管理學院醫學院社會科學院電機資訊學院規劃與設計學院生物科學與科技學院 
        2. 
        
請選擇系所
電機系          資訊系          電機所          多媒學程        資訊所          製造所          微電所          電通所          醫資所          奈積學程         



 3. 
        
選擇未來發展 - 升學

						國內進修                                          

						國外進修                                          


選擇未來發展 - 就業

						資訊產業                                          

						生醫產業                                          

						學術界                                            

						公職                                              

						其它                                              






進階電腦系統理論與實作                  


  	本課程嘗試引導學士班高年級和碩士班學生及早理解資訊科技產業的實際需求，一方面回顧電腦科學的基礎概念，一方面透過具體而微的案例分析，讓學生兼顧理論和實務，得以成為21世紀的優秀科技人才。

課程教育目標 

A. 教育學生具備資訊專業知識及終身學習之能力B. 教育學生具備獨立研究、設計及創新之能力C. 教育學生優質團隊合作及國際觀之能力 
課程基本素養與核心能力 

[基本素養]畢業生應具備科技人文素養、資訊工程倫理與終身學習的態度
[核心能力]畢業生應具備資訊專業理論知識
畢業生應具備資訊專業理論推導、分析、歸納之能力
畢業生應具備資訊領域設計、驗證及實作整合之能力
畢業生應具備資訊領域創新思考之能力
畢業生應具備良好溝通協調與團隊合作之能力
 
近年開課資訊



開課年度
課程碼
分班碼
課程名稱(超連結為課程大綱)
學分數
英語授課
授課教師



0106/1
P75I100
 
 
		  	進階電腦系統理論與實作                  

3.0
N
黃敬群,蘇文鈺



0105/1
P75I100
 
 
		  	進階電腦系統理論與實作                  

3.0
N
黃敬群,蘇文鈺







 國立成功大學 |  課程查詢  
701臺南市大學路1號   TEL:  06-2757575#50158  意見回饋信箱: 教務處課務組 em50150@mail.ncku.edu.tw
    國立成功大學 版權所有  © NCKU All Rights Reserved.  計網中心資訊系統發展組 製作











Wiki - kevinbird61 (瞿旭民)





















成大資工 Wiki


所有頁面
分類
隨機頁面
最近活動
上傳檔案

本頁面

頁面原始檔
可列印版本
刪除本頁




登入 / 註冊帳號
登出 









搜尋
前往


LaTeXConTeXtTexinforeSTMarkdownCommonMarkPlain textMediaWikiOrg-modeICMLTextileAsciiDocMan pageDocBookDZSlidesSlidyS5EPUBODTDOCXRTF 













viewedithistorydiscuss

kevinbird61 (瞿旭民)


Kevin Cyu (瞿旭民)
簡介
2015進階嵌入式開發 — 秋季班
2016 進階電腦系統理論與實作 — 秋季班
自我評價（2015進階嵌入式開發）
自我評價（2016 進階電腦系統理論與實作 ）
未來期許 ( 2015進階嵌入式開發 )


Kevin Cyu (瞿旭民)

View on my work : GitHub
View on my youtube channel : Youtube
Contact me : kevinbird61@gmail.com

簡介

學歷

桃園市國立武陵高中畢業(2010~2013)
臺南市國立成功大學（2013~2017)

陳陪殷教授導生
蔡孟勳助理教授專題生



程式語言

C/C++ (大一)
Html5/CSS (大二上)
Java （大二下）
C# （大二下）
Node.js (大四上)

經歷

[大一上] 影像處理：接觸一些影像處理的方程，以及初步的平行化程式設計
[大二上] 資訊安全：有實作需經過加密的購物平臺 ; 網頁設計：接觸web design的frontend + backend
[大二下] C# , Java的語言學習：瞭解許多UI Design以及高階OOP的許多技巧
[大三上] 硬體語言與特性，多平行設計，作業系統的概念
[大三下] C++ 助教
[大四上] 成大學生會資訊部長，開始學習架設主機以及熟悉網路服務的使用，並且著手研究網頁開發

作品

[C#]爐石戰紀 : Source on Google Drive
[Java]炸彈超人 : Source on Google Drive
[微算機]LED燈光秀(傳送端) : Source on Github
[C++] BBTAN - on Qt(教學用) : Source on Github


2015進階嵌入式開發 — 秋季班

Hw1

Hackpad / GitHub
初步認識assembly language與ARM architecture架構的瞭解

Hw2 - 尚未完成（實作huffman code algorithm）

Hackpad / GitHub
主要藉由壓縮資料量的大小，藉此縮減cache misses來提高performance

Hw3

Hackpad / GitHub
藉由重新寫過開學考的code，由筆上談兵到實作

Hw4

Hackpad / GitHub
首次高難度的挑戰 - rubi ，一方面增加對compiler , interpreter的瞭解。

Hw5

Hackpad / GitHub

Hw6

Hackpad

Hw7

Hackpad / GitHub
投入大量的時間成本，堆積出足夠的認知，再配合程式碼的編譯執行，初步瞭解stm32運作模式

Hw8

Hackpad / GitHub

Hw9

討論並做問題與回答（read datasheet）


2016 進階電腦系統理論與實作 — 秋季班

phonebook 實作
Image-Processing

共筆：透過 SIMD 加速高斯模糊運算
影片連結


自我評價（2015進階嵌入式開發）

除了到期中考以外，我在這學期以有別於以往更努力的心態去面對每一件事。忙歸忙，一有時間就翻出手邊有的資料閱讀。雖然最近的進度頗為落後，但是我覺得這學期修的這門課讓我學習到了一種有別於以往兩年的態度。
強調實作與理論兼顧的課程，讓我對於以往學習的知識擺脫只有考試的觀念去學習，學一步做一步，非常有感覺。
和強者一同學習，一方面督促自己別懶散，另一方面能見識到其他強者的學習方式，到現在來看，當初選擇嵌入式真是一個不錯的選擇。
我決定給自己8分。少了的兩分：還是會偷懶+對於程式的完美要求仍然不夠，有時一心只想寫完作業。希望在未來能繼續培養對程式的愛，做出更多作品。

自我評價（2016 進階電腦系統理論與實作 ）

9 point
完成先前一些未完成的專案（phonebook）
完成多人協作 project，並且完成自己訂定的題目與方向；從中和組員以及code reviewer作交流，並從中學習到不少對於開發程式的細節、過往常常忽略掉的一些註意事項（loop unrolling, thread create & join的正確時機, 良好的 malloc & free），讓程式碼能夠更加有效率的執行程式
訓練自己利用課堂所學，找到可以應用的目標作實作，並利用實例來映證我的想法是否正確
學習尋找工具來輔助自己驗證程式碼的正確性（valgrind、gdb…）

未來期許 ( 2015進階嵌入式開發 )
- 再寫履歷的過程中，發現自己嚴重的空洞與不足，未來多加強發現問題並解決問題的行動力
- 多多廣泛涉獵資訊發展的領域，接觸不同的技術，繼續找尋自己的興趣User




Please enable JavaScript to view the comments powered by Disqus.




本站所有內容，除另有標註外，採用創用 CC 姓名標示-相同方式分享 3.0 台灣 授權條款授權
	

說明
Powered by gitit
Customized by CrBoy























進階電腦系統理論與實作 :: 學期評分須知 - HackMD
































 
                
                 


351 views 



# 進階電腦系統理論與實作 :: 學期評分須知
(2016 Fall)

* 請開始準備相關資料，並在 [NCKU CSIE wiki](http://wiki.csie.ncku.edu.tw/) 上建立新的頁面，裡頭提到本學期的學習成果和自我評量分數 (1 到 10 級分)
* 評分時間: Jan 13, 2017 18:00
* 需要提及作業 GitHub 連結、參與協作的 HackMD 連結、學期分組報告成果，所見所聞心得，以及貢獻的上游開放原始碼專案 (Git commits) 等等
* CSIE wiki 頁面名稱為 `User/你的帳號名稱` (註意: "U" 字母大寫，其餘小寫。帳號建議如同 GitHub 帳號)
範例: [User/JaredCJR](http://wiki.csie.ncku.edu.tw/User/JaredCJR) (張家榮)
* 在 Jan 8, 2017 以前，可申請補考、補交作業，和各式一對一輔導，請洽助教
* 即日起，會陸續公佈個週測驗的參考答案和批改作的試捲，請留意助教發布的訊息















Wiki - 陳博聖 (Ponsheng)





















成大資工 Wiki


所有頁面
分類
隨機頁面
最近活動
上傳檔案

本頁面

頁面原始檔
可列印版本
刪除本頁




登入 / 註冊帳號
登出 









搜尋
前往


LaTeXConTeXtTexinforeSTMarkdownCommonMarkPlain textMediaWikiOrg-modeICMLTextileAsciiDocMan pageDocBookDZSlidesSlidyS5EPUBODTDOCXRTF 













viewedithistorydiscuss

陳博聖 (Ponsheng)


Ponsheng(陳博聖)
聯絡資訊:
2016春季班 個人評量
2016秋季班 進階電腦系統理論與實作


Ponsheng(陳博聖)
簡介

成功大學 工程科學系106級(2013-2017)

歷年作品

比賽及計畫

複合式四軸飛行器避障系統之設計與實現 / 2016 科技部-大專學生研究計畫
2015 全國學生叢集電腦競賽 - 8強
針對 IoT 的精簡即時多工作業系統 / 2016 TSOC-軟體創作達人暑期成長營 - 優等


聯絡資訊:

email: a7061120@gmail.com

2016春季班 個人評量
作業及筆記

HW1 Github,Hackpad
HW2(A) Github,Hackpad
HW2(B) Github,Hackpad
HW3 Github,Hackpad
HW4 Hackpad
分組A server-framework效能強化 Hackpad
分組B 控制機械手臂_Real-Time Linux Hackpad

自我評量分數 (1 到 10 級分)

7級分
每次作業都有完成基本要求，都有學到核心知識，並嘗試挑戰進階題，在分組報告中都有確實完成自己的部份，並互相幫助，惟認為自己在閱讀文獻部份較缺乏，老師每次上課給的教材沒有都看過看懂，HW4指定的資料閱讀量也不夠，認為這方面是自己目前較不足的，目前也有一直繼續在吸收，老師說過，我們要有能快速學習新事物的能力，所以未來會強化自己這方面能力。

2016秋季班 進階電腦系統理論與實作
作業及筆記
Week1

clz : Github / Hackmd

Week4 

raytracing extend (Team Work) : github / Hackmd /

Week5

jit-compiler (Team Work) : github / Hachmd /youtube link

期末專題

作品名稱：低功耗智慧型運輸系統雛形的開放原始碼實作
Github
Hackmd

自我評量分數 ( 0 到 50 級分)

45級分
這學期有一些作業是上學期已經做過的，所以就沒附上了，第二次上老師的課，雖然教材還是一樣多得看不完，但是稍微駕輕就熟了，更能快速掌握單元主軸，並搜尋必要知識，也熟悉了新的開發筆記環境-Hackmd，是我們台灣人做的，用的相當習慣，也學習到markdown語言。這學期後半的時間都在延續上學期所做之Xenomai環境應用，想將其放到自走車雛型上，過程中，與外校不同領域的同學合作，獲得前所未有的經驗，共同討論並協作程式碼，期末專題還在進展中，繼續努力。
User




Please enable JavaScript to view the comments powered by Disqus.




本站所有內容，除另有標註外，採用創用 CC 姓名標示-相同方式分享 3.0 台灣 授權條款授權
	

說明
Powered by gitit
Customized by CrBoy

















國立成功大學 - 課程地圖







    
 


 首頁 







 通識教育課程地圖 






 院系所課程地圖 








意見回饋 ｜ 
  

English ｜ 
  




 1.
        
請選擇學院
其他文學院理學院工學院管理學院醫學院社會科學院電機資訊學院規劃與設計學院生物科學與科技學院 
        2. 
        
請選擇系所
電機系          資訊系          電機所          多媒學程        資訊所          製造所          微電所          電通所          醫資所          奈積學程         



 3. 
        
選擇未來發展 - 升學

						國內進修                                          

						國外進修                                          


選擇未來發展 - 就業

						資訊產業                                          

						生醫產業                                          

						學術界                                            

						公職                                              

						其它                                              






資訊所              
  	[當學期系所開課資料]
教育目標    
			[教育目標、基本素養、核心能力的課程規劃垂直架構圖]


 教育學生具備資訊專業知識及終身學習之能力                                                                                                                                                                 教育學生具備獨立研究、設計及創新之能力                                                                                                                                                                   教育學生優質團隊合作及國際觀之能力                                                                                                                                                                       
 基本素養與核心能力    
			[基本素養核心能力與課程規劃關聯圖]


[基本素養]畢業生應具備科技人文素養、資訊工程倫理與終身學習的態度                                                                                                 畢業生應具備專業外語能力及良好國際觀                                                                                                                   [核心能力]畢業生應具備資訊專業理論知識                                                                                                                           畢業生應具備資訊專業理論推導、分析、歸納之能力                                                                                                         畢業生應具備資訊領域獨立發掘問題、策劃實驗、解決問題之能力                                                                                             畢業生應具備資訊領域設計、驗證及實作整合之能力                                                                                                         畢業生應具備資訊領域創新思考之能力                                                                                                                     畢業生應具備專業簡報及論文撰寫之能力                                                                                                                   畢業生應具備良好溝通協調與團隊合作之能力                                                                                                                
課程分類

 課程規劃架構圖



課程分類  課程名稱 



A. 全校共同必修                                       






B. 通識課程                                           






C. 院核心課程                                         






D. 系核心課程                                         



專題討論（一）, 專題討論（二）, 專題討論（一）, 專題討論（二）, 專題討論, 系統核心研究專論 


E. 跨領域課程                                         






F. 融入服務學習領域                                   






G. 數位生活科技與軟體技術                             



資訊科技產業專案設計, 進階電腦系統理論與實作, 物聯網技術之應用及系統開發, 人體感測網路在運動訓練及健康照護之應用, 智慧服務聊天機器人之語言處理技術, 物件導向軟體工程, 網路資源開發暨利用, 圖形理論, 全球資訊網通訊協定與快取技術, 高等密碼學專論, 機器學習及圖形識別專論, 高等疊蓋式網路, 情境感知系統設計, 創意網路應用與服務, 數位生活技術與應用專論, 量子安全協定專論, 同儕計算與最佳化專論, 圖訊識別專論, 量子密碼學專論, 網際網路行動電視之伺服技術, 同儕網路的隨機演算法設計與分析, 進階影像處理晶片專論, 數位家庭與數位電視科技專論, 智慧感測與行動計算, 智慧感知雲端系統與應用設計, 電腦繪圖, 互動通訊與軟體, 資料探勘, 高等圖形理論, 軟體品質管理, 網際資料庫及網際探勘專論, 普及運算專論, 高等軟體流程管理規範專論, 遺傳基因演譯法, 口語感知及互動專論, 光接取網路效能分析專論, 超大型積體電路概論, 網路入侵偵測系統設計專論, 進階資料探勘應用與實作, 進階數位音樂合成專論, 系統工程與技術管理研究, 數位匯流應用與服務平臺, 連網型系統軟硬體共同設計與應用, 計算機系統與網路管理, 無線與寬頻網際網路通訊架構與協定, 3D擴增實境與體感互動系統開發, 異質平行計算, 計算機圖學, 高階競技程式設計, 無線網路設計與效能分析 


H. 計算、通訊與網路                                   



物聯網技術之應用及系統開發, 人體感測網路在運動訓練及健康照護之應用, 三維電腦視覺：幾何重建專論, 全球資訊網通訊協定與快取技術, 高效能路由器及網路處理器之設計專論, 網路研究與模擬, 機率與算法專論, 創意網路應用與服務, 光接取網路專論, 行動數位電視, 多媒體訊號之分析、合成與壓縮專論, 雲端計算平臺最佳化專論, 節能光網路專論, 智慧感測與行動計算, 智慧感知雲端系統與應用設計, 互動通訊與軟體, 排隊理論, 光纖網路專論, 訂閱/發佈式同儕計算系統專論, 無線網路進階, 高效能路由器的架構與設計, 分散式及雲端資料庫系統開發, 智慧整合感控系統（CPS), 雲端多媒體計算與機器學習, 物聯網系統設計與應用, 網際網路通訊協定, 大型分散式系統網路, 行動網路與服務, 電腦視覺：從理論到應用, 軟體定義網路與網路功能虛擬化之核心網路, 分散式資料庫系統專論, 異質平行計算, 物聯網核心網路技術, 電腦視覺專題, 無線網路設計與效能分析, 計算系統醫學專論 


I. 資料與知識工程                                     



資料庫管理系統, 網路資源開發暨利用, 多語暨跨語資訊系統, 圖形理論, 高等資料庫專論, 機器學習及圖形識別專論, 網路資訊檢索與文字探勘, 機率與算法專論, 創意網路應用與服務, 文件資料探勘研究與應用專論, 圖訊識別專論, 資工與醫資導論, 生物程式設計與巨量轉譯醫學資料分析, 資料探勘, 機器學習專論, 普及運算專論, 進階資料探勘應用與實作, 巨量圖數據資料庫分析專論, 高等動態資料處理專論（一）, 空間資料分析專論 


J. 多媒體                                             



智慧服務聊天機器人之語言處理技術, 圖形識別, 容錯嵌入, 遙測影像分析專論, 圖形理論, 影像處理, 電腦語音處理專論, 機器學習及圖形識別專論, 高等擬真成像技術與合成, 三維模型參數化專論, 圖訊識別專論, 數位音樂訊號分析, 語音信號處理, 機器學習, 電腦繪圖, 資料探勘, 計算機視覺專論, 機器學習專論, 人機互動：從理論到應用, 進階資料探勘應用與實作, 容錯嵌入專論, 擴增實境與體感互動系統開發專論, 計算機圖學, 人機互動技術之應用設計與系統開發 


K. 架構與嵌入式系統                                   



進階電腦系統理論與實作, 容錯嵌入, 輸出入裝置與驅動程式設計, 數位ＩＣ設計, 奈米積體電路實體設計, 作業系統與虛擬機器專論, 行動數位電視, 分散式嵌入式系統與應用專論, 電子系統層與多核心工具與應用之開發專論, 生物晶片設計自動化專論, 進階影像處理晶片專論, 進階數位電路設計專論, 計算機視覺專論, 機器學習專論, 高等容錯嵌入, 進化計算演譯法專論, 超大型積體電路概論, VLSI設計自動化專論, 微流體生物晶片設計自動化專論, 軟體設計, 進階晶片設計專論, 進階嵌入式系統開發與實作, 計算機結構, 系統核心研究專論, 虛擬化與虛擬機器之概念與應用 


L. 生醫工程                                           



多語暨跨語資訊系統, 數位信號處理, 遙測影像分析專論, 影像處理, 機器學習及圖形識別專論, 生醫資訊擷取技術, 醫療影像處理專論, 高等擬真成像技術與合成, 網路資訊檢索與文字探勘, 生醫訊號處理, 三維模型參數化專論, 神經運算與腦機介面專論, 文件資料探勘研究與應用專論, 生醫超音波訊號與成像技術, 生物晶片設計自動化專論, 進階影像處理晶片專論, 生醫超音波成像與資訊系統專論, 醫學影像系統, 資工與醫資導論, 電腦繪圖, 資料探勘, 進階資料探勘應用與實作, 微流體生物晶片設計自動化專論, 磁共振影像重建與分析技術專論, 智慧系統之軟硬體共同設計與驗證, 醫用磁振造影：原理與應用, 磁共振影像實驗專論 


M. 製造工程                                           



圖形理論, 電子系統層與多核心工具與應用之開發專論 


建議修讀學程 

 跨領域學分學程網頁



未來發展 

 本系畢業生未來發展圖



升學
就業




A. 
              	 	
					  國內進修                                          
B. 
              	 	
					  國外進修                                          




A. 
              	 	
					  資訊產業                                          
B. 
              	 	
					  生醫產業                                          
C. 
              	 	
					  學術界                                            
D. 
              	 	
					  公職                                              
E. 
              	 	
					  其它                                              







 國立成功大學 |  課程查詢  
701臺南市大學路1號   TEL:  06-2757575#50158  意見回饋信箱: 教務處課務組 em50150@mail.ncku.edu.tw
    國立成功大學 版權所有  © NCKU All Rights Reserved.  計網中心資訊系統發展組 製作











Blog E
























首頁
分類
封存
標籤

回到頁首









kkdai.github.io



	Attitude is everything



首頁
分類
封存
標籤





































Blog E 



    
    September
    23rd,
    
    2016
  

程式設計週記[2016/09/23]: GTG16忙完，大家也要保重身體



GTG 16 聚會的照片
這是什麼?
程式週記主要內容如下:
Gihub project 介紹:

主要會貼一些github，但是會盡量寫上一些有用的評語（或是我容易想到的關鍵詞）幫助以後查詢

網路文章心得:

會寫些心得，強迫自己閱讀．

“程式週記”並且定期週期性更新．
大部分內容在我的twitter都會有，這邊只是將一些簡單的心得與感想註解一下．
本週摘要
本週的幾件事情就是總算重新啟動了 Golang Taiwan 社群．結果忙完之後，我女兒就不斷地生病並且在醫院住了三天． 大家也要好好註意自己的健康．
最近工作上會使用到許多 Machine Learning 的技巧，現在每天都在 K 相關書籍希望能夠在短時間把所有的演算法與應用場景都搞熟．

Go
Take a REST with HTTP/2, Protobufs, and Swagger
GRPC 大家用了沒？ 是不是因為還不想把手邊的 RESTful API 換掉而沒有改到 GRPC ?
CoreOS 展示如何透導入 GRPC 後，依舊有 RESTful API 並且有 Swagger 的服務。
相關議題，其實有上 Google Cloud Platform Podcast，想聽聽訪問的可以聽聽看 CoreOS CTO 如何解釋：



[gRPC at CoreOS with Brandon Philips
Google Cloud Platform Podcast](https://www.gcppodcast.com/post/episode-43-grpc-with-brandon-philips/)



Go Development with Vim-go
Vim-Go 的作者在 Digital Ocean 工作的 Fatih Arslan 來分享如何使用 vim-go ．跟我一樣主要是在 Vim 上面開發 Go 的人不可以錯過，順便可以看看新版的 vim-go 又多了什麼功能．
NEUGO: Neural Networks in Go
使用 Golang 的類神經網路計算工具．
Google I/O talk: Building Sourcegraph, a large-scale code search & cross-reference engine in Go
Google I/O 今年的 Talk 講解 Sourcegraph 如何透過 Golang 來製造他們 Code Search  Chrome Plugin ．

Sourcegraph 是一個 Chrome Plugin 可以讓你直接去 parse github 上面得程式碼，直接尋找相關的宣告與函數的實體．
而他們如何透過 Golang 來建置相關的設施如下，以下摘錄幾個標題：

No web framework
    
不使用任何 Golang Web Framework 而使用 net/http (個人後來也偏好這個)


Unified API client and data store interfaces
    
使用統一的 API 來處理 repositories, users, code definitions ．


Unifying URL routing and generation
    
這邊是使用 gorilla/mux 來處理 URL route 與 mout handler 的功能．


Sharing parameter structs
    
這邊敘述，不論是 API 與 Data Store 或是前端的 Web Frontend 都是使用相同的資料架構．讓處理上更具有一致性．


還有不少細節與小工具:
    
使用自建的 Appdash 來追蹤 http.Handlers 與 http.Transport ．
將 typed error value 從 data store 傳遞到 frontend ．
將結果的分頁使用共用的介面．



Looking at your program’s structure in Go 1.7
中文翻譯: Go1.7中程序結構的解析
Go 1.7 最大的變革（可能是最不容易被察覺的）就是基於 SSA (“single static assignment”) 設計的 Compiler (淺顯易懂的好處就是多了許多 SSA 編譯器的優化選項可以使用）
這篇文章簡單的介紹了 SSA 是什麼，並且也講解了 SSA Compiler 在 Golang 裡面會如何的應用．
衍伸閱讀:  Golang 在 1.8 會變成是完全符合SSA 的 Compiler: final architecture went SSA
悟空: 高度可定製的全文搜索引擎
支援簡體斷詞，變且可以客製化的全文搜尋引擎．
至於全文搜尋引擎那麼多，為何還要做一個？ 以下來自官方的解釋:

需要有客製化的全文搜尋功能
要能夠垂直整合
即時反應
結果排序法則需要訂製

spf13 join: Google Go Team
spf13 也就是 viper ， cobra 與 Hugo 的作者，寫文章宣佈他加入了 Google Golang Team ．
proposal: add ACME (LetsEncrypt, etc) support to the standard library
bradfitz 提議讓 net/http 能夠支援 ACME (Automatic Certificate Management Environment) 的簽章（也就是目前 Let’s Encrypt在使用的)
簡單的來說，也就是之後要建立 HTTPS 的伺服器的時候．不用在使用包好的 CA key 而可以透過連線 ACME Server 的方式來達成．
package main

import (
    "log"
    "net/http"
)

func main() {
    http.HandleFunc("/", websiteHandler)
    srv := &http.Server{
        Addr:         "example.com:443",
        ACMEServer:   http.LetsEncrypt, // non-empty enables autocert support
        ACMEAgreeTOS: func(tosURL string) bool { return true },
        ACMEEmail:    "[email protected]", // (but optional)
    }
    log.Fatal(srv.ListenAndServeTLS("", ""))
}


個人相當期待，可以讓之後 HTTPS 的部分變得更加的簡單．
P.S. 目前要使用 Let’s Encrypt 只能透過 ericchiang/letsencrypt 套件

Python

Android/JAVA/NODE.JS/Scala
Android平臺滲透測試套件zANTI v2.5發佈（含詳細說明）
整個系列相當好用的滲透套件，從掃描網路，修改 MAC ，到監視 WIFI 都有．

Docker

Kubernetes
Kubernetes Cluster demo with Go container as example.
PDF 放在 github 上面，如何在 Kubernetes 上面來使用 Go container 的範例． Go container 使用最小的 alpine 建置而成的 image ．

iOS/Swift

其他程式語言
building hacker news with angular 2 cli, rxjs and webpack
透過 Angular2 來從頭開始建置一個 Hacker News．
Functional Programming: Which of Haskell and OCaml is more practical?
有人在 quora 上面詢問，對於 Functional Programming 的語言而言， Haskell 跟 OCaml 哪個比較實用？
就有人回答是 Haskell ，基於以下的原因：

Parallelism and Concurrency
Libraries
Typeclasses vs Modules
Software Engineering

當然他也有提出了相較於 OCaml 來說 Haskell 的缺點如下：

Module System 經常缺少
比較複雜的 C FFI (foreign function interface)

不過整體而言，這篇問答中最受歡迎的答案還是傾向 Haskell ．
王垠: 對 Rust 語言的分析
每當有一個新的語言，大家都會期待王垠的評論．來看看最近到了微軟的王垠，來看看他對於 Rust 的評論．
Chrome Plugin: 工程師求職健檢小幫手
可快速過濾出人力銀行上已存在30天以上的無用職缺
(目前僅適用於臺北，新北資訊產業類職缺)

Machine Learning
谷歌開源深度學習系統 TensorFlow 的圖片文字說明模型，可深層次理解圖片
講解 TensorFlow 如何透過文字說明模型（也就是類似 imageNet 是識別大賽中的）  給予你一張圖型，透過機器來判讀這張圖片並且給予一段文字． 透過類神經網路判別方式來達到圖片產生敘述．


其中論文名稱為 Show and Tell


Show and Tell: Github 在這裡


Youtube: Prof. Yann LeCun - Deep Learning and the Future of AI 
知乎: 每周會分享N篇nlp領域好玩的paper
這個知乎挺不賴的，可惜不能透過 Feedly 來訂閱．
大數據導航-大數據工具導航
許多中國的大數據工具檢索清單，要什麼就來這裡找．
Youtube: Bay Area Deep Learning School Day 1 at CEMEX auditorium, Stanford
十個小時的 Deep Learning 課程直播．

論文收集

網站文章
So You Want to be a Functional Programmer (Part 1)
一系列還有: part2 , part3
相當淺顯易懂的 Functional Programming (FP) 的教學，應該來說是 Mindset ． 可以讓完全不知道如何開始 FP 的人開始慢慢有感覺．

網站收集

有聲書/影片心得
Youtube:  你所不知道的 C 語言：指標篇 復刻！
Jserv 大大的 C語言基礎指標教學，很基礎但是很重要．由其實對於字串的指標處理，都是一開始 C語言的初學者相當容易搞混的．
Talk in which Patrick Hamann gives a great introduction to HTTP2
HTTP2 的介紹，從網站方面開始簡介．





    
    September
    22nd,
    
    2016
  

[Coursera] Illinois: Cloud Computing Concept Part 1 : Week 1-2



課程鏈結:  這裡
學習鏈結:

Week 1-2
Week 3
Week4
Week5
Mini Project (Gossip Protocol)

前提:
到了新公司，其實也是躲不開繼續學習的宿命．不過可能是因為圍繞的人還是一樣 XD 這個課程是同事推薦，當然要來好好看看．
目前已經到了 Week1 與 Week2． 也順便大概跟大家介紹一下整個課程與內容，希望能讓更多人喜歡這堂課．
課程內容:
這裡先簡單的介紹整系列的課程內容，希望能讓大家瞭解這個課程想做什麼．
這整堂課主要是圍繞著 Cloud Computing 經常會使用到的技術與相關的概念． 整堂課其實只有一個程式語言作業:
	使用 C++ 寫 Gossip Protocol


雖然課程裡面程式語言的作業不多，但是整體上的內容還算不少． 除了有談到一些雲端技術的基本概念:

Map Reduce
Multicasting and Gossip Protocol
P2P Protocol and System
K/V DB, NOSQL, and Cassandra (畢竟都談了 Gossip)
Consensus Algorithm - Paxos, FLP Proof

其實課程內容很有料，也可以學到很多的東西．
Week1 Orientation, Introduction to Clouds, MapReduce
講解不少的 Data Center 與分散式系統的基本概念，簡單地列一下幾個重點：

Data Center  PUE (Power usage effectiveness )

通常這個數字一定會大於 1 (業界大概是 1.4~1.5)





分散系統中有談到 Map Reduce 要如何運作:
    
YARN 是透過 RM (Resource Manager ) 來控制全部的系統工作分配．
MapReduce
        
Map 分配工作
Reduce 根據 key 將重複的結果合併起來．





Week2: Gossip, Membership, and Grids
這一個章節主要開始介紹 Gossip 的一些原理，稍微節錄如下:
Multiple-Cast:

單節點向所有節點廣播
透過 ACK (Acknowlegement) 與 NACK (negative acknowledgements) 來表示有收到或是沒有收到．
時間複雜度: 

Gossip

Gossip broacast (UDP)
There are two mode about broadcast:
    
Push
        
時間複雜度 


Pull
        
時間複雜度 




Fault Torrent:
    
Packet Lost: 50% 封包遺失，依舊可以正常運作．
Node Failure: 可以有一半左右的節點失效，還是可以正常運作．


Gossip-Style Failure Detection	(Heartbit)
    
每個節點會針對 member list (各自維護一份） 來做定期的 heartbit． （該時間為  )
每次收到之後，local member list 會更新並且把最新收到的時間更新進去．
只要時間超過了  之後，就會被當成是無效節點．並且在  之後來清理掉．
        
為何需要兩個時間？ 有一種可能是，節點被認為失效了．但是過了  忽然又活起來的話，就可以被加入回去．


結論: 如果  與  越大，越容易 false positive ．但是可以節省流量．



Probabilistic Faulure Detection (SWIM Gossip)

當  與  無法直接連接的時候，節點  會隨機發送到第 k 個節點 (  ) 來做另一個方面的確認．
如此一來，如果  會嘗試去 ping  ，如果取得正常的反應．就代表節點  依舊是活著，可能只是 toponology  有問題發生．
當有 n 個節點，要能夠透過傳遞來知道一個節點壞掉需要透過  的時間．
Dissemination and suspicion

傳播(Dissemination) Member List 的途徑:
    
Multicast (Machine-IP) 比較不可靠
TCP/UDP 比較可靠 (不過 UDP 也沒有 handshake)
也可以透過 Piggybacked  就是 ping 夾帶 member list 方式來傳遞 member list



作業相關學習
TBC




    
    September
    21st,
    
    2016
  

我的社群之路： 參加，參與，受到啟發與啟發別人的道路



(照片拍得真好，感謝專業大師 gtg16）
終於順利把 Golang 社群活動成功地重新啟動，也順利完成主辦了 GTG#16 的聚會 ．心裡其實有不少感受想分享給大家．
起源
你啟發的人會有幾個，是一個兩個？ 還是很多很多?
離開 Corel 後的兩年間，其實參加過不少的研討會，當然也有參加不少的社群聚會． 舉凡: Docker Taipei, Python Tapei, Golang TW 等等．
但是，其實讓我印象很深刻的就是第一次在 Golang 社群 發表的 Lightning Talk．  也就是剛開始準備 Project 52 (當時寫到 Week 13 ) 的一個 Lightning Talk．
還記得那一次的報名，只是想要試試看分享自己 Project 52 的決心． (當然絕大部分的原因是因為沒有搶到票）
膽戰心驚的花了十分鐘講完了（那霎那… ）馬上忘記整個十分鐘講了什麼 XDDD ． 於是要準備收包包回家得時候，就有個人跑來跟我用英文交談．
(太神奇了，原來 Golang 可以將中文投影片轉譯成英文 XD )
反正我們交談的內容大約是: 他剛從香港來台灣找前端的工作．結果看到我在 Golang 分享 Project 52 的想法大受啟發，他說他希望也能夠感染我的熱情好好的來學習一下 Golang (雖然他是前端工程師） ．並且也好奇的詢問我，到底需要多久的時間才能熟悉 Golang ．
	很多時候，當你啟發別人的時候．其實，最受到啟發的將會是你自己．


原來，開源的專案不僅僅開啟了我自己的眼界與心態．由於我的分享，更有可能啟發別人進而讓別人也能有相同的感受．
大研討會時代
就是上個月，我不小心一次報名同一個禮拜的兩個研討會． 分別是 COSCUP 跟 Modern Web 2016  ， 雖然要準備兩份投影片讓我七月底到八月每天半夜都熬夜趕投影片．但是想到如果有機會能夠讓其他人感受到我自己心中的熱情，進而改變他們的想法或是面對事情的態度，我就又打起精神來努力做投影片．
第一次大型研討會： COSCUP 2016 H0 會議室
還好，一切都還算順利． 雖然 COSCUP 講得太快而 Modern Web 卻又講得太慢． （是哪招？）  但是在 COSCUP 發生了印象很深刻的一些小事如下:

認識了不少原來在臉書上面看到的人
有個部落格讀者在我前往廁所的路上堵到我，然後跟我說有長期訂閱我部落格． 也有鼓勵我說，希望我繼續寫下去．（還好，我尿急應該沒有顯現出來 XD ）

不少攤位的人，看到我的臉就問我說．你是不是那個要講 Golang ( 原來我長得像 Gopher (驚!) )
  有人問我 COSCUP 上臺到底會不會緊張？ 如果你是來分享你喜歡的事物．你會緊張嗎？




第二次研討會： 認識人跟聊天比聽講多的 Modern Web
身為講者最大的好處，大概就是不斷地認識其他的講者． 可能也由於講者們本身的個性就是屬於樂於分享的人．（不然也不會來研討會講） 於是乎，大家很容易就能夠打成一片． 整個研討會也變成很像是來認識人一樣．
Golang 社群重裝上陣
開完了幾個研討會，也想把 Golang 社群好好的經營起來．希望能讓更多人使用這個語言． 當然也不希望我講完 Lightning Talk 之後的 GTG#15 就讓社群倒了．
於是乎，我花了很多時間開始找講者．希望能有一些講者一起來籌辦第十六次的聚會．不過事與願違，實在找不到兩個講者． 這時候公司同事的社群經營王 - Simon 就講了一句話：
	找不到講者，一開始都是自己來講的！！


就在轉眼一年前夕，我自己決定來籌辦第十六次的 Golang 聚會． 就先把之前在 Modern Web 沒有講很清楚的部分來一次講個清楚．（給自己一個交代）  另外一方面也來開始找講者． 還好，高雄有講者很彭場得願意講，只要有辦法連線．
	講者就像是專案進度一樣是靠問出來的！！


有了兩個講者後，我就印了貼紙．趕快來開售票亭開始訂票（騙人進來）．一如往常，　Golang 社群只要限定在 20 人左右就能夠秒殺．然後就可以來找閃電秀跟下一個講者． 最後，好不容易湊齊了差不多的閃電秀講者．
	Here comes the new inspiration!!!


記得在研討會開始的前一個禮拜，收到一封很有趣的信件．大綱是說，一個學生他並沒有搶到票．他願意捐錢給開源軟體協會來換取一張票． 這個人讓我想到在學生時代很熱血的我，於是我給他了一張閃電秀的票，並且期待他以後來分享．
當天研討會，這位學生跑過來找我，很感謝我讓他能夠參加這次的聚會． （其實我比較感謝大家願意來參加！！）  一問之下，才知道原來還是個成大的碩士生． 什麼？ 成大碩士生跑來參加臺北週二的研討會？
”對啊，這裡是高鐵票．我還特地翹下午在成大的課才能北上臺北來聽研討會．“  在這個學生的眼裡，我看到滿滿的熱情．
	是洋蔥！！ 聚會的場地上有人叫了麥當勞洋蔥圈！


原來，受到社群啟發的熱情之火會不斷的延續下去的．希望我們經營社群得夥伴們一起努力吧！！！




    
    September
    20th,
    
    2016
  

[研討會心得] Golang Taiwan Gathering #16 順利結束，相關資訊．



活動網址:
這裡
GTG16 - Slides:
可以 follow 這個 Repo
Talks - Slides

Evan Lin: Using Golang to build a smart IM Bot
Hawk: Go+ Lambda + Dynamodb  = Telegram Bot

Lightning Talk -  Slides

Umbo CV: Kakashi - Golang X CI X CD
duolC: Cyril - 使用Go實作跨平臺匿名配對聊天app的後台機制
iotwav: Bean - Recruit for DevOps
Evan: Use go channel to write a disk queue

GTG16 - 影片:
Golang Taiwan Gathering 16 影片出爐:

Part 1 主要是我講建置 IM Bot 與 luis.ai demo
Part 2 hawk 講解 Telegram Bot 與 lightning Talk
Lightning Talks

Umbo CV: Kakashi - Golang X CI X CD
duolC: Cyril - 使用Go實作跨平臺匿名配對聊天app的後台機制
iotwav: Bean - Recruit for DevOps
Evan: Use go channel to write a disk queue







    
    September
    16th,
    
    2016
  

程式設計週記[2016/09/16]: 下週要舉辦 Golang Gopher 台灣聚會，記得參加 



這是什麼?
程式週記主要內容如下:
Gihub project 介紹:

主要會貼一些github，但是會盡量寫上一些有用的評語（或是我容易想到的關鍵詞）幫助以後查詢

網路文章心得:

會寫些心得，強迫自己閱讀．

“程式週記”並且定期週期性更新．
大部分內容在我的twitter都會有，這邊只是將一些簡單的心得與感想註解一下．
本週摘要
公司的公事開始要忙碌了，不過還是要開始把一些記錄一下．此外， Coursera 的 Cloud Computing 第二輪希望能夠修完．筆記有點多都還沒寫完．
最重要的是下週有 Gopher Taiwan 聚會在 09/20 ，大家記得要參加．

Go
初試 Go lang 經驗
同事透過 Pokemon naming package 來學習如何透過 VSCode 來寫 Golang．
SOLID Go Design
dfc (Dave Cheaney) 在 GopherCon 2016 上面的 Talk
如果想看中文版本，可以看這個．
Creating a Bot using the Telegram Bot API
使用 Golag 的 Telegram Bot API 來建立一個聊天機器人
jpetazzo/Go + Docker = ♥
Docker 界的大大 jpetazzo 寫了篇講解如何透過 Docker 而不安裝 Golang 的方式來編譯，執行甚至是跨平臺編譯的相關指令． 但是有些地方需要註意:

cgo 與 net : 使用 Docker-Golang 來編譯與執行 Golang 程式碼，需要註意到是否有使用到 net 與 cgo 的部分，如果有你的 base image 可能要換成 from debian 雖然會比較大，但是就比較不會有平臺上的問題．
關於使用 ssl :  處理 SSL certificate 一直都是很麻煩的事情，這裡建議透過 alpine 來安裝	root certificate

FROM alpine:3.4
RUN apk add --no-cache ca-certificates apache2-utils



rpcx is a distributed RPC service framework based on net/rpc like alibaba Dubbo and weibo Motan. One of best performance RPC frameworks.
這個 RPC Service 透過分散式的方式來提供更好的 RPC 效能，甚至遠遠超過 GRPC 與 Alibaba Dubbo 與 Weibe Motan
除了速度快，更有以下的特點:

支援多種資料格式 json, protobuf, gob
支援多種 discovery service: zookeeper, etcd
由於根據 net/rpc 寫成，使用原生套件的人可以很快速的轉換過來．
支援 Load Balancer


Python
教你閱讀Python開源項目代碼
這幾個推薦的 Repo 跟作者都挺有名的．

Android/JAVA/NODE.JS/Scala

Use RecastAI to build A NodeJS chatbot tutorial 
這篇文章教導瞭如何透過 RecastAI 一樣是做自然語言的公司．（使用 node.js)

Recast.AI
範例就是透過 Pokemon 的 Facebook Bot

yhsiang/pokemon-go-query: Pokemon Go Query, help to find the nearest pokemon (Use Go Radar)
G0V 的 LY 開源他的 Pokemon IM 機器人，透過 Go Radar 可以瞭解發文者周圍有沒有 Pokemon ．

Docker
Cgroups, namespaces, and beyond: what are containers made from? (DockerCon Europe 2015)
舊文章，不過仔細地講解 cgroup, namespace 也就是 container 的底層教學．
Docker 1.13 : Checkpoint & Restore preview
主要講解 Docker 1.13 的新功能，可以將你的 container 狀態像是 snapshot 一樣做 checkpoint 與 restore 的功能．看起來很有趣．
Docker 線上讀書會: Willy -  Docker Netowork
強者我同事 Willy 講 Docker Network 不得不學的好東西啊

Kubernetes

iOS/Swift

其他程式語言
PhxSQL:  high availability MySQL cluster that guarantees data consistency between a master and slaves.
WeChat 出的具有 HA 的 MySQL Cluster 稱為 PhxSQL ， 細節可以看 MySQL的一致性世界 ．
裡面有提到 MySQL 5.7 本身其實已經支援 Group Replica ，除了 HA 之外已經支援多結點寫入的功能．

論文收集

網站文章
DevOps Taiwan wiki
整理許多好文的列表，並且歡迎大家的 PR ．
DevOps Summit 2016 全部影片
Y2016W36| Just for noting by m157q
這個禮拜整理的鏈結都還不錯，可以建議長期訂閱相關文章．
[成功大學: 進階電腦系統理論與實作
THE PERSPECTIVE AND APPLICATIONS OF COMPUTER SYSTEMS 授課大綱](http://class-qry.acad.ncku.edu.tw/syllabus/online_display.php?syear=0105&sem=1&co_no=P75I100&class_code)
學生必須要先具備 Guts ．可惡，已經就業的人可以修嗎？
Evan Klitzke 受訪談論為什麼 Uber 要從 PostgreSQL 轉到 MySQL
 以下文字截自 Ant 臉書 
主持人問 3 年前 #Uber 從 #MySQL 轉用 PostgreSQL 的原因。Evan 指出最重要的原因之一，就是 MySQL 的 Schema change 功能不如 PostgreSQL 好，例如需要新增欄位或索引。
Uber 的簡報分享於 2013-03-13，而 MySQL 5.6 同年 2 月才剛 GA ，所以估計 Uber 當初使用的還是 MySQL 5.5，而 MySQL 5.6 對於 Online DDL (Online Schema change) 才開始廣泛支援。
主持人問轉到 PostgreSQL 後遇到什麼問題。Evan 指出效能問題，在轉用 PostgreSQL 後，Uber 需要新增更多的機器來撐起效能需求，例如 PostgreSQL Connection ability 不如 MySQL。
其他內容官方網站上都有，就不引述了
逆向工廠（一）：從hello world開始
從基本的程式概念解釋，一直到如何開始你的第一個逆向工程．這篇算是科普文章，不過相當實用．
丁香園現任CTO：我二次創業遭遇的3個失敗

幾次的創業經驗分享，蠻值得好好閱讀的．主要就是專註在創業方向與好的創業團隊．
如何透過聊天機器人(Chatbot) 翻轉企業與客戶的溝通方式
台灣新創的自然語言系統，至於有多麼強大可已慢慢期待．
O’REILLY最新報告：人工智能將在這5個方向觸發醫療變革
根據這份報告， AI 將在以下幾個方面對於醫療有著重大改革:

人口管理: 透過學習來識別是否有重大危險．
護理管理： 個性化護理管理．
患者自我管理：透過學習來管理患者服藥以及其他的自我管理．
系統設計：  透過設計讓每一份支出可以獲得最大效益，或是病人獲得最好的照顧．
決策支援: 讓醫生可以有更快速與更精準的決策輔助．

深度解讀：阿裡離亞馬遜還有多遠？

很有趣的文章，主要講到 Alibaba 跟 Amazon 一樣都是註重長遠發展(超過七年的計畫）．並且在 Cloud Service 上 AWS 雖然居於領先的地位，但是阿裡雲也是緊追在後．

網站收集

有聲書/影片心得
Paxos lecture (Raft user study)
講解 Paxos ，不光是有 Basic-Paxos 也有 Multiple-Paxos ．還有 Raft Case Study ．





    
    September
    14th,
    
    2016
  

[Golang] 安裝流程 CoreOS/DEX : OAuth Server


挑選 DEX
挑選 CoreOS 的 Dex ，因為它具有以下特點:

支援 OpenID
支援 Kubernetes Authenication (via OpenID)
支援 OAuth
CoreOS 開發 (XD)

以下就是基本建置方式
建立 Google API Console 憑證

進入 Google API Console 選擇已經有的專案（或是建立一個新的）
進入”憑證中心“，建立一個新的憑證．
    
選取 “OAuth 用戶端 ID “
選取 “網路應用程式”
在 “已授權的重新導向 URI” 輸入 “http://127.0.0.1:5556/dex/auth/google/callback”


這邊會取得 “ID” 跟 “Secret” 記得存下來．

建立資料庫 (PostgresQL)
1. 設定 postgres docker
docker run --name postgres -e POSTGRES_PASSWORD=YOURPASSWORD -d postgres


2. 登入建立相關 schema
docker run -it --rm --link postgres:postgres postgres psql -h postgres -U postgres

>Password for user postgres: 
>psql (9.5.4)
>Type "help" for help.


postgres=# CREATE DATABASE dex_db;
> CREATE DATABASE

postgres=# CREATE USER dex WITH PASSWORD 'dex_pass';
> CREATE ROLE

postgres=# GRANT ALL PRIVILEGES ON DATABASE dex_db TO dex;
> GRANT

postgres=# \q //離開 postgre console


3. 編譯 DEX
先設定 postgres 環境變數，將剛剛資料庫密碼帶入
export DEX_DB_URL=postgres://dex: [email protected]/dex_db?sslmode=disable


P.S.: 如果你跟我一樣 postgres 使用 docker ，記得將 localhost 改成該 container 的 IP.
下載並且編譯 DEX
git clone https://github.com/coreos/dex.git
cd dex
./build


4. 設定環境變數與啟動 DEX 服務
準備一段密碼（可能需要在其他電腦，如果你機器是乾淨的）：
(我是在 Mac 下跑這段:)

產生 Secret Symmetric Key

export DEX_KEY_SECRET=$(dd if=/dev/random bs=1 count=32 2>/dev/null | base64 | tr -d '\n')

//這是 Mac 產生的
> dd if=/dev/random bs=1 count=32 2>/dev/null | base64 | tr -d '\n'
hwMSvt8Fr39WN2tN1ydyPlD02szBhhL6REjGgCIhn3o=




產生 Admin API Secret

DEX_OVERLORD_ADMIN_API_SECRET=$(dd if=/dev/random bs=1 count=128 2>/dev/null | base64 | tr -d '\n')

//這是 Mac 產生的
> dd if=/dev/random bs=1 count=128 2>/dev/null | base64 | tr -d '\n'

B02cILOvy6o7DNU/zH7umCNkWr+E2MSkFsV3+nj5uKNaqVK7T33OLdN1ou38Rid6Swy/ZL4GljqeGOFhDgHJTkjA1so2HYr8Uda2FYHRuz2/AMSamwjLCOANl+3i9WOGduTDc8BtksN+fXB5xaJYpKDxWbcZoAaC1rU3VZyajDM=


設定環境變數，啟動伺服器．
export DEX_OVERLORD_ADMIN_API_SECRET=$DEX_OVERLORD_ADMIN_API_SECRET
export DEX_OVERLORD_DB_URL=$DEX_DB_URL
export DEX_OVERLORD_KEY_SECRETS=$DEX_KEY_SECRET
export DEX_OVERLORD_LOG_DEBUG=true
./bin/dex-overlord &


5. 執行 worker
這裡要修改 static/fixtures/emailer.json 不過可以先依照原本範例使用 fake email
./bin/dex-worker --db-url=$DEX_DB_URL --key-secrets=$DEX_KEY_SECRET --email-cfg=static/fixtures/emailer.json --enable-registration=true --log-debug=true &


6. 執行 Connector
記得要先將 $DEX_GOOGLE_CLIENT_ID 與 $DEX_GOOGLE_CLIENT_SECRET 換成你在 Google API Console 拿來的資料．
cat << EOF > /tmp/dex_connectors.json
[
    {
        "type": "local",
        "id": "local"
    },
    {
        "type": "oidc",
        "id": "google",
        "issuerURL": "https://accounts.google.com",
        "clientID": "$DEX_GOOGLE_CLIENT_ID",
        "clientSecret": "$DEX_GOOGLE_CLIENT_SECRET",
        "trustedEmailProvider": true
    }
]
EOF
./bin/dexctl --db-url=$DEX_DB_URL set-connector-configs /tmp/dex_connectors.json


7. 啟動 Client
eval "$(./bin/dexctl --db-url=$DEX_DB_URL new-client http://127.0.0.1:5555/callback)"


記得要把 127.0.0.1 換成你的 public IP ．
8. 啟動 Web Server
./bin/example-app --client-id=$DEX_APP_CLIENT_ID --client-secret=$DEX_APP_CLIENT_SECRET --discovery=http://127.0.0.1:5556/dex &


記得要把 127.0.0.1 換成你的 public IP ．
Authenitication for Kubernetes

Simple walkthrough
Kubernetes Authentication plugins and kubeconfig
Slide: Secret in Kubernetes
Kubernetes の認証と dex
Deploying dex on Kubernetes

Seems no OAuth support

Allow actors against the apiserver to be authenticated and actions to be authorized
kubernetes/issue: Improve documentation on how authentication is handled in Kubernetes

參考鏈結 OAuth Server

Go: OpenID Connect Identity (OIDC) and OAuth 2.0 Provider with Pluggable Connectors
Go: Auth Boss
Go: OAuth2
Go: Docker registry oauth server
Ruby: OAuth server with UI management system

其他參考鏈結

Docker Registry v2 authentication using OAuth2
Docker Registry v2 authentication via central service
Kubernetes: Authenticating
Kubernetes: Using Authorization Plugins
Kubernetes技術分析之安全






← Newer


Page: 9 of 250


Older →



















在計算機裡頭實踐演算法 - HackMD
































 
                
                 


1307 views 


                 
                 owned this note



# 在計算機裡頭實踐演算法
###### tags: `sysprog`
:::info
主講人: [jserv](http://wiki.csie.ncku.edu.tw/User/jserv) / 課程討論區: [2016 年系統軟體課程](https://www.facebook.com/groups/system.software2016/)
:mega: 返回「[進階電腦系統理論與實作](http://wiki.csie.ncku.edu.tw/sysprog/schedule)」課程進度表
:::

「真正的發現之旅不在於尋求新的風景，而是在於擁有新的眼光。」
> “The real voyage of discovery consists not in seeking new landscapes, but in having new eyes.”
― 法國作家 Marcel Proust

# 21 世紀的變革
[ [source](https://www.facebook.com/shihhaohung/posts/1301538069888678) ]
* 1990 年代中期，大型 NUMA 平行計算系統架構曾發展極盛，但軟體的成熟度與研發速度跟不上系統挾摩爾定律前進的速度，剛好 x86 架構 PC 的效能、Linux 作業系統的泛用性也逼近當時的專業工作站、伺服器，而且二者相乘之後以價廉物美、超多人在用的優勢，讓 HPC 和 datacenter 的趨勢由 NUMA 轉為用許多廉價 PC 等級的機器相串聯而成的 cluster-based 大型系統。
* 事隔 20 年，NUMA 是否會再度興起呢？我認為在那些需要對 big data（或是過程中會產生big data）快速即時做錯綜複雜（交叉）分析的高價值應用而言，NUMA 是達到最高成就的必然之路。只是說，NUMA 其中的 processor-memory interconnect 以及 memory access protocol，比 20 年前有更多樣化的選擇；所謂的 shared memory 系統的定義，也可放寬，例如用 RDMA；而且 GPU、Vector、FPGA 等加速器也應該被涵蓋進來，這和我們探討過的 HSA 相關。

# 利用阿基米德法 (也就是「輾轉相除法」) 找 GCD
(最大公因數; _Greatest Common Divisor_)

演算法:

1. 大數 := 大數 - 小數
2. 若「最大」和「最小」兩數相同，那麼它就是最大公因數，否則，回到第 1 步

示範:

GCD(48, 40)
```
48 - 40, 40 -> 8, 40
8 != 40, 於是重複上述動作: 40 - 8, 8 -> 32, 8
8 != 32, 於是重複上述動作: 32 - 8, 8 -> 24, 8
8 != 24, 於是重複上述動作: 24 - 8, 8 -> 16, 8
8 != 16, 於是重複上述動作: 16 - 8, 8 -> 8, 8
8 == 8 成立，於是 8 為 GCD
```

用 C 語言實現阿基米德法: (v1)
```clike=
int findGCD(int a, int b) {
    while (1) {
        if (a > b) a -= b;
        else if (a < b) b -= a;
        else return a;
    }
}
```

以 Intel C compiler 產生的機械碼來說: (Pentium 4)

|指令|數量|延遲|cycle count|
|:---:|:---:|:---:|:----:|
|減法|5  |1   |5          |
|比較|5  |1   |5          |
|分支|14 |1   |14         |
|其他|0  |1   |0          |
|   |   |    |24         |


改成 mod 操作的 C 語言程式如下： (v2)
```clike=
int findGCD(int a, int b) {
    while (1) {
        a %= b;
        if (a == 0) return b;
        if (a == 1) return 1;
        b %= a;
        if (b == 0) return a;
        if (b == 1) return 1;
    }
}
```

以 Intel C compiler 產生的機械碼來說:

|指令          |數量|延遲|cycle count|
|:-----------:|:--:|:--:|:--------:|
|mod (整數除法) |2    |68  |136      |
|比較          |3    |1   |3         |
|分支          |3    |1   |3         |
|其他          |6    |1   |6         |
|             |     |    |148       |



如果可排除整數除法和減法的負擔，得到以下實做： (v3)

```clike=
int findGCD(int a, int b) {
    while (1) {
        if (a > (b * 4)) {
            a %= b;
            if (a == 0) return b;
            if (a == 1) return 1;
        } else if (a >= b) {
            a -= b;
            if (a == 0) return b;
            if (a == 1) return 1;
        }
        if (b > (a * 4)) {
            b %= a;
            if (b == 0) return a;
            if (b == 1) return 1;
        } else if (b >= a) {
            b -= a;
            if (b == 0) return a;
            if (b == 1) return 1;
        }
    }
}
```

可得到更快的實做:
```
    v1: 14.56s
    v2: 18.55s
    v3: 12.14s
```
* 以上數據出自: [The Software Optimization Cookbook: High Performance Recipes for IA-32 Platforms, 2nd Edition](http://www.amazon.com/The-Software-Optimization-Cookbook-Performance/dp/0976483211)
	* 但這是 2004 年的表現，現在的電腦架構呢？

## 在 ARM Cortex-A8 上的實驗
* 實驗人: 張家榮
* 平臺：BeagleBone Black (ARMv7-A, 1 GHz)
* 實驗程式碼：[github](https://github.com/JaredCJR/GCD_Efficiency_Compare)

* 採用組合語言撰寫 (GCD 的部份)，由於 Cortex-A8 不支援 idiv (要在 ARM Cortex-A15 以上才有)，所以 以 ARM 組合語言實做[計算機組織課本上的除法器的空間優化版本](https://coursejared.hackpad.com/ch4_Multiplier-and-Divider-wFnZyFI0E6I)。
    *   發現gcc的除法似乎有針對2的倍數做判斷，移位（除法）
    *   實做的版本尚未考慮exception
        *   這裡有個[參考網站](http://me.henri.net/fp-div.html)列出了exception重點

### 實驗方法
* 圖上一個點，代表GCD (big, small) 中的 big，會尋找比它小的所有正整數（>1）的GCD所需的時間「總和」
*   如果有個 big=9995，那麼會找 9993 組 GCD，small 的範圍從 2 到 9994
    *   如: (9995,2), (9995,3), (9995,4),......, (9995,9994)
*   **所以big越大，找尋的組數越多，整體趨勢微微上升（從左到右）是正常的**
* 重點是比較各演算法的趨勢

### ARM vs.  Thumb instruction

*   ARM instruction速度較快
*   直線為curve fitting的結果(時間越低，效能越高)

![](https://hackpad-attachments.s3.amazonaws.com/embedded2015.hackpad.com_PxVP6UWvGxh_p.339782_1439772172448_undefined)

**Assembly**
```
MOD:
@ Entry  r0: low (remainder low) must be postive<input:Dividend>
@        r1: high (remainder high) any number
@        r2: Divisor (divisor) must be non-zero and positive<input:Divisor>

low     .req r0;
high    .req r1;
divisor .req r2;

mov high,#0
.rept 33                          @ repeat 33 times
subs high,high,divisor  @remainder = remainder - divisor
@it lo
addlo high, high, divisor
adcs low, low, low                @ low<<1;  ((high-divisor)>0) ? (new bit=1) : (new bit=0)
adc high,high,high  @ divisor>>1 == high(64bit for high&low)<<1
.endr

lsr high, #1                   @shift remainder to correct position(because last divide don’t know this is the last divide,it still prepare for the next divide<shift>)

@ Exit   r0: Quotient (remainder low)
@        r1: remainder (remainder high)
mov pc,lr
```
**Euclidean(thumb) V.S. mod(thumb) V.S. mod_minus(thumb)**

* 不符合預期的原因推估
    *   v3版本的branch過多（if,else），thumb的branch效能不佳，導致拉低平均
        *   if數量比較（一個loop）
            *   v1:3個
            *   v3:7個

![](https://hackpad-attachments.s3.amazonaws.com/embedded2015.hackpad.com_PxVP6UWvGxh_p.339782_1439770375774_undefined)

**Euclidean(arm) V.S. mod(arm) V.S. mod_minus(arm)**

*   比較
    *   與thumb版本
        *   arm的branch效能較佳，所以v3版本速度改善最多，這裡符合預期
    *   v1輸給了v2
        *   arm的v1與thumb的v1相比，只有微微速度提昇（看第一張圖），但是mod卻提昇較多（幾乎是半張圖片的range），導致了這個結果
*   curve fitting

![](https://hackpad-attachments.s3.amazonaws.com/embedded2015.hackpad.com_PxVP6UWvGxh_p.339782_1439741803792_undefined)

*   qemu
    *   符合預期

![](https://hackpad-attachments.s3.amazonaws.com/embedded2015.hackpad.com_PxVP6UWvGxh_p.339782_1439777549508_embedded2015.hackpad.com_PxVP6UWvGxh_p.png)

## C語言

*   arm-angstrom-linux-gnueabi-gcc內的除法經過最佳化後，效能比減法更佳

![](https://hackpad-attachments.s3.amazonaws.com/embedded2015.hackpad.com_PxVP6UWvGxh_p.339782_1439777592642_embedded2015.hackpad.com_PxVP6UWvGxh_p%20(1).png)

*   arm-linux-gnueabihf-gcc(linaro) (without vfpv3)
    *   上下圖比較，可以看到整體在arm-angstrom-linux-gnueabi-gcc效能比較好
        *   即使在這裡，單純除法比單純減法（的演算法）還快...
        *   可是綜合起來看 v3更快(符合預測)

![](https://hackpad-attachments.s3.amazonaws.com/embedded2015.hackpad.com_PxVP6UWvGxh_p.339782_1440082584221_undefined)

*   arm-linux-gnueabihf-gcc(linaro) (with vfpv3)
    *   mod加快，減法變慢
    *   開了比沒開還慢...

![](https://hackpad-attachments.s3.amazonaws.com/embedded2015.hackpad.com_PxVP6UWvGxh_p.339782_1440118082155_undefined)

## 效能分析: Prefetching

[ [source](https://www.facebook.com/notes/champ-yen/the-power-of-prefetching/1214833498543546) ] 

*   論文: "[When Prefetching Works, When It Doesn’t, and Why](http://www.cc.gatech.edu/~hyesoon/lee_taco12.pdf)"
*   用實例顯示 prefetching 帶來的效益，範例是 Matrix Transpose，一個簡單的 C 版本實作如下
```clike=
void naive_transpose(int *src, int *dst, int w, int h)
{
    for (int x = 0; x < w; x++){
        for (int y = 0; y < h; y++) {
            *(dst + x*h + y) = *(src + y * w + x);
        }
    }
}
```
接著參考 [Programming trivia: 4x4 integer matrix transpose in SSE2](http://www.randombit.net/bitbashing/2009/10/08/integer_matrix_transpose_in_sse2.html) 實作 Intel SSE2 加速的版本，由於先進處理器架構有著 automatic/speculative prefetcher 所以這裡我們故意寫得比較 CPU-unfriendly 一些:
```clike=
void sse_transpose(int *src, int *dst, int w, int h)
{
    for (int x = 0; x < w; x += 4) {
        for (int y = 0; y < h; y += 4) {
            __m128i I0 = _mm_loadu_si128 ((__m128i *)(src + (y + 0) * w + x));
            __m128i I1 = _mm_loadu_si128 ((__m128i *)(src + (y + 1) * w + x));
            __m128i I2 = _mm_loadu_si128 ((__m128i *)(src + (y + 2) * w + x));
            __m128i I3 = _mm_loadu_si128 ((__m128i *)(src + (y + 3) * w + x));
            __m128i T0 = _mm_unpacklo_epi32(I0, I1);
            __m128i T1 = _mm_unpacklo_epi32(I2, I3);
            __m128i T2 = _mm_unpackhi_epi32(I0, I1);
            __m128i T3 = _mm_unpackhi_epi32(I2, I3);
            I0 = _mm_unpacklo_epi64(T0, T1);
            I1 = _mm_unpackhi_epi64(T0, T1);
            I2 = _mm_unpacklo_epi64(T2, T3);
            I3 = _mm_unpackhi_epi64(T2, T3);
            _mm_storeu_si128((__m128i*)(dst+(x*h)+y), I0);
            _mm_storeu_si128((__m128i*)(dst+((x+1)*h)+y), I1);
            _mm_storeu_si128((__m128i*)(dst+((x+2)*h)+y), I2);
            _mm_storeu_si128((__m128i*)(dst+((x+3)*h)+y), I3);
        }
    }
}
```
我們來撰寫一個使用 SSE prefetch 指令的加速版本:

```clike=
void sse_prefetch_transpose(int *src, int *dst, int w, int h)
{
    for (int x = 0; x < w; x += 4) {
        for (int y = 0; y < h; y += 4) {
            #define‬** PFDIST  8**

            _mm_prefetch(src + (y + PFDIST + 0) * w + x, _MM_HINT_T1);
            _mm_prefetch(src + (y + PFDIST + 1) * w + x, _MM_HINT_T1);
            _mm_prefetch(src + (y + PFDIST + 2) * w + x, _MM_HINT_T1);
            _mm_prefetch(src + (y + PFDIST + 3) * w + x, _MM_HINT_T1);

            __m128i I0 = _mm_loadu_si128 ((__m128i *)(src + (y + 0) * w + x));
            __m128i I1 = _mm_loadu_si128 ((__m128i *)(src + (y + 1) * w + x));
            __m128i I2 = _mm_loadu_si128 ((__m128i *)(src + (y + 2) * w + x));
            __m128i I3 = _mm_loadu_si128 ((__m128i *)(src + (y + 3) * w + x));
            __m128i T0 = _mm_unpacklo_epi32(I0, I1);
            __m128i T1 = _mm_unpacklo_epi32(I2, I3);
            __m128i T2 = _mm_unpackhi_epi32(I0, I1);
            __m128i T3 = _mm_unpackhi_epi32(I2, I3);
            I0 = _mm_unpacklo_epi64(T0, T1);
            I1 = _mm_unpackhi_epi64(T0, T1);
            I2 = _mm_unpacklo_epi64(T2, T3);
            I3 = _mm_unpackhi_epi64(T2, T3);
            _mm_storeu_si128((__m128i*)(dst + ((x + 0) * h) + y), I0);
            _mm_storeu_si128((__m128i*)(dst + ((x + 1) * h) + y), I1);
            _mm_storeu_si128((__m128i*)(dst + ((x + 2) * h) + y), I2);
            _mm_storeu_si128((__m128i*)(dst + ((x + 3) * h) + y), I3);
        }
   }
}
```
接著是測試程式:

```clike=
#include‬ <stdio.h>
‪#include‬ <stdlib.h>
#include‬ <time.h>
‪#include‬ <sys/time.h>

//for using x86-SSE2 intrinsics you have to include this
#include‬ <xmmintrin.h>

// PUT naive_transpose, sse_transpose, sse_prefetch_transpose HERE
// ...

#define‬ TEST_W 4096
#define‬ TEST_H 4096

int main(void)
{ 
    //verify the result of 4x4 matrix
    {
        int testin[16] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
        int testout[16];
    
        for(int y = 0; y < 4; y++){
            for(int x = 0; x < 4; x++)
                printf(" %2d", testin[y*4+x]);
            printf("\n");
        }
        printf("\n");
        sse_transpose(testin, testout, 4, 4);
        for(int y = 0; y < 4; y++){
            for(int x = 0; x < 4; x++)
                printf(" %2d", testout[y*4+x]);
            printf("\n");
        }
    }

    {
        struct timeval stime, etime;
        int *src =(int*)malloc(sizeof(int)*TEST_W*TEST_H);
        int *out0 = (int*)malloc(sizeof(int)*TEST_W*TEST_H);
        int *out1 = (int*)malloc(sizeof(int)*TEST_W*TEST_H);
        int *out2 = (int*)malloc(sizeof(int)*TEST_W*TEST_H);

        srand(time(NULL));
        for(int y = 0; y < TEST_H; y++){
            for(int x = 0; x < TEST_W; x++) 
               *(src + y*TEST_W + x) = rand();
        }

        gettimeofday(&stime, NULL);
        sse_prefetch_transpose(src, out0, TEST_W, TEST_H);
        printf("sse prefetch: %ld us\n", (etime.tv_sec - stime.tv_sec)*1000000 + (etime.tv_usec - stime.tv_usec));

        gettimeofday(&stime, NULL);
        sse_transpose(src, out1, TEST_W, TEST_H);
        gettimeofday(&etime, NULL);
        printf("sse: %ld us\n", (etime.tv_sec - stime.tv_sec)*1000000 + (etime.tv_usec - stime.tv_usec));

        gettimeofday(&stime, NULL);
        naive_transpose(src, out2, TEST_W, TEST_H);
        gettimeofday(&etime, NULL);
        printf("naive: %ld us\n", (etime.tv_sec - stime.tv_sec)*1000000 + (etime.tv_usec - stime.tv_usec));

        free(src);
        free(out0);
        free(out1);
        free(out2);
    }

    return 0;
}
```
存成 test.c, 並且按照下列方式編譯

	$   gcc -msse2 -o test test.c

在 Intel Core i7 3612QM 執行得到下列結果:
```
   0  1  2  3
   4  5  6  7
   8  9 10 11
   12 13 14 15

   0  4  8 12
   1  5  9 13
   2  6 10 14
   3  7 11 15

   sse prefetch:  57782 us
   sse: 117184 us
   naive: 228870 us
```
儘管現今 CPU 有著強大的 auto-prefetcher，但是並不是所有的演算都有著規律或是線型的記憶體存取模式, 如此透過優化 prefetching 依然是能夠有相當的效能增進.

在 EeePC 900 (Intel Celeron M 900 MHz) 仍有 22% 的效能差異:
```
   sse prefetch: 676158 us
   sse: 860861 us
   naive: 1644733 us
```


















天瓏網路書店-Access 資料庫系統理論與實務, 4/e



































天瓏網路書店
全台最齊全
中英文電腦書專賣店







天瓏資訊圖書粉絲專頁




搜尋


資料科學
簡體書
Packt
微服務
工程師必讀經典
英文書新到貨
Python
Tensorflow
無瑕程式碼








        Access 資料庫系統理論與實務, 4/e
        


        陳會安
        
      




 


出版商:
旗標


出版日期:
2015-08-26


定價:
$590


售價:

9.5 折
          $561



貴賓價:

8.5 折
            $502

語言:
繁體中文


ISBN:
9863122831

ISBN-13:
9789863122838


相關標籤:

Access






      限量商品
        (庫存=3)













買這商品的人也買了...







 
$650
              貴賓價: $494
          
Access 2013 進銷存管理系統實作





 
$620
              貴賓價: $527
          
資料庫理論與實務 Access 2007





 
$480
              貴賓價: $365
          
Excel 2010 商學應用實作





 
$590
              售價: $460
          
工作效率 UP! Excel VBA 與資料庫的活用關鍵技法





 
$550
              貴賓價: $495
          
動畫圖解資料庫入門與應用－使用 Access 2013 實作





 
              貴賓價: $336
          
數據分析：R 語言實戰





 
$480
              售價: $374
          
實用商務 Excel & Access 資料協作活用術：一鍵整理會員資料、建立簡報分析圖表、輸出產品出貨單





 
$420
              售價: $357
          
超圖解 Excel VBA 應用講座





 
$550
              售價: $468
          
超實用 Excel 商務實例函數字典 (2013/2010/2007/2003 適用)





 
$450
              售價: $356
          
跟我學 Excel VBA－將複雜的操作用一個按鍵就搞定！(適用2013/2010/2007)





 
$540
              貴賓價: $459
          
馬上就會 Excel 2013 商務實作與應用





 
$450
              貴賓價: $342
          
統計╳分析╳解讀╳決策：無敵好用Excel樞紐分析表（2013適用）





 
$380
              售價: $296
          
活學活用 Excel 2013－全方位快速搞定圖表函數 X 樞紐分析 X 收支預算應用





 
$450
              貴賓價: $383
          
Excel 2013 多彩多姿應用寶典：實戰篇





 
$450
              售價: $356
          
快快樂樂學 Excel 2013─善用資料圖表、函數巨集的精算達人





 
$520
              售價: $406
          
Excel 2013 函數大全與活用範例關鍵講座





 
$420
              售價: $332
          
3 秒鐘搞定 Excel ─資料處理→函數→ VBA





 
$490
              售價: $387
          
Excel 2013 商業智慧分析：資料處理 x 樞紐分析 x Big data 分析工具 PowerPivot 及 PowerView





 
$520
              售價: $406
          
Excel 樞紐分析活用技巧大辭典




產品描述

<內容簡介>
觀念、理論到實作，學習 Access 資料庫的最佳參考用書

Access 是目前最廣泛使用的桌上型資料庫系統，其強大功能，甚至不用撰寫任何程式碼，就可以輕鬆建立使用者所需的資料庫系統。

本書說明如何使用 Access 來規劃、分析和建立資料庫系統，從基礎的資料庫理論開始，詳細說明 Access 的關聯式資料庫功能。


● 從資料庫的基礎觀念出發，逐步帶領讀者用 Access 來規劃、分析和建立資料庫系統。

● 別再把資料庫當成 Excel 來用！完整解析 Access 關聯式資料庫的強大功能與實務應用。

● 想成為企業中頂尖的 DBA (資料庫管理師)？完整的資料庫系統開發實例讓您驗證學習成果。

● 學習評量側重思考與操作，有效掌握與追蹤學習成效。 
 
從資料庫基礎理論出發
針對初學者學習資料庫系統理論所設計的內容，詳細說明資料庫系統的各種資料庫模型、主從架構資料庫系統、ANSI/SPARC 三層資料庫系統架構、資料庫綱要和資料庫管理師負責的工作。

●建立關聯式資料庫
詳細說明關聯式資料庫模型、實體關聯圖的建立和如何執行正規化分析，使用完整系所小型選課系統分析實例，來說明關聯式資料庫的觀念與實作。

●資料庫系統的開發
使用進銷存系統的銷售管理系統子系統為例，完整從系統分析、各子功能的建立整合，並且在過程中導入系統建立的重要技巧，這是完整的系統開發實例，可以讓讀者驗證所學與關聯式資料庫分析。
<章節目錄>
第一篇 資料庫的基礎
第1章： 認識資料庫
第2章： 資料庫管理系統
第3章： 使用Access
第4章： 建立資料表
第5章： 索引與查詢
第6章： 排序與篩選
第7章： 表單
第8章： 報表

第二篇 關聯式資料庫
第9章： 認識關聯式資料庫
第10章： 規劃與設計關聯式資料庫
第11章： 資料庫關聯圖
第12章： 關聯式查詢與動作查詢
第13章： 關聯式表單
第14章： 關聯式報表

第三篇 Access資料庫系統開發實務
第15章： 進階表單製作
第16章： 運算式
第17章： 巨集
第18章： SQL資料庫語言
第19章： VBA與Web App

第四篇 Access資料庫系統專案實務 – 銷售管理系統
第20章： 銷售管理系統的規劃與設計
第21章： 客戶資料管理
第22章： 員工資料管理
第23章： 產品資料管理
第24章： 訂單資料管理
第25章： 銷售排行榜與業績統計
第26章： 系統整合、使用者與資料庫管理

附錄A：Access事件分類說明
附錄B：VBA函數速查表
附錄C：轉換舊版Access資料庫檔案








中文書籍分類

最新新書
2016 年度暢銷排行
暢銷排行 (2017/06)
暢銷排行 (2017/05)
暢銷排行 (2017/04)



活動主題列表

資料科學
CRC好書上架
簡體中文書最新到貨
PACKT 最新到貨
Effective 系列書
微服務系列書
Ruddy老師的敏捷教室
程式設計必讀經典系列
Springer好書上架
英文書最新到貨
資料視覺化系列書
Python 系列書籍
深度學習系列書籍
無瑕的程式碼 超值合購
Maker小天地



特價書籍

Bootstrap系列76折起
松崗暢銷書展5折起












華文網網路書店：資料庫系統：設計、實作與管理(附光碟)．電腦與網路/資料庫◎知．識．服．務．新．思．路◎


























 
春節重要公告



 



會員登入｜ 加入會員｜ 會員專區｜ 購物車｜培訓課程｜
                          王道增智會｜自資出版｜ 電子書城｜ 客服中心



























文學小說
商管創投
人文藝坊
勵志養生
進修學習
科學工程
家庭親子
玩樂天地



















書名
出版社
作者
isbn
編號




川普 | 霹靂62 | 核心競爭力 | 出書出版 | 易經占卜 | 英語會話 | 成交的秘密 | 專業培訓 | 








資料探勘理論與應用**：以IBM SPSS Modeler為範例(附CD)此作者無相關書籍









文學小說





文學｜小說





商管創投





財經投資｜行銷企管





人文藝坊





宗教、哲學
社會、人文、史地
藝術、美學｜電影戲劇





勵志養生





醫療、保健
料理、生活百科
教育、心理、勵志





進修學習





電腦與網路｜語言工具
雜誌、期刊｜軍政、法律
參考、考試、教科用書





科學工程





科學、自然｜工業、工程





家庭親子





家庭、親子、人際
青少年、童書





玩樂天地





旅遊、地圖｜休閒娛樂
漫畫、插圖｜限制級






 






資料庫系統：設計、實作與管理(附光碟)Database Systems：Design, Implementation, and Management, 8e作者：Peter Rob、Carlos Coronel譯者：張世敏分類：電腦與網路／資料庫出版社：新加坡商聖智學習出版日期：2009/1/7ISBN：9789866637247書籍編號：kk0226376頁數：616 定價：680 元一般會員價：95 折  646 元特別會員價：9 折  612 元書價若有異動，以出版社實際定價為準訂購後立即為您進貨訂購後立即為您進貨：目前無庫存量,讀者下訂後,開始進入調書程序,一般天數約為2-10工作日(不含例假日)。團購數最低為 15 本以上評價數：     (請將滑鼠移至星星處進行評價)  目前平均評價：文字連結 複製語法 資料庫系統：設計、實作與管理(附光碟)圖片連結 複製語法分享
  









•借力與整合的秘密

























內容簡介作者介紹
同類推薦






 《資料庫系統：設計、實作與管理》是資料庫教科書中的市場領導品牌，可以為讀者在資料庫設計與實作方面，奠立完整的實務基礎。本書將深入闡述資料庫的設計要領，並說明資料庫實作的成功與否，關鍵在於資料庫的設計是否恰當，以期能否符合資料環境中比較策略性的觀點。

第八版中做了許多的更新，包括：新增加統一塑模語言(UML)的內容，擴充SQL Server功能的說明，提供全新的商業智慧教材內容，以及增加資料安全性的部份。

本書提供許多真實世界中的範例與練習，將可協助學生發展資料庫設計的技能，並在真實世界中做出珍貴且有意義的應用。

本書特色：
☆提供豐富、詳細的解說與圖表，協助讀者瞭解複雜的概念。
☆使用各種格式的資料庫，提供讀者有關Microsoft�� Access��、Microsoft�� SQL Server��等實作經驗。
☆針對當今資料庫實作所面臨的課題與挑戰，提供最新的見解。
☆簡潔易懂的寫作風格，平衡理論與實務的落差。 

目錄
PART 1　資料庫概念
　　第一章　資料庫系統
　　第二章　資料模型
PART 2　設計概念
　　第三章　關聯式資料庫模型
　　第四章　實體關係(ER)塑模技術
　　第五章　資料表的正規化
　　第六章　進階資料塑模技術
PART 3　進階的設計與實作
　　第七章　結構化查詢語言(SQL)簡介
　　第八章　進階SQL
　　第九章　資料庫設計
PART 4　進階的資料庫概念
　　第十章　交易管理與同步性控制
　　第十一章　資料庫效能調校與查詢最佳化
　　第十二章　商業智慧與資料倉儲




Peter Rob

擁有30年以上關於資料庫系統設計、資料庫設計、資料庫應用與發展等課程教學經驗。也有多年實務經驗，包括20年實際操作系統分析與開發、資料庫系統設計的顧問經驗，以及15年統計品質管理系統分析與應用開發人員的經驗。

Carlos Coronel

目前任教於美國中田納西州立大學(Middle Tennessee State University)，主要授課課程為網站開發、資料庫設計與開發、資料通訊。並有20年以上不同領域之資料庫管理者、網路管理者及技術專家等實務經驗。





認識資料科學的第一本資料庫系統理論與實務智慧管道關鍵技術詳解Access 201大數據大時代：新一代SketchUp t2018電腦組裝、選達標！Access OS的結構繪本：手繪比Hadoop+Py



				
Q1：若我已報名付了1000元訂金，接下來我要做什麼？
A：感謝您報名，後續相關事情及服務我們會以e-mail和電話跟您聯絡. 您也可以主動來信(andy@book4u.com.tw)詢問。謝謝！

Q2：我本身並沒有產品和服務，也沒什麼實務上的經驗，那又能如何賺錢呢？這個課程真的有實際成效嗎？
A：我們這個課程共有11項贈品，其中第2項贈品便是資訊產品創造藍圖，它將教您如何用最簡潔而快速的方法創出屬於您自己的資訊產品。一般的課程大多是教您如何捕魚，但多數的成功致富者，其成功的關鍵卻不是仰賴捕魚技術，而是仰賴借力之術，因為唯有借力才能無中生有！才能快速成長！也才能快速致富！本課程3天共有三套樣版，其中一套樣版便是教您打造在沒有任何商品與服務，也沒有任何資源的情況下，就能快速借力致富的樣版！本課程二位講師都是白手起家，對於沒有實務經驗的新手會格外用心，請放心。

Q3：請問贈品中魚池矩陣直效聯盟VVIP是什麼？
A：這是一個強大的系統，而我們送的是體驗版，會提供你Email追客系統。國外有一種函授課程，亦即每幾天發一個課程給學員， 就是用EMAIL追客系統來實踐。EMAIL追客系統簡單的說就是今天有一個客戶在你的網站上購買產品或註冊，系統會自動回覆一封確認信，之後你可以自行設計發送內容和發信時間一次一對多發給客戶，而且每封信還會帶入客戶本身的姓名。讓客戶以為是我們專門為客戶所量身訂作的信件。所以Email追客系統可以讓你培養跟客戶的信任感，進而成交。

Q4：請問贈品中資訊產品創造藍圖是什麼？
A：這是一位叫林星?老師的課程，課程售價是9800元，現在免費送給你。此課程包含：
● 何謂資訊型產品？
● 資訊型產品的種類大解析！以及如何組織你的資訊型產品賺錢？
● 如何找到你的利基市場？
● 為什麼錯的利基市場，再好的產品與行銷也很難有效！
● 29個國外已經證實能讓你賺到錢的利基市場！
● 如何確保你做出來的產品客戶會很想購買？以及實際可執行的步驟！
● 創造資訊型產品計劃書
● 15個步驟建立你的資訊型產品事業
● E-mail精準行銷的10個法則
● 10個別人沒有告訴你的有效文案撰寫法則

Q5：請問贈品中自動財富系統 6片DVD是什麼？
A：此6片DVD定價3200元。內容為《借力淘金！最吸利的鈔級魚池賺錢術》作者之一王紫傑所錄製的DVD，內容為有關網路行銷的知識和技巧，非常豐富且實用，免費送給您。
			



 為了保障您的權益，新絲路網路書店所購買的商品均享有到貨七天的鑑賞期（含例假日）。退回之商品必須於鑑賞期內寄回（以郵戳或收執聯為憑），且商品必須是全新狀態與完整包裝(商品、附件、內外包裝、隨貨文件、贈品等)，否則恕不接受退貨。 










 
資料庫 | 【大享】動畫圖解資料庫系統理論-使用SQL Server實作(第三版)9789572196779全華06188027 | Yahoo拍賣



















ga conf

 













首頁
超級商城
購物中心
中古車
帳務中心






Yahoo!奇摩拍賣


:::商品搜尋框

搜尋
搜尋:


















:::上方功能區塊






件商品已加入





前往購物車







        {{#if items_normal}}
            {{{merchant_name}}}
{{items_normal}}項商品
        {{/if}}
        {{#if items_nextbuy}}
            {{{merchant_name}}}
下次買清單
        {{/if}}
        

 









   拍賣  >    圖書/影音/文具  >    圖書與雜誌  >    電腦/網路  >    資料庫  






         
 檢舉商品   tumblr share   facebook share       1 
 {{#if isLoveIcon}}
	
		{{likeNums}}
	
{{else}}
    {{#if trackItem}}已喜愛商品{{else}}喜愛商品{{/if}}
{{/if}}
   


    直購 【大享】動畫圖解資料庫系統理論-使用SQL Server實作(第三版)9789572196779全華06188027     原　　價 $720   促　　銷  $600 /已售出 1 件              ---      數　　量    Decrease  Increase  庫存僅剩件                  Yahoo拍賣保障 放心買!我們給你五萬交易保障!     付款方式    現金付款  Yahoo奇摩輕鬆付現金接受付款方式  帳戶餘額 網路ATM 實體ATM FamiPort  ATM提供6家銀行：合作金庫、華南銀行、玉山銀行、臺灣銀行、國泰世華、中國信託，以上6家同行轉帳，免轉帳手續費。  、    、     Yahoo奇摩輕鬆付   、  （想使用信用卡付款嗎？）       運　　費   郵寄掛號 - 單件運費$65、消費滿$10000免運費  （合併運送規則）  單件運費$65 滿2件，運費$65 滿3件，運費$65 消費滿$10000免運費    7-ELEVEN取貨付款 - 單件運費$60、消費滿$10000免運費  （合併運送規則）  單件運費$60 滿2件，運費$60 滿3件，運費$60 消費滿$10000免運費    全家取貨付款 - 單件運費$60、消費滿$10000免運費、APP全家免運  （合併運送規則）  單件運費$60 滿2件，運費$60 滿3件，運費$60 消費滿$10000免運費    面交/自取/不寄送 - 免運費     商品狀況 全新品   所在地區   臺北市     商品編號 100045921803 
  {"9941166-12533312":{"model_id":13509931,"sale_quantity":5,"saleable":true}}  





大享電腦圖書專業門市 代號 Y1239803676  加入最愛     正評99.98%  評價 5,381 則     關於我 商品問與答 (0) 全部商品 (2708) 












  賣場任意門  廣告            不工作用20萬月創造2-3萬被動收入   $50,000              繽紛12色水性筆  特賣中   $89              29元炫彩會計章送授權貼紙連續章職章   $29              全套成寒英文教材   $15,000         看更多商品>   我要曝光>   





{{title}}

            {{#each geList}}
            

                    {{#if thumbnail}}{{/if}}
                    {{desc}}

                {{#if sponsorLink}}
                    {{sponsor}}
                {{else}}
                    {{sponsor}}
                {{/if}}
            
            {{/each}}
        










     商品資訊    問與答(5)    商品資訊      分級   普級     decoration decoration      動畫圖解資料庫系統理論－使用SQL Server實作(第三版)(附影音光碟) 



作(譯)者：

李春雄 




定　價：NT$720 出版商：全華圖書 出版日：2014/12/1 ISBN(13碼)：9789572196779 書號：06188027 

本書優點特色0.本書光碟附有「基礎篇數位影音教材」、「SCORM教材(國際教材標準)」1.學習目標：每一章的最前面都有引言來說明學習目標，以啟發學習動機。2.圖解說明：利用圖文並茂來說明「資料庫」的概念知識。3.單元評量：每「單元」後附有單元導向來評量測驗。讓授課老師可以針對某一單元來命題。4.課後評量：每「章節」最後附有「基本題」與「進階題」，課後的適性化評量機制，協助讀者課後練習與自我測驗。5.教師手冊：包括「教學投影片」、「單元評量」及「課後評量」之完整解答。6.適用軟體工具：SQL Server 2008。 
■ 內容簡介由於資訊化時代的到來，使得各行各業對資訊人才的需求急速增加，因此在多所學校皆有設立「資訊系所」，每年則產出上萬個資訊人員，如何在這麼競爭的環境中取得優勢，那就必須要將在學校時所學的「理論」加以「實務化」，才能與外界的企業環境整合。因此，透過本書的介紹將帶領各位讀者從「理論派」轉換為「理論派+實務派」，如此，才能在畢業之後，在工作職場上百戰百勝。本書分為基礎篇和進階篇，可讓讀者從基礎開始打穩根基，並進階朝向「資料庫管理師」大步邁進。 
■ 目錄第1章1 資料庫導論1-1 認識資料、資料庫及資訊的關係1-2 資料庫的意義1-3 資料庫與資料庫管理系統1-4 檔案系統與資料庫系統比較1-5 資料庫的階層1-6 資料庫系統的ANSI/SPARC架構1-7 資料處理模式的演進1-8 資料庫的設計1-9 資料庫系統的架構第2章2 關聯式資料庫2-1 關聯式資料庫（Relational Database）2-2 鍵值屬性2-3 關聯式資料庫的種類2-4 關聯式資料完整性規則第3章3 ER Model實體關係圖3-1 實體關係模式的概念3-2 實體（Entity）3-3 屬性（Attribute）3-4 關係（Relationship）3-5 情境轉換成E-R Model3-6 將E-R圖轉換成對應表格的法則第4章4 資料庫正規化4-1　正規化的概念4-2　正規化的目的4-3　功能相依（Functional Dependence；FD）4-4　資料庫正規化（Normalization）4-5 反正規化（De-normalization）4-6 結語第5章5 關聯式模式的資料運算5-1 關聯式模式的資料運算5-2 關聯式代數5-3 限制（Restrict）5-4 投影（Project）5-5 聯集（Union）5-6 卡氏積（Cartesian Product）5-7 差集（Difference）5-8 合併（Join）5-9 交集（Intersection）5-10 除法（Division）5-11 非基本運算子的替代5-12 外部合併（Outer Join）第6章6 結構化查詢語言SQL─異動處理6-1 SQL語言的概念6-2 利用SQL Server 2008撰寫SQL6-3 SQL的DDL指令介紹6-4 SQL的DML指令介紹6-5 SQL的DCL指令介紹第7章7 SQL的查詢語言7-1 單一資料表的查詢7-2 SQL常用的函數7-3 使用Select子句7-4 使用「比較運算子條件」7-5 使用「邏輯比較運算子條件」7-6 使用「模糊條件與範圍」7-7 使用「算術運算子」7-8 使用「聚合函數」7-9 使用「排序及排名次」7-10 使用「群組化」7-11 使用「刪除重複」第8章8 合併理論與實作8-1 關聯式代數運算子8-2 非集合運算子8-3 集合運算子8-4 巢狀結構查詢第9章9 Transact-SQL程式設計9-1　何謂Transact-SQL？9-2　變數的宣告與使用9-3　註解（Comment）9-4　資料的運算9-5　函數9-6　流程控制9-7　Try/Catch例外處理第10章10 交易管理10-1 何謂交易管理10-2 交易的進行模式10-3 巢狀交易（Nested Transaction）10-4 設定交易儲存點10-5 交易的隔離等級10-6 並行控制的必要性第11章11 並行控制11-1 並行控制的技術11-2 排程（Schedule）11-3 鎖定法（Locking）11-4 資料庫的鎖定層級11-5 資料庫的鎖定模式11-6 死結（Deadlock）11-7 死結的處理11-8 時間戳記法11-9 樂觀並行控製法第12章12 回復技術12-1 資料庫系統的故障種類12-2 系統記錄（System Log）12-3 確認點（Commit Point）12-4 檢查點（Check Point）12-5 回復處理（Recovery）第13章13 View檢視表13-1 View檢視表13-2 View的用途與優缺點13-3 建立檢視表（Create View）13-4 修改檢視表（Alter View）13-5 刪除檢視表（Drop View）13-6 常見的視界表格（View Table）13-7 檢視表與程式語言結合第14章14 預存程序14-1 何謂預存程序（Stored Procedure）14-2 預存程序的優點與缺點14-3 預存程序的種類14-4 建立與維護預存程序14-5 建立具有傳入參數的預存程序14-6 建立傳入參數具有「預設值」的預存程序14-7 傳回值的預存程序14-8 執行預存程序命令14-9 建立具有Recompile選項功能的預存程序14-10 建立具有Encryption選項功能的預存程序14-11 如何利用VB程式來呼叫預存程序第15章15 觸發程序15-1 何謂觸發程序（TRIGGER）15-2 觸發程序的類型15-3 觸發程序建立與維護第16章16 資料庫安全16-1 資料庫的安全性（Security）16-2 資料庫安全的目標16-3 資料控制語言16-4 安全保護實務作法16-5 資料備份的媒體16-6 資料備份的檔案及方法16-7 資料的還原機制Appendix 附錄A SQL Server 2008的基本操作B Access與SQL Server整合C VB與SQL Express資料庫結合D 設定SQL Server的使用權限       問與答 看更多問與答arrow  目前沒有任何問與答   comments   請先登入再進行發問    

賣家回覆

0/250


取消





 
  app migrate  熱門APP快下載 快下載拍賣APP，第一時間掌握賣家回覆，熱門商品別錯過！   立即下載 再等等  










 



















