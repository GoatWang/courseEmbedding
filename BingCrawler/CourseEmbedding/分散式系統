









分散式系統 - MBA智庫百科









 
 















分散式系統

出自 MBA智庫百科(http://wiki.mbalib.com/)


分散式系統(Distributed System,DS)

目錄

1 分散式系統定義[1]
2 分散式系統的主要特征[1]
3 分散式系統的優缺點[1]
4 分散式系統應用和標準[2]
5 參考文獻


[編輯] 分散式系統定義[1] 
　　分散式系統有很多不同的定義，一般認為：“一個分散式系統是一些獨立的電腦集合，但是對這個系統的用戶來說，系統就像一臺電腦一樣。”這個定義有兩方面的含義：第一，從硬體角度來講，每台電腦都是自主的；第二，從軟體角度來講，用戶將整個系統看做是一臺電腦。這兩者都是必需的，缺一不可。

[編輯] 分散式系統的主要特征[1] 
　　分散式系統具有以下幾個主要特征：
　　(1)分佈性：系統中的多台電腦之間沒有主、從之分，即沒有控制整個系統的主機，也沒有受控的從機。
　　(2)透明性：系統資源被所有電腦共用。每台電腦的用戶不僅可以使用本機的資源，還可以使用本分散式系統中其他電腦的資源(包括CPU、文件、印表機等)。
　　(3)同一性：系統中的若幹台電腦可以互相協作來完成一個共同的任務，或者說一個程式可以分佈在幾台電腦上並行地運行。
　　(4)通信性：系統中任意兩台電腦都可以通過通信來交換信息。

[編輯]分散式系統的優缺點[1]
　　分散式系統與集中式系統相比具有以下一些優點：
　　(1)經濟：隨著微處理機技術的發展，現在人們只需花不多的錢就能買到一個CPU晶元。分散式系統通常就是在一個系統中使用集中在一起的大量廉價CPU，可以得到比單個大型集中式系統好的多的性能價格比。
　　(2)快速：分散式系統由於使用了並行處理技術，因此它總的計算能力比單個的大型集中式系統強很多。
　　(3)可靠：分散式系統中工作負載都是分散在多台機器上，單個機器故障只會使一臺機器停機，而不會影響其他機器，從而獲得很高的可靠性。在系統中多台機器同時出現故障的概率是很低的，理想情況下，某一時刻如果有5％的電腦出現故障，系統仍能繼續工作。因此對於關鍵性的應用，一般都採用分散式系統來獲得高可靠性。
　　(4)易擴充：分散式系統允許系統在需求增長時逐漸進行擴充。因此在分散式系統組成後，可以方便地添加若幹台電腦，既不用修改軟體，也不用另行設計硬體。
　　(5)數據共用：允許多個用戶訪問一個公共的資料庫。例如，機票預定系統中的每個售票員需要訪問航班及座位信息，如果將航班及座位信息資料庫給他們每人備份一個，其實是無法工作的，因為他們不知其他人已經賣了哪些座位，所以電腦必須互連。而互連本身就產生了分散式系統。
　　(6)設備共用：共用並不局限於數據，有些昂貴的外圍設備，如彩色激光印表機、照相排版機和大型存儲設備等，都允許多個用戶共用。
　　(7)通信：使人們之間的通信變得更加容易，如通過電子郵件。
　　(8)靈活性：分散式系統中將多台電腦連在一起，可以使工作能夠在最合適的電腦上完成，可以使用最有效的方式將工作負荷分配到可用的機器上，即使某些電腦失效也可以使其工作在其他電腦上得到補償。
　　儘管分散式系統有很多優點，但也存在一些缺點。首先是軟體問題。分散式系統需要與集中式系統完全不同的軟體，特別是系統所需要的分散式操作系統才剛剛出現。其次是通信網路問題。由於網路會損失信息，因此需要專門的軟體進行恢復，當網路出現過載時也必須對它進行改造替換或加入另外的網路擴容，這些都將會抵消通過建立分散式系統所獲得的大部分優勢。另外，數據易於共用也存在安全問題，容易造成對保密數據的訪問。儘管存在這些潛在的問題，大家還是認為分散式系統的優點多於缺點，並且普遍認為分散式系統在未來幾年中會越來越重要。

[編輯] 分散式系統應用和標準[2] 
　　分散式系統被用在許多不同類型的應用中。列出以下一些應用。對這些應用而言，使用分散式系統要比其他體繫結構如處理機和共用存儲器多處理機更優越：

並行和高性能應用

　　原則上，並行應用也可以在共用存儲器多處理機上運行，但共用存儲器系統不能很好地擴大規模以包括大量的處理機。HPCC(高性能計算和通信)應用一般需要一個可伸縮的設計，這種設計取決於分散式處理。

容錯應用

　　因為每個PE是自治的，所以分散式系統更加可靠。一個單元或資源(軟體或硬體)的故障不影響其他資源的正常功能。

固有的分散式應用

　　許多應用是固有分散式的。這些應用是突發模式(burst mode)而非批量模式(bulk mode)。這方面的實例有事務處理和Internet Javad,程式。
　　這些應用的性能取決於吞吐量(事務響應時陽J或每秒完成的事務數)而不是一般多處理機所用的執行時間。
　　對於一組用戶而言， 分散式系統有一個特別的應用稱為電腦支持的協同工作(computer supported Cooperative working，CSCW)或群件(group ware)， 支持用戶協同工作。另一個應用是分散式會議， 即通過物理的分散式網路進行電子會議。同樣，多媒體遠程教學也是一個類似的應用。
　　由於在不同的平臺上如：Pc、工作站、區域網和廣域網上可獲得非常多樣的應用，用戶希望能超出他們Pc的限制以獲得更廣泛的特征、功能和性能。不同網路和環境(包括分散式系統環境)下的互操作性變得越來越重要。為了達到互操作性，用戶需要一個標準的分散式計算環境，在這個環境里，所有系統和資源都可用。
　　DCE (分散式計算環境)是OSF (開放系統基金會)開發的分散式計算技術的工業標準集。它提供保護和控制對數據訪問的安全服務、容易尋找分散式資源的名字服務、以及高度可伸縮的模型用於組織極為分散的用戶、服務和數據。D C E可在所有主要的計算平臺上運行， 並設計成支持異型硬體和軟體環境下的分散式應用。
　　DCE已經被包括TRANSVARL在內的一些廠商實現。TRANSVARL是最早的多廠商組(multi-vendor team)的成員之一，它提出的建議已成為DCE體繫結構的基礎。在中可以找到利用DCE開發分散式應用的指南。具有標準介面和協議的系統也叫做開放系統。
　　一些其它標準基於一個特別的模型，比如CORBA (公用對象請求代理程式體繫結構)，它是由OMG (對象管理組)和多電腦廠商聯盟開發的一個標準。CORBA使用面向對象模型實現分散式系統中的透明服務請求。
　　工業界有自己的標準，比如微軟的分散式構件對象模型(DCOM)和Sun Microsystem公司的JavaBeans。

[編輯] 參考文獻 

↑ 1.0 1.1 1.2 劉福岩；王艷春，劉美華，王偉副主編.電腦操作系統.兵器工業出版社,2005.08.
↑ 肖穎,王得燕.分散式系統的應用[J].今日科苑.2009(24)



取自"http://wiki.mbalib.com/zh-tw/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F"

本條目對我有幫助14  分享到：














   如果您認為本條目還有待完善，需要補充新內容或修改錯誤內容，請編輯條目。

本條目相關文檔
 基於XmlRpc++的分散式系統 6頁 對象技術在分散式系統中的作用 8頁 3G分散式系統遠供方案 31頁 OpenStack與大規模分散式系統 10頁 Go 在分散式系統開發中的應用 20頁 互聯網分散式系統架構分享 38頁 《在雲端構建大規模分散式系統》 16頁 Go在分散式系統開發中的應用 20頁 一種分散式系統的用戶認證授權機制及其應用' 3頁 異構分散式系統中的負載均衡調度演算法研究 78頁更多相關文檔
本條目由以下用戶參與貢獻
Yixi,連曉霧,Tracy,蘇青荇,劉維燎. 頁面分類: 信息管理系統 





評論(共2條)提示:評論內容為網友針對條目"分散式系統"展開的討論，與本站觀點立場無關。

 222.178.10.*  在 2014年5月5日 09:30 發表    


贊一個。


 回複評論
 發表評論﻿請文明上網，理性發言並遵守有關規定。




 




 119.129.210.*  在 2014年7月10日 13:54 發表    


不錯


 回複評論
 發表評論﻿請文明上網，理性發言並遵守有關規定。




 



發表評論﻿請文明上網，理性發言並遵守有關規定。




 




導航


首頁
文檔
百科
商學院
資訊
培訓
幫幫




個人工具


用戶登錄創建新帳號 









搜索



 
 

全球最大的中文經管百科，由121,994位網友共同編寫而成，共計414,092個條目








 
首頁
 
管理
 
營銷
 
經濟
 
金融
 
人力資源
 
咨詢
 
財務
 
品牌
 
證券
 
物流
 
貿易
 
商學院
 
法律
 
人物
 
分類索引
 




查看

條目討論編輯簡體中文繁體中文 


工具▼


鏈入頁面
鏈出更改
上載文件 特殊頁面 可列印版
永久鏈接 













導航


最新資訊
最新評論
最新推薦
熱門推薦
編輯實驗
使用幫助
創建條目
隨便看看












本周推薦
最多推薦



影響世界的100個經典管理定律垃圾人定律產品定位五步法MECE分析法DISC個性測驗吳曉波裙擺指數PPP模式七層次領導力六項精進 

蘑菇管理定律猴子管理法則情緒ABC理論100個最流行的管理辭彙21天效應破窗效應懶螞蟻效應SWOT分析模型墨菲定律踢貓效應 

以上內容根據網友推薦自動排序生成









x



	   最後更改09:42, 2016年10月14日.	  
智庫首頁 - 
百科首頁 - 
關於百科 -
	   客戶端 -
	   人才招聘 -
	   廣告合作 - 
權利通知 -
	   聯繫我們 -
	   免責聲明
 - 友情鏈接

©2006-2017 MBAlib.com, All rights reserved. 


 






分散式檔案系統 - 維基百科，自由的百科全書






























 







分散式檔案系統

維基百科，自由的百科全書


					跳轉至：					導航，					搜索






相對於本機端的檔案系統而言，分散式檔案系統（英語：Distributed file system, DFS），或是網路檔案系統（英語：Network File System），是一種允許檔案透過網路在多台主機上分享的檔案系統，可讓多機器上的多使用者分享檔案和儲存空間。
在這樣的檔案系統中，客戶端並非直接存取底層的資料儲存區塊，而是透過網路，以特定的通訊協定和伺服器溝通。藉由通訊協定的設計，可以讓客戶端和伺服器端都能根據存取控制清單或是授權，來限制對於檔案系統的存取。
相對地，在一個分享的磁碟檔案系統中，所有節點對資料儲存區塊都有相同的存取權，在這樣的系統中，存取權限就必須由客戶端程式來控制。
分散式檔案系統可能包含的功能有：透通的資料複製（英語：replication (computer science)）與容錯（英語：fault tolerance）。也就是說，即使系統中有一小部份的節點離線，整體來說系統仍然可以持續運作而不會有資料損失（英語：data loss）。
分散式檔案系統和分散式資料儲存的界線是模糊的，但一般來說，分散式檔案系統是被設計用在區域網路[1]，比較強調的是傳統檔案系統概念的延伸，並透過軟體方法來達成容錯。而分散式資料儲存，則是泛指應用分散式運算技術的檔案和資料庫等提供資料儲存服務的系統。



目錄


1 歷史
2 透通性
3 效能
4 同時更新檔案
5 CAP定理
6 參見
7 參考文件
8 外部連結



歷史[編輯]
第一個檔案伺服器在1970年代被發展出來。在1976年迪吉多公司設計出File Access Listener（英語：File Access Listener）（FAL）做為第二代DECnet（英語：DECnet）的一部分。這個系統實作了Data Access Protocol，是第一個被廣為使用的網路檔案系統。在1985年昇陽電腦建立了網路檔案系統（Network File System，NFS），這是第一個基於網際協議（Internet Protocol）而被廣泛使用的網路檔案系統。在相關技術的演進過程中，其他值得一提的網路檔案系統還有安德魯檔案系統（AFS）、Apple Filing Protocol（AFP）、NetWare核心協定（NCP）、和一般被稱為網路文件共享系統（CIFS）的伺服器訊息區塊（Server Message Block，SMB）等。
透通性[編輯]
分散式檔案系統通常都內建有透通性，讓實際上是透過網路來存取檔案的動作，由程式與使用者看來，就像是存取本地的磁碟一般。伺服器與儲存裝置之間的架構多樣性與分離性，因此被隱藏了起來。而定位檔案在系統中的位置與資料傳輸的機制，就有賴網路檔案系統的設計了。
效能[編輯]
一個普遍用來量測網路檔案系統效能的方式是：它需要用多少時間來完成服務請求？在傳統的系統中，完成請求所需要的時間包括了實際的硬碟存取時間，和一小部份的中央處理器處理時間。但在一個網路檔案系統中，由於分散式架構的關係，遠端存取動作會產生額外的經常性負擔（英語：Overhead），包括：把請求從客戶端送到伺服器端的時間、把回應從伺服器端傳回客戶端的時間、以及這兩個傳輸過程中用來執行網路傳輸協定的中央處理處時間。一個網路檔案系統的效能，可被視為是評估它透通性的一個維度，拿來與本地磁碟進行充分的對比。
同時更新檔案[編輯]
當多個使用者或客戶端同時存取並更新同一個檔案的時候，併發控制即會成為一個議題。一個客戶端對於檔案的更新，應該不能幹涉另一個客戶端對該檔案的存取與更新。並發控制或鎖定機制可以內建在檔案系統中，或是透過擴增協定來提供。
CAP定理[編輯]
著名的CAP定理指出：在一個分散式資料儲存架構中，資料的一致性（Consistency）、可用性（Availability）、和網路分隔的容忍程度（Partition tolerance）只能取二來做最佳化，無法三者兼具。當代的分散式資料儲存服務均是各自針對服務的內容和性質來作取捨，很難說有哪一個是通用的最佳解。
參見[編輯]

List of file systems, distributed file systems section
Ceph
Disk sharing
Distributed data store
FhGFS
Global filesystem
Gopher
GlusterFS
Lustre
MooseFS
OneFS
WebDAV
XtreemFS
HDFS
GFS
雲計算

參考文件[編輯]


^ Silberschatz, Galvin (1994). Operating System concepts, chapter 17 Distributed file systems. Addison-Wesley Publishing Company. ISBN 0-201-59292-4.


外部連結[編輯]

A distributed file system for distributed conferencing system ("A DFS for the DCS") by Philip S Yeager, Thesis, University of Florida, 2003.（pdf）





 
						取自“https://zh.wikipedia.org/w/index.php?title=分散式檔案系統&oldid=44401334”					
分類：分散式檔案系統數據管理分散式數據儲存網絡文件系統文件系統隱藏分類：使用ISBN魔術鏈接的頁面 



導航菜單


個人工具

沒有登錄討論貢獻創建賬戶登錄 



命名空間

條目
討論




不轉換



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






視圖

閱讀
編輯
查看歷史



更多







搜索



 







導航


首頁分類索引特色內容新聞動態最近更改隨機條目 



幫助


幫助維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



打印/導出


下載為PDF 



工具


鏈入頁面相關更改上傳文件特殊頁面打印頁面固定鏈接頁面信息維基數據項引用本頁 



其他語言


DeutschEnglishEspañolFrançaisItaliano日本語한국어PolskiPortuguêsRomânăУкраїнськаTiếng Việt 
編輯鏈接 





 本頁面最後修訂於2017年5月18日 (星期四) 05:28。
本站的全部文字在知識共享 署名-相同方式共享 3.0協議之條款下提供，附加條款亦可能應用。（請參閱使用條款）
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發者
Cookie聲明
手機版視圖



 

 









分散式檔案系統 - 維基百科，自由的百科全書






























 







分散式檔案系統

維基百科，自由的百科全書


					跳轉至：					導航，					搜索






相對於本機端的檔案系統而言，分散式檔案系統（英語：Distributed file system, DFS），或是網路檔案系統（英語：Network File System），是一種允許檔案透過網路在多台主機上分享的檔案系統，可讓多機器上的多使用者分享檔案和儲存空間。
在這樣的檔案系統中，客戶端並非直接存取底層的資料儲存區塊，而是透過網路，以特定的通訊協定和伺服器溝通。藉由通訊協定的設計，可以讓客戶端和伺服器端都能根據存取控制清單或是授權，來限制對於檔案系統的存取。
相對地，在一個分享的磁碟檔案系統中，所有節點對資料儲存區塊都有相同的存取權，在這樣的系統中，存取權限就必須由客戶端程式來控制。
分散式檔案系統可能包含的功能有：透通的資料複製（英語：replication (computer science)）與容錯（英語：fault tolerance）。也就是說，即使系統中有一小部份的節點離線，整體來說系統仍然可以持續運作而不會有資料損失（英語：data loss）。
分散式檔案系統和分散式資料儲存的界線是模糊的，但一般來說，分散式檔案系統是被設計用在區域網路[1]，比較強調的是傳統檔案系統概念的延伸，並透過軟體方法來達成容錯。而分散式資料儲存，則是泛指應用分散式運算技術的檔案和資料庫等提供資料儲存服務的系統。



目錄


1 歷史
2 透通性
3 效能
4 同時更新檔案
5 CAP定理
6 參見
7 參考文件
8 外部連結



歷史[編輯]
第一個檔案伺服器在1970年代被發展出來。在1976年迪吉多公司設計出File Access Listener（英語：File Access Listener）（FAL）做為第二代DECnet（英語：DECnet）的一部分。這個系統實作了Data Access Protocol，是第一個被廣為使用的網路檔案系統。在1985年昇陽電腦建立了網路檔案系統（Network File System，NFS），這是第一個基於網際協議（Internet Protocol）而被廣泛使用的網路檔案系統。在相關技術的演進過程中，其他值得一提的網路檔案系統還有安德魯檔案系統（AFS）、Apple Filing Protocol（AFP）、NetWare核心協定（NCP）、和一般被稱為網路文件共享系統（CIFS）的伺服器訊息區塊（Server Message Block，SMB）等。
透通性[編輯]
分散式檔案系統通常都內建有透通性，讓實際上是透過網路來存取檔案的動作，由程式與使用者看來，就像是存取本地的磁碟一般。伺服器與儲存裝置之間的架構多樣性與分離性，因此被隱藏了起來。而定位檔案在系統中的位置與資料傳輸的機制，就有賴網路檔案系統的設計了。
效能[編輯]
一個普遍用來量測網路檔案系統效能的方式是：它需要用多少時間來完成服務請求？在傳統的系統中，完成請求所需要的時間包括了實際的硬碟存取時間，和一小部份的中央處理器處理時間。但在一個網路檔案系統中，由於分散式架構的關係，遠端存取動作會產生額外的經常性負擔（英語：Overhead），包括：把請求從客戶端送到伺服器端的時間、把回應從伺服器端傳回客戶端的時間、以及這兩個傳輸過程中用來執行網路傳輸協定的中央處理處時間。一個網路檔案系統的效能，可被視為是評估它透通性的一個維度，拿來與本地磁碟進行充分的對比。
同時更新檔案[編輯]
當多個使用者或客戶端同時存取並更新同一個檔案的時候，併發控制即會成為一個議題。一個客戶端對於檔案的更新，應該不能幹涉另一個客戶端對該檔案的存取與更新。並發控制或鎖定機制可以內建在檔案系統中，或是透過擴增協定來提供。
CAP定理[編輯]
著名的CAP定理指出：在一個分散式資料儲存架構中，資料的一致性（Consistency）、可用性（Availability）、和網路分隔的容忍程度（Partition tolerance）只能取二來做最佳化，無法三者兼具。當代的分散式資料儲存服務均是各自針對服務的內容和性質來作取捨，很難說有哪一個是通用的最佳解。
參見[編輯]

List of file systems, distributed file systems section
Ceph
Disk sharing
Distributed data store
FhGFS
Global filesystem
Gopher
GlusterFS
Lustre
MooseFS
OneFS
WebDAV
XtreemFS
HDFS
GFS
雲計算

參考文件[編輯]


^ Silberschatz, Galvin (1994). Operating System concepts, chapter 17 Distributed file systems. Addison-Wesley Publishing Company. ISBN 0-201-59292-4.


外部連結[編輯]

A distributed file system for distributed conferencing system ("A DFS for the DCS") by Philip S Yeager, Thesis, University of Florida, 2003.（pdf）





 
						取自“https://zh.wikipedia.org/w/index.php?title=分散式檔案系統&oldid=44401334”					
分類：分散式檔案系統數據管理分散式數據儲存網絡文件系統文件系統隱藏分類：使用ISBN魔術鏈接的頁面 



導航菜單


個人工具

沒有登錄討論貢獻創建賬戶登錄 



命名空間

條目
討論




不轉換



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






視圖

閱讀
編輯
查看歷史



更多







搜索



 







導航


首頁分類索引特色內容新聞動態最近更改隨機條目 



幫助


幫助維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



打印/導出


下載為PDF 



工具


鏈入頁面相關更改上傳文件特殊頁面打印頁面固定鏈接頁面信息維基數據項引用本頁 



其他語言


DeutschEnglishEspañolFrançaisItaliano日本語한국어PolskiPortuguêsRomânăУкраїнськаTiếng Việt 
編輯鏈接 





 本頁面最後修訂於2017年5月18日 (星期四) 05:28。
本站的全部文字在知識共享 署名-相同方式共享 3.0協議之條款下提供，附加條款亦可能應用。（請參閱使用條款）
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發者
Cookie聲明
手機版視圖



 

 









分散式檔案系統 - 維基百科，自由的百科全書






























 







分散式檔案系統

維基百科，自由的百科全書


					跳轉至：					導航，					搜索






相對於本機端的檔案系統而言，分散式檔案系統（英語：Distributed file system, DFS），或是網路檔案系統（英語：Network File System），是一種允許檔案透過網路在多台主機上分享的檔案系統，可讓多機器上的多使用者分享檔案和儲存空間。
在這樣的檔案系統中，客戶端並非直接存取底層的資料儲存區塊，而是透過網路，以特定的通訊協定和伺服器溝通。藉由通訊協定的設計，可以讓客戶端和伺服器端都能根據存取控制清單或是授權，來限制對於檔案系統的存取。
相對地，在一個分享的磁碟檔案系統中，所有節點對資料儲存區塊都有相同的存取權，在這樣的系統中，存取權限就必須由客戶端程式來控制。
分散式檔案系統可能包含的功能有：透通的資料複製（英語：replication (computer science)）與容錯（英語：fault tolerance）。也就是說，即使系統中有一小部份的節點離線，整體來說系統仍然可以持續運作而不會有資料損失（英語：data loss）。
分散式檔案系統和分散式資料儲存的界線是模糊的，但一般來說，分散式檔案系統是被設計用在區域網路[1]，比較強調的是傳統檔案系統概念的延伸，並透過軟體方法來達成容錯。而分散式資料儲存，則是泛指應用分散式運算技術的檔案和資料庫等提供資料儲存服務的系統。



目錄


1 歷史
2 透通性
3 效能
4 同時更新檔案
5 CAP定理
6 參見
7 參考文件
8 外部連結



歷史[編輯]
第一個檔案伺服器在1970年代被發展出來。在1976年迪吉多公司設計出File Access Listener（英語：File Access Listener）（FAL）做為第二代DECnet（英語：DECnet）的一部分。這個系統實作了Data Access Protocol，是第一個被廣為使用的網路檔案系統。在1985年昇陽電腦建立了網路檔案系統（Network File System，NFS），這是第一個基於網際協議（Internet Protocol）而被廣泛使用的網路檔案系統。在相關技術的演進過程中，其他值得一提的網路檔案系統還有安德魯檔案系統（AFS）、Apple Filing Protocol（AFP）、NetWare核心協定（NCP）、和一般被稱為網路文件共享系統（CIFS）的伺服器訊息區塊（Server Message Block，SMB）等。
透通性[編輯]
分散式檔案系統通常都內建有透通性，讓實際上是透過網路來存取檔案的動作，由程式與使用者看來，就像是存取本地的磁碟一般。伺服器與儲存裝置之間的架構多樣性與分離性，因此被隱藏了起來。而定位檔案在系統中的位置與資料傳輸的機制，就有賴網路檔案系統的設計了。
效能[編輯]
一個普遍用來量測網路檔案系統效能的方式是：它需要用多少時間來完成服務請求？在傳統的系統中，完成請求所需要的時間包括了實際的硬碟存取時間，和一小部份的中央處理器處理時間。但在一個網路檔案系統中，由於分散式架構的關係，遠端存取動作會產生額外的經常性負擔（英語：Overhead），包括：把請求從客戶端送到伺服器端的時間、把回應從伺服器端傳回客戶端的時間、以及這兩個傳輸過程中用來執行網路傳輸協定的中央處理處時間。一個網路檔案系統的效能，可被視為是評估它透通性的一個維度，拿來與本地磁碟進行充分的對比。
同時更新檔案[編輯]
當多個使用者或客戶端同時存取並更新同一個檔案的時候，併發控制即會成為一個議題。一個客戶端對於檔案的更新，應該不能幹涉另一個客戶端對該檔案的存取與更新。並發控制或鎖定機制可以內建在檔案系統中，或是透過擴增協定來提供。
CAP定理[編輯]
著名的CAP定理指出：在一個分散式資料儲存架構中，資料的一致性（Consistency）、可用性（Availability）、和網路分隔的容忍程度（Partition tolerance）只能取二來做最佳化，無法三者兼具。當代的分散式資料儲存服務均是各自針對服務的內容和性質來作取捨，很難說有哪一個是通用的最佳解。
參見[編輯]

List of file systems, distributed file systems section
Ceph
Disk sharing
Distributed data store
FhGFS
Global filesystem
Gopher
GlusterFS
Lustre
MooseFS
OneFS
WebDAV
XtreemFS
HDFS
GFS
雲計算

參考文件[編輯]


^ Silberschatz, Galvin (1994). Operating System concepts, chapter 17 Distributed file systems. Addison-Wesley Publishing Company. ISBN 0-201-59292-4.


外部連結[編輯]

A distributed file system for distributed conferencing system ("A DFS for the DCS") by Philip S Yeager, Thesis, University of Florida, 2003.（pdf）





 
						取自“https://zh.wikipedia.org/w/index.php?title=分散式檔案系統&oldid=44401334”					
分類：分散式檔案系統數據管理分散式數據儲存網絡文件系統文件系統隱藏分類：使用ISBN魔術鏈接的頁面 



導航菜單


個人工具

沒有登錄討論貢獻創建賬戶登錄 



命名空間

條目
討論




不轉換



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






視圖

閱讀
編輯
查看歷史



更多







搜索



 







導航


首頁分類索引特色內容新聞動態最近更改隨機條目 



幫助


幫助維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



打印/導出


下載為PDF 



工具


鏈入頁面相關更改上傳文件特殊頁面打印頁面固定鏈接頁面信息維基數據項引用本頁 



其他語言


DeutschEnglishEspañolFrançaisItaliano日本語한국어PolskiPortuguêsRomânăУкраїнськаTiếng Việt 
編輯鏈接 





 本頁面最後修訂於2017年5月18日 (星期四) 05:28。
本站的全部文字在知識共享 署名-相同方式共享 3.0協議之條款下提供，附加條款亦可能應用。（請參閱使用條款）
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發者
Cookie聲明
手機版視圖



 

 









分散式檔案系統 - 維基百科，自由的百科全書






























 







分散式檔案系統

維基百科，自由的百科全書


					跳轉至：					導航，					搜索






相對於本機端的檔案系統而言，分散式檔案系統（英語：Distributed file system, DFS），或是網路檔案系統（英語：Network File System），是一種允許檔案透過網路在多台主機上分享的檔案系統，可讓多機器上的多使用者分享檔案和儲存空間。
在這樣的檔案系統中，客戶端並非直接存取底層的資料儲存區塊，而是透過網路，以特定的通訊協定和伺服器溝通。藉由通訊協定的設計，可以讓客戶端和伺服器端都能根據存取控制清單或是授權，來限制對於檔案系統的存取。
相對地，在一個分享的磁碟檔案系統中，所有節點對資料儲存區塊都有相同的存取權，在這樣的系統中，存取權限就必須由客戶端程式來控制。
分散式檔案系統可能包含的功能有：透通的資料複製（英語：replication (computer science)）與容錯（英語：fault tolerance）。也就是說，即使系統中有一小部份的節點離線，整體來說系統仍然可以持續運作而不會有資料損失（英語：data loss）。
分散式檔案系統和分散式資料儲存的界線是模糊的，但一般來說，分散式檔案系統是被設計用在區域網路[1]，比較強調的是傳統檔案系統概念的延伸，並透過軟體方法來達成容錯。而分散式資料儲存，則是泛指應用分散式運算技術的檔案和資料庫等提供資料儲存服務的系統。



目錄


1 歷史
2 透通性
3 效能
4 同時更新檔案
5 CAP定理
6 參見
7 參考文件
8 外部連結



歷史[編輯]
第一個檔案伺服器在1970年代被發展出來。在1976年迪吉多公司設計出File Access Listener（英語：File Access Listener）（FAL）做為第二代DECnet（英語：DECnet）的一部分。這個系統實作了Data Access Protocol，是第一個被廣為使用的網路檔案系統。在1985年昇陽電腦建立了網路檔案系統（Network File System，NFS），這是第一個基於網際協議（Internet Protocol）而被廣泛使用的網路檔案系統。在相關技術的演進過程中，其他值得一提的網路檔案系統還有安德魯檔案系統（AFS）、Apple Filing Protocol（AFP）、NetWare核心協定（NCP）、和一般被稱為網路文件共享系統（CIFS）的伺服器訊息區塊（Server Message Block，SMB）等。
透通性[編輯]
分散式檔案系統通常都內建有透通性，讓實際上是透過網路來存取檔案的動作，由程式與使用者看來，就像是存取本地的磁碟一般。伺服器與儲存裝置之間的架構多樣性與分離性，因此被隱藏了起來。而定位檔案在系統中的位置與資料傳輸的機制，就有賴網路檔案系統的設計了。
效能[編輯]
一個普遍用來量測網路檔案系統效能的方式是：它需要用多少時間來完成服務請求？在傳統的系統中，完成請求所需要的時間包括了實際的硬碟存取時間，和一小部份的中央處理器處理時間。但在一個網路檔案系統中，由於分散式架構的關係，遠端存取動作會產生額外的經常性負擔（英語：Overhead），包括：把請求從客戶端送到伺服器端的時間、把回應從伺服器端傳回客戶端的時間、以及這兩個傳輸過程中用來執行網路傳輸協定的中央處理處時間。一個網路檔案系統的效能，可被視為是評估它透通性的一個維度，拿來與本地磁碟進行充分的對比。
同時更新檔案[編輯]
當多個使用者或客戶端同時存取並更新同一個檔案的時候，併發控制即會成為一個議題。一個客戶端對於檔案的更新，應該不能幹涉另一個客戶端對該檔案的存取與更新。並發控制或鎖定機制可以內建在檔案系統中，或是透過擴增協定來提供。
CAP定理[編輯]
著名的CAP定理指出：在一個分散式資料儲存架構中，資料的一致性（Consistency）、可用性（Availability）、和網路分隔的容忍程度（Partition tolerance）只能取二來做最佳化，無法三者兼具。當代的分散式資料儲存服務均是各自針對服務的內容和性質來作取捨，很難說有哪一個是通用的最佳解。
參見[編輯]

List of file systems, distributed file systems section
Ceph
Disk sharing
Distributed data store
FhGFS
Global filesystem
Gopher
GlusterFS
Lustre
MooseFS
OneFS
WebDAV
XtreemFS
HDFS
GFS
雲計算

參考文件[編輯]


^ Silberschatz, Galvin (1994). Operating System concepts, chapter 17 Distributed file systems. Addison-Wesley Publishing Company. ISBN 0-201-59292-4.


外部連結[編輯]

A distributed file system for distributed conferencing system ("A DFS for the DCS") by Philip S Yeager, Thesis, University of Florida, 2003.（pdf）





 
						取自“https://zh.wikipedia.org/w/index.php?title=分散式檔案系統&oldid=44401334”					
分類：分散式檔案系統數據管理分散式數據儲存網絡文件系統文件系統隱藏分類：使用ISBN魔術鏈接的頁面 



導航菜單


個人工具

沒有登錄討論貢獻創建賬戶登錄 



命名空間

條目
討論




不轉換



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






視圖

閱讀
編輯
查看歷史



更多







搜索



 







導航


首頁分類索引特色內容新聞動態最近更改隨機條目 



幫助


幫助維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



打印/導出


下載為PDF 



工具


鏈入頁面相關更改上傳文件特殊頁面打印頁面固定鏈接頁面信息維基數據項引用本頁 



其他語言


DeutschEnglishEspañolFrançaisItaliano日本語한국어PolskiPortuguêsRomânăУкраїнськаTiếng Việt 
編輯鏈接 





 本頁面最後修訂於2017年5月18日 (星期四) 05:28。
本站的全部文字在知識共享 署名-相同方式共享 3.0協議之條款下提供，附加條款亦可能應用。（請參閱使用條款）
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發者
Cookie聲明
手機版視圖



 

 









分散式檔案系統 - 維基百科，自由的百科全書






























 







分散式檔案系統

維基百科，自由的百科全書


					跳轉至：					導航，					搜索






相對於本機端的檔案系統而言，分散式檔案系統（英語：Distributed file system, DFS），或是網路檔案系統（英語：Network File System），是一種允許檔案透過網路在多台主機上分享的檔案系統，可讓多機器上的多使用者分享檔案和儲存空間。
在這樣的檔案系統中，客戶端並非直接存取底層的資料儲存區塊，而是透過網路，以特定的通訊協定和伺服器溝通。藉由通訊協定的設計，可以讓客戶端和伺服器端都能根據存取控制清單或是授權，來限制對於檔案系統的存取。
相對地，在一個分享的磁碟檔案系統中，所有節點對資料儲存區塊都有相同的存取權，在這樣的系統中，存取權限就必須由客戶端程式來控制。
分散式檔案系統可能包含的功能有：透通的資料複製（英語：replication (computer science)）與容錯（英語：fault tolerance）。也就是說，即使系統中有一小部份的節點離線，整體來說系統仍然可以持續運作而不會有資料損失（英語：data loss）。
分散式檔案系統和分散式資料儲存的界線是模糊的，但一般來說，分散式檔案系統是被設計用在區域網路[1]，比較強調的是傳統檔案系統概念的延伸，並透過軟體方法來達成容錯。而分散式資料儲存，則是泛指應用分散式運算技術的檔案和資料庫等提供資料儲存服務的系統。



目錄


1 歷史
2 透通性
3 效能
4 同時更新檔案
5 CAP定理
6 參見
7 參考文件
8 外部連結



歷史[編輯]
第一個檔案伺服器在1970年代被發展出來。在1976年迪吉多公司設計出File Access Listener（英語：File Access Listener）（FAL）做為第二代DECnet（英語：DECnet）的一部分。這個系統實作了Data Access Protocol，是第一個被廣為使用的網路檔案系統。在1985年昇陽電腦建立了網路檔案系統（Network File System，NFS），這是第一個基於網際協議（Internet Protocol）而被廣泛使用的網路檔案系統。在相關技術的演進過程中，其他值得一提的網路檔案系統還有安德魯檔案系統（AFS）、Apple Filing Protocol（AFP）、NetWare核心協定（NCP）、和一般被稱為網路文件共享系統（CIFS）的伺服器訊息區塊（Server Message Block，SMB）等。
透通性[編輯]
分散式檔案系統通常都內建有透通性，讓實際上是透過網路來存取檔案的動作，由程式與使用者看來，就像是存取本地的磁碟一般。伺服器與儲存裝置之間的架構多樣性與分離性，因此被隱藏了起來。而定位檔案在系統中的位置與資料傳輸的機制，就有賴網路檔案系統的設計了。
效能[編輯]
一個普遍用來量測網路檔案系統效能的方式是：它需要用多少時間來完成服務請求？在傳統的系統中，完成請求所需要的時間包括了實際的硬碟存取時間，和一小部份的中央處理器處理時間。但在一個網路檔案系統中，由於分散式架構的關係，遠端存取動作會產生額外的經常性負擔（英語：Overhead），包括：把請求從客戶端送到伺服器端的時間、把回應從伺服器端傳回客戶端的時間、以及這兩個傳輸過程中用來執行網路傳輸協定的中央處理處時間。一個網路檔案系統的效能，可被視為是評估它透通性的一個維度，拿來與本地磁碟進行充分的對比。
同時更新檔案[編輯]
當多個使用者或客戶端同時存取並更新同一個檔案的時候，併發控制即會成為一個議題。一個客戶端對於檔案的更新，應該不能幹涉另一個客戶端對該檔案的存取與更新。並發控制或鎖定機制可以內建在檔案系統中，或是透過擴增協定來提供。
CAP定理[編輯]
著名的CAP定理指出：在一個分散式資料儲存架構中，資料的一致性（Consistency）、可用性（Availability）、和網路分隔的容忍程度（Partition tolerance）只能取二來做最佳化，無法三者兼具。當代的分散式資料儲存服務均是各自針對服務的內容和性質來作取捨，很難說有哪一個是通用的最佳解。
參見[編輯]

List of file systems, distributed file systems section
Ceph
Disk sharing
Distributed data store
FhGFS
Global filesystem
Gopher
GlusterFS
Lustre
MooseFS
OneFS
WebDAV
XtreemFS
HDFS
GFS
雲計算

參考文件[編輯]


^ Silberschatz, Galvin (1994). Operating System concepts, chapter 17 Distributed file systems. Addison-Wesley Publishing Company. ISBN 0-201-59292-4.


外部連結[編輯]

A distributed file system for distributed conferencing system ("A DFS for the DCS") by Philip S Yeager, Thesis, University of Florida, 2003.（pdf）





 
						取自“https://zh.wikipedia.org/w/index.php?title=分散式檔案系統&oldid=44401334”					
分類：分散式檔案系統數據管理分散式數據儲存網絡文件系統文件系統隱藏分類：使用ISBN魔術鏈接的頁面 



導航菜單


個人工具

沒有登錄討論貢獻創建賬戶登錄 



命名空間

條目
討論




不轉換



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






視圖

閱讀
編輯
查看歷史



更多







搜索



 







導航


首頁分類索引特色內容新聞動態最近更改隨機條目 



幫助


幫助維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



打印/導出


下載為PDF 



工具


鏈入頁面相關更改上傳文件特殊頁面打印頁面固定鏈接頁面信息維基數據項引用本頁 



其他語言


DeutschEnglishEspañolFrançaisItaliano日本語한국어PolskiPortuguêsRomânăУкраїнськаTiếng Việt 
編輯鏈接 





 本頁面最後修訂於2017年5月18日 (星期四) 05:28。
本站的全部文字在知識共享 署名-相同方式共享 3.0協議之條款下提供，附加條款亦可能應用。（請參閱使用條款）
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發者
Cookie聲明
手機版視圖



 

 









分散式檔案系統 - 維基百科，自由的百科全書






























 







分散式檔案系統

維基百科，自由的百科全書


					跳轉至：					導航，					搜索






相對於本機端的檔案系統而言，分散式檔案系統（英語：Distributed file system, DFS），或是網路檔案系統（英語：Network File System），是一種允許檔案透過網路在多台主機上分享的檔案系統，可讓多機器上的多使用者分享檔案和儲存空間。
在這樣的檔案系統中，客戶端並非直接存取底層的資料儲存區塊，而是透過網路，以特定的通訊協定和伺服器溝通。藉由通訊協定的設計，可以讓客戶端和伺服器端都能根據存取控制清單或是授權，來限制對於檔案系統的存取。
相對地，在一個分享的磁碟檔案系統中，所有節點對資料儲存區塊都有相同的存取權，在這樣的系統中，存取權限就必須由客戶端程式來控制。
分散式檔案系統可能包含的功能有：透通的資料複製（英語：replication (computer science)）與容錯（英語：fault tolerance）。也就是說，即使系統中有一小部份的節點離線，整體來說系統仍然可以持續運作而不會有資料損失（英語：data loss）。
分散式檔案系統和分散式資料儲存的界線是模糊的，但一般來說，分散式檔案系統是被設計用在區域網路[1]，比較強調的是傳統檔案系統概念的延伸，並透過軟體方法來達成容錯。而分散式資料儲存，則是泛指應用分散式運算技術的檔案和資料庫等提供資料儲存服務的系統。



目錄


1 歷史
2 透通性
3 效能
4 同時更新檔案
5 CAP定理
6 參見
7 參考文件
8 外部連結



歷史[編輯]
第一個檔案伺服器在1970年代被發展出來。在1976年迪吉多公司設計出File Access Listener（英語：File Access Listener）（FAL）做為第二代DECnet（英語：DECnet）的一部分。這個系統實作了Data Access Protocol，是第一個被廣為使用的網路檔案系統。在1985年昇陽電腦建立了網路檔案系統（Network File System，NFS），這是第一個基於網際協議（Internet Protocol）而被廣泛使用的網路檔案系統。在相關技術的演進過程中，其他值得一提的網路檔案系統還有安德魯檔案系統（AFS）、Apple Filing Protocol（AFP）、NetWare核心協定（NCP）、和一般被稱為網路文件共享系統（CIFS）的伺服器訊息區塊（Server Message Block，SMB）等。
透通性[編輯]
分散式檔案系統通常都內建有透通性，讓實際上是透過網路來存取檔案的動作，由程式與使用者看來，就像是存取本地的磁碟一般。伺服器與儲存裝置之間的架構多樣性與分離性，因此被隱藏了起來。而定位檔案在系統中的位置與資料傳輸的機制，就有賴網路檔案系統的設計了。
效能[編輯]
一個普遍用來量測網路檔案系統效能的方式是：它需要用多少時間來完成服務請求？在傳統的系統中，完成請求所需要的時間包括了實際的硬碟存取時間，和一小部份的中央處理器處理時間。但在一個網路檔案系統中，由於分散式架構的關係，遠端存取動作會產生額外的經常性負擔（英語：Overhead），包括：把請求從客戶端送到伺服器端的時間、把回應從伺服器端傳回客戶端的時間、以及這兩個傳輸過程中用來執行網路傳輸協定的中央處理處時間。一個網路檔案系統的效能，可被視為是評估它透通性的一個維度，拿來與本地磁碟進行充分的對比。
同時更新檔案[編輯]
當多個使用者或客戶端同時存取並更新同一個檔案的時候，併發控制即會成為一個議題。一個客戶端對於檔案的更新，應該不能幹涉另一個客戶端對該檔案的存取與更新。並發控制或鎖定機制可以內建在檔案系統中，或是透過擴增協定來提供。
CAP定理[編輯]
著名的CAP定理指出：在一個分散式資料儲存架構中，資料的一致性（Consistency）、可用性（Availability）、和網路分隔的容忍程度（Partition tolerance）只能取二來做最佳化，無法三者兼具。當代的分散式資料儲存服務均是各自針對服務的內容和性質來作取捨，很難說有哪一個是通用的最佳解。
參見[編輯]

List of file systems, distributed file systems section
Ceph
Disk sharing
Distributed data store
FhGFS
Global filesystem
Gopher
GlusterFS
Lustre
MooseFS
OneFS
WebDAV
XtreemFS
HDFS
GFS
雲計算

參考文件[編輯]


^ Silberschatz, Galvin (1994). Operating System concepts, chapter 17 Distributed file systems. Addison-Wesley Publishing Company. ISBN 0-201-59292-4.


外部連結[編輯]

A distributed file system for distributed conferencing system ("A DFS for the DCS") by Philip S Yeager, Thesis, University of Florida, 2003.（pdf）





 
						取自“https://zh.wikipedia.org/w/index.php?title=分散式檔案系統&oldid=44401334”					
分類：分散式檔案系統數據管理分散式數據儲存網絡文件系統文件系統隱藏分類：使用ISBN魔術鏈接的頁面 



導航菜單


個人工具

沒有登錄討論貢獻創建賬戶登錄 



命名空間

條目
討論




不轉換



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






視圖

閱讀
編輯
查看歷史



更多







搜索



 







導航


首頁分類索引特色內容新聞動態最近更改隨機條目 



幫助


幫助維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



打印/導出


下載為PDF 



工具


鏈入頁面相關更改上傳文件特殊頁面打印頁面固定鏈接頁面信息維基數據項引用本頁 



其他語言


DeutschEnglishEspañolFrançaisItaliano日本語한국어PolskiPortuguêsRomânăУкраїнськаTiếng Việt 
編輯鏈接 





 本頁面最後修訂於2017年5月18日 (星期四) 05:28。
本站的全部文字在知識共享 署名-相同方式共享 3.0協議之條款下提供，附加條款亦可能應用。（請參閱使用條款）
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發者
Cookie聲明
手機版視圖



 

 









分散式檔案系統 - 維基百科，自由的百科全書






























 







分散式檔案系統

維基百科，自由的百科全書


					跳轉至：					導航，					搜索






相對於本機端的檔案系統而言，分散式檔案系統（英語：Distributed file system, DFS），或是網路檔案系統（英語：Network File System），是一種允許檔案透過網路在多台主機上分享的檔案系統，可讓多機器上的多使用者分享檔案和儲存空間。
在這樣的檔案系統中，客戶端並非直接存取底層的資料儲存區塊，而是透過網路，以特定的通訊協定和伺服器溝通。藉由通訊協定的設計，可以讓客戶端和伺服器端都能根據存取控制清單或是授權，來限制對於檔案系統的存取。
相對地，在一個分享的磁碟檔案系統中，所有節點對資料儲存區塊都有相同的存取權，在這樣的系統中，存取權限就必須由客戶端程式來控制。
分散式檔案系統可能包含的功能有：透通的資料複製（英語：replication (computer science)）與容錯（英語：fault tolerance）。也就是說，即使系統中有一小部份的節點離線，整體來說系統仍然可以持續運作而不會有資料損失（英語：data loss）。
分散式檔案系統和分散式資料儲存的界線是模糊的，但一般來說，分散式檔案系統是被設計用在區域網路[1]，比較強調的是傳統檔案系統概念的延伸，並透過軟體方法來達成容錯。而分散式資料儲存，則是泛指應用分散式運算技術的檔案和資料庫等提供資料儲存服務的系統。



目錄


1 歷史
2 透通性
3 效能
4 同時更新檔案
5 CAP定理
6 參見
7 參考文件
8 外部連結



歷史[編輯]
第一個檔案伺服器在1970年代被發展出來。在1976年迪吉多公司設計出File Access Listener（英語：File Access Listener）（FAL）做為第二代DECnet（英語：DECnet）的一部分。這個系統實作了Data Access Protocol，是第一個被廣為使用的網路檔案系統。在1985年昇陽電腦建立了網路檔案系統（Network File System，NFS），這是第一個基於網際協議（Internet Protocol）而被廣泛使用的網路檔案系統。在相關技術的演進過程中，其他值得一提的網路檔案系統還有安德魯檔案系統（AFS）、Apple Filing Protocol（AFP）、NetWare核心協定（NCP）、和一般被稱為網路文件共享系統（CIFS）的伺服器訊息區塊（Server Message Block，SMB）等。
透通性[編輯]
分散式檔案系統通常都內建有透通性，讓實際上是透過網路來存取檔案的動作，由程式與使用者看來，就像是存取本地的磁碟一般。伺服器與儲存裝置之間的架構多樣性與分離性，因此被隱藏了起來。而定位檔案在系統中的位置與資料傳輸的機制，就有賴網路檔案系統的設計了。
效能[編輯]
一個普遍用來量測網路檔案系統效能的方式是：它需要用多少時間來完成服務請求？在傳統的系統中，完成請求所需要的時間包括了實際的硬碟存取時間，和一小部份的中央處理器處理時間。但在一個網路檔案系統中，由於分散式架構的關係，遠端存取動作會產生額外的經常性負擔（英語：Overhead），包括：把請求從客戶端送到伺服器端的時間、把回應從伺服器端傳回客戶端的時間、以及這兩個傳輸過程中用來執行網路傳輸協定的中央處理處時間。一個網路檔案系統的效能，可被視為是評估它透通性的一個維度，拿來與本地磁碟進行充分的對比。
同時更新檔案[編輯]
當多個使用者或客戶端同時存取並更新同一個檔案的時候，併發控制即會成為一個議題。一個客戶端對於檔案的更新，應該不能幹涉另一個客戶端對該檔案的存取與更新。並發控制或鎖定機制可以內建在檔案系統中，或是透過擴增協定來提供。
CAP定理[編輯]
著名的CAP定理指出：在一個分散式資料儲存架構中，資料的一致性（Consistency）、可用性（Availability）、和網路分隔的容忍程度（Partition tolerance）只能取二來做最佳化，無法三者兼具。當代的分散式資料儲存服務均是各自針對服務的內容和性質來作取捨，很難說有哪一個是通用的最佳解。
參見[編輯]

List of file systems, distributed file systems section
Ceph
Disk sharing
Distributed data store
FhGFS
Global filesystem
Gopher
GlusterFS
Lustre
MooseFS
OneFS
WebDAV
XtreemFS
HDFS
GFS
雲計算

參考文件[編輯]


^ Silberschatz, Galvin (1994). Operating System concepts, chapter 17 Distributed file systems. Addison-Wesley Publishing Company. ISBN 0-201-59292-4.


外部連結[編輯]

A distributed file system for distributed conferencing system ("A DFS for the DCS") by Philip S Yeager, Thesis, University of Florida, 2003.（pdf）





 
						取自“https://zh.wikipedia.org/w/index.php?title=分散式檔案系統&oldid=44401334”					
分類：分散式檔案系統數據管理分散式數據儲存網絡文件系統文件系統隱藏分類：使用ISBN魔術鏈接的頁面 



導航菜單


個人工具

沒有登錄討論貢獻創建賬戶登錄 



命名空間

條目
討論




不轉換



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






視圖

閱讀
編輯
查看歷史



更多







搜索



 







導航


首頁分類索引特色內容新聞動態最近更改隨機條目 



幫助


幫助維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



打印/導出


下載為PDF 



工具


鏈入頁面相關更改上傳文件特殊頁面打印頁面固定鏈接頁面信息維基數據項引用本頁 



其他語言


DeutschEnglishEspañolFrançaisItaliano日本語한국어PolskiPortuguêsRomânăУкраїнськаTiếng Việt 
編輯鏈接 





 本頁面最後修訂於2017年5月18日 (星期四) 05:28。
本站的全部文字在知識共享 署名-相同方式共享 3.0協議之條款下提供，附加條款亦可能應用。（請參閱使用條款）
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發者
Cookie聲明
手機版視圖



 

 








連線至 Hadoop 分散式檔案系統 (HDFS) (Power Query) - Excel









































































試用 Microsoft Edge
專為 Windows 10 設計、快速且安全的瀏覽器


不，謝謝
開始使用















Microsoft



Office









 無結果




0
 個項目在購物車中




登入








Office


購買 Office 365














支援







應用程式



Access
Excel
OneDrive
OneNote
Outlook
PowerPoint
SharePoint
商務用 Skype
Visio
Word



安裝


帳戶


訓練


系統管理










連線至 Hadoop 分散式檔案系統 (HDFS) (Power Query)




適用對象: 
Excel 2016
Excel 2013
Excel 2010
更多...
更少




 



重要: 
本文係由機器翻譯而成，請參閱免責聲明。本文的英文版本請見這裡，以供參考。


使用 Excel 的取得及轉換 (Power Query) 體驗，以連線至 Hadoop 分散式檔案系統 (HDFS)]。




2016
2010-2013









按一下 [資料] 索引標籤，然後取得資料>從其他來源>從 Hadoop 檔案 (HDFS)。如果您沒有看到 [取得資料] 按鈕，然後按一下 [新增查詢>從其他來源>從 Hadoop 檔案 (HDFS)。


在 [ Power Query功能區索引標籤中，選取 [從其他來源>從 Hadoop 檔案 (HDFS)。






在 [Hadoop 分散式檔案系統] 對話方塊中，輸入伺服器名稱。


選取 [確定]。




需要更多協助嗎？
您可以隨時詢問 Excel 技術社群中的專家、在 Answers 社群取得支援，或是在 Excel User Voice 上建議新功能或增強功能。
	

 



附註: 機器翻譯免責聲明︰本文係以電腦系統翻譯而成，未經人為介入。Microsoft 提供此等機器翻譯旨在協助非英語系使用者輕鬆閱讀 Microsoft 產品、服務及技術相關內容。基於本文乃由機器翻譯而成，因此文中可能出現詞辭、語法、文法上之錯誤。




請參閱

取得及轉換 Excel 2016 中


從外部資料來源匯入資料






























									擴展您的技能
								
探索訓練



									優先取得新功能
								
加入 Office 測試人員


















這項資訊有幫助嗎？


是
否




太好了! 還有其他意見反應嗎?
我們應該如何改進?



傳送​​
不，謝謝




感謝您的意見反應!


感謝您的意見反應! 我們將協助您與其中一位 Office 支援專員連絡以深入瞭解您的意見。

連絡客戶支援





×


















 

 








1.3. 分散式系統前一頁文件首頁1.3.1. 通訊1.3.2. 儲存環境1.3.3. 聚集網路下一頁1.3. 分散式系統
		要完全實現水平擴充能力，RHEL 使用了許多「分散式運算」（distributed computing）的元件。組成分散式運算的科技共分成以下三層：
	通訊
					水平擴充能力需要同步處理許多任務。因此，這些任務必須有「程序間的通訊能力」（interprocess communication）來協同運作。更進一步來說，擁有水平擴充能力的平臺應該能與其它系統共享任務。
				儲存裝置
					單靠本機儲存裝置並不足以解決水平擴充能力的需要。這需要一些分散式或共享式的儲存裝置，有著一層萃取層讓單一儲存捲冊的容量，可以透過任意增加儲存裝置而加大空間。
				管理
					分散式運算的最重要任務是「管理」。管理層會協調所有軟硬體元件，有效地管理通訊、儲存以及共享資源。
				
		以下章節將詳細討論這每一種技術。
	1.3.1. 通訊
		通訊層能確保資料傳輸，它包含了兩個部分：
	
				硬體
			
				軟體
			
		讓多台系統通訊的最簡單（也最快速）的方式，是透過「共享記憶體」（shared memory）通訊。這繼承了大家熟悉的記憶體讀、寫運作；跟傳統的記憶體讀寫運作比起來，共享記憶體擁有高頻寬、低延遲、以及低負載的好處。
	乙太網路
			電腦間最常見的通訊方式是透過乙太網路。時至今日，系統的預設網路為「GbE」（十億位元乙太網路，Gigabit Ethernet），且大部分伺服器都有二到四個 GbE 連接埠。GbE 的頻寬大、延遲低，是現代大部分分散式系統的基礎。就算系統擁有更快的網路硬體，使用 GbE 作為管理介面依舊是非常常見的作法。
		10GbE
			高階伺服器、甚至是中階伺服器，正在快速採用「10GbE」（百億位元乙太網路）技術。10GbE 的速度是 GbE 的十倍。它最大的好處是用於現代的多核心處理器時，可讓通訊與運算達到完美的平衡。您可以比較使用 GbE 的單核心系統、以及使用八核心的 10GbE 系統。後者在維護系統整體效能與避免通訊瓶頸上，特別能彰顯其價值。
		
		可惜的是，10GbE 依舊很昂貴。10GbE 的網路卡價格已經降下來，但其間的連接（特別是光纖）依舊很貴，而 10GbE 的網路交換器更是極端昂貴。我們可以預期隨著時間推演，價格會愈來愈低，但目前 10GbE 依舊廣泛用於機房的骨幹、以及對效能要求嚴苛的應用程式上。
	Infiniband
			Infiniband 的速度甚至比 10GbE 更快。除了 TCP/IP 與 UDP 網路透過乙太網路連接以外，Infiniband 也支援共享記憶體的通訊。這能讓 Infiniband 透過「RDMA」（遠端直接記憶體存取，remote direct memory access）與系統一起運作。
		
		使用 RDMA 能讓 Infiniband 將資料直接在系統之間移動，而不需要使用 TCP/IP 或 socket 來連線。也因此能降低延遲時間，這對一些應用程式來說至關重要。
	
		Infiniband 常見於「HPTC」（高效能科技運算，High Performance Technical Computing）的應用程式上，這種應用程式需要高頻寬、低延遲、以及低負載的環境。許多超級電腦上的應用程式都得益於此，跟花錢在更快的處理器、更多記憶體比起來，投資 Infiniband 是改善效能的最佳方式。
	RoCCE
			「RoCCE」（使用乙太網路的 RDMA，RDMA over Ethernet）將 Infiniband 類型的通訊（包括 RDMA）在 10GbE 架構上實作出來。隨著 10GbE 產品愈來愈普遍、價格愈來愈低，可以預期許多系統與應用程式都會更廣泛地運用 RDMA 與 RoCCE。
		
		Red Hat 支援以上這些通訊方法，並用在 RHEL 6 中。
	前一頁文件首頁1.3.1. 通訊1.3.2. 儲存環境1.3.3. 聚集網路下一頁



Cyberhood - 雲端案例












繁體中文 | 簡體中文 | English
















認識Cyberhood
社團及創新 / 小型企業
跨國營運企業






印像科技
華微半導體
萬能科技大學
旭光高中
南華大學
先啟資訊
成威股份有限公司
太平洋休閒會館
亞太產業經濟研究會
EGGroup







產品新訊
功能整合介紹
Wonder Box
廣告託播與智慧派送
『L-NET』服務
Cyberhood EIP
Cyberhood ERP
POS管理系統
飯店管理系統






使用前設定
應用教學影片
常見FAQ
操作手冊
售後服務
教育訓練






關於國尊
最新消息
代表性客戶
名人推薦
榮譽肯定
公司背景













雲端案例


分散式系統









分散式系統














Cyberhood是一個分散式系統，我們會替你在各個重要據點建立伺服器，每個伺服器儲存當地的資料，但是你的同仁可以存取遠在天邊的資料，因為我們的伺服器是完全有效的聯結起來了。




















某宗教團體在全球有200多個據點，過去為了互相連繫，只能每個人都個別去找一個郵件帳號（如gmail, Yahoo, hotmail, …等）零零碎碎的想辦法連絡，其中無法掌控的問題，層出不窮。
          CYBERHOOD 替他們建立了一個全球性的分散式管理系統，共有20台伺服器，分散在亞洲、澳洲、歐洲、美洲、及非洲，有2000多位使用者，他們的問題，Cyberhood幫忙解決了！不僅如此，他們更在Cyberhood 的分散式網路平臺上開發屬於他們自己專屬的應用程式，如捐款管理，信眾會員管理、會務管理、等等，使得全球據點得以同時連線作業。 




某半導體封裝廠在台灣和大陸都有工廠，現在Cyberhood幫他們建立了14個伺服器，他們的同仁即使在歐洲或美洲，也可以輕易地得到公司的資料。他們有400位在使用Cyberhood。




某醫療器材代理商，從事救命通路的醫療器材，不同於一般通路，對於醫院的需求一刻也不能等，很多醫院會忽然對於器材有緊急的需求，這家公司就要立刻有所反應。Cyberhood擴展了資訊傳遞的領域，讓經常在旅行的董事長能隨時知道公司每日進展，對於醫療和病人的情況，更可以在最短時差內解決，滿足在服務和系統上的最大需求。
          這家公司在美國和台灣都有據點，Cyberhood的分散式系統使這家公司的任一成員都能知道公司的情形。 




某建築設計公司所設計的建築分散在台灣和大陸各個地方，設計圖當然要存在各地，中央也要知道，而修改無可避免，但修改以後，整個公司必須知道。透過Cyberhood的分散式系統，即使是大量的圖檔，都可以很快地讓所有人在任何地方存取。




某公益團體專門替弱勢孩子補習功課，他們在南投縣、臺中縣、新竹縣、雲林縣、屏東縣和澎湖縣都有據點，他們不斷地發展新的教材，而新的教材也要能立刻傳播到每一個據點，Cyberhood的系統使這個團體的老師們隨時可以拿到新的教材，也可以將各地學生的學業資料送回總部




某大學名教授經常在國際性期刊發表專業的學術論文，這些論文都是和他的碩博士班研究生共同撰寫出來的，而且也和其他教授合寫專書，由於論文或專書在撰寫的過程中，都會不斷地在不同人手中做不同的修改，Cyberhood系統的版本控制使得大家可以依照有順序的模式來修改論文或專書，而且因為有留下所有的修改版本，所以也就可以隨時取得過去的版本。這位教授也經常出國或到不同的地方演講，Cyberhood系統也讓他在不同的地方隨時都可看到學生修改的論文，並為學生的論文做修改的指導。

















首頁 │ 隱私權政策 │ 客服信箱 │  最佳解析度1024*768 

上班時間：9:00am ~ 18:00pm  
服務電話：02-2236-9917
非上班時間/例假日 
	服務電話：0972-812224


    國尊科技股份有限公司    臺北市文山區木柵路一段52號3樓
傳真：02-2236-9927    E-mail：service@kinghood.com	 
	Copyright © 2011 Kinghood Technology Co.,Ltd. All rights reserved











何謂分散式系統? / 一般討論區 / 程式設計俱樂部




















 









討論區快速選單



討論區快速選單
= Programming =
- 
                                ASP
- 
                                Assembly
- 
                                C++
- 
                                C++ Builder
- 
                                COBOL
- 
                                Delphi
- 
                                Director
- 
                                Flash
- 
                                Fortran
- JavaScript
- J2SE
- J2ME
- J2EE/Servlet/JSP
- JBuilder
- Java入門一般區
- 
                                Kylix
- 
                                Mac
- 
                                Palm
- 
                                Perl
- 
                                PHP
- 
                                Power Builder
- 
                                UNIX/Linux
- 
                                Visual Basic/VBA
- 
                                VBScript
- 
                                Visual C++
- 
                                WinCE/eVB
- 
                                WinCE/eVC
- 
                                WML
- 
                                XML
= Mobile Programming =
- Android
- Intel AppUp
- iPhone
- Windows Phone 7
= Database =
- 
                                資料庫設計與應用
- 
                                SQL Language
- 
                                Access
- 
                                DB2
- 
                                SQL Server 2008
- 
                                SQL Server 2005
- 
                                SQL Server 7/2K
- 
                                MySQL
- 
                                Visual Foxpro
- 
                                Oracle
- 
                                Informix
= .NET =
- Visual Studio 2010
- Visual Studio 2008
- Silverlight技術
- 
                                .NET Framework
- 
                                ADO.NET
- 
                                ASP.NET
- 
                                C#
- 
                                VB.NET/VB 2005
- 
                                VC++.NET
= Game =
- 
                                遊戲人的天空
- 
                                遊戲程式設計
- Microsoft XNA
- 
                                DirectX
- 
                                OpenGL
= Web Server =
- 
                                IIS
- 
                                Apache Server
= 資訊工程與科學 =
- 
                                資訊工程與科學一般區
- 
                                資訊類系所入學考試
- 
                                影像處理與機算機圖學
= General =
- 
                                一般討論區
- 
                                COM/DCOM
- 
                                驅動程式
- 
                                嵌入式系統(Embedded System)
- 微軟系列認證考試區
- Java系列認證考試區
- 教育訓練與專業認證一般區
- 我的職涯規劃
-程式設計甘苦談
- 
                                HTML
- 
                                網路技術漫談
- 
                                新手入門
- 
                                物件導向
- 
                                系統分析與設計
- 
                                資訊類作業
= Windows =
- 
                                Windows 7
- 
                                Windows Vista
- 
                                Windows XP
- 
                                Win2K Sevrer
- 
                                Win2K Pro.
- 
                                Windows NT
= IT硬話題 =
- 電腦核心組件
- 電腦顯示週邊
- 電腦儲存裝置
- Notebook
- 網路技術與產品
- 電腦綜合討論區
= Jobs =
- 
                                外包接案經驗談
- 
                                個人工作室登錄
- 
                                企業人力需求
- 
                                企業外包案件
= Others =
- 
                                高手過招區
- 
                                科學園區停看聽
- 
                                二手電腦書
- 
                                好書推薦
- 
                                上班族哈拉園地
- 
                                通訊網路
- 關於Web 2.0
- IT 類研討會
- 
                                電腦相關笑話
- 
                                站務討論區
- 
                                資訊軟體產業討論
- 
                                關於Google的兩三事
= 熱門元件 =
- 
                                熱門元件一般區
- 
                                Crystal Reports




知識庫快速選單



知識庫快速選單
= Programming =
- 
                                ASP
- 
                                Assembly
- 
                                C++
- 
                                C++ Builder
- 
                                COBOL
- 
                                Delphi
- 
                                Director
- 
                                Flash
- 
                                Fortran
- JavaScript
- J2SE
- J2ME
- J2EE/Servlet/JSP
- JBuilder
- Java入門一般區
- 
                                Kylix
- 
                                Mac
- 
                                Palm
- 
                                Perl
- 
                                PHP
- 
                                Power Builder
- 
                                UNIX/Linux
- 
                                Visual Basic/VBA
- 
                                VBScript
- 
                                Visual C++
- 
                                WinCE/eVB
- 
                                WinCE/eVC
- 
                                WML
- 
                                XML
= Mobile Programming =
- Android
- Intel AppUp
- iPhone
- Windows Phone 7
= Database =
- 
                                資料庫設計與應用
- 
                                SQL Language
- 
                                Access
- 
                                DB2
- 
                                SQL Server 2008
- 
                                SQL Server 2005
- 
                                SQL Server 7/2K
- 
                                MySQL
- 
                                Visual Foxpro
- 
                                Oracle
- 
                                Informix
= .NET =
- Visual Studio 2010
- Visual Studio 2008
- Silverlight技術
- 
                                .NET Framework
- 
                                ADO.NET
- 
                                ASP.NET
- 
                                C#
- 
                                VB.NET/VB 2005
- 
                                VC++.NET
= Game =
- 
                                遊戲人的天空
- 
                                遊戲程式設計
- Microsoft XNA
- 
                                DirectX
- 
                                OpenGL
= Web Server =
- 
                                IIS
- 
                                Apache Server
= 資訊工程與科學 =
- 
                                資訊工程與科學一般區
- 
                                資訊類系所入學考試
- 
                                影像處理與機算機圖學
= General =
- 
                                一般討論區
- 
                                COM/DCOM
- 
                                驅動程式
- 
                                嵌入式系統(Embedded System)
- 微軟系列認證考試區
- Java系列認證考試區
- 教育訓練與專業認證一般區
- 我的職涯規劃
-程式設計甘苦談
- 
                                HTML
- 
                                網路技術漫談
- 
                                新手入門
- 
                                物件導向
- 
                                系統分析與設計
- 
                                資訊類作業
= Windows =
- 
                                Windows 7
- 
                                Windows Vista
- 
                                Windows XP
- 
                                Win2K Sevrer
- 
                                Win2K Pro.
- 
                                Windows NT
= IT硬話題 =
- 電腦核心組件
- 電腦顯示週邊
- 電腦儲存裝置
- Notebook
- 網路技術與產品
- 電腦綜合討論區
= Jobs =
- 
                                外包接案經驗談
- 
                                個人工作室登錄
- 
                                企業人力需求
- 
                                企業外包案件
= Others =
- 
                                高手過招區
- 
                                科學園區停看聽
- 
                                二手電腦書
- 
                                好書推薦
- 
                                上班族哈拉園地
- 
                                通訊網路
- 關於Web 2.0
- IT 類研討會
- 
                                電腦相關笑話
- 
                                站務討論區
- 
                                資訊軟體產業討論
- 
                                關於Google的兩三事
= 熱門元件 =
- 
                                熱門元件一般區
- 
                                Crystal Reports




















l 開發技術

程式語言

ASP
Assembly
C
C++ Builder
COBOL
Delphi
Director/Lingo
Flash/ActionScript
Fortran
Java入門一般區
JavaScript
J2SE
J2ME
J2EE
Kylix
Jbuilder
Perl
PHP
Power Builder
Visual Basic 6.0/VBA
Visual C++
VB Script
WinCE/eVB
WinCE/eVC
WML
XML


行動裝置

Android
iPhone
MeeGo
Windows Phone 7


Database

資料庫設計與應用
Access
DB2
SQL Server 7/2000
SQL Server 2005
SQL Server 2008
mySQL
Visual Foxpro
Oracle
SQL Language
Informix


.NET

VS2008
VS2010
.NET Framework
ADO.NET
ASP.NET
C#
VB.NET
VC++.NET


Game

遊戲人的天空
遊戲程式設計
DirectX
OpenGL
MS XNA


OS

Palm OS程式設計
Mac程式設計
Windows Vista
Windows XP
Win2k Server
Windows 2000 pro
Windows NT 4.0


Web Server

Apache Server
IIS Server


HTML/DHTML
COM/DCOM
驅動程式
嵌入式系統


l IT熱門話題

資訊工程與科學
資訊類系所入學考試
影像處理與計算機圖學
資訊類作業

教育訓練與專業認證一般區
微軟認證
Java認證

新手入門
程式設計甘苦談
我的職涯規劃

物件導向程式設計
系統分析與設計
IT研討會


l 輕鬆話題

一般不分類區
關於Google的兩三事
高手過招區
二手電腦書買賣交換
好書推薦
上班族的哈拉園地
外包接案經驗談
關於Web 2.0
電腦相關笑話
通訊網路
資訊軟體產業
站務留言板


l 知識庫
l 部落格
l 外包案件
l 接案人才
l 找工作
l IT研討會
l 職涯規劃
l 初學入門
l 好書票選
l 會員中心 l

















網路投保旅行平安險




前端後端都應該學的HTML5






















      [ 回上頁 ] [ 討論區發言規則 ]
      























何謂分散式系統?







					更改我的閱讀文章字型大小大
小



















	作者 :


loveorc2003(BK.)


[  貼文 1381 | 人氣 206151 | 評價 2670 | 評價/貼文 1.93 | 送出評價 712 次 ] 

		







		[ 給個讚 ] 
		
		[ 給個讚 ] 
		
		[ 回應本文 ] 
		
		[ 發表新文 ] 							        
			
		

		[ 回上頁 ]
		[ 回討論區列表 ]
		[ 回知識入口 ]
		










2004/9/12 上午 11:55:29

最近在書中常看到"分散式系統"這詞,所以上網查一下它的意思 ,但是大都是從英文"硬"翻下來的定義,不然就是一兩句代過,讓我對這詞的定義很籠統,模糊不清的感覺,不知各位是否可以用自己的話解釋一下或舉一下例子,還請各位指導一下........






















	作者 :


sunny_gong(simula)


[  貼文 892 | 人氣 45047 | 評價 7220 | 評價/貼文 8.09 | 送出評價 108 次 ] 

		







		[ 給個讚 ] 
		
		[ 給個讚 ] 
		
		[ 回應本文 ] 
		
		[ 發表新文 ] 							        
			
		

		[ 回上頁 ]
		[ 回討論區列表 ]
		[ 回知識入口 ]
		











2004/9/13 上午 12:45:24

完整的名稱應該是 Distributed Computing System，分散式運算系統。「分散式運算」是相對於「集中式運算」的。集中式運算就是只用一臺電腦，來處理所有的運算，運算愈繁重，電腦就要愈高級。分散式運算是將繁重的運算拆開成可以獨立完成的小部份，然後利用網路交付給個別的電腦去完成，運算結果則傳回來給主機去合併處理，運算愈繁重，網路上所需要的變腦愈多，但是配備不用太高級。






















	作者 :


loveorc2003(BK.)


[  貼文 1381 | 人氣 206151 | 評價 2670 | 評價/貼文 1.93 | 送出評價 712 次 ] 

		







		[ 給個讚 ] 
		
		[ 給個讚 ] 
		
		[ 回應本文 ] 
		
		[ 發表新文 ] 							        
			
		

		[ 回上頁 ]
		[ 回討論區列表 ]
		[ 回知識入口 ]
		










2004/9/15 下午 09:27:05

說的很詳細,感謝你的回應>完整的名稱應該是 Distributed Computing System，分散式運算系統。「分散式運算」是相對於「集中式運算」的。集中式運算就是只用一臺電腦，來處理所有的運算，運算愈繁重，電腦就要愈高級。分散式運算是將繁重的運算拆開成可以獨立完成的小部份，然後利用網路交付給個別的電腦去完成，運算結果則傳回來給主機去合併處理，運算愈繁重，網路上所需要的變腦愈多，但是配備不用太高級。








































                                         >  一般討論區 - 討論區










 - 最近熱門問答精華集



 - 全部歷史問答精華集




 - 
								                    
一般討論區 - 知識庫





　 ■ 全站最新Post列表





　 ■ 我的文章收藏


　 ■ 我最愛的作者


　 ■ 全站文章收藏排行榜


　 ■ 全站最愛作者排行榜
































　 ■ 
          
月熱門主題


　 ■ 
          季熱門主題


　 ■ 
          熱門主題Top 20


　 ■ 
          
本區Post排行榜


　 ■ 
          
本區評價排行榜





　 ■ 
          全站專家名人榜


　 ■ 
          
全站Post排行榜


　 ■ 
          
全站評價排行榜


　 ■ 
          
全站人氣排行榜















 請輸入關鍵字  



 
							




 
							
標題
內文

文章ID
作者暱稱















                        
 板主 : 
Jammy
	
	, simula







Top 10 評價排行

一般討論區









1

青衫
5370 



2

HKLN.net
1370 



3

冼鏡光
650 



4

simula
610 



5

joe
560 



6

DEMO999
520 



7

小朱
490 



8

jonay
480 



9

BlueTulip
460 



10

Jammy
370 
















































一般討論區







　
專家等級
評價
　


　
一代宗師
10000
　


　
曠世奇才
5000
　


　
頂尖高手
3000
　


　
卓越專家
1500
　


　
優秀好手
750
　


































迴首頁│本站大事記│得獎記錄│站長的話│本站板主群│贊助本站│意見信箱│板主登入│2006研討會│2005研討會│認識本站│廣告刊登






Microsoft Internet Explorer 
                  6.0. Screen 1024x768 pixel. High Color (16 bit).
                  2000-2017 程式設計俱樂部 http://www.programmer-club.com.tw/








































雲端計算(分散式系統) - WisdomFish - IT3.0 中庸學習之道






 








WisdomFish - IT3.0 中庸學習之道Search this site












My Main Blog link ...
老魚研究室(協作平臺連結)+ 開發者線上快速參考+ WisdomFish - TED+ MMORPG 遊戲開發與管理+ PostgreSQL 國際中文誌+ PostgreSQL DBA之研究+ 2G::Groovy.Grails+ 斯卡拉魚(ScalaFish)+ Java EE & SOA, Research- WisdomFish Python- 中山系統分析與設計研究平臺- 中山資管服務科學協作平臺- Hadoop雲端架構實作研究- 生劑藥物設計雲平臺計劃- WFish軟體工程研究所- 資訊超限科學(博士後研究)+ 老魚易經學習筆記(I-Ching)
留給下一代的新思維Introduction000.老魚研究室狀態To Do List關於老魚EDU X.0老魚: 樂之觀想房ADT/集合框架/泛型不可改變的集合容器?!GNU/LinuxLPIC認證考試VimGNU/Linux老魚焦點企業2.0::自由軟體GUI/RIAJAVA/SCA專業班CODE質量與文檔Java SyntaxOOP/UMLInterface整合開發環境(IDE)IntelliJ IDEA開發者線上參考文檔JAVA企業平臺(EE)EE ApplicationsJAVA新聞JVM槁本型語言JVM版本性能/管理JRE 32 BIT VS JRE 64 BITMacBook LogsMDA/UML/OCLDesign Patternsjava.text.DateFormat程序設計典範XML優秀的第三方APIs共時(並行)程序java.lang.Runnablejava.lang.ThreadJSR-166Package.java.util.concurrent創用CC版權宣告原始碼管理(SCM)Apache ivyapache ivyMac OS參考資源及文獻快速下載參考詞彙簡繁對照表持久層技術JDO時間與日期的亂象服務流程計算Apache Axis2Open Web Services ListService Design檔案系統/NIO.2生物資訊學(Bioinformatics)Glossary藥物設計計算當MIS走入歷史全球化開放標準的衝擊多點觸控技術硬體(Hardware)虛擬化(Virtualization)系統動力學(System Dynamics)SD - Google Inc.易理哲學(I-Ching)易經繫辭傳說卦傳經營策略與先秦思想道德經(Tao Te Ching)網路應用NetJetty註釋(Annotation)語言級探究(Scala)Refactor從有形進而無形Linux軟體專案管理孫子兵法/三略老魚Media感觸集貞觀政要The Last Castle 2001軟體估算金剛經雲端計算(分散式系統)Apache HadoopGoogle IT ResearchMapReduce分散式存儲系統雲端架構SitemapRecent site activity










本著作係採用創用 CC 「姓名標示─非商業性─禁止改作 2.5 台灣版」授權條款釋出。










Recent site activity道德經(Tao Te Ching)edited by (ChaoYi, Kuo) 郭朝益經營策略與先秦思想edited by (ChaoYi, Kuo) 郭朝益SD - Google Inc.attachment from (ChaoYi, Kuo) 郭朝益說卦傳edited by (ChaoYi, Kuo) 郭朝益SD - Google Inc.edited by (ChaoYi, Kuo) 郭朝益易經繫辭傳edited by (ChaoYi, Kuo) 郭朝益易理哲學(I-Ching)attachment from (ChaoYi, Kuo) 郭朝益edited by (ChaoYi, Kuo) 郭朝益系統動力學(System Dynamics)edited by (ChaoYi, Kuo) 郭朝益removed by (ChaoYi, Kuo) 郭朝益道德經(Tao Te Ching)removed by (ChaoYi, Kuo) 郭朝益經營策略與先秦思想removed by (ChaoYi, Kuo) 郭朝益View All




 



雲端計算(分散式系統)



 
        
        
        
      
        

        

      
        
        
      
        
        
      
          

雲端計算(Cloud Computing), 雲計算這個詞老魚想應該只有一半的人認為很有創新, 但在另一半的人心裡一定想說, 這不過是分散式叢集(Distributed Cluster)運算/網格(Grid)的舊瓶新裝, 也許是吧 ..., 但早年這方面的技術被商業型的大公司視為商業機密技術, 不同的公司也對 Computer Cluster 的定義與實作標準都不同, 這導致了幾個新問題：獨有的 Cluster 技術並非是最佳甚至友善程度高的系統受限於特定廠商的硬體架構實作研究的機會受到資源取得限制學習的成本困難與高昂非開放性的壟斷市場 那跟今日的 Cloud Computing 有何差別呢 ? 老魚能用來說服自己的有下列的幾點：隨著 Internet 佈網全球, 頻寬速度上不在是早年前的狀態, 分散式運算從 Local Site Cluster 變成以 Internet 的全球化佈局, 在當今最成功的案例就是以萬台為單位的 Google 最具代表性.實作研究的資源取得, 也逐漸變成一種顯學, 甚至也逐漸出了非正式的標準架構可供參與與實現.不同以往, 它伴隨著適用於此類系統的儲存系統來替代傳統關聯式資料庫的配套方案, 例如 Google 的 Bigtable, CODBMS(Columns-Oriented DBMS).學習的成本降低了, 建置成本可以學習如同Google一樣的方式, 只須一般的PC規格, 配合GNU/Linux, 就可以創造比高單價的伺服器來的有效率與效果.逐漸產生許多開放源始碼(OSS)的相關專案的發展與實作.
Contents1 Cloud Computing2 老魚研究團隊進展記錄 (Private)2.1 參與研究當前HR分配3 研究進展記錄4 相關系統分類5 反向思考的評論文章6 Google 機房帶來的省思7 News8 Stable Storge9 References9.1 Glossary
Cloud Computing
雲端運算-Google 2008臺北程式開發日
        
      
        
      
        
      
        
      
        
      
        
      是建立一個服務，你可以上去使用軟體應用但硬體更新與變動與您無任何的關係，您只需有個能上網的環境就行了.Service and Data in the cloud,using with browser.Large Scalability.老魚研究團隊進展記錄 (Private)(Private by Group, 當前人數: 11)老魚團隊以 Apache Hadoop Project 為實作研究對象, 老魚為何選 Hadoop 來當雲計算實作研究主題, 最主要的三點理由：Apache Licence 2.0老魚與我的團隊們, 全數人主專註於使用 Java / Linux / Mac OS.我們的目標為在 Hadoop 上堆疊自行開發的 Java 套件為方向, 並進行適當的改造 Hadoop 效能與管理為最終理想.有著龐大的開放社群Support.WisdomFish - Cloud Computing Researchhttp://of.openfoundry.org/projects/1234

參與研究當前HR分配統派指揮 * 2系統工程與安全研究 * 3HBase 欄位導向型DBMS * 3MapReduce * 7參與者當前認證資格總數：LPIC: 9 CCNA: 2SCJP: 7PostgreSQL: 1研究進展記錄應用程式開發實作議題 2009-05-24, 參與人數: 6Hadoop/HBase 問題討論與解決 - 2009-05-14, 參與人數: 6Hadoop - HBase / Bigtable論文導讀 - 2009-05-07, 參與人數: 6[分享製圖] 雲端計算中的資料儲存系統 HBase - 2009-04-30, 參與人數: 5[分享製圖] Hadoop 基礎安裝與簡要架構 - 2009-04-24, 參與人數: 5Cloud Computing 雲端計算 - 第一次實體聚會心得 - 2009-04-17, 參與人數: 6老魚的GAE測試站(Google Cloud)GAE/J相關系統分類序列式應用系統序列式應
用系統為大多數人們所使用的軟體類別，這類軟體系統係單獨於單一電腦上來執行運作。分散式應用系統分散式應用系統係運用多個計算引擎，可於單一或多部電腦上執行，並包含
多個不相互影響的工作。分散式應用系統，像是Monte Carlo
模擬系統，通常會以不同的輸入參數去不斷重複執行同一個演算法。平行式應用系統平行式應用系統同樣也運用在多個可於單一或多個電腦上執行的運算引擎，但平行式系統的工作
項目為獨立的且是在軟體執行時相互交換資料的。這些工作常會使用較大的資料集。 反向思考的評論文章談談所謂雲計算，也就那麼回事當雲飄到行動平臺當涉及到處理能力 ，行動硬體的性質還是限制了它的發揮。而手機自己要處理的事務越多，電池的壽命就愈加短命。提出了一個被稱為克隆雲（CloneCloud）的服務，這項新服務使用雲計算為移動電話提供額外的運算處理能力。克隆雲系統帶來的一個主要好處就是它可以極大的改善手機的性能。比如， Chun就製作了一個可以在執行照片面部識別的測試應用。在移動電話上，它的運行需要100秒。但是如果將任務交給電腦處理，完成同樣的任務只要1秒。Hadoop與Cache Pool 架構關係與區別Google 機房帶來的省思

Google神秘伺服器大公開 
        
      
        
      
        
      從2005年起，其資料中心加入了標準運輸貨櫃，每個都有1160台伺服器，耗電量可達250 千瓦特（kilowatts）。Jimmy Clidaras透露，該公司的資料中心核心是由標準1AAA貨櫃組成，每個貨櫃裡有1160台伺服器，每座資料中心都有好幾個貨櫃。YouTube看得到Google資料中心設計系統強韌到能把硬碟直接擺在地上，壞了就拔，想加就加，於是 Gmail
的容量才能不停地成長。今天，連主機都變成那樣了：房間就像一個機箱，簡化過的主板，直接搭在機架上，一格就可以多放好幾片。哪一片的指示燈有問題就下架
換新，也不必檢查了。而且現在聽說還能用機器人自動化地檢查抽換。

這樣的系統有什麼好處？除了維護成本下降之外，Google
還有一套專門操作這些主機群的代碼，開發者不必知道實際上會用到那一臺機器、多少台機器，只管做自己想做的計算就是了。一個例子是，有人把維基百科數據庫
抓回來做自然語言處理的相關研究，terabyte(兆)規模的資料，只消十幾分鐘便處理完畢。事後去看看到底用了多少運算資源？不多，一千台而已。

我在 P4 2G 的機器上，用普普通通 bi-gram 演算法，對megabyte(百萬)等級的中文維基語料進行斷詞，要...... 六小時。Google比利時數據中心無冷卻劑 靠室外空氣製冷 2009-07-16Google曾在今年春天公開討論過其無需冷卻劑的降溫裝置.該公司表示,根據比利時的氣候條件,每年只有7天左右無法使用自由冷卻方式.在比較炎熱的夏天,Google可以將該數據中心的計算任務轉移到其它數據中心中.Google幾乎可以即時性的在不同數據中心之間進行負載轉移,就如同在服務器之間移動數據一樣.Google喜歡把每個數據中心看作一個大機器.基於Azure雲計算平臺的網格計算，第1部分 作者  David Pallmann - 2009年8月27日News資料分散才是開發雲端應用的難處
- 2009/06/24IBM更新雲戰略和產品 作者  Dave West 譯者  黃璜 發佈於 2009年6月22日http://udn.com/NEWS/FINANCE/FIN3/4924559.shtmlStable StorgeDFSGFSHDFSKFSReferencesDistributed Systems, http://code.google.com/intl/zh-TW/edu/parallel/騰雲駕霧程式競賽 - 趨勢科技 2009-05~07GlossaryColumn-oriented_DBMSDocument-oriented_database





                  Showing 9 items
                



Full NameChinese Name-TWCN


Sort  Sort  Sort  




Full NameChinese Name-TWCNChunk server == Data Node   Chunk Size == Block Size   Cloud Computing 雲端計算 雲計算 DFS, Distributed File System 分散式檔案系統  Distribution File System 分散式檔案系統 分佈文件系統 GFS, Google File System   HDFS Hadoop DFS  Master == Name node   Parallel Computing 平行運算  


              Showing 9 items
            





            Subpages (5):

Apache Hadoop


Google IT Research


MapReduce


分散式存儲系統


雲端架構






Comments
















Sign in|Recent Site Activity|Report Abuse|Print Page|Powered By Google Sites














 Ascending   Descending   Ascending   Descending   Ascending   Descending  











 





分散式系統設計工具概觀









































Developer Network
Developer Network
Developer




登入




MSDN 訂閱




取得工具





















































很抱歉。您所要求的內容已遭移除。將會在 1 秒內自動重新導向。





Architecture 版
分散式系統設計工具使用者入門

分散式系統設計工具概觀





分散式系統設計工具概觀
分散式系統設計工具概觀




分散式系統設計工具概觀




分散式系統設計工具概觀

















分散式系統設計工具概觀 

跨分散式系統設計工具的工作流程 

分散式系統設計工具用語概觀 

系統定義模型 (SDM) 概觀 

系統定義模型 (SDM) 文件之間的關聯性 

跨系統定義模型 (SDM) 文件的同步處理 

受原始檔控制的系統定義模型 (SDM) 文件 



TOC

 
摺疊目錄
展開目錄




本文件已封存並已停止維護。








本文件已封存並已停止維護。


本文件已封存並已停止維護。

分散式系統設計工具概觀



                Visual Studio 2008
            






                        其他版本
                    







Visual Studio 2005





   更新：2007 年 11 月在 Visual Studio Team System Architecture 版中，[分散式系統設計工具] 是一組整合式圖形設計工具，可以協助應用程式架構設計人員、開發人員和基礎結構架構設計人員達到下列高階目標：記錄、視覺化及溝通應用程式設計和 DataCenter 執行階段環境設計部署的分散式應用程式系統在目標 DataCenter 中評估應用程式系統的部署利用原始程式碼維護和同步化應用程式設計圖表[分散式系統設計工具] 會支援下列軟體開發程序，以協助達到這些目標：設計、設定和實作組成應用程式系統之可重複使用的應用程式組成用於分散式系統案例中的應用程式系統代表為邏輯 DataCenter 的執行階段環境針對邏輯 DataCenter，定義並驗證應用程式和應用程式系統的部署若要支援這些程序，[分散式系統設計工具] 會讓架構設計人員和開發人員執行下列高階工作：應用程式設計工具在開發環境中，設計、以視覺化方式檢視、設定及實作應用程式。如需詳細資訊，請參閱使用應用程式設計工具設計應用程式。系統設計工具設計包含應用程式和其他系統的應用程式系統。如需詳細資訊，請參閱使用系統設計工具設計應用程式系統。Web 服務細節視窗設計和檢閱 Web 服務作業。如需詳細資訊，請參閱在應用程式圖表上定義 ASP.NET 應用程式。設定和條件約束編輯器指定應用程式和邏輯伺服器的設定和條件約束。如需詳細資訊，請參閱設定和條件約束編輯器。邏輯 DataCenter 設計工具代表為邏輯 DataCenter 的執行階段環境。如需詳細資訊，請參閱使用邏輯 DataCenter 設計工具表示 Datacenter。部署設計工具定義並驗證應用程式和應用程式系統的部署定義。如需詳細資訊，請參閱使用部署設計工具評估系統部署。[分散式系統設計工具] 會使用系統定義模型 (SDM) 做為基礎的 MetaModel。SDM 支援 Dynamic Systems Initiative (DSI)，可將企業設計、部署和操作分散式系統的方式予以簡化及自動化。如需詳細資訊，請參閱系統定義模型 (SDM) 概觀 並造訪 MSDN Online，網址為：http://go.microsoft.com/fwlink/?LinkId=49522。請參閱其他資源分散式系統設計工具逐步解說分散式系統設計工具使用者入門 



顯示:

受繼承
        

受保護
        







列印

匯出 (0)
            







列印

分享
            













本文內容
















© 2017 Microsoft









Elasticsearch分散式系統實務班




















資策會•數位教育研究所•科技化服務 (ITeS) 訓練中心


【資策會臺北課程】Big Data、物聯網系列課程
【Big Data課程】Big Data之處理與分析實務班
【Big Data課程】Big Data之處理與分析進階班
【Big Data課程】R軟體實作
【Big Data課程】R軟體與資料探勘
【Big Data課程】R軟體與資料視覺化
【Big Data課程】R軟體與網頁資料擷取應用
【Big Data課程】R軟體之金融大數據分析與應用
【Big Data課程】R軟體與Shiny Web應用程式設計
【Big Data課程】Python資料探勘實作
【Big Data課程】大數據分析-使用SparkR
【Big Data課程】Elasticsearch分散式系統實務班
【Big Data課程】Spark大數據分析實務班
【Big Data課程】網路爬蟲與Spark大數據流處理實務
【Big Data課程】文字資料探勘實作班
【Big Data課程】Big Data資料倉儲應用實務
【Big Data課程】整合Big Data與BI實戰班
【Big Data課程】大數據資料探勘與Weka分析
【Big Data課程】Cloud Computing 雲端運算國際認證班
【物聯網課程】物聯網規劃與應用實務班
【物聯網課程】物聯網營運與提案企劃實務班
【物聯網課程】物聯網工程師(EPCIE)國際認證班

							【主題館】資料科學家主題館

							【主題館】雲端運算課程主題館

							【主題館】服務科學主題館
 


















　




《9/16 開課，9/8前報名可享早鳥優惠！》





								「Weka大數據分析」課程，同步招生中！










 ◆ 課程源起









       還在想著要如何進行巨量資料(Big 
													Data)處理嗎？是否試過Hadoop、MapReduce，卻因為複雜的設定與學習門檻而不得其門而入呢？試試看Elasticsearch吧！
        
													Elasticsearch是由荷蘭開發者Shay 
													Banon所創造之開源分散式搜尋分析系統，由於其容易學習與架設，且同時具有很高的可擴充性(scalability)與可用性(availability)，以及極強的資料處理效能，因此近年來在資訊界非常熱門。國外各大型內容網站包含Facebook、紐約時報、英國衛報、Netflix也紛紛開始使用Elasticsearch來完成其內容搜尋與資料處理分析的工作。甚至有國外資深開發者表示「從業20年以來，從沒看過如此輕鬆易用的分散式系統！」
        
													Elasticsearch雖然剛開始只是以搜尋引擎做為起點，但現在已成為了一個非常成熟的資料運算叢集(cluster)系統。
        
													為了滿足業界需求，資策會特規劃「Elasticsearch分散式系統實務班」，本課程學員將學習到如何利用Elasticsearch，在五分鐘內輕鬆架設一個能夠處理十億筆以上資料的運算叢集，以及使用Elasticsearch完成一個分散式NoSQL資料庫或MapReduce叢集！讓你輕輕鬆鬆開始大數據分析、進入資料科學的領域！







◆ 課程目標









        
												本課程學員將學習如何架設與使用Elasticsearch叢集系統、熟悉Elasticsearch各項操作，並理解Elasticsearch運作原理與細節設定，並以實務方式讓學員瞭解如何透過Elasticsearch進行資料處理、分析與應用。








◆ 
預備知識











建議具基本網路知識，稍瞭解HTTP協定。


													建議程式設計基礎，有網路程式設計經驗者為佳。








◆ 招生對象











													IT經理或系統網路部門主管。


													專案經理、系統架構師或系統網路管理人員。


													企業或技術決策人員。


													對於雲端運算之大量資料處理、分析、應用有興趣者。








◆ 課程內容








   



課程單元 
課程內容





														Elasticsearch簡介


														■


														什麼是Elasticsearch
                                                         ■ 

														Cluster system簡介
                                                         ■ 

														Elasticsearch架設
                                                         ■ 

														Elasticsearch基礎使用






														Elasticsearch各項操作


														■


														資料建立與取出等基本操作：例如index、delete、update、search、get、bulk等




Elasticsearch搜尋功能


														■ 

														文字分析使用
                                                         ■ 

														進階搜尋
                                                         ■ 

														相關性與強化係數





														Elasticsearch分析功能


														■


														Aggregations
                                                         ■ 

														文件關聯性處理
                                                         ■ 

														資料模塑




Elasticsearch維護與管理


														■ 

														插件(plugins)的使用
                                                         ■ 

														監視叢集與資料健康狀況
                                                         ■ 

														整合Logstash與Kibana進行系統日誌分析


 課程執行單位保留調整課程內容與講師之權利    







◆ 課程時數








 2017年 


												9/16(六)、9/17(日)
												，每日 9:00~17:00上課，共二天，計14小時。







◆ 上課地點








資訊工業策進會數位教育研究所，臺北市信義路三段153號10樓。


												上課地點位於捷運大安站1號出口。
                                      * 上課地點與教室之確認，以上課通知函為主。







◆ 報名方式









本課程採線上報名，請按右方【我要報名】進入報名系統

課程諮詢：(02)6631-6533 課程經理 
												黃小姐，E-mail：julie620@iii.org.tw
												報名確認：(02)6631-6535 孫小姐，E-mail：chelseasun@iii.org.tw
 

 








◆ 課程費用與繳費









1.
本課程原費用NT$10,000元，費用含課程、講義及餐點。


2.


 凡於9月8日前完成報名與繳費資料之學員，可享特惠價 NT$8,000元 (含稅)。


3.

團報優惠：二人團報可打95折、四人團報可打9折優惠。


　






									●團報優惠與早鳥優惠可一併使用。


									●課程報名系統每個帳號僅提供一位學員報名，若為團報學員，每位皆必須完成線上報名，並於其他金額說明欄位註記「與XXX一起團報」，以利事後核對名單。


4.
請以信用卡或即期支票支付—


　
● 以信用卡支付者：請務必將正確信用卡資料填寫於繳費方式資料表。
● 以即期支票支付者：抬頭為「財團法人資訊工業策進會」， 劃線並禁止背書轉讓
                                               　 ，以掛號寄至臺北市106信義路三段153號9樓之1 邱小姐 收。








◆ 報名確認與取消









1.
已完成報名與繳費之學員，課程主辦單位將於開課三天前以E-mail方式寄發上課通知函；若課程因故取消或延期，亦將以E-mail方式通知，如未收到任何通知，敬請來電確認。


2.
已完成繳費之學員如欲取消報名，請於實際上課日前以書面通知業務承辦人，主辦單位將退還90% 課程費用。


3.
學員於培訓期間如因個人因素無法繼續參與課程，將依課程退費規定辦理之︰上課未逾總時數三分之一，欲辦理退費，可退還剩餘費用二分之一；上課逾總時數三分之一，則不退費。


4.
課程執行單位保留是否接受報名之權利。


5.

                                                             
												如遇不可抗拒之因素，課程主辦單位保留修訂課程日期及取消課程的權利。








◆ 
										餐點服務












												本課程上課期間，每天都會提供午餐，學員不需自行準備或額外付費。








◆ 結業證書









  依資訊工業策進會ISO品質系統之「教育訓練服務程序」規定，本課程為短期班，參訓學員缺課未超過總時數五分之一者，結業時由本會核發結業證書。








◆ 學習護照










資策會為人事行政局首批認證審定之民間學習機構，參加本課程之中小企業員工，亦可獲得「中小企業終身學習護照」認可之時數；此外，公務人員參加資策會課程，學習時數可登錄「公務人員終身學習護照」。








◆ 
										最低招生人數









 

												最低招生人數至少為10人，預計開班人數為25人。








◆ 
										相關課程









 

Big Data之處理與分析(Hadoop)實務班

Big Data之處理與分析(Hadoop)進階班

Big Data資料分析首部曲-R軟體實作

Big Data資料分析二部曲-R軟體與資料探勘

Big Data資料分析三部曲-R軟體與資料視覺化

R軟體與網頁資料擷取應用

R軟體之金融大數據分析與應用

R軟體與Shiny Web應用程式設計

Python資料探勘實作

大數據分析-使用SparkR

Elasticsearch分散式系統實務班

Spark大數據分析實務班

網路爬蟲與大數據流處理實務班

文字資料探勘實作班
















資訊工業策進會數位教育研究所  版權所有，禁止侵害，違者必究。
Copyright (c) 2013 III Digital Education Institute. All Rights
      Reserved 
