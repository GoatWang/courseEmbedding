


編譯器 - 維基百科，自由的百科全書






























 







編譯器

維基百科，自由的百科全書


					前往：					導覽，					搜尋









編譯器（Compiler），是一種電腦程式，它會將用某種程式語言寫成的原始碼（原始語言），轉換成另一種程式語言（目標語言）。
它主要的目的是將便於人編寫，閱讀，維護的高階電腦語言所寫作的原始碼程式，翻譯為電腦能解讀、執行的低階機器語言的程式，也就是執行檔。編譯器將原始程式（Source program）作為輸入，翻譯產生使用目標語言（Target language）的等價程式。原始碼一般為高階語言（High-level language），如Pascal、C、C++、C# 、Java等，而目標語言則是組合語言或目標機器的目的碼（Object code），有時也稱作機器碼（Machine code）。 一個現代編譯器的主要工作流程如下： 原始碼（source code）→ 預處理器（preprocessor）→ 編譯器（compiler）→ 組譯程式（assembler）→ 目的碼（object code）→ 連結器（Linker）→ 執行檔（executables）， 最後打包好的檔案就可以給電腦去判讀執行了。



目錄


1 歷史

1.1 教學用的編譯器


2 編譯器輸出
3 參考文獻
4 參見



歷史[編輯]
早期的電腦軟體都是用組合語言直接編寫的，這種狀況持續了數年。當人們發現為不同類型的CPU編寫可重用軟體的開銷要明顯高於編寫編譯器時，人們發明瞭高階程式語言。由於早期的電腦的記憶體很少，當大家實現編譯器時，遇到了許多技術難題。
大約在20世紀50年代末期，與機器無關的程式語言被首次提出。隨後，人們開發了幾種實驗性質的編譯器。第一個編譯器是由美國女性電腦科學家葛麗絲·霍普（Grace Murray Hopper）於1952年為A-0系統編寫的。但是1957年由任職於IBM的美國電腦科學家約翰·巴科斯（John Warner Backus）領導的FORTRAN則是第一個被實作出具備完整功能的編譯器。1960年，COBOL成為一種較早的能在多種架構下被編譯的語言。
高階語言在許多領域流行起來。由於新的程式語言支援的功能越來越多，電腦的架構越來越複雜，這使得編譯器也越來越複雜。
早期的編譯器是用組合語言編寫的。首個能編譯自己源程式的編譯器是在1962年由麻省理工學院的Hart和Levin製作的。從20世紀70年代起，實現能編譯自己源程式的編譯器變得越來越可行，不過還是用Pascal和C語言來實現編譯器更加流行。製作某種語言的第一個能編譯器，要麼需要用其它語言來編寫，要麼就像Hart和Levin製作Lisp編譯器那樣，用直譯器來執行編譯器。
教學用的編譯器[編輯]
編譯器的構造與最佳化是電腦專業的大學課程，[1]課程名稱一般為「編譯原理」或「編譯器」。通常在課程中包含瞭如何實現一種教學用程式語言的編譯器。一個著名的例子是20世紀70年代，瑞士計算機科學家尼克勞斯·維爾特（Niklaus Emil Wirth）用於講解編譯器的構造時使用的PL/0（英語：PL/0）編譯器。儘管它很簡單，PL/0編譯器介紹了這個領域的幾個有影響的概念：

逐步求精的程式開發（也是 1971年 Wirth 的論文的標題）[2]
使用遞迴下降解析器
使用EBNF指定語言的語法。
代碼生成器產生便攜P-code
在自舉問題的正式描述中使用T-diagram。

編譯器輸出[編輯]
編譯器的一種分類方式是按照生成代碼所執行的系統平臺劃分，這個平臺稱為目標平臺。
有一些編譯器輸出的代碼，將執行於與編譯器所在相同類型的電腦和作業系統之上，這種編譯器叫做本地編譯器。輸出可以執行於不同的平臺之上的編譯器，叫做交叉編譯器。由於嵌入式系統通常沒有軟體開發環境，因此，為這類系統開發軟體時，通常需要使用交叉編譯器。
編譯器所輸出於虛擬機器上執行之代碼，編譯器和編譯器輸出的執行平臺有可能相同，也有可能不同。因此，對於這類編譯器，不去區分它是本地編譯器還是交叉編譯器。
參考文獻[編輯]


^ Chakraborty, P., Saxena, P. C., Katti, C. P., Pahwa, G., Taneja, S. A new practicum in compiler construction. Computer Applications in Engineering Education, In Press. http://onlinelibrary.wiley.com/doi/10.1002/cae.20566/pdf
^ The ACM Digital Library. 


參見[編輯]

連結器
直譯器










閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。











權威控制



LCCN: sh86007588
GND: 4148248-7
BNF: cb120631538（資料）
NDL: 01191219
BNE: XX532454












 
						取自 "https://zh.wikipedia.org/w/index.php?title=編譯器&oldid=45249566"					
2 個分類：編譯器軟體程式設計工具隱藏分類：含有英語的條目含有德語的條目包含規範控制資訊的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AfrikaansAragonésالعربيةAsturianuAzərbaycancaتۆرکجهБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBosanskiCatalàکوردیČeštinaDanskDeutschZazakiΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiFrançaisGaeilgeGalegoעבריתहिन्दीHrvatskiHornjoserbsceMagyarՀայերենInterlinguaBahasa IndonesiaIlokanoÍslenskaItaliano日本語ქართულიҚазақша한국어КыргызчаLatinaLëtzebuergeschLietuviųLatviešuОлык марийМакедонскиമലയാളംBahasa MelayuMirandésမြန်မာဘာသာनेपालीNederlandsNorsk bokmålਪੰਜਾਬੀPolskiپنجابیPortuguêsRomânăРусскийScotsSrpskohrvatski / српскохрватскиSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSvenskaதமிழ்తెలుగుไทยTagalogTürkçeУкраїнськаاردوTiếng ViệtWinarayייִדישBân-lâm-gú 
編輯連結 





 本頁面最後修訂於2017年7月18日 (週二) 04:12。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 









線上編譯器 | Heresy's Space







































































Heresy's Space
Unlimited Blog Work



Search:








首頁
清單

Heresy 個人的系列文章

C++1x ／ Boost C++ Libraries 目錄
OpenNI / Kinect 相關文章目錄

OpenNI 1.x 教學文章
OpenNI 2.x 教學文章
Kinect for Windows v2 C++ 程式開發




產品使用感想
圖書清單
功能性網站
網誌封存

網誌封存：全標題列表




部落格更新進度
留言板
關於 Heresy

Heresy 現在電腦的配備一覽表


 

文章
迴響



　　
FaceBook
Google+
Twitter
PicasaWeb
Flickr
YouTube
 





← Intel 推出搭配 Creative Senz3D 的 Perceptual Computing SDK
[轉載] 台灣落入困境的根本原因 →



線上編譯器


2013/06/06
4 則迴響


一般來說，要進行程式開發，或多或少都需要建立一個開發環境，才能來做開發。不過，如果臨時需要測試一個簡單的語法能不能運作的時候，要為此弄一個開發環境，有的時候會有點麻煩。
而這一篇，算是簡單介紹兩款 Heresy 知道的兩個支援多種不同程式語言的線上編譯器。可以用來做一些簡單的程式開發時的測試。

compile online </> com

網站：http://www.compileonline.com/
除了一般像是 C++、C、C#、Java 等等語言外，也還支援 Matlb、R、SQLite SQL 等等～除了這些本機的程式外，他也支援網頁上的程式、或是標記語言，像是 HTML、CSS、JQuery、JQueryUI 等等。
要使用也相當簡單，只要選擇要測試的語言後，就可以在左邊輸入自己要測試的內容，然後按下左上方的按鈕（以 C++ 來說就是「Compile & Execute」），就會在右邊呈現結果了～

整個網站相當地乾淨、單純，對於自己要做測試來說，應該算是相當地便利～


ideone.com

網站：http://ideone.com/
一樣也是支援相當多總程式語言，C、C++、Go、Java 都有支援；另外，也支援 Node.js、SQL、PHP 等等。（還有支援 Text 是怎樣？ o_O）
使用方法，就是在左邊選擇要使用的語言後，在右邊輸入程式碼的內容後，按下左下方的送出就可以了～

相較於「compile online </> com」，ideone 多了不少廣告，版面看來比較雜；不過，他在送出程式碼後，是會有一個網址，可以把自己的程式碼、以及執行結果傳給別人看的～如果要給別人看自己寫的程式、或是要和別人討論程式碼，ideone 應該算是個不錯的選擇。


基本上，這兩者都算是可以簡單測試程式的網站。不過，他也是有它的限制的，像是以 C++ 來說，如果有用到其他函式庫，那基本上就沒戲唱了～他大致上，就是拿來做 C++ 標準語法、或是 STL 的測試了。
而實際上，「compile online </> com」和「ideone」兩者雖然都可以拿來測試程式碼，不過在本質上，應該算是有當的差異的。「compile online </> com」基本上就是為了測試程式碼而發展出來的，所以要修改、執行都相當地方便～
相較之下，ideone 應該算是以程式碼片段的分享，為主要訴求？Heresy 個人是覺得 ideone 在程式碼的編輯上，沒那麼好用；但是相對的，他提供可以分享的功能，則是「compile online </> com」所缺乏的功能！
總之，這算是兩個實用的工具網站，有需要的人，就記下來以備不時之需吧～
 

廣告






幫忙推廣一下吧！Tweet更多電子郵件列印在 Tumblr 上分享Pocket請按讚：喜歡 載入中...

相關





Filed under 程式設計, 網站
Tagged with 程式設計, 網站 



關於 Heresyhttps://kheresy.wordpress.com



4 Responses to 線上編譯器 


引用通告： 2017 年新年快樂！2016 部落格紀錄 | Heresy's Space




 Heresy says: 
2016/03/02 at 18:43
Visual C++ Web Compiler
http://webcompiler.cloudapp.net/
喜歡喜歡




回應 



引用通告： 2016 年新年快樂！2015 部落格紀錄 | Heresy's Space


引用通告： 微軟發表 Visual Studio 2013、Visual Studio Online 以及 Visual Studio 2012 Update 4 | Heresy's Space



發表迴響 取消回覆 



在此輸入你的回應…




在下方填入你的資料或按右方圖示以社群網站登入：





























 
 


電子郵件 (必) （電子郵件地址不會被公開）



名稱 (必)



個人網站














 您的留言將使用 WordPress.com 帳號。 ( 登出 / 變更 )












 您的留言將使用 Twitter 帳號。 ( 登出 / 變更 )












 您的留言將使用 Facebook 帳號。 ( 登出 / 變更 )












 您的留言將使用 Google+ 帳號。 ( 登出 / 變更 )




取消
連結到 %s




 透過電子郵件通知我後續回應。 有新文章時用Email通知我
 



 





分類分類
選擇分類
知識  (559)
   程式設計  (483)
      C++  (154)
      GPU  (143)
      Web  (26)
   立體顯示  (30)
部落格  (95)
   Space  (50)
   WordPress  (46)
雜談  (298)
   語錄  (234)
   想法  (48)
音樂  (227)
   英文歌  (9)
   日文歌  (192)
   中文歌  (29)
娛樂  (382)
   ARIA  (71)
   Key  (61)
   模型  (78)
心情、雜記  (177)
   軍旅筆記  (13)
旅遊  (428)
   秀照片  (120)
   遊記  (246)
未分類  (62)
介紹  (1,524)
   3C  (882)
      相機  (27)
      電腦類  (541)
      行動裝置  (245)
   網站  (131)
   飲食  (179)
   財務  (24)
   圖書  (89)
      日本小說  (33)
      歐美小說  (24)
      中文書  (3)
   交通相關  (178)
      機車  (138)


公告 
本部落格文章基本上大多都是 Heresy 自己寫的，如果要轉載 Heresy 的文章，麻煩也在轉載的同時，加註上出處、也就是 Heresy 文章的原始網址。
如果是轉載來的，Heresy 應該都有註明出處；如果您覺得任何文章有侵犯到您的權益，麻煩請告知 Heresy、Heresy 會盡快處理。

此刻音樂

遊戲《White Album 2》插入曲《Twinkle Snow》
Heresy 的碎碎念

				結果把中信 AE 卡剪了，辦了兆豐的網路購物卡 XD 				5 hours ago


				附相框的底座：Action Base 3  kheresy.wordpress.com/2017/07/20/act… https://t.co/nOH9rVxolG 8 hours ago


				告別斷線，捷運車廂有 WiFi！北捷免費網路年底前全面升級 
  inside.com.tw/2017/07/20/tai…
其他城市繼續遠目 				9 hours ago


				Lenovo 自己的 AR 頭戴裝置也來了  chinese.engadget.com/2017/07/20/len… 來自 @EngadgetChinese 10 hours ago


				效法 Gogoro？中華 e-Moving 也推 299 元電池月租方案  techbang.com/posts/52696-e-…
@@ 				11 hours ago


				Lenovo reveals AR headset and other ambitious AI concepts  engadget.com/2017/07/20/len… 來自 @engadget 13 hours ago


				全球量子互聯網的突破，科學家成功在地面和衛星之間建立量子糾纏連結  techbang.com/posts/52508-gl… 13 hours ago

標籤集合3D立體
ACGN
Android
ARIA
ASUS
BANDAI
Boost
C++
C++0x/C++11
cosplay
CUDA
Depth Sensor
Google
GPGPU
K4W v2
Key
Kinect
Kinect for Windows
Microsoft
natural interaction
nVIDIA
OpenCL
OpenNI
OpenNI2
RV250
Sony
SYM
VisualStudio
Windows
Windows Live
WordPress
xperia u
Xperia Z1 Compact
使用感想
動畫
臺北
圖書
娛樂
小說
山
平行計算
惡搞
想法
手機
推薦
新竹
新聞
旅行
日式料理
桃園
模型
機車
活動
海
深度感應器
漫畫
相機
科學
程式設計
筆記電腦
網站
網頁
苗慄
螢幕
語錄
軟體
遊戲
鋼彈
開箱文
電腦相關
音樂
風力發電
風景
飲食
體感近期迴響 
「Heresy」對「Heresy 的 Android Pay 使用感想」留言「附相框的底座：Action Base 3…」對「RG 版 GUNDAM Astray Red Frame：P…」留言「附相框的底座：Action Base 3…」對「RG Wing Gundam Zero EW –…」留言「附相框的底座：Action Base 3…」對「RG Freedom Gundam 底座、貼紙」留言「附相框的底座：Action Base 3…」對「萬代便宜的底座：Action Base Mini」留言「Alex Lin」對「Heresy 的 Android Pay 使用感想」留言「自行使用 VisualStudio 建置…」對「使用 Qt 撰寫影片播放程式的一些紀錄」留言「Heresy」對「用手勢控制電腦：HandGKET」留言「Bean」對「用手勢控制電腦：HandGKET」留言「小菜很多的大目黑 山寨飯 | Heres…」對「新竹林森路立體停車場、晶品城購物廣場」留言 
熱門文章 

						查詢誰打來的電話：whoscall 網頁版					



						解決 Windows 10 無法切換語系、輸入中文的問題					



						將安裝好的 Windows 改成 UEFI 開機					



						線上編譯器					



						C++ 的多執行序程式開發 Thread：基本使用					



						尚順：i-Ride 進擊的巨人體驗感想					



						Windows 8 惹人厭的輸入法切換					



						象印 NP-YT10 簡單開箱					



						門號換成中華電信 4G 預付卡了～					



						kobo aura ONE 電子書試用感想					






  Heresy 

部落格統計 
7,387,923 次

 

 本部落格文章基本上大多都是 Heresy 自己寫的，如果是轉載來的，Heresy 都會有註明出處。
如果要轉載 Heresy 的文章，麻煩也在轉載的同時，加註上出處、也就是 Heresy 文章的原始網址。
Google
 





























張貼到



取消







 












傳送到電子郵件地址

你的姓名

你的Email






取消

				文章沒有送出-請確認你的Email位置			

				Email確認失敗,請稍後再試.			

				抱歉，你的網誌無法透過電子郵件分享			


 








 
 
%d 位部落客按了讚：








































































































































編譯器與直譯器的差別？ | Yahoo奇摩知識+




















 









   ⌂首頁信箱新聞股市名人娛樂氣象運動App下載購物中心商城拍賣更多⋁知識+汽車機車電影字典遊戲旅遊理財房地產時尚美妝折扣城   Yahoo 奇摩知識+                        👤 登入    ✉ 信箱     ⚙ 服務說明    帳號資料 服務說明 意見回報        
















Yahoo奇摩知識+ 首頁











所有分類
 
健康
 
商業與財經
 
娛樂與音樂
 
家居與園藝
 
家庭與人際關係
 
寵物
 
懷孕與育兒
 
政治與政府
 
教育與參考
 
新聞與活動
 
旅遊
 
汽車與交通
 
消費電子產品
 
環境
 
社會科學
 
社會與文化
 
科學
 
美容與造型
 
藝術與人文
 
遊戲與休閒活動
 
運動
 
電腦與網際網路
 
食品與飲料
 
餐廳與小吃
 





世界Yahoo 








阿根廷





澳洲





巴西





加拿大





法國





德國





印度





印尼





義大利





馬來西亞





墨西哥







紐西蘭





菲律賓





魁北克





新加坡





香港





西班牙





泰國





英國與愛爾蘭





美國





越南





西班牙文







關於





關於 Yahoo奇摩知識+
社群指南
排行榜
點數與等級
部落格
如何安全地使用 Yahoo奇摩

 








 電腦與網際網路

 程式設計


 看另一則問題 










            編譯器與直譯器的差別？
        


在上Java課的時候，老師有說過，但是我還是搞不清楚，我想了半天還是不是很了，所以我想問，直譯器，直譯器這兩個功能上的差異點，不是兩個都是程式，翻譯成電腦看的懂的機器語言嗎？差別到底在哪？適合在哪用咧？煩請電腦程式設計高手解惑！





 
追蹤 


 
 1 個解答 
1


檢舉不當使用









您確定要刪除此解答嗎？
是
否












 









抱歉，似乎發生一些問題。



Trending Now





 

解答














最佳解答: 
             編譯器(Compiler)：採用整批作業（Batch）方式來處理程式轉譯的工作，編譯器會將翻譯結果存成一個目的檔（object file），而這個目的檔可經由連結其他目的檔及程式庫之後形成可執行檔（execute file），並由電腦直接執行常見的編譯式程式語言有C、COBOL、PASCAL等。利用編譯器所編譯出來的程式，執行效率遠高於直譯程式。 

直譯器(Interpreter)：使用直譯器來翻譯程式的過程中，不需要產生目的檔，直譯器會將程式一行一行的讀入，並且逐行翻譯，並送交由電腦執行。編譯器形成可執行檔其執行速度快，但中間過程較為耗時繁瑣；直譯器其執行速度慢，但中間過程較為簡單利用這種方式完成的程式語言，最著名的就屬BASIC。 




 參考資料： 
 


兩光大師
 · 12 年前 





0
真讚



0
真遜





檢舉不當使用


意見





 




新增意見











送出












 · 剛才不久













                  發問者的評分
                







 

檢舉不當使用

 我認為此問題違反社群指南 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此問題違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此解答違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此解答違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消




檢舉不當使用

 我認為此意見違反社群規範 
聊天或爭嚷、成人內容、垃圾信、侮辱其他成員、顯示更多
我認為此意見違反服務條款
對未成年兒童有害、帶有暴力或脅迫意味、騷擾或侵犯隱私權、假冒或不實陳述、欺詐或網路釣魚、 顯示更多

其他詳細資料

若您認為自己的智慧財產權受到侵害，並想提出申訴，請參閱我們的版權/智慧財產權政策

檢舉不當使用


取消



 

你可能對以下搜尋感興趣：


高效率學習程式設計

防毒軟體為您抵擋病毒攻擊

揉捏按壓在家輕鬆舒緩疲勞

海外代購超輕鬆












發問問題
通常可在幾分鐘內獲得解答！







展開»






詳細資料



詳細資料






現有問題




更多





請多詳述您的問題
上傳處理中




上傳失敗。 請上傳大於 100x100 像素的檔案
目前發生問題，請再試一次。
您只能上傳 PNG、JPG 或 JPEG 等類型的檔案。
您只能上傳 3GP、3GPP、MP4、MOV、AVI、MPG、MPEG 或 RM 等類型的檔案。
您只能上傳不超過 5 MB 的相片。
您只能上傳不超過 600 MB 的影片。
您只能上傳相片 (png, jpg, jpeg) 或影片 (3gp, 3gpp, mp4, mov, avi, mpg, mpeg, rm)。
您只能上傳相片或影片。
影片不應超過 <b>600mb/5 分鐘</b>
相片不應超過 <b>5mb</b>
影片不應超過 <b>600mb/5 分鐘</b>相片不應超過 <b>5mb</b>
  







解答問題


關於matlab矩陣問題 如果我隨機產生一個01矩陣例如：aa=round(rand(10,10))後 我想要將產生的aa某些座標強制為1，我該如何寫~~~ 感謝各位大大幫忙答覆~~~~~?



 

公司想整個網頁,有無咩網頁公司推薦?



 

需高手指導，PCI Express windows driver in VC++ or MFC or Qt tool?



 

公司想搵網頁設計公司重做網頁?



 


發燒問題




如何用EXCEL亂數產生210~230之間的亂數,間距為5
210、215、220、225---?

                  6 個解答
              

 

想自學遊戲設計，有什麼書籍是可以買來自己看的?

                  7 個解答
              

 

Dreamweaver做完為什麼是file:///C:/Users/.......，怎麼把它改掉?

                  5 個解答
              

 
更多問題





本人想學程式語言 但這方面什麼都不懂 什麼迴圈阿 函數之類的 請問有什麼方法可以入門程式語言嗎?

             5 個解答
         

 

誰能認真教我做出一個簡單的網站
稍微設計一點程式就好了
要交大學專題用的
可以一步一步交的
會給回饋?

             5 個解答
         

 

想請問去職訓局學程式設計 對就業上的幫助?

             7 個解答
         

 

  








服務條款


隱私權


RSS


















直譯器 - 維基百科，自由的百科全書






























 







直譯器

維基百科，自由的百科全書


					前往：					導覽，					搜尋















中國大陸
解釋器


港臺
直譯器


直譯器（英語：interpreter），是一種電腦程式，能夠把高階程式語言一行一行直接轉譯執行。直譯器像是一位「中間人」，每次執行程式時都要先轉成另一種語言再作執行，因此直譯器的程式運行速度比較緩慢。它不會一次把整個程式轉譯出來，而是每轉譯一行程式敘述就立刻執行，然後再轉譯下一行，再執行，如此不停地進行下去。
直譯器的好處是它消除了編譯整個程式的負擔，程式可以拆分成多個部分來模組化，但這會讓執行時的效率打了折扣。相對地，編譯器已一次將所有原程式碼翻譯成另一種語言，如機器碼，執行時便無需再依賴編譯器或額外的程式，故而其運行速度比較快。



目錄


1 歷史
2 直譯器與編譯器
3 位元組碼直譯器
4 即時編譯
5 一個簡單的直譯器的例子
6 打孔卡讀卡機
7 有使用直譯器的電腦程式語言
8 參見
9 外部連結



歷史[編輯]
第一個直譯器是由史帝芬·羅素（Steve Russell）寫成的LISP的直譯器，基於IBM 704的機器碼。
直譯器與編譯器[編輯]
直譯器執行程式的方法有：

直接執行高階程式語言（如Shell內建的直譯器）
轉換高階程式語言碼到一些有效率的位元組碼（Bytecode），並執行這些位元組碼
以直譯器包含的編譯器對高階語言編譯，並指示處理器執行編譯後的程式（例如：JIT）

Perl，Python，MATLAB，與Ruby是屬於第二種方法，而UCSD Pascal則是屬於第三種方式。在轉譯的過程中，這組高階語言所寫成的程式仍然維持在原始碼的格式（或某種中繼語言的格式），而程式本身所指涉的動作或行為則由直譯器來表現。
使用直譯器來執行程式會比直接執行編譯過的機器碼來得慢，但是相對的這個直譯的行為會比編譯再執行來得快。這在程式開發的雛型化階段和只是撰寫試驗性的程式碼時尤其來得重要，因為這個「編輯-直譯-除錯」的循環通常比「編輯-編譯-執行-除錯」的循環來得省時許多。
在直譯器上執行程式比直接執行編譯過的程式碼來得慢，是因為直譯器每次都必須去分析並轉譯它所執行到的程式行，而編譯過的程式就只是直接執行。這個在執行時的分析被稱為"直譯式的成本"。在直譯器中，變數的存取也是比較慢的，因為每次要存取變數的時候它都必須找出該變數實際儲存的位置，而不像編譯過的程式在編譯的時候就決定好了變數的位置了。
在使用直譯器來達到較快的開發速度和使用編譯器來達到較快的執行進度之間是有許多妥協的。有些系統（例如有一些LISP）允許直譯和編譯的程式碼互相呼叫並共享變數。這意味著一旦一個子程式在直譯器中被測試併除錯過之後，它就可以被編譯以獲得較快的執行進度。許多直譯器並不像其名稱所說的那樣執行原始程式碼，反而是把原始程式碼轉換成更壓縮的內部格式。舉例來說，有些BASIC的直譯器會把保留字取代成可以用來在轉移表中找出相對應指令的單一位元組符號。直譯器也可以使用如同編譯器一般的文字分析器和語法分析器然後再轉譯產生出來的抽象語法樹。
可攜性佳，直譯式程式相較於編譯式程式有較佳的可攜性，可以容易的在不同軟硬體平臺上執行。而編譯式程式經過編譯後的程式則只限定於執行在開發環境平臺。
位元組碼直譯器[編輯]
考量程式執行之前所需要分析的時間，存在了一個介於直譯與編譯之間的可能性。例如，用Emacs Lisp所撰寫的原始碼會被編譯成一種高度壓縮且最佳化的另一種Lisp原始碼格式，這就是一種位元組碼（bytecode），而它並不是機器碼（因此不會被綁死在特定的硬體上）。這個"編譯過的"碼之後會被位元組碼直譯器（使用C寫成的）轉譯。在這種情況下，這個"編譯過的"碼可以被說成是虛擬機器（不是真的硬體，而是一種位元組碼直譯器）的機器碼。這個方式被用在Open Firmware系統所使用的Forth程式碼中：原始程式將會被編譯成"F code"（一種位元組碼），然後被一個特定平臺的虛擬機器直譯和執行。
即時編譯[編輯]
主條目：即時編譯
即時編譯（Just-in-time compilation）是指一種在執行時期把位元組碼編譯成原生機器碼的技術;這項技術是被用來改善虛擬機器的效能的。該技術在近幾年來才開始獲得重視，而它後來模糊了直譯、位元組碼直譯及編譯的差異性。在.NET和Java的平臺上都有用到JIT的技術。大約在1980年代Smalltalk語言出現的時候JIT的技術就存在了。
一個簡單的直譯器的例子[編輯]
在文學編程文章中有一個簡單的程式和一個直譯器。
打孔卡讀卡機[編輯]
「interpreter」這個字眼有時候是指一些可以讀取打孔卡的機器。這些機器可以讀取卡片上的孔並以人們讀得懂的格式列印出來。IBM 550數字讀卡機和IBM 557字母讀卡機是主要的兩個例子。
有使用直譯器的電腦程式語言[編輯]

AWK
BASIC
JavaScript
LISP
Shell
Perl
Prolog
Ruby
Python
PHP Hypertext Preprocessor

參見[編輯]

partial evaluation（英語：partial evaluation）
直譯語言
編譯語言
dynamic compilation（英語：dynamic compilation） including the section on incremental compilation.
Threaded code（英語：Threaded code）, a compact form of code that depends on a simple interpreter.
Metacircular Interpreter（英語：Metacircular Interpreter）

外部連結[編輯]

IBM Card Interpreters page at Columbia University

http://www.naati.com.au. find an interpreter in Australia








閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。






本條目部分或全部內容出自以GFDL授權發布的《自由線上電腦詞典》（FOLDOC）。




 
						取自 "https://zh.wikipedia.org/w/index.php?title=直譯器&oldid=45212072"					
6 個分類：電腦語言系統軟體編譯原理程式設計工具軟體工程電腦編程隱藏分類：含有來自FOLDOC內容的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


العربيةAzərbaycancaБългарскиবাংলাBosanskiCatalàČeštinaDanskDeutschΕλληνικάEnglishEspañolEestiEuskaraفارسیSuomiFrançaisGaeilgeGalegoעבריתHrvatskiMagyarՀայերենBahasa IndonesiaIlokanoÍslenskaItaliano日本語한국어КыргызчаLietuviųBahasa MelayuMirandésNederlandsNorsk bokmålਪੰਜਾਬੀPolskiPortuguêsRomânăРусскийScotsSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSvenskaதமிழ்ไทยTürkçeУкраїнськаاردوTiếng ViệtBân-lâm-gú 
編輯連結 





 本頁面最後修訂於2017年7月15日 (週六) 12:38。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 








編譯器選項













































Developer Network
Developer Network
Developer




登入




MSDN 訂閱




取得工具





















































很抱歉。您所要求的內容已遭移除。將會在 1 秒內自動重新導向。





建置 C/C++ 程式
C/C++ 建置參考

編譯 C/C++ 程式





編譯 C/C++ 程式
編譯器選項




編譯器選項




編譯器選項

















設定編譯器選項 

編譯器選項 

依分類排列的編譯器選項 

依字母順序排列的編譯器選項 

建立先行編譯標頭檔 

編譯器和連結器中的 Unicode 支援 



TOC

 
摺疊目錄
展開目錄




本文件已封存並已停止維護。



本文件已封存並已停止維護。


編譯器選項



                Visual Studio 2015 
            






                        其他版本
                    







Visual Studio 2013 


Visual Studio 2012


Visual Studio 2010


Visual Studio 2005






 如需 Visual Studio 2017 的最新文件請參閱 Visual Studio 2017 文件。cl.exe 是控制 Microsoft C 和 C++ 編譯器和連結器的工具。cl.exe 在支援 Microsoft Visual Studio 的作業系統上才能執行。 註意 
您只能從 Visual Studio 命令提示字元啟動這個工具。  您不能從系統命令提示字元或從檔案總管來啟動它。編譯器會產生通用物件檔案格式 (Common Object File Format，COFF) 的目的檔 (.obj)。  連結器會產生可執行檔 (.exe) 或動態連結程式庫 (DLL)。請註意，所有編譯器選項都必須區分大小寫。若只要編譯而不要連結，請使用 /c。尋找選項若要尋找特定的編譯器選項，請參閱下列兩種清單：依字母順序排列的編譯器選項依分類排列的編譯器選項指定選項每一項編譯器選項的主題都會討論如何在開發環境中設定。  如需如何在開發環境外部指定選項的詳細資訊，請參閱：編譯器命令列語法CL 命令檔CL 環境變數相關組建工具使用 NMAKE 建置 (Build) 您的輸出檔。使用 BSCMAKE 支援類別瀏覽。連結器選項也會影響程式建置的方式。請參閱C/C++ 建置參考設定編譯器選項快速編譯CL 叫用連結器





顯示:

受繼承
        

受保護
        







列印

匯出 (0)
            







列印

分享
            













本文內容




















本頁對您有幫助嗎？
是
否





其他意見反應？


剩餘 1500 個字元

提交
略過此項







謝謝！
我們非常感謝您提供的意見反應。










© 2017 Microsoft



















編譯器 - OpenFoundry












































登入 &nbsp|  English





 專案 
 文章 
 人才 




 














			    				首頁				   
				





			    				專案				   
				





			    				Who's Who				   
				





			    				新聞				   
				





			    				法律源地				   
				





			    				活動				   
				





			    				資源表列				   
				





			    				關於				   
				




















資源表列
程式開發
程式語言
Python
編譯器














什麼是資源表列?


OpenFoundry 蒐集與自由軟體相關的連結資訊並將其分類，供您依此資源目錄架構，循序深入自由軟體豐富的應用世界。若此分類下發現有任何問題及建議，非常歡迎您協助我們改進，請寄至contact@openfoundry.org。						














編譯器
 Listings


結果 1 - 4 共 4


IronPython

IronPython 是一種在 .NET and Mono 上實作的 Python 語言，由 Jim Hugunin（同時也是 Jython 創始者）所創造。1.0 版於2006年9月5日釋出。
隨後，在 2007 年，開發者決定改寫架構，使用動態型別系統以讓更多Script Language能很容易地移植到.NET Framework上。2008 年，隨著微軟釋出 .NET Framework 3.0/3.5、Silverlight 之後，IronPython也釋出 2.0 版。
適用平臺:Windows ;          原始碼授權類型:Microsoft Public License
資料來源：https://zh.wikipedia.org/zh-tw/IronPython


Psychotic

Psychotic 是一種創新的 Python 優化編譯器。它具有獨特的功能，最重要的是它可以透過 ConstantTimeBarrier 中斷。除此之外，它也非常容易使用，並與現今流行的 Phyco Project 擁有類似的介面。
適用平臺: Linux; 原始碼授權類型: New BSD License
資料來源: https://code.google.com/p/psychotic/


py2exe

py2exe是一個工具程式，可以將python程式轉換成為單一的執行檔案。在某些情況下使用者也許不想安裝整個python套件或是相關的檔案。透過 py2exe可以將您的工具包裝成單一的執行檔，及數個相關檔案。使用者只要下載這幾個檔案就可以執行該程式了。因為py2exe會自動將該工具的或自動搜尋您的python程式中所有用到的模組及檔案加以集中包裝至這數個檔案中。
適用平臺:Windows ;          原始碼授權類型:MIT License
資料來源:https://www.dev.idv.tw/mediawiki/index.php/Py2exe%E7%B0%A1%E4%BB%8B


Cx-Freeze

cx_Freeze是一個將python程式打包為Linux下可以直接執行的ELF格式的二進制可執行文件（也能生成Windows的可執行文件，號稱跨平臺）。cx_Freeze的作用就是讓你的python程式可以脫離python運行環境，在沒有安裝python的微型linux系統（例如cdlinux、tinycore等）里，方便地運行你的python程式。從功能上來說，也可以將其理解為一個python程式的編譯器，將你的源碼隱藏起來。
適用平臺: 跨平臺; 原始碼授權類型: GPL-compatible
資料來源: https://cx-freeze.sourceforge.net/


↑ Top
















1309  項目  /  227  分類   










搜尋項目






Advanced Search

















企業運算 (173)嵌入式系統 (299)程式開發 (344)資訊安全 (194)地理資訊系統 (143)雲端運算 (92)相關組織 (19)一般應用 (72)法律授權 (23)Open Data (0)Software Testing (0)Code Quality (0)










最近更新


6 October 2014 

















行動版
自由軟體鑄造場 製作 最佳瀏覽狀態：IE7或Firefox2.0以上 (建議使用Firefox) ‧ 解析度1024*768  E-Mail：contact@openfoundry.org Address：臺北市南港區研究院路2段128號 中央研究院資訊科學研究所 . 隱私權條款. 使用條款  




















	編譯器、組譯器與直譯器



















































                                                                            尚未登入 請由此登入
  











帳號Email ID:





*




密碼Password:





*



























平臺選單(Menu)




知識平臺首頁(Home)




平臺總覽(Browse)




最新上傳(New)




熱門檔案(Hot)




依日期瀏覽(Date)
                                                                                




平臺搜尋(Search)























知識分享平臺Eshare ：檢視資訊View





返回前一頁Back







                       
                    





  [檢舉]










                                    標題Title：

編譯器、組譯器與直譯器




                                    作者Authors：

吳偉強




                                    上傳單位Department：

電機工程系





                                    上傳時間Date：

2010-12-24




                                    上傳者Author：

吳偉強




                                    審核單位Department：

電機工程系




審核老師Teacher：


陳世中




                                    檔案類型Categories：

課堂作業Class Assignment




                                    關鍵詞Keyword：

編譯器、組譯器與直譯器





                                    摘要Abstract：

編譯器（Compiler），是一種電腦程式，它會將用某種程式語言寫成的原始碼（原始語言），轉換成另一種程式語言（目標語言）。組合語言(Assembly language）是一種與硬體緊密相關的程式設計低階語言。組譯語言是機器語言便於記憶和理解的符號形式（又稱為助憶碼）。直譯器（Interpreter）是一種把高階程式語言直接執行的轉譯程式。直譯器不會一次把整個程式轉譯出來。它每轉譯一行程式敘述就立刻執行，然後再轉譯下一行，再執行，如此不停的進行下去。











檔案名稱FileName


檔案大小Size


檔案格式Format


瀏覽次數Browses


下載次數Downloads




2010_12_89b865f2.ppt


88Kb


ppt


1206


452




文件中檔案：



                                                     






開啟檔案Download











                                     





















                 



返回前一頁


















                                         












            編譯器 -華人百科                       編譯器  簡單講，編譯器就是將"一種語言(通常為高級語言)"翻譯為"另一種語言(通常為低級語言)"的程式。一個現代編譯器的主要工作流程:原始碼 (source code) → 預處理器 (preprocessor) → 編譯器 (compiler) → 目標代碼 (object code) → 連結器 (Linker) → 可執行程式 (executables)高級電腦語言便於人編寫，閱讀交流，維護。機器語言是電腦能直接解讀、運行的。編譯器將匯編或高級電腦語言源程式(Source program)作為輸入，翻譯成目標語言(Target language)機器代碼的等價程式。原始碼一般為高級語言 (High-level language)， 如Pascal、C、C++、Java、漢語編程等或匯編語言，而目標則是機器語言的目標代碼(Object code)，有時也稱作機器代碼(Machine code)。對於C#、VB等高級語言而言，此時編譯器完成的功能是把源碼(SourceCode)編譯成通用中間語言(MSIL/CIL)的位元組碼(ByteCode)。最後運行的時候通過通用語言運行庫的轉換，編程最終可以被CPU直接計算的機器碼(NativeCode)。  中文名稱 編譯器 外文名稱 Compiler 別稱 解碼器 表達式 預處理器 → 編譯器 → 目標代碼  提出者 葛麗絲·霍普 提出時間 20世紀50年代末 套用學科 電腦 適用領域範圍 單片機      工作原理編譯是從原始碼(通常為高級語言)到能直接被電腦或虛擬機執行的目標代碼(通常為低級語言或機器語言)的翻譯過程。然而，也存在從低級語言到高級語言的編譯器，這類編譯器中用來從由高級語言生成的低級語言代碼重新生成高級語言代碼的又被叫做反編譯器。也有從一種高級語言生成另一種高級語言的編譯器，或者生成一種需要進一步處理的的中間代碼的編譯器(又叫級聯)。典型的編譯器輸出是由包含入口點的名字和地址， 以及外部調用(到不在這個目標檔案中的函式調用)的機器代碼所組成的目標檔案。一組目標檔案，不必是同一編譯器產生，但使用的編譯器必需採用同樣的輸出格式，可以連結在一起並生成可以由使用者直接執行的EXE,所以我們電腦上的檔案都是經過編譯後的檔案。 種類編譯器可以生成用來在與編譯器本身所在的電腦和作業系統(平臺)相同的環境下運行的目標代碼，這種編譯器又叫做"在地"編譯器。另外，編譯器也可以生成用來在其它平臺上運行的目標代碼，這種編譯器又叫做交叉編譯器。交叉編譯器在生成新的硬體平臺時非常有用。"源碼到源碼編譯器"是指用一種高級語言作為輸入，輸出也是高級語言的編譯器。例如: 自動並行化編譯器經常採用一種高級語言作為輸入，轉換其中的代碼，並用並行代碼註解對它進行註解(如OpenMP)或者用語言構造進行註解(如FORTRAN的DOALL指令)。 編譯器 處理器作用是通過代入預定義等程式段將源程式補充完整。前端前端主要負責解析(parse)輸入的原始碼，由文法分析器和意涵分析器協同工作。文法分析器負責把原始碼中的'單詞'(Token)找出來，意涵分析器把這些分散的單詞按預先定義好的文法組裝成有意義的表達式，語句 ，函式等等。 例如"a = b + c;"前端文法分析器看到的是"a， =， b ， +， c;"，意涵分析器按定義的文法，先把他們組裝成表達式"b + c"，再組裝成"a = b + c"的語句。 前端還負責語義(semantic checking)的檢查，例如檢測參與運算的變數是否是同一類型的，簡單的錯誤處理。最終的結果常常是一個抽象的文法樹(abstract syntax tree，或 AST)，這樣後端可以在此基礎上進一步最佳化，處理。後端編譯器後端主要負責分析，最佳化中間代碼(Intermediate representation)以及生成機器代碼(Code Generation)。一般說來所有的編譯器分析，最佳化，變型都可以分成兩大類: 函式內(intraprocedural)還是函式之間(interprocedural)進行。很明顯，函式間的分析，最佳化更準確，但需要更長的時間來完成。 代碼分析編譯器分析(compiler analysis)的對象是前端生成並傳遞過來的中間代碼，現代的最佳化型編譯器(optimizing compiler)常常用好幾種層次的中間代碼來表示程式，高層的中間代碼(high level IR)接近輸入的源程式的格式，與輸入語言相關(language dependent)，包含更多的全局性的信息，和源程式的結構;中層的中間代碼(middle level IR)與輸入語言無關，低層的中間代碼(Low level IR)與機器語言類似。 不同的分析，最佳化發生在最適合的那一層中間代碼上。 編譯器 常見的編譯分析有函式調用樹(call tree)，控製流程圖(Control flow graph)，以及在此基礎上的 變數定義-使用，使用-定義鏈(define-use/use-define or u-d/d-u chain)，變數別名分析(alias analysis)，指針分析(pointer analysis)，資料依賴分析(data dependence analysis)等。程式分析結果是編譯器最佳化(compiler optimization)和程式變形(compiler transformation)的前提條件。常見的最佳化和變形有:函式內嵌(inlining)，無用代碼移除(Dead code elimination)，標準化迴圈結構(loop normalization)，迴圈體展開(loop unrolling)，迴圈體合並，分裂(loop fusion，loop fission)，數組填充(array padding)，等等。 最佳化和變形的目的是減少代碼的長度，提高記憶體(memory)，快取(cache)的使用率，減少讀寫磁碟，訪問網路資料的頻率。更高級的最佳化甚至可以把序列化的代碼(serial code)變成並行運算，多執行緒的代碼(parallelized，multi-threadedcode)。 編譯器 機器代碼的生成是最佳化變型後的中間代碼轉換成機器指令的過程。現代編譯器主要採用生成匯編代碼(assembly code)的策略，而不直接生成二進位的目標代碼(binary object code)。即使在代碼生成階段，高級編譯器仍然要做很多分析，最佳化，變形的工作。例如如何分配暫存器(register allocatioin)，如何選擇合適的機器指令(instruction selection)，如何合並幾句代碼成一句等等。 工作方法首先編譯器進行文法分析，也就是要把那些字元串分離出來。然後進行語義分析，就是把各個由文法分析分析出的文法單元的意義搞清楚。最後生成的是目標檔案，也稱為obj檔案。再經過連結器的連結就可以生成最後的EXE檔案了。有些時候需要把多個檔案產生的目標檔案進行連結，產生最後的代碼。這一過程稱為交叉連結。 編譯器最佳化應用程式之所以復雜, 是由於它們具有處理多種問題以及相關資料集的能力。實際上, 一個復雜的應用程式就象許多不同功能的應用程式" 貼上" 在一起。源檔案中大部分復雜性來自於處理初始化和問題設定代碼。這些檔案雖然通常佔源檔案的很大一部分, 具有很大難度, 但基本上不花費C PU 執行周期。盡管存在上述情況, 大多數Makefile檔案隻有一套編譯器選項來編譯項目中所有的檔案。因此, 標準的最佳化方法隻是簡單地提升最佳化選項的強度, 一般從O 2 到O 3。這樣一來, 就需要投人大量 精力來調試, 以確定哪些檔案不能被最佳化, 並為這些檔案建立特殊的make規則。一個更簡單但更有效的方法是通過一個性能分析器, 來運行最初的代碼, 為那些佔用了85 一95 % CPU 的源檔案生成一個列表。通常情況下, 這些檔案大約隻佔所有檔案的1%。如果開發人員立刻為每一個列表中的檔案建立其各自的規則, 則會處於更靈活有效的位置。這樣一來改變最佳化隻會引起一小部分檔案被重新編譯。進而,由於時間不會浪費在最佳化不費時的函式上, 重編譯全部檔案將會大大地加快。 進行對比許多人將高階程式語言分為兩類:編譯型語言和直譯型語言。然而，實際上，這些語言中的大多數既可用編譯型實現也可用直譯型實現，分類實際上反映的是那種語言常見的實現方式。(但是，某些直譯型語言，很難用編譯型實現。比如那些允許 線上代碼變更 的直譯型語言。) 歷史20世紀50年代，IBM的John Backus帶領一個研究小組對FORTRAN語言及其編譯器進行開發。但由於當時人們對編譯理論瞭解不多，開發工作變得既復雜又艱苦。與此同時，Noam Chomsky開始了他對自然語言結構的研究。他的發現最終使得編譯器的結構異常簡單，甚至還帶有了一些自動化。Chomsky的研究導致了根據語言文法的難易程度以及識別它們所需要的演算法來對語言分類。正如Chomsky架構(Chomsky Hierarchy)，它包括了文法的四個層次:0型文法、1型文法、2型文法和3型文法，且其中的每一個都是其前者的特殊情況。2型文法(或上下文無關文法)被證明是程式語言中最有用的，而且今天它已代表著程式語言結構的標準方式。分析問題(parsing problem，用於上下文無關文法識別的有效演算法)的研究是在60年代和70年代，它相當完善的解決了這個問題。它已是編譯原理中的一個標準部分。 編譯器 有限狀態自動機(Finite Automation)和正則表達式(Regular Expression)同上下文無關文法緊密相關，它們與Chomsky的3型文法相對應。對它們的研究與Chomsky的研究幾乎同時開始，並且引出了表示程式語言的單詞的符號方式。人們接著又深化了生成有效目標代碼的方法，這就是最初的編譯器，它們被一直使用至今。人們通常將其稱為最佳化技術(Optimization Technique)，但因其從未真正地得到過被最佳化了的目標代碼而僅僅改進了它的有效性，因此實際上應稱作代碼改進技術(Code Improvement Technique)。當分析問題變得好懂起來時，人們就在開發程式上花費了很大的功夫來研究這一部分的編譯器自動構造。這些程式最初被稱為編譯器的編譯器(Compiler-compiler)，但更確切地應稱為分析程式生成器(Parser Generator)，這是因為它們僅僅能夠自動處理編譯的一部分。這些程式中最著名的是Yacc(Yet Another Compiler-compiler)，它是由Steve Johnson在1975年為Unix系統編寫的。類似的，有限狀態自動機的研究也發展了一種稱為掃描程式生成器(Scanner Generator)的工具，Lex(與Yacc同時，由Mike Lesk為Unix系統開發)是這其中的佼佼者。在20世紀70年代後期和80年代早期，大量的項目都貫註於編譯器其它部分的生成自動化，這其中就包括了代碼生成。這些嘗試並未取得多少成功，這大概是因為操作太復雜而人們又對其不甚瞭解。編譯器設計最近的發展包括:首先，編譯器包括了更加復雜演算法的應用程式它用於推斷或簡化程式中的信息;這又與更為復雜的程式語言的發展結合在一起。其中典型的有用於函式語言編譯的Hindley-Milner類型檢查的統一演算法。其次，編譯器已越來越成為基於視窗的互動開發環境(Interactive Development Environment，IDE)的一部分，它包括了編輯器、連線程式、調試程式以及項目管理程式。這樣的IDE標準並沒有多少，但是對標準的視窗環境進行開發已成為方向。另一方面，盡管在編譯原理領域進行了大量的研究，但是基本的編譯器設計原理在近20年中都沒有多大的改變，它正迅速地成為電腦科學課程中的中心環節。在20世紀90年代，作為GNU項目或其它開放原始碼項目標一部分，許多免費編譯器和編譯器開發工具被開發出來。這些工具可用來編譯所有的電腦程式語言。它們中的一些項目被認為是高質量的，而且對現代編譯理論感興趣的人可以很容易的得到它們的免費原始碼。大約在1999年，SGI公佈了他們的一個工業化的並行化最佳化編譯器Pro64的原始碼，後被全世界多個編譯器研究小組用來做研究平臺，並命名為Open64。Open64的設計結構好，分析最佳化全面，是編譯器高級研究的理想平臺。編譯器相關專業術語: 1.compiler編譯器;編譯程式2.on-line compiler 連線編譯器3.precompiler 預編譯器4.serial compiler 串列編譯器5.system-specific compiler 特殊系統編譯器6.Information Presentation Facility Compiler 信息展示設施編譯器7.Compiler Monitor System 編譯器監視系統   相關詞條     匯編語言      執行檔      高級語言      集成開發環境      指令      代碼      c語言編譯器      編譯原理      文法分析      編輯器      ANSI C      JAVA編譯器      易語言編程系統      mingw      操作碼      c-free      函式體      解釋型語言      MULTICS      編譯      庫函式      程式設計      存儲單元      習語言     相關搜尋   c++編譯器     c語言編譯器     匯編語言編譯器     jit編譯器     java編譯器           編譯器 @ 華人百科  勵志人生 國語字典辭典 詩詞大全 小語 腦筋急轉彎    