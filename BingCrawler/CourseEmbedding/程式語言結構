


程式語言 - 維基百科，自由的百科全書































 







程式語言

維基百科，自由的百科全書
(已重新導向自 程式語言)

					前往：					導覽，					搜尋






本條目需要補充更多來源。（2017年2月10日） 
請協助添加多方面可靠來源以改善這篇條目，無法查證的內容可能會因為異議提出而移除。 

















中國大陸
程序設計語言、編程語言


臺灣
程式設計語言、程式語言


港澳
程序設計語言、編程語言






程式設計語言中的經典語句：
Hello World。


程式語言（英語：programming language），是用來定義電腦程式的形式語言。它是一種被標準化的交流技巧，用來向電腦發出指令。一種電腦語言讓程式設計師能夠準確地定義電腦所需要使用的資料，並精確地定義在不同情況下所應當採取的行動。
最早的程式語言是在電腦發明之前產生的，當時是用來控制提花織布機（英語：Jacquard loom）及自動演奏鋼琴的動作[1]。在電腦領域已發明瞭上千不同的編程語言，而且每年仍有新的編程語言誕生。很多編程語言需要用指令方式說明計算的程式，而有些編程語言則屬於宣告式編程，說明需要的結果，而不說明如何計算。
程式語言的描述一般可以分為語法（英語：Syntax (programming languages)）及語義。語法是說明程式設計語言中，哪些符號或文字的組合方式是正確的，語義則是對於編程的解釋[2]。有些語言是用規格檔案定義，例如C語言的規格檔案也是ISO標準中一部份，2011年後的版本為ISO/IEC 9899:2011[3]，而其他語言（像Perl）有一份主要的程式語言實現（英語：Programming language implementation）檔案，視為是參考實現（英語：reference implementation）。



目錄


1 概論
2 特點

2.1 資料和資料結構
2.2 指令及流程控制
2.3 參照機制和重用


3 功能

3.1 實體的傳輸連結
3.2 應用程式的發展


4 使用

4.1 量測各程式語言的使用量


5 歷史
6 參見
7 參考文獻
8 延伸閱讀
9 外部連結



概論[編輯]
程式語言原本是被設計成專門使用在電腦上的，但它們也可以用來定義演算法或者資料結構。正是因為如此，程式設計師才會試圖使程式代碼更容易閱讀。
程式語言往往使程式設計師能夠比使用機器語言更準確地表達他們所想表達的目的。對那些從事電腦科學的人來說，懂得程式設計語言是十分重要的，因為在當今所有的計算都需要程式設計語言才能完成。
目前發明瞭許多的程式語言，程式語言本身可能修改以符合新需求，或是和其他的程式語言結合使用，儘管人們多次試圖創造可以符合所有需求的通用程式語言，但以「符合所有需求」的標準來看，這些嘗試都失敗了[來源請求]。之所以有那麼多種不同的程式語言存在的原因是，編寫程式的初衷其實也各不相同；新手與老手之間技術的差距非常大，而且有許多語言對新手來說太難學；還有，不同程式之間的執行成本（runtime cost）各不相同。
有許多用於特殊用途的語言，只在特殊情況下使用。例如，PHP專門用來顯示網頁；Perl更適合文字處理；C語言被廣泛用於作業系統和編譯器的開發（所謂的系統編程）。[4]
高階語言的出現使得電腦程式設計語言不再過度地依賴某種特定的機器或環境。這是因為高階語言在不同的平臺上會被編譯成不同的機器語言，而不是直接被機器執行。最早出現的程式語言之一FORTRAN的一個主要目標，就是實現平臺獨立。
雖然大多數的語言既可被編譯又可被解譯，但大多數僅在一種情況下能夠良好執行。在一些編程系統中，程式要經過幾個階段的編譯，一般而言，後階段的編譯往往更接近機器語言。這種常用的使用技巧最早在1960年代末用於BCPL，編譯程式先編譯一個叫做「0代碼」的轉換程式（representation），然後再使用虛擬器轉換到可以執行於機器上的真實代碼。這種成功的技巧之後又用於Pascal和P-code，以及Smalltalk和二進位碼，在很多時候，中間過渡的代碼往往是解譯，而不是編譯的。
如果所使用的翻譯的機制是將所要翻譯的程式代碼作為一個整體翻譯，並之後執行內部格式，那麼這個翻譯過程就被成為編譯。因此，一個編譯器是一個將人可閱讀的程式文字（叫做原始碼）作為輸入的資料，然後輸出執行檔（object code）。所輸出的執行檔可以是機器語言，由電腦的中央處理器直接執行，或者是某種模擬器的二進位代碼。
如果程式代碼是在執行時才即時翻譯，那麼這種翻譯機制就被稱作直譯。經直譯的程式執行速度往往比編譯的程式慢，但往往更具靈活性，因為它們能夠與執行環境互相作用。
特點[編輯]
每一種程式設計語言可以被看作是一套包含語法、詞彙和含義的正式規範。
這些規範通常包括：

資料和資料結構
指令及流程控制
參照機制和重用
設計哲學

程式語言不成文規定：

識別元（Identifier）命名常規

大多數被廣泛使用或經久不衰的語言，擁有負責標準化的組織，經常會晤來創造及發布該語言的正式定義，並討論擴充功能或貫徹現有的定義。
資料和資料結構[編輯]
現代電腦內部的資料都只以二元方式儲存，即開-關模式（on-off）。現實世界中代表資訊的各種資料，例如名字、銀行帳號、度量以及同樣低端的二後設資料，都經由程式設計語言整理，成為高端的概念。
一個程式中專門處理資料的那個系統被稱為程式語言的型態系統（type system）；對型態系統的研究和設計被稱為型態理論（type theory）。語言可以被分為靜態型態系統（statically typed systems），例如C++和Java，和動態型態系統（dynamically typed systems），例如Lisp，JavaScript，Tcl和Prolog。前者可被進一步分為包含宣告型態（manifest type）的語言，即每一個變數和函式的型態都清楚地宣告，或type-inferred語言（例如MUMPS，ML）。
大多數語言還能夠在內建的型態基礎上組合出複雜的資料結構型態（使用陣列，列表，堆疊，檔案等等）。物件導向語言（Object Oriented Language，又譯作「物件導向語言」）允許程式設計師定義新的資料型態，即物件（objects），以及執行於該物件的函式（functions）和方法（methods）。
除了何時以及如何確定運算式和型態的聯繫，另外一個重要的問題就是語言到底定義了哪些型態，以及允許哪些型態作為運算式的值。諸如C程式語言之類的低端語言允許程式命名記憶體位置、記憶體區域以及編譯時的常量；ANSI C甚至允許運算式返回結構值（struct values）。功能性的語言一般允許變數直接使用執行時計算出的值，而不是指出該值可能儲存的記憶體位址。
常見的資料結構：

陣列
記錄
連結串列
堆疊
佇列
樹
圖
堆
雜湊

指令及流程控制[編輯]
一旦資料被確定，機器必須被告知如何對這些資料進行處理。較簡單的指令可以使用關鍵字或定義好的語法結構來完成。不同的語言利用序列系統來取得或組合這些語句。除此之外，一個語言中的其他指令也可以用來控制處理的過程（例如分支、迴圈等）。
參照機制和重用[編輯]
參照的中心思想是必須有一種間接設計儲存空間的方法。最常見的方法是通過命名變數。根據不同的語言，進一步的參照可以包括指向其他儲存空間的指標。還有一種類似的方法就是命名一組指令。大多數程式設計語言使用宏呼叫、過程呼叫或函式呼叫。使用這些代替的名字能讓程式更靈活，並更具重用性。
功能[編輯]
程式語言可透過機械、電腦來達成與完成人類需求的演算、功能與目的。
實體的傳輸連結[編輯]
透過低階程式語言或高階程式語言，將實體間接達成傳輸連結或控制實體。
應用程式的發展[編輯]
高階程式語言可發展多功能的應用程式軟體，如：作業系統、工程計算機軟體、轉檔軟體、燒錄軟體、播放軟體、網頁設計…等。
使用[編輯]
程式語言已超過上千種，大部份用在計算領域[5]。 程式語言和其他人類使用的語言在精準度和完整性上有很大的差異。
人們在用自然語言溝通時，內容可以不明確，甚至小的錯誤，而聽的人仍然可能理解說的人想要說的內容。但電腦不同，電腦「只做被告知要做的事」，無法理解程式設計者想要寫的程式。語言的定義、編程以及編程輸入的組合需完整定義程式執行時的外部特性。另一方面，演算法的概念可以表示為虛擬碼，是交織有自然語言和程式碼的程式語言，和其他人溝通時使用，此時就不一定要那麼精確。
程式語言提供定義片段資料的結構化機制，以及在資料中需自動進行的運算或是轉換。程式設計者利用程式語言提供的抽象化來表示計算的相關概念，這些概念則是由許多最簡單元素（稱為語言基元（英語：language primitive））的集合所組成[6]。程式設計就是指利用語言基元來撰寫新的程式，或是將舊程式改寫，配合新的應用或是新的環境。
電腦程式語言可能是以批次處理任務的方式執行，中間不需和使用者互動，也有可能是由用戶在直譯器中指定執行特定的的程式。若某一程式語言的是目的是在某一應用軟體（如Unix shell）或其他命令列介面執行其他程式，此程式語言會稱為手稿語言。
量測各程式語言的使用量[編輯]
很難去比較哪一種程式語言的使用量最大，而且「使用量」一詞也很難定義。某一種程式語言可能需要較多的時間進行開發，另一種程式語言可能產生的程式碼較長，第三種程式語言可能在CPU中執行的時間較長。有些語言在特定的領域仍十分受歡迎，例如COBOL在公司的資料中心仍相當常用，多半是在大型計算機上執行[7][8]，Fortran常用在科學及工程應用，C語言常用在嵌入式應用及作業系統中等。
有許多不同的量測方式不同程式語言使用的程度，不同的量測方式也有其各自的誤差：

計算徵才廣告中提到各程式語言的次數[9]。
計算教授或描述各程式語言書籍賣出的數量[10]。
佔計各程式語言目前仍在使用程式碼的長度，不過可能會低估一些公開搜尋不容易找到的程式語言[11]。
利用搜尋引擎計算找到不同程式語言的次數。

langpop.com在2013年整理了不同網站的資料，提出十大最受歡迎的語言如下：C語言、Java、PHP、JavaScript、C++、Python、Shell指令碼、Ruby、Objective-C及C♯.[12]。
歷史[編輯]
主條目：程式語言歷史
1940年代當電腦剛剛問世的時候，程式設計師必須手動控制電腦。當時的電腦十分昂貴，唯一想到利用程式設計語言來解決問題的人是德國工程師康拉德·楚澤。
幾十年後，電腦的價格大幅度下跌，而電腦程式也越來越複雜。也就是說，開發時間已經遠比執行時間寶貴。
於是，新的整合、可視的開發環境越來越流行。它們減少了所付出的時間、金錢（以及腦細胞）。只要輕敲幾個鍵，一整段代碼就可以使用了。這也得益於可以重用的程式代碼庫[13]。
參見[編輯]


程式設計語言列表
編譯器、直譯器
Hello World程式
手稿語言
程式設計
電腦科學、基本的電腦科學主題列表
教育程式語言
文學編程
程式語言理論
虛擬碼
軟體工程、軟體工程主題列表




電腦程式設計主題



參考文獻[編輯]


^ Ettinger, James (2004) Jacquard's Web, Oxford University Press
^ 語言系統簡介. .nuu.edu.tw. [2014-06-05]. 
^ C++語言漫談 (PDF). [2014-06-05]. 
^ MXL
^ HOPL: an interactive Roster of Programming Languages. Australia: Murdoch University. [1 June 2009]. This site lists 8512 languages. 
^ Abelson, Sussman, and Sussman. Structure and Interpretation of Computer Programs. [3 March 2009]. 
^ Georgina Swan. COBOL turns 50. computerworld.com.au. 2009-09-21 [2013-10-19]. 
^ Ed Airey. 7 Myths of COBOL Debunked. developer.com. 2012-05-03 [2013-10-19]. 
^ Nicholas Enticknap. SSL/Computer Weekly IT salary survey: finance boom drives IT job growth. Computerweekly.com. [2013-06-14]. 
^ Counting programming languages by book sales. Radar.oreilly.com. 2 August 2006 [3 December 2010]. 
^ Bieman, J.M.; Murdock, V., Finding code on the World Wide Web: a preliminary investigation, Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation, 2001
^ Programming Language Popularity. langpop.com. 2013-10-25 [2014-01-02]. 
^ Steven R. Fischer,. A history of language,. Reaktion Books,. 2003,. ISBN 186189080X.  請檢查|date=中的日期值 (幫助)


延伸閱讀[編輯]


Abelson, Harold; Sussman, Gerald Jay. Structure and Interpretation of Computer Programs 2nd. MIT Press. 1996. 
Raphael Finkel: Advanced Programming Language Design, Addison Wesley 1995.
Daniel P. Friedman, Mitchell Wand, Christopher T. Haynes: Essentials of Programming Languages, The MIT Press 2001.
Maurizio Gabbrielli and Simone Martini: "Programming Languages: Principles and Paradigms", Springer, 2010.
David Gelernter, Suresh Jagannathan: Programming Linguistics, The MIT Press 1990.
Ellis Horowitz (ed.): Programming Languages, a Grand Tour (3rd ed.), 1987.
Ellis Horowitz: Fundamentals of Programming Languages, 1989.
Shriram Krishnamurthi: Programming Languages: Application and Interpretation, online publication.
Bruce J. MacLennan: Principles of Programming Languages: Design, Evaluation, and Implementation, Oxford University Press 1999.
John C. Mitchell: Concepts in Programming Languages, Cambridge University Press 2002.
Benjamin C. Pierce: Types and Programming Languages, The MIT Press 2002.
Terrence W. Pratt and Marvin V. Zelkowitz: Programming Languages: Design and Implementation (4th ed.), Prentice Hall 2000.
Peter H. Salus. Handbook of Programming Languages (4 vols.). Macmillan 1998.
Ravi Sethi: Programming Languages: Concepts and Constructs, 2nd ed., Addison-Wesley 1996.
Michael L. Scott: Programming Language Pragmatics, Morgan Kaufmann Publishers 2005.
Robert W. Sebesta: Concepts of Programming Languages, 9th ed., Addison Wesley 2009.
Franklyn Turbak and David Gifford with Mark Sheldon: Design Concepts in Programming Languages, The MIT Press 2009.
Peter Van Roy and Seif Haridi. Concepts, Techniques, and Models of Computer Programming, The MIT Press 2004.
David A. Watt. Programming Language Concepts and Paradigms. Prentice Hall 1990.
David A. Watt and Muffy Thomas. Programming Language Syntax and Semantics. Prentice Hall 1991.
David A. Watt. Programming Language Processors. Prentice Hall 1993.
David A. Watt. Programming Language Design Concepts. John Wiley & Sons 2004.


外部連結[編輯]

開放式目錄計劃中和Computer Programming Languages相關的內容
開放式目錄計劃中和程式語言相關的內容
Syntax Patterns for Various Languages
電腦高階程式語言的發展歷程資訊圖










閱
論
編


程式語言分類






按平臺




.NET框架平臺語言



C++/CLI
C#
F#
IronPython
IronRuby
J#
Visual C#
VB.NET
Small Basic








Java虛擬機器上的語言



Java
Jython
JRuby
JScheme（英語：JScheme）
Groovy
Kawa（英語：Kawa）
Scala
Clojure
Kotlin








iOS蘋果手機平臺上的語言



Swift
Objective-C








Android手機平臺上的語言



Java








Fire OS（英語：Fire OS）手機平臺上的語言



Java








Windows Phone手機平臺上的語言



C#











按家族




C/C++語言



C
C++
Turbo C++
Borland C++
C++ Builder - C++/CLI
Visual C++元件擴充功能
Objective-C
Visual C++








BASIC語言




有行號



BASIC
BASICA
GW-BASIC
ETBASIC
GVBASIC








無行號



QBASIC
QuickBASIC
True BASIC
Turbo BASIC
PowerBASIC
FreeBasic
DarkBASIC
Visual Basic
Gambas
VB.NET
VBScript
VBA
REALbasic
Small Basic











Pascal/Delphi語言



Pascal
Turbo Pascal
Object Pascal
Free Pascal
Delphi
Lazarus











按範式




聲明式




函數式




Lisp家族



LISP
Scheme
Common Lisp
Clojure
Racket








ML家族



ML
Standard ML
OCaml
F#











Haskell
Scala
Erlang
Elixir
Clean
Miranda
Logo











邏輯式



Prolog











命令式




結構化




程序式



BASIC
Fortran
C
Pascal
Go








物件導向



Smalltalk
Java
C#
Objective-C
C++
Eiffel
Python
Ruby
Rust
Swift











非結構化







COBOL














超編程




泛型




模板



C++
D











Ada
C#
Delphi
Eiffel
Java
Swift
Visual Basic .NET











反射化



C#
ECMAScript
Java
Perl
PHP
Python
R
Ruby














手稿語言







Lua
Perl
PHP
Python
Ruby
ASP
JSP
Tcl/Tk
VBScript
AppleScript
AAuto（基於Lua）








ECMAScript衍生語言



ActionScript
CoffeeScript
Dart
DMDScript
ECMAScript
JavaScript
JScript
TypeScript








Shell語言



sh
bash
sed
awk
PowerShell
csh
tcsh
ksh
zsh











專業工具語言




科學與統計計算



FORTRAN
SAS
MATLAB
Scilab
GNU Octave
R
S-Plus（英語：S-Plus）
Mathematica
Maple
Julia








GPU用著色器語言



Cg
GLSL
HLSL








資料庫相關程式語言



xBase（英語：xBase）

Clipper
Visual FoxPro


SQL

PL/SQL
T-SQL
SQL/PSM（英語：SQL/PSM）


LINQ
XQuery（英語：XQuery）








置標語言




SGML家族




XML家族



XML
SVG
XML Schema
XSLT
XHTML
MathML
XAML
SSML











SGML
HTML














Curl











工業與輔助設計



AutoCAD











其它



組合語言
ALGOL
APL/J
Falcon
Forth
Io
MUMPS（英語：MUMPS）
PL/I
PostScript
REXX
SAC
Self
Simula
















閱
論
編


電腦語言分類









架構描述語言
硬體描述語言
標記語言
建模語言（英語：Modeling language）
程式語言
查詢語言
規約語言
樣式表語言（英語：Style sheet language）
模板語言
轉換語言（英語：Transformation language）
















閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。











權威控制



LCCN: sh85107313
GND: 4047409-4
BNF: cb13318353n（資料）
NDL: 00569224












 
						取自 "https://zh.wikipedia.org/w/index.php?title=編程語言&oldid=44047976"					
3 個分類：程序設計語言人工語言計算機技術隱藏分類：引文格式1錯誤：日期自2017年2月需補充來源的條目拒絕當選首頁新條目推薦欄目的條目自2017年2月有未列明來源語句的條目含有英語的條目包含規範控制信息的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AfrikaansAlemannischአማርኛAragonésالعربيةمصرىঅসমীয়াAsturianuAzərbaycancaتۆرکجهБашҡортсаBoarischŽemaitėškaБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBrezhonegBosanskiᨅᨔ ᨕᨘᨁᨗCatalàMìng-dĕ̤ng-ngṳ̄کوردیČeštinaЧӑвашлаCymraegDanskDeutschZazakiΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiFrançaisGaeilgeGalegoעבריתहिन्दीHrvatskiHornjoserbsceMagyarՀայերենInterlinguaBahasa IndonesiaInterlingueIlokanoIdoÍslenskaItaliano日本語La .lojban.Basa JawaქართულიTaqbaylitҚазақшаភាសាខ្មែរ한국어КыргызчаLatinaLëtzebuergeschLumbaartLietuviųLatviešuОлык марийМакедонскиമലയാളംМонголमराठीBahasa MelayuMirandésမြန်မာဘာသာPlattdüütschनेपालीNederlandsNorsk nynorskNorsk bokmålOccitanਪੰਜਾਬੀPolskiپنجابیPortuguêsRomânăРусскийРусиньскыйСаха тылаScotsSrpskohrvatski / српскохрватскиසිංහලSimple EnglishSlovenčinaSlovenščinaShqipСрпски / srpskiBasa SundaSvenskaதமிழ்తెలుగుТоҷикӣไทยTagalogTürkçeТатарча/tatarçaУкраїнськаاردوOʻzbekcha/ўзбекчаTiếng ViệtWinarayმარგალურიייִדישYorùbáBân-lâm-gú粵語 
編輯連結 





 本頁面最後修訂於2017年4月18日 (週二) 16:55。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 








程式語言









































Developer Network
Developer Network
Developer




登入




MSDN 訂閱




取得工具





















































很抱歉。您所要求的內容已遭移除。將會在 1 秒內自動重新導向。





設計分散式應用程式
規劃分散式應用程式

選擇工具和技術





選擇工具和技術
程式語言




程式語言




程式語言

















設計工具 

基礎結構技術 

安全性模型 

程式語言 

資料存取技術 

分散式應用程式的通訊 

Visual Studio 中的 XML 



TOC

 
摺疊目錄
展開目錄




本文件已封存並已停止維護。



本文件已封存並已停止維護。

程式語言



                Visual Studio .NET 2003
            




  選擇程式語言要依據您的語言使用經驗以及您所建置之應用程式的範圍而定。小型的應用程式通常只使用一種語言來建立，但使用多種語言來開發大型應用程式並不是件稀奇的事。 例如，如果您正在使用現有的 XML Web Service 來擴充應用程式，您可能會使用只需花費很少或不需花費程式設計功夫的指令碼語言。如果是主從式應用程式，您可能會選擇最習慣使用的單一語言來設計整個應用程式。如果是新的企業應用程式，因為需要有為數眾多的開發人員小組來建立可跨多重遠端站台而部署的元件與服務，那麼最佳的選擇可能是依據開發人員的技術與長期維護的期望來使用數種語言。 .NET 平臺程式設計語言 (包含 Visual Basic .NET、Visual C#、Managed Extensions for C++，以及各種廠商的許多其他程式語言)，是經由一組常用的統一類別來使用 .NET Framework 的服務與功能。.NET 的統一類別提供了一致性的方法以存取平臺功能。如果您學會使用類別庫，就會發現所有工作都會依循相同的制式架構。您將不再需要學習與操控不同的 API 架構以撰寫應用程式。 在大部分情況下，您都可以有效的使用所有 Microsoft 程式語言。然而，每一個程式語言都有其相對強勢之處，您應該會想要瞭解每一個語言獨特的功能。下列章節會協助您選擇開發應用程式時，所需的正確程式語言。 Visual Basic .NET Visual Basic .NET 是 Microsoft 的 Visual Basic 語言的新世代產品。您可以使用 Visual Basic 來建置 .NET 應用程式，包括 Web 服務與 ASP.NET Web 應用程式，既快速又容易。Visual Basic 建立的應用程式是建置在 Common Language Runtime 的服務之上，並充分利用 .NET Framework 的優勢。 Visual Basic 有許多新的與改善的功能，例如繼承、介面與多載化 (Overloading)，讓它成為強大的物件導向程式語言。其他新的語言功能還包括無限制執行緒 (Free Threading) 和結構化例外處理 (Structured Exception Handling)。Visual Basic 可和 .NET Framework 與 Common Language Runtime 完全整合在一起，以提供語言互通性 (Interoperability)、記憶體回收、增強安全性以及改良的版本控制支援。Visual Basic 支援單一繼承並建立 Microsoft Intermediate Language (MSIL)，作為對機器碼編譯器的輸入。 Visual Basic 相對上是比較容易學習與使用的，並且 Visual Basic 在過去十年間已經成為成千上萬個開發人員的程式語言選擇。學會使用 Visual Basic 可以應用在很多方面，例如可在 Visual Studio 中撰寫巨集，並可在如 Microsoft Excel、Access 與 Word 等應用程式中提供程式設計功能。 Visual Basic 提供一些常用之專案類型的原型 (Prototype)，包括：

 Windows 應用程式。 類別庫。 Windows 控制項程式庫。 ASP.NET Web 應用程式。 ASP.NET Web 服務。 Web 控制項程式庫。 主控台應用程式。 Windows 服務。  如需詳細資訊，請參閱 Visual Basic 語言與使用巨集自動執行重複的動作。 Visual C# .NET Visual C# (發音成 C Sharp) 是專門為了快速而輕鬆的建立 .NET 應用程式 (包括 Web 服務與 ASP.NET Web 應用程式) 而設計的一套程式語言。使用 Visual C# 寫成的應用程式是建置在 Common Language Runtime 的服務之上，並充分利用 .NET Framework 的優勢。 C# 是一種簡單、優雅、型別安全、物件導向式的語言，是 Microsoft 新近開發的程式語言，可用於建置各種類型的應用程式。任何熟悉 C 以及相似語言的人，會發現改用 C# 並沒有什麼問題。C# 的設計是要將快速的開發方法帶給 C++ 的程式設計人員，而不需犧牲 C 與 C++ 的強大性與控制性。因為繼承這樣的傳統，C# 對 C 與 C++ 之間擁有很高的相似性，使得熟悉這些語言的開發人員很快就能使用 C# 來提高生產力。C# 提供內建程式碼信任機制以得到高層級的安全性、記憶體回收與型別安全。C# 支援單一繼承並建立 Microsoft Intermediate Language (MSIL)，作為對機器碼編譯器的輸入。 C# 可和 .NET Framework 與 Common Language Runtime 完全整合在一起，以提供語言互通性、記憶體回收、增強安全性以及改良的版本控制支援。C# 簡化並現代化了 C 與 C++ 的一些比較複雜的方面，特別是命名空間 (Namespace)、類別、列舉型別 (Enumeration)、多載化與結構化例外處理。C# 還排除了 C 與 C++ 的一些功能，例如巨集、多重繼承與虛擬基底類別 (Virtual Base Class)。對於目前的 C++ 開發人員而言，C# 提供了強大、高生產力的另一個語言選擇。 Visual C# 提供一些常用之專案類型的原型，包括：

 Windows 應用程式。 類別庫。 Windows 控制項程式庫。 ASP.NET Web 應用程式。 ASP.NET Web 服務。 Web 控制項程式庫。 主控台應用程式。 Windows 服務。  如需詳細資訊，請參閱 Visual C# Standard 版功能與 C# 語言教學課程。 Visual C++ .NET Visual C++ .NET 是 Microsoft Visual C++ 語言的新世代產品。Visual C++ 一直是建立高效能 Windows 與全球資訊網 (World Wide Web) 應用程式的最佳語言。 Visual C++ 提供一些重要的程式庫來協助您撰寫應用程式，包括 Active Template Library (一組用於 COM 物件的範本式 C++ 類別)、ATL Server 程式庫 (一組用於建立 Web 應用程式、Web 服務以及其他伺服器應用程式的原生 C++ 類別) 與 Microsoft Foundation Classes (MFC，支援寫給 Windows API 之應用程式的一組類別)。 Visual C++ 提供一些常用之專案類型的原型，包括：

 Active Template Library (ATL) 專案。 ATL Server 專案。 ATL Server Web 服務。 自訂精靈。 延伸預存程序 DLL。 Makefile 專案。 ASP.NET Web 服務。 類別庫 (.NET)。 主控台應用程式 (.NET)。 Windows 控制項程式庫 (.NET)。 Windows Form 應用程式 (.NET) Windows 服務 (.NET) Microsoft Foundation Classes (MFC) ActiveX 控制項。 MFC 應用程式。 MFC DLL。 MFC ISAPI 擴充程式 DLL。 Win32 專案。  如需詳細資訊，請參閱 Visual C++ 與 Visual C++ .NET Standard 版。 Managed Extensions for C++ 如果您正在建立新應用程式或元件，您可以使用目前的 C++ 知識，以 Managed Extensions for C++ 來撰寫 Managed 程式碼。使用 Managed Extensions 時，您可以取得 Common Language Runtime 所提供的支援與服務等益處 (例如記憶體管理、跨程式語言的整合、程式碼存取安全性以及物件的自動存留期控制)。 Managed Extensions for C++ 也提供了簡單的方式，以便將現有的應用程式整合至 .NET Framework。例如，您可能需要將一些 Unmanaged 程式碼移植至 .NET。因為您已經有先前編譯的靜態、連結程式庫、DLL 與各種 Unmanaged C++ 類別，您可以直接將現有的 Win32 程式碼編譯成 .NET 應用程式。然後，當時間許可時，您還可以利用 Managed 程式碼重新建置元件。 如需詳細資訊，請參閱 Managed Extensions for C++ 程式設計。 Transact-SQL Transact-SQL 是用來儲存、修改與擷取 Microsoft SQL Server 關聯式資料庫中資訊的原生語言。您也可以使用 Transact-SQL 來建立資料庫以及儲存在資料庫中的任何物件，例如資料表、資料行、觸發程序 (Trigger)、索引鍵、索引、檢視、預存程序和函式。Visual Studio 編輯器與 Visual Database Tools 所提供的設計工具，可完全支援 Transact-SQL。  註意   Visual Database Tools 也可以連接至 Oracle 資料庫。當您使用 Oracle 資料庫時，Visual Database Tools 可以正確地處理 Oracle 的特定SQL 語法。如需詳細資訊，請參閱 Oracle 資料庫。 如需詳細資訊，請參閱 SQL Server 2000 與 Visual Database Tools。 指令碼語言 當具有 Internet 功能的應用程式獲取技術上的註目時，與分散式運算環境有關聯之程式設計問題的解決方案也持續在開發。一般來說，指令碼語言並不是什麼新技術，但一些很有用的指令碼語言是最近才開發的。使用這些新的指令碼語言，您就可以輕鬆的在本機桌面上或遠端主控臺中執行指令碼，以處理系統管理工作與程式事件。 Windows Script Host Windows Script Host (WSH) 是 32 位元 Windows 平臺上，與語言無關的指令碼環境。使用 WSH，Microsoft 提供 VBScript、JScript 與 JScript .NET 指令碼引擎。這些指令碼語言可以用於 Web 伺服器的 ASP 網頁、用於在 Internet Explorer 中執行的 HTML 網頁，以及用於 Windows 98 與 Windows 2000 上的 Windows Script Host 指令碼引擎中。 WSH 可以使用任何指令碼語言，來自動化伺服器上的系統管理工作。例如，系統管理員可以撰寫 VBScript 以建立新的虛擬目錄，然後當 WSH 在背景運作時，從命令列執行此指令碼檔案，以便在網站上建立新的虛擬目錄。此外，系統管理員可以針對多個網站或多個實體伺服器，撰寫單一指令碼。 協力廠商有提供其他語言 (例如 Perl、TCL、REXX 與 Python) 的 ActiveX 指令碼引擎。 如需詳細資訊，請參閱 Windows Script Host。 VBScript Microsoft Visual Basic Scripting Edition (VBScript) 是 Microsoft Visual Basic 的子集  如果您曾經用過 Visual Basic，就會覺得它看起來很熟悉。然而，卻不是完全相同。因為 VBScript 的設計是專門讓您用在 Internet Explorer (IE) 瀏覽器中，所以它沒有包含通常是屬於指令碼範圍外的功能，例如檔案存取與列印。不過，搭配 VBScript 使用 FileSystem 物件來操作檔案倒是很常見。 VBScript 將 Active Scripting 帶到各種環境中，包括 IE 中的 Web 用戶端指令碼以及在 Microsoft Internet Information Services (IIS)、Microsoft Internet Security and Acceleration Server (ISA) 與 Sun Solaris 中的 Web 伺服器指令碼。VBScript 是一種快速、可攜式並且解譯過的物件導向式指令碼語言，可處理直接內嵌於 HTML 網頁中的原始程式碼。您可以使用 VBScript 將智慧功能與互動功能加入 WSH、ASP 與 HTML 網頁中。 就像 JScript 一樣，VBScript 會使用 Windows Script 和主應用程式溝通。使用 Windows Script 時，瀏覽器與其他主應用程式不需要在每一個指令碼元件中使用特殊的整合程式碼。Windows Script 會啟用主機來編譯指令碼，取得和呼叫進入點，並管理開發人員可用的命名空間。 VBScript 是一種型別鬆散的語言。型別鬆散的意思是說您不需要明確地宣告變數的資料型別。實際上，您也無法在 VBScript 中明確地宣告資料型別。此外，在許多情況下，VBScript 會在需要時自動執行轉換作業。例如，如果您將數字加入包含文字 (字串) 的項目中，數字就會轉換成文字。 如需詳細資訊，請參閱《VBScript User's Guide》。IE、IIS 與 ISA 都有提供 VBScript，或者您也可以從 Microsoft Windows Script 技術網站 (http://www.microsoft.com/taiwan/products/develop/scripting/default.asp) 下載 VBScript。 JScript Microsoft JScript 是專為 Web 網頁指令碼而設計的程式語言。JScript 符合 ECMA 262 語言規格。JScript 是專門用於 Internet 的強大指令碼語言。就像 VBScript 一樣，JScript 是一種解譯的、物件導向式的指令碼語言，可處理直接內嵌於 HTML 網頁中的原始程式碼。JScript 可在 Internet Explorer 與 Netscape 瀏覽器上執行。 就像 VBScript 一樣，JScript 也是使用 Windows Script Host 與主應用程式溝通。使用 Windows Script Host ，瀏覽器與其他主應用程式不需要在每一個指令碼元件中使用特殊的整合程式碼。Windows Script Host 會啟用主機來編譯指令碼，取得和呼叫進入點，並管理開發人員可用的命名空間。 JScript 是一種型別鬆散的語言。型別鬆散的意思是說您不需要明確地宣告變數的資料型別。實際上，您也無法在 JScript 中明確地宣告資料型別。此外，在許多情況下，JScript 會在需要時自動執行轉換作業。例如，如果您將數字加入包含文字 (字串) 的項目中，數字就會轉換成文字。 如需詳細資訊，請參閱 JScript。 JScript .NET JScript .NET 是 Microsoft 實作 ECMA 262 語言的新世代產品，是和 ECMAScript 第 4 版一起開發的。它是專門設計在 Common Language Runtime 內執行，以管理程式碼的執行，並提供可讓開發程序更簡易的服務。使用 JScript .NET 時，您可以使用的功能有：跨程式語言的整合、跨程式語言的例外處理、增強的安全性、版本控制與部署支援、元件互動的簡化模型以及偵錯與分析服務。 JScript .NET 將傳統 JScript (可以完全回溯相容) 的現有功能組和 Common Language Runtime 以及類別式語言的最佳功能結合在一起，為您提供了所有的優點。JScript .NET 改良的功能包括真實編譯的程式碼、具型別和不具型別的變數、類別 (具有繼承、函式多載化、屬性存取子等等)、封裝、跨程式語言支援以及存取 .NET Framework。 如需詳細資訊，請參閱 JScript .NET 的新功能。 可延伸標記語言 (XML) XML 提供描述結構式資料的格式，讓您可以有精確的內容宣告以及跨多種平臺的有用之搜尋結果。XML 是依據目的來定義資訊與資料，而不是依據其表現方式，這樣數個應用程式就可以用可促進多樣化的應用程式重新使用與擴充性的方式來使用資訊與資料。XML 是日漸重要的中繼標記語言，很適合在 Internet 上使用。  重要的是您必須知道 .NET Enterprise Servers 的各種產品都支援 XML 作為資料交換格式。例如，SQL Server 2000 的 SQL XML 功能讓 .NET 應用程式可以用 XML 文件的方式，來取得資料庫的查詢結果，而不是取得關聯式結果集。作為 .NET 平臺的重要技術，XML 正開啟了用戶端與提供者 Web 式服務的新世代。 XML 並不是 HTML 的替代方案。雖然兩者都是標記語言，它們卻以互補的方式在運作。HTML 的強勢之處是在資訊的顯示方面，而 XML 則是描述資訊的優異方法。XML 的強勢之處，有部分是由於它能將使用者介面與所顯示資料分開的能力，如先前所述，這樣就能達到跨平臺的效能。 在分散式應用程式架構中，XML 的訊息功能可讓您以標準傳輸機制，輕易地透過防火牆並在異質性系統之間移動資料。無論您的應用程式需要的是什麼  匯入、匯出、資料交換、與其他應用程式的互通性 (例如 Office 2000 或 Exchange 2000)、剖析、修改、資料存取、資料儲存  XML 都是很好用的資料交換格式。Visual Studio .NET 提供一些很好的工具，可以與 XML 以及您最愛的程式語言搭配使用。 如需詳細資訊，請參閱 Visual Studio 中的 XML。 Visual J++ Microsoft 提供 Java User Migration Path to Microsoft .NET (JUMP to .NET ─ 「跳」至 .NET)，作為可讓程式設計人員將 Java 語言專案保留、增強與轉換至 Microsoft .NET 平臺上的一組技術與服務。若使用 JUMP to .NET，在將應用程式與元件擴充至 .NET 平臺上時，您還可以繼續利用現有 Visual J++ 技術與原始程式碼的優勢。如果您熟悉 Visual J++ 語言，就可以用它來建立新的 .NET 應用程式，或是使用自動化轉換工具將現有的程式碼，輕鬆地遷移至新的 C# 語言。  如需詳細資訊，請參閱 Microsoft Visual J++ 網站 (http://msdn.microsoft.com/visualj/jump/default.asp)。 其他語言 Microsoft 和許多公司合作，將他們的程式語言帶到 .NET 平臺。除了 Microsoft 所提供的語言之外，還有許多以 .NET 平臺為目標的其他語言，包括：

 COBOL for Microsoft .NET。 Perl for Microsoft .NET。 Eiffel for Microsoft .NET。 Python for Microsoft .NET。 Pascal for Microsoft .NET。 Mercury for Microsoft .NET。 Mondrian for Microsoft .NET。 Oberon for Microsoft .NET。 Salford FTN95 (Fortran) for Microsoft .NET。 SmallTalk for Microsoft .NET。 Standard ML for Microsoft .NET。 Dyalog APL for Microsoft .NET。  如需詳細資訊，請洽詢相關程式語言廠商。 請參閱 決策圖表 | Visual Basic 語言 | Visual C# 語言 | Visual C++ | JScript .NET 的新功能 | Visual Studio 中的 XML  


顯示:

受繼承
        

受保護
        







列印

匯出 (0)
            







列印

分享
            













本文內容




















本頁對您有幫助嗎？
是
否





其他意見反應？


剩餘 1500 個字元

提交
略過此項







謝謝！
我們非常感謝您提供的意見反應。










© 2017 Microsoft















天瓏網路書店-程式語言結構, 3/e



































天瓏網路書店
全台最齊全
中英文電腦書專賣店







天瓏資訊圖書粉絲專頁




搜尋


資料科學
簡體書
Packt
微服務
工程師必讀經典
英文書新到貨
Python
Tensorflow
無瑕程式碼








        程式語言結構, 3/e
        


        陳維魁
        
      




 


出版商:
儒林


出版日期:
2010-05-05


定價:
$390


售價:

9.5 折
          $371



貴賓價:

9.0 折
            $351

語言:
繁體中文


ISBN:
9574998959

ISBN-13:
9789574998951





      立即出貨
        (庫存=1)













買這商品的人也買了...







 
$850
              貴賓價: $808
          
作業系統原理 (Operating System Concepts, 8/e)





 
$640
              售價: $544
          
C++ 教學手冊, 3/e





 
$900
              貴賓價: $855
          
計算機組織與設計 (Computer Organization and Design: The Hardware/Software Interface, 4/e)





 
$600
              售價: $510
          
程式語言 (高考(三等)．地方政府特考．檢察事務官．升等升資．各類特考), 19/e





 
$600
              售價: $510
          
資料結構, 6/e (適用: 高考(三等)．地方政府特考．各類特考．升等升資)





 
$650
              貴賓價: $585
          
電腦網際網路, 6/e (國際版)(Computer Networking: A Top-Down Approach, 6/e)(附部分內容光碟)





 
$750
              貴賓價: $675
          
電腦網際網路(第五版)(國際版)(Computer Networking: A Top-Down Approach, 5/e)





 
$550
              貴賓價: $468
          
新觀念 UML 系統分析與設計實務





 
              貴賓價: $559
          
編程語言原理(第10版) (Concepts of Programming Languages, 10/e)





 
$620
              售價: $527
          
大話設計模式





 
$650
              貴賓價: $618
          
系統分析與設計─理論與實務應用, 6/e





 
$600
              貴賓價: $570
          
軟體專案管理, 2/e (平裝本)





 
$880
              售價: $695
          
深入淺出物件導向分析與設計 (Head First Object-Oriented Analysis and Design)





 
$880
              售價: $695
          
深入淺出 Java 程式設計, 2/e (Head First Java, 2/e)





 
$700
              貴賓價: $630
          
資訊管理：e 化企業的核心競爭能力, 4/e





 
$460
              貴賓價: $391
          
C 語言之修煉與實踐





 
$560
              貴賓價: $476
          
新觀念 UML 系統分析與設計實務, 2/e





 
$620
              貴賓價: $527
          
圖解數位影像處理程式範例教本─使用 C 語言





 
$650
              貴賓價: $553
          
SQL Server 2008 資料庫系統設計與開發實務





 
$500
              售價: $395
          
資訊安全概論與實務, 3/e




產品描述

<本書簡介>
本書是專門針對有心對程式語言結構或程式設計有更深一層認識的讀者而編寫的一本書。
    
本書的內容可分為二個部分，前半部是針對程式語言的整體概念作描述，而後半部則是針對個別語言的特性做較深入之介紹；此外，本書的每個章節均附有作者精心設計或由歷屆高考、普考、特考及研究所入學考試試題中精心挑選過的考題作為習題，相信對於讀者的學習效果，有很大的幫助。
    
此外，為了提昇教師授課品質及效率，本書備有教學投影片及完整的習題解答，供選用本書作為教材之教師的教學參考。
<章節目錄>
第1章　程式語言的演進
第2章　程式語言的語法及語意
第3章　變數與繫結
第4章　資料型態
第5章　控制結構
第6章　領域與範圍
第7章　參數的傳遞
第8章　例外處理
第9章　資料抽象化
第10章　BASIC程式語言
第11章　LISP程式語言
第12章　Prolog程式語言
第13章　Pascal程式語言
第14章　C程式語言
第15章　C++程式語言
第16章　Java程式語言
習題解答
參考文獻








中文書籍分類

最新新書
2016 年度暢銷排行
暢銷排行 (2017/06)
暢銷排行 (2017/05)
暢銷排行 (2017/04)



活動主題列表

資料科學
CRC好書上架
簡體中文書最新到貨
PACKT 最新到貨
Effective 系列書
微服務系列書
Ruddy老師的敏捷教室
程式設計必讀經典系列
Springer好書上架
英文書最新到貨
資料視覺化系列書
Python 系列書籍
深度學習系列書籍
無瑕的程式碼 超值合購
Maker小天地



特價書籍

Bootstrap系列76折起
松崗暢銷書展5折起









C 程式語言教學









艾鍗學院:::C語言與資料結構:::C語言與資料結構(Data Structures)是資訊學科中的核心課程之一，也是嵌入式軟體設計的基礎課程



















課程分類




德州儀器專區

Android嵌入式平臺開發訓練班
TI MSP430微控制器開發


企業產訓專區

Android企業產訓專班


職訓課程專區

Android嵌入式系統整合開發就業班
MCU韌體設計就業班
Android App 就業班


Android系列課程

Android嵌入式平臺開發訓練班
Android移植與開發實務
Android手機應用程式基礎入門
Android手機應用程式進階元件應用
Android手機應用程式多執行序與UI Pattern設計技巧
Android手機應用程式軟體架構與商品化技巧
Android手機應用程式專題設計
Android 4.0平板軟體設計


Embedded Linux課程

嵌入式Linux開發實務[學程]
Linux開發環境架設
Linux系統程式設計
嵌入式Linux開發實務
嵌入式Linux驅動程式


韌體設計系列課程

單晶片韌體開發
USB韌體設計
ARM嵌入式處理器開發實務
TI MSP430微控制器開發


硬體設計系列課程

FPGA/Verilog實戰教學
H.264視訊編、解碼器系統開發
Allegro/PCB Layout設計


程式語言系列課程

C語言與資料結構
JAVA物件導向精修


千元進修專區

Android嵌入式平臺開發訓練班
TI MSP430微控制器開發
Linux開發環境架設
C語言與資料結構
JAVA物件導向精修













課程介紹






            	課程名稱：C語言程式設計與資料結構
          

            	資料結構？演算法？
為了設計出一個有效率的演算法來解決問題。通常得事先將要處理的原始資料進行一些特定處理或擺放，將有助於整個演算法的效能提升。
計算機軟體對於資料的處理，首當設計資料結構，該記錄那些資料、要用什麼方式來儲存，接著對於這群資料該如何進行新增、插入、刪除、搜尋等操作。
資料結構這門學科旨在說明計算機軟體有那些常用的資料結構，如Array, Linked List, Stack, Queue, Tree, Graph等，而對應這些不同的資料結構必然會有不同的操作方式…
            





                	課程目標
                







            這兩個主題C語言與資料結構(Data Structures)是資訊學科中的核心課程之一，也是嵌入式軟體設計的基礎課程。
「C語言程式設計班」學習C語言的基本及進階觀念，尤其是針對pointer、Struct與位元處理等嵌入式Ｃ方面的主題。
「資料結構精修班」教授軟體開發者必修的資料結構和演算法，讓你思考程式的執行效率。
1)不僅學會撰寫程式並能夠清楚掌握程式的重要觀念。
2) 清楚掌握C語言的各項語法，並加強嵌入式系統常用的小技巧。
3) 認識前處理器、指標、特殊宣告等嵌入式系統常用的技巧。
4) 確實掌握可維護性、模組化和最佳化的系統程式架構。 





                	課程大綱
                










                              C語言程式設計 C Language
          

                        1. C Data Types
                        2. Operators
                        3. Statements and Control Flow
                        4. Functions
                        5. Arrays
                        6. Pointers
                        7. String
                        8. FILE I/O
                        9. struct, union, enum
                        10. Function Pointer
                  





                    			資料結構精修 Essential Data Structure
              

                        1. Introduction to Data Structure and Algorithm
                        2. Data與ADT Design
                        3. Stack
                        4. Queues
                        5. Linked Lists
                        6. Tree & Graph
                        7. Sorting
                        8. Searching
                  






                	課程實錄
                
















                	適合對象
              







            1. 無須具備程式語言基礎，但想要從事以C語言程式開發者。
            2. 想要從事嵌入式軟體開發、韌體設計者。





                	職涯方向
              







嵌入式設計師 │韌體工程師 │資訊家電設計師│網路應用程式設計│Linux平臺驅動程式





                	課程資訊
                






‧開課日期、課程時數及課程費用請直接填表索取報名錶 





課程費用
C語言程式設計(數位課程)NT$6,600 TWD
資料結構精修(數位課程)NT$4,500 TWD
Java物件導向精修(數位課程)NT$5,700 TWD
 








‧來電洽詢：來電(02)2316-7736 │常見問題Q&A │ E-mail：service@ittraining.com.tw  
‧上課地點：臺北市中正區漢口街一段82號3樓 (漢口街怡客咖啡樓上，近重慶南路華南金控旁)MAP









            	索取報名錶
          





姓名



電話



Email




C語言與資料結構











    	系統將自動寄送資料到您所填寫的E-mail信箱。
常見問題
      








            	您可能感興趣課程
            




            	Embedded Linux設計實作
            
 


            	為學習Android手機應用程式框架而設計的Java課程...
+more 













 












程式語言







電腦概論　　作業系統簡介　　程式語言簡介     演算法簡介   資料結構簡介


　　　　　　　　
　一、程式的角色
    程式的作用好比一齣戲的劇本，用來指示電腦(演員)的每一動作，當電腦藉由輸入
設備把程式讀入後，會儲存在主記憶體內，然後指令會依序被控制單元提取並解碼或翻
譯成電腦可以執行的信號，並把信號送到各個裝置上，以執行指令所指派的動作。

二、程式語言的種類
    由於電腦是由電子電路所構成，因此在它的內部世界中，只懂得兩種信號：1 或 0
；表示開或關，因此最早的電腦語言就完全是用 0 與 1 所寫成的，但人們不習慣把所
有的事情都用0 或 1來表示，於是就有組合語言、高階語言陸續產生，現在我們將這三
類程式語言，簡介如下：
(一) 機械語言(Machine Language)：最早期的電腦語言，用 0與1組合而成，直接被電
　　 腦所執行，不需翻譯，因此：
     1. 優點： 執行速度快，使用電腦資源少。
     2. 缺點： 難度高，可讀性低，相容性差。
　
(二) 組合語言(Assembly Language)：一種符號化的程式語言，可讀性比械語言高，須
　　 利用組譯程式 (Assembler) 來轉換成對應的機械語言，才能被電腦執行。
                          ┌──────┐
                          │ 組 譯 程 式│
           組合語言 ──→│(Assembler) │──→ 機械語言
                          └──────┘

(三) 高階語言(High Level Language)：以人類易學、易寫的文字或符號來表達的程式
　　 語言，高階語言所設計的程式，不能由電腦直接執行，必須經過一種翻譯程式轉換
　　 成機械語言才能進行執行。
                           ┌──────┐
           高階語言 ──→ │ 翻 譯 程 式│──→ 機械語言
                           └──────┘
     翻譯程式又可分為編譯程式 (Complier) 及直譯程式 (Interpreter) 兩種。

三、較常見的高階語言
        高階語言由於人們較容易看懂，發展至今至少已有一、二百種以上，我們無法
   一一介紹僅扼要列出幾種較具代表性語言，其特色如下：
    (1) FORTRAN：最早的高階語言，主要用於科學、工程的運算上。

    (2) COBOL：可處理多種不同模式的檔案適用於商用資料處理。
　
    (3) BASIC：有編譯式和直譯式兩種，語法簡單易學，適合於初學者。

    (4) PROLOG、LISP：為人工智慧上常用的語言。
    (5) PASCAL：為紀念法國數學家 Blaise Pascal 而命名，最具結構化語言。

    (6) C：兼具了高階語言方便、低階語言效率，可攜性高、富有彈性，適用在系統
　　　　　 程式撰寫上。

    (7)JAVA：程式架構像C++但是它拿掉了C++最困難的指標部份，它能發揮網路及多
　　　　　　 媒體的內建支援。
四、程式語言發展趨勢
    要使用機械語言、組合語言、高階語言來設計程式得受專業訓練，並非易事，為了
讓使用者更容易使用電腦來解決問題，近來已有電腦科學家推出所謂的第四代和第五代
語言，其目的是希望使用者能更便利與電腦溝通，其意義可圖示如下：

      人與機器間靠機器語                   人與機器間靠自然語
      言溝通，問題由人們                   言溝通，問題由機器
      描述細節來解決。                     自己解決。
            │                                      │
            │                                      │
            ↓                                      ↓
            ┌┬┬┬┬┬┬┬┬┬┬┬┬┬┬    ┬┬┬┐
            │  │  │  │  │  │  │  │....  │  │
            │      │      │      │              │
           第一代   第二代  第三代  第四代

        一般所謂的第四代語言(Foruth Generation Language，4GL)，是指不需要
        專門技術即可使用的套裝軟體，通常以句子或圖像(icon) 選擇所要的功能
    。例如，使用第四代語言的程式寫作者不必描述資料儲存的細節，及資料如何顯
    示在螢幕上和在機器中的情形，只有描述顯示在軟體上上的資料及它們的關係。
    製作的細節由軟體自動執行。所以，使用者不必知道使用的技術就能熟練地運用
    整個系統。
        第五代語言，又稱為自然語言(Natural Language)，其特性是提供使用者以
    一般的英文語句直接和電腦進行對話，向電腦發出問題，而不必考慮程式語法，
    使用起來更人性化、更方便。
回上一頁



























程式語言教學誌: C 語言快速導覽 - 結構




































































































程式語言教學誌




程式語言 C, C++, C#, Java, JavaScript, Objective-C, Perl, PHP, Python, Ruby, Swift與網頁標記語言 HTML, CSS 的教學部落格




















網頁



導論


G+ 專頁


G+ 社群


FB 粉絲團


FB 社團


Twitter


English Version


關於本站


意見提供或問題回報


C語言教材


C++入門指南


C++速查手冊


舊C++教材


C#教材


Java入門指南


舊Java教材


舊JavaScript教材


舊Objective-C教材


舊Perl教材


舊PHP教材


Python入門指南


舊Python教材


舊Ruby教材


舊Swift教材


HTML5快速導覽


CSS2.1快速導覽














































































































本站電子書

您可以在這些電子書店找到本站電子書： Google Play 圖書、 iBooks Store 、 HyRead 、 Readmoo 、 Pubu 。
《如何自學程式設計》入選 Google Play 台灣地區2016年度最佳書籍




































C 語言快速導覽 - 結構





C 語言中的結構為異質的資料結構，這意思是說結構中可以存放不同資料型態的資料體，每個資料體被稱為結構的成員，定義格式如下




宣告定義關鍵字 struct ，接著是結構名稱，然後用大括弧圍起來的成員宣告，須留意結構定義完的右大括弧其後要接分號 ; 。


跟結構有關的運算子如下表
結構成員運算子.
結構指標運算子->


宣告為某結構的變數就可以用結構成員運算子存取該成員，而結構指標運算子可以讓指向某結構的指標變數存取其成員，如下例
#include <stdio.h>

struct point {
    int x;
    int y;
};

int main(void)
{
    struct point a;
    struct point *aPtr = &a;
    
    a.x = 3;
    a.y = 4;
    
    printf("a = (%d, %d)\n", a.x, a.y);  
    printf("*aPtr = (%d, %d)\n", aPtr->x, aPtr->y);

    return 0;
}

/* 《程式語言教學誌》的範例程式
    http://pydoing.blogspot.com/
    檔名：structopt.c
    功能：示範結構定義、宣告及結構運算子的使用
    作者：張凱慶
    時間：西元2010年4月 */

編譯後執行，如下



第 10 行
struct point a;

宣告變數 a 為 point 結構的變數，第 11 行
struct point *aPtr = &a;

宣告並設定 aPtr 為指向變數 a 的指標，接著第 13 及 14 行
a.x = 3;
a.y = 4;

便是利用結構成員運算子指派初值給變數 a ，最後第 16 及 17 行
printf("a = (%d, %d)\n", a.x, a.y);  
printf("*aPtr = (%d, %d)\n", aPtr->x, aPtr->y);

分別用結構成員運算子及結構指標運算子取出 a 的值並印在螢幕上。


第 13 及 14 行替結構設值可以用以下
struct point a = {3, 4};

來替代，利用大括弧指派初值，大括弧內依序是各個結構成員。


利用關鍵字 typedef 可以替結構建立新型態名稱
#include <stdio.h>

struct point {
    int x;
    int y;
};

typedef struct point Point;

int main(void)
{
    Point a = {3, 4};
    
    printf("a = (%d, %d)\n", a.x, a.y);  

    return 0;
}

/* 《程式語言教學誌》的範例程式
    http://pydoing.blogspot.com/
    檔名：structtypedef.c
    功能：示範利用 typedef 建立新型態名稱
    作者：張凱慶
    時間：西元2010年4月 */

編譯後執行，如下



第 8 行
typedef struct point Point;

替結構 point 建立 Point 型態名稱，因此往後可以直接使用 Point ，無須 struct point 兩字連用。


typedef 也可以直接寫進結構定義中，第 3 到 8 行可用以下寫法代替
typedef struct point {
    int x;
    int y;
} Point;

結構中的成員也可以是結構，例如
#include <stdio.h>

typedef struct point {
    int x;
    int y;
} Point;

typedef struct line {
    Point start;
    Point end;
} Line;

int main(void)
{
    Line a = {3, 4, 5, 6};
    
    printf("start = (%d, %d)\n", a.start.x, a.start.y);  
    printf("end = (%d, %d)\n", a.end.x, a.end.y);

    return 0;
}

/* 《程式語言教學誌》的範例程式
    http://pydoing.blogspot.com/
    檔名：structstruct.c
    功能：示範在結構中使用其他結構當作成員
    作者：張凱慶
    時間：西元2010年4月 */

編譯後執行，如下



結構還有另一個主題，自我參考的結構

C 語言的衍生資料型態
到 C 語言的指標
到 C 語言的陣列
到 C 語言的結構
到 C 語言的聯合
到 C 語言的函數

回 C 快速導覽 
回 C 教材目錄 
迴首頁




以電子郵件傳送這篇文章BlogThis！分享至 Twitter分享至 Facebook分享到 Pinterest


















標籤：
C語言快速導覽,
C語言教學






沒有留言:





張貼留言











較新的文章


較舊的文章

首頁




訂閱：
張貼留言 (Atom)

























搜尋此網誌




























E-mail 訂閱






























RSS 訂閱













連結到本站



kaichingc@gmail.com










































重要說明

本站教材的設計目標是以高中生到大一程度或程式設計的完全新手為主，尤其《入門指南》系列帶領讀者開發簡單的 GUI 軟體，簡言之目標為學習開發軟體的流程，其作為學習程式語言的第一本書，而非最後一本書，建議您完成《入門指南》後繼續找尋其他書籍研讀程式設計的技巧及程式語言的細節，語言細節部分也可先參考本站的《快速導覽》或《速查手冊》，謝謝。











本站電子書


Google Play Books 

如何自學寫作 V1.00
如何自學程式設計 V1.00
如何自學程式設計 第二部分 V2.00
C 的一堂課 V2.00
Python 的一堂課 V2.00
Python 新手之旅 V1.10
Python 入門指南 V2.31
C++ 入門指南 V2.21
C++ 速查手冊 V1.02
Java 入門指南 V2.11
Swift 入門指南 V1.21
HTML 的一堂課 V5.00
CSS 的一堂課 V1.00
EPUB 的一堂課 V1.00

iBooks Store

如何自學程式設計 V1.00
Python 的一堂課 V1.00
Python 新手之旅 V1.10
Python 入門指南 V2.31
C++ 入門指南 V2.21
C++ 速查手冊 V1.02
Java 入門指南 V2.11
Swift 入門指南 V1.21
EPUB 的一堂課 V1.10

Readmoo

如何自學寫作 V1.00
如何自學程式設計 V1.00
Python 新手之旅 V1.10
Python 入門指南 V2.30
C++ 入門指南 V2.20
C++ 速查手冊 V1.02
Java 入門指南 V2.10
Swift 入門指南 V1.02

HyRead

Python 的一堂課 V1.00H
Python 新手之旅 V1.00H
Python 入門指南 V2.00H
C++ 入門指南 V2.00H
C++ 速查手冊 V1.00H
Java 入門指南 V2.00H
Swift 入門指南 V1.00H

Pubu - PDF

如何自學程式設計 V1.00
Python 的一堂課 V1.00
Python 新手之旅 V1.10
Python 入門指南 V2.31
Python 入門指南 + 新手之旅
C++ 入門指南 V2.21
C++ 速查手冊 V1.02
C++ 入門指南 + 速查手冊
Java 入門指南 V2.11
Swift 入門指南 V1.21
程式語言入門指南四選二
程式設計入門套書：六本一次打包帶走

印客邦 - 紙本書

如何自學程式設計（合訂本） V2.00
C++ 入門指南 V2.30（附 C 的一堂課）
C++ 速查手冊 V1. 20
Java 入門指南 V3.00
Python 入門指南 V2.40（附 Python 的一堂課）
Swift 入門指南 V3.00






















































Java 程式語言教學











BCC-16 (in Chinese) 計算機概論十六講 Tutorial -- C Programming Language




C 程式語言線上教材


這一套教材基本上是按照以下這本書編寫的。

B. W. Kernighan, D. M. Ritchie, The C Programming Language, 2nd ed.
Prentice-Hall, 1988.

Ritchie 是 C 語言的發明人。
雖然發明人未必是最好的說明人，但是我發現 Ritchie 的文章也是很好的。
而且，這本書的合作者 Kernighan 是在貝爾實驗室實施教育訓練的人，
他的專長應該就是說明技術細節、和設計教材。
就我個人而言，我認為這本書是極少數的讓我讀起來感到愉快的電腦技術性書籍。



在這份教材中，我們稱以上那本書為 [K&R2]。


這本書已經有中文翻譯本。但是我自己從未讀過，不知該不該推薦。


我們假設的學習環境，是 UNIX 作業系統。
最好能有 gcc 編譯程式，有 screen 模擬文字視窗的功能。


[ 相逢篇 ]‧[ 認識篇 ]‧
[ 交遊篇 ]‧[ 追求篇 ]



C 程式語言---相逢篇
預備工具
hello, world---hello.c
檔頭與註解
C 的字 (word)、語句 (expression) 和指令 (statement)
函式 (function)
標準函式庫 (standard library)
整數變數 int---fahr-int.c
printf() 與跳脫字元 \ (escape character)
宣告 vs 定義
整數計算
浮點數變數 double---fahr-float.c
其他資料型態與它們之間的轉換 (char、short)
流程控制 (flow control)---f2c-straight.c
while---f2c-while.c
邏輯計算
排版格式 (indentation)
原始碼的可讀性、符號常數 (symbolic constant)---f2c-sym.c
for---f2c-for.c f2c-whfor.c
更多的迭代範例
再多點兒技巧的迭代範例
getchar() 和 putchar()---mycat0.c
標準輸入裝置  stdin
為什麼 getchar() 要儲存到 int 資料型態的變數？
優先序與左右傾觀念---mycat.c
sizeof 和 ++、-- 運算---nc-long.c、nc-double.c、nc-whfor.c
if---nl.c
廣義字，if-else 與 || 算子---mywc.c
|| 和 && 算子
層層相套的 if-else
數學函式 <math.h>---test-pow.c、test-ceil.c


C 程式語言---認識篇
序列 array 資料結構---digits-ifelse.c、digits.c
序列編號---toolong.c
++ 的前後差別意義
序列計算的範例---demo-stats.c、prime.c
雙足標序列---test-matrix.c
矩陣與向量計算範例---demo-dot.c、demo-mvmul.c
使用者自定函式---test-ipow.c
使用函式做數學計算的範例---newton-iteration.c、trapezoidal.c、collatz.c
遞迴---fac()
更多遞迴的範例---choose()
+=、-=、*=、/=、%= 運算符號
void---test-void.c
address-of 運算符號---test-address.c
scanf() 函式---test-scanf.c、stats-scanf.c、g58.txt
指標資料型態 (pointer)---test-pointer.c
讀取磁碟檔案---test-getc.c
寫入磁碟檔案---test-putc.c
格式化讀寫檔案---stats-fscanf.c、test-fprintf.c
stdin 和 stdout
de-reference 運算符號
Call by Value---test-callvalue.c、ipow() 第二版
Call by Name---test-callname-ref.c、test-callname-arr.c
Call by Name   vs   Call by Value
向量值函數的範例---demo-polar.c
字串 (String)---printf-string.c
字串銜接與複製
main() 函式的返回值---main-return.c
用 return 中斷函式
main() 函式的輸入參數 stats-arg
stderr



C 程式語言---交遊篇
再談關於字 (word) 的規則
再談資料型態與含量---test-char.c、int2char.c
再談常數
一次讀一列字元的函式：getline()---cline.c、getline()
當佇列滿溢的解決範例---maxline.c
字串與函式的應用範例---dewhite.c
字串與 <string.h>---test-strlen.c、test-strlen.c
再談 printf() 的輸出格式---pow2_113.c
ASCII 控制碼---VT_BS.c
唯讀變數 const
唯讀變數 vs 符號常數
enum
逗點指令---reverse()
語句執行的順序
再談資料型態轉換 (cast)
位元計算---bcount()
條件語句 ?:
巨集---ROUND()
再談優先序
使用者自定外部函式---s2i()、test_s2i.c
do-while---i2s()、test_i2s.c
continue---mean.c
break---trim.c
switch---par2str.c
排序---nsort()
搜尋---search()、vsearch()
goto---vsearch() goto 版、prime.c goto 版
快速搜尋---binsearch()


C 程式語言---追求篇
髏數的位址
指標資料型態 (pointer)
main(int, char*[]) 的參數
+標與足標、指標算術
無型態咽標   void*
列印記憶體內的位元排列
&A談 Call by Name  vsearch() 第三版
變數的有效範圍、外部變數 (b18)
函數當作函數的參數---mysort.c


[ 相逢篇 ]‧[ 認識篇 ]‧
[ 交遊篇 ]‧[ 追求篇 ]


































製作人、修改記錄


單維彰 (2000/04/04) ---  01/01/06 (單), 03/04/26 (單)


