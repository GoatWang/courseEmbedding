


Wiki - 課程進度與開放資源





















成大資工 Wiki


所有頁面
分類
隨機頁面
最近活動
上傳檔案

本頁面

頁面原始檔
可列印版本
刪除本頁




登入 / 註冊帳號
登出 









搜尋
前往


LaTeXConTeXtTexinforeSTMarkdownCommonMarkPlain textMediaWikiOrg-modeICMLTextileAsciiDocMan pageDocBookDZSlidesSlidyS5EPUBODTDOCXRTF 













viewedithistorydiscuss

課程進度與開放資源


Instructor: Jim Huang (黃敬群) <jserv.tw@gmail.com>

Facebook 粉絲專頁 (不要擔心提了笨問題，這就是專門和學生互動的)

討論區: https://www.facebook.com/groups/system.software2016/
共筆: https://embedded2016.hackpad.com
課程信箱: <embedded.master2015@gmail.com>
參考硬體平臺: STM32, STMicroelectronics

嵌入式作業系統設計與實作 (Spring 2016)






Week
Date
Subject
Assignment




#1
Feb 23
2016q1 Overview
= 2016q1: Homework1 =


#2
Mar 1
2016q1:基本能力鑑定測驗
-


#3
Mar 8
Code Review
= 2016q1: Homework2 =


#4
Mar 15
Synchronization and POSIX Threads
-


#5
Mar 22
Object-Oriented Programming & Thread
= 2016q1: Homework3 =


#6
Mar 29
Threading and ARM
= 2016q1: Homework4 =


#7
Apr 5
停課一次 / Embedded Linux Conference


#8
Apr 12
ARM architecture
= 2016q1: Homework5 =


#9
Apr 19
OS Scheduling


#10
Apr 26
分組報告(A)


#11
May 3
分組報告(B)


#12
May 10
作業系統發展回顧 + 即時 Linux 的工業應用


#13
May 17
分組報告(C)


#14
May 24
中斷、排程，多核心處理


#15
May 31
分組報告(D)


#16
Jun 7
分組報告(E)


#17
Jun 14
分組報告(F)


#18
Jun 21
分組報告(G) + 期末總結



進階嵌入式系統設計與實作 (Fall 2015)






Week
Date
Subject
Assignment




#1
Sep 18
2015q3 Overview
= 2015q3: Homework1 ; 2015q3: Ext1 =


#2
Sep 25
2015q3:基本能力鑑定測驗
-


#3
Oct 2
ARM Architecture and Optimization Concepts
= 2015q3: Homework2 ; 2015q3: Homework3 =


#4
Oct 9
國定假日
-


#5
Oct 16
Compilers + Calling Convention
= 2015q3: Homework4 =


#6
Oct 23
專題演說
= 2015q3: Homework5 =


#7
Oct 30
Code Review
= 2015q3: Homework6 =


#8
Nov 6
C Programming + ARM
= 2015q3: Homework7 =


#9
Nov 13
From Hello to Preemptive Scheduler
= 2015q3: Homework8 =


#10
Nov 20
From ARM core to Peripherals
= 2015q3: Homework9 =


#11
Nov 27
STM32 + Peripherals
= 2015q3: Homework10 =


#12
Dec 4
Peripherals: GPIO ADC
QA: GPIO, QA: ADC


#13
Dec 11
; Peripherals: SPI; uVisor
QA: SPI


#14
Dec 18
課程公告; Peripherals: USART, Flash, I2C
QA: USART, QA: Flash, QA: I2C


#15
Dec 25
專題演說
QA: USB


#16
Jan 1
Happy New Year!
*


#17
Jan 8
Code Review / 作業回顧
*


#18
Jan 15
Software Quality + Security Issues
*



嵌入式作業系統設計與實作 (Spring 2015)






Week
Date
Subject
Assignment




#1
Feb 24
2015q1 Overview
*


#2
Mar 3
2015q1:基本能力鑑定測驗
Lab 38: ARM Cross-Development Environment


#3
Mar 10
ARM Architecture + OS Concepts
Lab 39: FreeRTOS


#4
Mar 17
ARM Exceptions/Interrupts
Lab 40: Scheduling


#5
Mar 24
Embedded Linux Conference 2015
Lab 41: 基礎觀念訓練


#6
Mar 31
ARM and RTOS: Part I
確認 Lab 38, Lab 39, Lab 40, Lab 41 均充分完成


#7
Apr 7
ARM and RTOS: Part II
Lab 42: Mini ARM OS


#8
Apr 14
From Hello to Preemptive Scheduler
Lab 42: Mini ARM OS


#9
Apr 21
Kernel Concepts and Threading
Lab 43: Runtime Behavior


#10
Apr 28
2015q1:Group Presentation(1)
*


#11
May 5
2015q1:Group Presentation(2)
*


#12
May 12
2015q1:Group Presentation(3)
*


#13
May 19
2015q1:Group Presentation(4)
*


#14
May 26
2015q1:Group Presentation(5)
*


#15
Jun 2
2015q1:Group Presentation(6)
*


#16
Jun 9
2015q1:Group Presentation(7)
*


#17
Jun 16
2015q1:Group Presentation(8)
*


#18
Jun 23
2015q1:Group Presentation(9)
*



進階嵌入式系統開發與實作 (Fall 2014)






Week
Date
Subject
Assignment




#1
Sep 18
2014q3 Overview
Lab 31: ARM Environment


#2
Sep 25
ARM Architecture (cont)
Lab 32: QEMU + FreeRTOS


#3
Oct 2
ARM Architecture (cont2)
Lab 33: GDB + FreeRTOS


#4
Oct 9
ARM Architecture and Interface
Lab 34: Buffer overflow


#5
Oct 16
Hardware Concepts Review
Lab 35: STM32F429


#6
Oct 23
Code Review for Lab 32-33
Lab 35: STM32F429


#7
Oct 30
Code Review + ELF
Lab 36: ELF


#8
Nov 6
Interrupt/Exceptions + RTOS
Lab 37: Memory allocation


#9
Nov 13
2014q3:Group Presentation (1)
-


#10
Nov 20
2014q3:Group Presentation (2)
-


#11
Nov 27
2014q3:Group Presentation (3)
-


#12
Dec 4
2014q3:Group Presentation (4)
-


#13
Dec 11
2014q3:Group Presentation (5)
侯捷 C++ 底層技術課程分享


#14
Dec 18
2014q3:Group Presentation (6)
-


#15
Dec 25
2014q3:Group Presentation (7)
-


#16
Jan 1
Happy New Year!
-


#17
Jan 8
2014q3:Group Presentation (8)
-


#18
Jan 15
2014q3:Group Presentation (9)
-


#18
Jan 17
期末展示
-



嵌入式作業系統設計與實作 (Spring 2014)






Week
Date
Subject
Assignment




#1
Feb 18
Overview: Embedded Systems and OS
Lab 25


#2
Feb 25
ARM Architecture Evolution
Lab 26


#3
Mar 4
Case: Quadcopter
Lab 27


#4
Mar 11
Assignment Review
Lab 28


#5
Mar 18
ARM Cortex-M + RTOS Concepts
Lab 29


#6
Mar 25
ARM I/O, Interrupt, Exception
Lab 30


#7
Apr 1
春假
:


#8
Apr 8
Advanced OS Design issues
:


#9
Apr 15
Group Presentation (a)
:


#10
Apr 22
Group Presentation (b)
:


#11
Apr 29
Group Presentation (c)
:


#12
May 6
Group Presentation (d)
:


#13
May 13
Group Presentation (d)
:


#14
May 20
Group Presentation (f)
:


#15
May 27
Group Presentation (g)
:


#16
Jun 3
Group Presentation (h)
:


#17
Jun 10
Talk: 雲、端、架構
:


#18
June 17
Group Presentation
:


#18
Jun 21
期末成果展示
:



進階嵌入式系統開發與實作 (Fall 2013)






Week
Date
Subject
Assignment




#1
Sep 17
Overview: Embedded in our world
Lab 19: QEMU


#2
Sep 23
ARM Architecture and SoC
Lab 20: GNU Toolchain


#3
Oct 1
Operating Systems for Embedded
Lab 20: GNU Toolchain


#4
Oct 8
ARM: Instructions
Lab 21: RTOS (1)


#5
Oct 15
ARM: Toolchain and Peripherals
Lab 22: RTOS (2)


#6
Oct 22
ARM: Interrupts and Exceptions
Lab 23: RTOS (3)


#7
Oct 29
Code Review
-


#8
Nov 5
Code Review + Group Presentation(1)
Lab 24: Hardware


#9
Nov 12
3D Printer + Group Presentation(2)
-


#10
Nov 19
Group Presentation(3)
-


#11
Nov 26
Speech + Group Presentation(4)
-


#12
Dec 3
Group Presentation(5)
-


#13
Dec 10
Group Presentation(6)
-


#14
Dec 17
Group Presentation(7)
-


#15
Dec 24
Group Presentation(8)
-


#16
Dec 31
Group Presentation(9)
-


#17
Jan 7
Group Presentation(10)
-


#18
Jan 12
期末展示
-



嵌入式作業系統設計與實作 (Spring 2013)






Week
Date
Subject
Assignment




#1
Feb 19
課程介紹 + 期初考


#2
Feb 26
Embedded Operating System Concepts
Lab 8 : GNU Toolchain + RTOS (Sol 8)


#3
Mar 5
RTOS Characteristics
Lab 9 : Multitasking programming (Sol 9)


#4
Mar 12
從火星探測號談 scheduling
Lab 10 : Priority Inversion (Sol 10)


#5
Mar 19
ARM Architecture Intro
Lab 11: Build RTOS for ARM (Sol 11)


#6
Mar 26
ARM Architecture Intro + 月考
Lab 12: RTOS Visualization (Sol 12)


#7
Apr 2
春假



#8
Apr 9
ARM and Assignment Review
Lab 13: ARM Programming with GNU Toolchain (Sol 11)


#9
Apr 16
I/O, Interrupt, Exception (ARM)
Lab 14: OS and BSP Porting (Sol 14)


#10
Apr 23
RTOS Evaluation
Lab 15: Benchmarking concepts


#11
Apr 30
Case Study: Train control + 月考
Lab 15: Validation and benchmarking


#12
May 7
Tickless scheduling
Lab 16: Hardware Enablement


#13
May 14
Embedded Kernel Design Review
Lab 17: Tickless scheduling for ARM hardware


#14
May 21
Embedded Kernel Design Review-2
Lab 18: OS Evaluation for ARM


#15
May 28
Automotive Linux Summit (Spring) +月考



#16
Jun 4
Open Discussion



#17
Jun 11
The End




進階嵌入式系統開發與實作 (Fall 2012)






Week
Date
Subject
Assignment




#1
Sep 18
Overview: Embedded - Why and How
Lab 1: QEMU


#2
Sep 25
ARM Architecture (Basic)
Lab 2: GNU Toolchain + QEMU/ARM


#3
Oct 2
Realtime Operating System (Basic)
Lab 2s: GNU Toolchain + QEMU/ARM


#4
Oct 9
Timer, Interrupt, Exception in ARM
Lab 3: GNU Toolchain + RTOS


#5
Oct 16
RTOS Design and Implementation
Lab 4: RTOS for MCU


#6
Oct 23
Code review of Lab assignments
Lab 5: RTOS modifications


#7
Oct 30
Peripherals and hardware interface
Lab 6: Hardware


#8
Nov 6
Embedded Linux Conference Europe
分組準備與討論


#9
Nov 13
Group Presentation (1)
分組準備與討論


#10
Nov 20
Group Presentation (2)
Lab 6: Hardware + Unit Test


#11
Nov 27
Group Presentation (3)
Lab 6: Hardware + On-Chip Debugger


#12
Dec 4
Group Presentation (4)
Lab 7: On-Chip Debugger + semihosting


#13
Dec 11
Group Presentation (5)
Hack!


#14
Dec 18
Group Presentation (6)
Hack!


#15
Dec 25
Group Presentation (7)
Hack!


#16
Jan 1
Happy New Year - 2013
N/A


#17
Jan 8
Final project review (and vote)
N/A


#18
Jan 15
Make Your Own System (and profit)
DONE


embeddedarmstm32rtoskernellinuxncku




Please enable JavaScript to view the comments powered by Disqus.




本站所有內容，除另有標註外，採用創用 CC 姓名標示-相同方式分享 3.0 台灣 授權條款授權
	

說明
Powered by gitit
Customized by CrBoy














﻿﻿








國立交通大學開放式課程(OpenCourseWare, OCW)









 










 交大首頁  |  聯絡我們  |  網站導覽  |  常見問答  |  相關連結  |  English 


 
 

 






















 

 




 








            作業系統設計與實作 Operating System Design and Implementation (OSDI)  -  L2 Getting started with kernel and kernel debugging (全)          











 


 
 
 
 








 


週次
 章節
 影音格式



 L2 Getting started with kernel and kernel debugging (全)
 
 



 L2 Getting started with kernel and kernel debugging (1/5)
 
 



 L2 Getting started with kernel and kernel debugging (2/5)
 
 



 L2 Getting started with kernel and kernel debugging (3/5)
 
 



 L2 Getting started with kernel and kernel debugging (4/5)
 
 



 L2 Getting started with kernel and kernel debugging (5/5)
 
 



 L3 Booting process (全)
 
 



 L3 Booting process (1/3)
 
 



 L3 Booting process (2/3)
 
 



 L3 Booting process (3/3)
 
 



 L4 Process Management – Part I (全)
 
 



 L4 Process Management – Part I (1/3)
 
 



 L4 Process Management – Part I (2/3)
 
 



 L4 Process Management – Part I (3/3)
 
 



 L5 Process Management – Part II (全)
 
 



 L5 Process Management – Part II (1/3)
 
 



 L5 Process Management – Part II (2/3)
 
 



 L5 Process Management – Part II (3/3)
 
 



 L6 Memory Management – Part I (全)
 
 



 L6 Memory Management – Part I (1/3)
 
 



 L6 Memory Management – Part I (2/3)
 
 



 L6 Memory Management – Part I  (3/3)
 
 



 L7 Memory Management – Part II (全)
 
 



 L7 Memory Management – Part II (1/3)
 
 



 L7 Memory Management – Part II (2/3)
 
 



 L7 Memory Management – Part II (3/3)
 
 



 L8 Memory Management – Part III (全)
 
 



 L8 Memory Management – Part III (1/3)
 
 



 L8 Memory Management – Part III (2/3)
 
 



 L8 Memory Management – Part III (3/3)
 
 



 L9 Kernel Synchronization (全)
 
 



 L9 Kernel Synchronization (1/3)
 
 



 L9 Kernel Synchronization (2/3)
 
 



 L9 Kernel Synchronization (3/3)
 
 



 L10 Interrupt and Interrupt Handling - Part I
 
 



 L10 Interrupt and Interrupt Handling - Part I (1/2)
 
 



 L10 Interrupt and Interrupt Handling - Part I (2/2)
 
 



 L10 Interrupt and Interrupt Handling - Part II (全)
 
 



 L10 Interrupt and Interrupt Handling - Part II (1/3)
 
 



 L10 Interrupt and Interrupt Handling - Part II (2/3)
 
 



 L10 Interrupt and Interrupt Handling - Part II (3/3)
 
 



 L11 Filesystem and Block I/O (全)
 
 



 L11 Filesystem and Block I/O (1/3)
 
 



 L11 Filesystem and Block I/O (2/3)
 
 



 L11 Filesystem and Block I/O (3/3)
 
 



 L12 Network Protocol and NIC Driver (全)
 
 



 L12 Network Protocol and NIC Driver (1/3)
 
 



 L12 Network Protocol and NIC Driver (2/3)
 
 



 L12 Network Protocol and NIC Driver (3/3)
 
 









請提供任何對本課程之意見，作為後續改進之參考。


 









 





 

課程首頁


課程影音


課程講義


 
                  課程綱要                  


 
                  課程行事曆                  






 







 

所有課程




 
                  理學院                   




 
                  工學院                   




 
                  電機學院                   




 
                  管理學院                   




 
                  資訊學院                   




 
                  生物科技學院                   




 
                  人文社會學院                   




 
                  客家文化學院                   




 
                  通識課程                   




 
                  華語中心                   




 
                  經典通識教育講座                  




 
                  經典名著選讀                   







 


























 






本網站內容僅供學術使用，嚴禁任何商業行為。
Copyright © 2006-2015 National Chiao Tung University. All rights reserved.　 
諮詢單位：交通大學開放教育推動中心(OEO)/理學院 E-learning推動小組　E-Mail：nctuocw@gmail.com
諮詢專線：03-5712121轉56072





﻿


















﻿








國立交通大學開放式課程(OpenCourseWare, OCW)









 










 交大首頁  |  聯絡我們  |  網站導覽  |  常見問答  |  相關連結  |  English 


 
 

 






















 

 




 







作業系統設計與實作 Operating System Design and Implementation (OSDI)








 
 
 
 










課程首頁

	本課程是由交通大學資訊工程學系提供。

	 

	本課程以Linux 作業系統為基礎來講授作業系統內部的設計與實作方法。課程將透過一系列的實驗模組，來對Linux的行程管理，記憶體管理，檔案系統，輸出入系統進行深入的剖析以及修改。修課學生預計除了累積實際動手修改作業系統的經驗，亦可培養大型程式專案規劃的概念以及大量程式原始碼追蹤（trace）的能力。
 


 





授課教師
資訊工程學系 曹孝櫟老師



課程學分
3



授課年度
104學年度



授課對象
碩士生



預備知識
計算機組織概論、作業系統概論


本課程提供

課程影音　
    課程講義  　   課程綱要　 
         課程行事曆　 
            





個人評分：

 
 
 

 

評論分數：
 





 (共
              11              人評分)
點閱數：
              10502              








請提供任何對本課程之意見，作為後續改進之參考。


 









 








課程首頁


課程影音


課程講義


課程綱要


課程行事曆










 

所有課程




 
                  理學院                   




 
                  工學院                   




 
                  電機學院                   




 
                  管理學院                   




 
                  資訊學院                   




 
                  生物科技學院                   




 
                  人文社會學院                   




 
                  客家文化學院                   




 
                  通識課程                   




 
                  華語中心                   




 
                  經典通識教育講座                  




 
                  經典名著選讀                   







 


























 






本網站內容僅供學術使用，嚴禁任何商業行為。
Copyright © 2006-2015 National Chiao Tung University. All rights reserved.　 
諮詢單位：交通大學開放教育推動中心(OEO)/理學院 E-learning推動小組　E-Mail：nctuocw@gmail.com
諮詢專線：03-5712121轉56072





﻿














作業系統設計與實作 Operating System Design and Implementation (OSDI)















Wiki - 嵌入式作業系統設計與實作 (2014 Spring) :: 期末專題清單





















成大資工 Wiki


所有頁面
分類
隨機頁面
最近活動
上傳檔案

本頁面

頁面原始檔
可列印版本
刪除本頁




登入 / 註冊帳號
登出 









搜尋
前往


LaTeXConTeXtTexinforeSTMarkdownCommonMarkPlain textMediaWikiOrg-modeICMLTextileAsciiDocMan pageDocBookDZSlidesSlidyS5EPUBODTDOCXRTF 













viewedithistorydiscuss

嵌入式作業系統設計與實作 (2014 Spring) :: 期末專題清單




最新資訊

期末專題訂於 2014 年 6 月 21 日 (週六)
地點：成功大學電機系一樓 繁城講堂 (地圖)

時間表

每組 25 分鐘 (含 Q&A)
關於演講人黃耀文執行長的商周報導








時段
議程




10:00-11:30
專題演講: 創業救國 / 阿碼科技 黃耀文 執行長


13:10-14:25
分組報告(x3)


14:25-14:30
break


14:30-15:55
分組報告(x3)


15:55-16:10
break


16:10-17:25
分組報告(x3)


17:35-
講評



期末專題目標

「人在作，Google 在看」，我們會邀請同學未來可能的雇主、同事們來評分
去年的 期末專題 水準
所有開發過程都公開，最終成果用 open source 形式釋出
從底層到上層應用，一手通包，體驗打造具體而微系統的過程

分組表

第1組 (2G手機) [1]
第2組 (電吉他調音器) [4]
第3組 (robot arm)
第4組 (F9 microkernel 的 driver model)
第5組 (高精度繪圖機) [2]
第6組 (防盜攝影機) [3]
第7組 (空氣烏克麗麗) [6]
第8組 (Firefox OS) [5]
第9組 (自動翻書機) [7]
第10組 (uGFX) [8]
第11組 (基於 OpenRISC 之多核心軟硬體整合專案開發) [9]

(方括號數字為報告順序)
致謝

感謝 STMicroelectronics 捐贈 STM32F429i-Discovery 硬體開發板
感謝 鴻海科技集團 捐贈 BananaPi 硬體開發板
感謝 台達電子 提供資金協助
感謝 社會各界熱心人士 捐贈 Raspberry Pi, Beaglebone, STM32F429i-Discovery, APC, Cubieboard

聯絡人

講師: 黃敬群 jserv.tw@gmail.com
助教: 陳秉文 nicholas800208@gmail.com
embedded2014




Please enable JavaScript to view the comments powered by Disqus.




本站所有內容，除另有標註外，採用創用 CC 姓名標示-相同方式分享 3.0 台灣 授權條款授權
	

說明
Powered by gitit
Customized by CrBoy

















作業系統 - 維基百科，自由的百科全書































 







作業系統

維基百科，自由的百科全書


					前往：					導覽，					搜尋

























「operating system」的各地常用別名


中國大陸
操作系統


港臺
作業系統






作業系統簡略架構






作業系統架構，以Linux為例


作業系統（英語：operating system，縮寫：OS）是管理電腦硬體與軟體資源的電腦程式，同時也是電腦系統的核心與基石。作業系統需要處理如管理與配置記憶體、決定系統資源供需的優先次序、控制輸入與輸出裝置、操作網路與管理檔案系統等基本事務。作業系統也提供一個讓使用者與系統互動的操作介面。
作業系統的型態非常多樣，不同機器安裝的作業系統可從簡單到複雜，可從行動電話的嵌入式系統到超級電腦的大型作業系統。許多作業系統製造者對它涵蓋範疇的定義也不盡一致，例如有些作業系統整合了圖形化使用者介面，而有些僅使用命令列介面，而將圖形化使用者介面視為一種非必要的應用程式。
作業系統理論在電腦科學中，為歷史悠久而又活躍的分支；而作業系統的設計與實現則是軟體工業的基礎與核心。



目錄


1 歷史

1.1 1980年代前
1.2 1980年代
1.3 1990年代
1.4 今日

1.4.1 個人電腦
1.4.2 大型電腦
1.4.3 嵌入式
1.4.4 類Unix系統
1.4.5 微軟Windows
1.4.6 蘋果macOS
1.4.7 Chrome OS
1.4.8 其他


1.5 未來


2 功能

2.1 行程管理
2.2 記憶體管理
2.3 磁碟與檔案系統
2.4 網路
2.5 安全

2.5.1 內部通訊安全
2.5.2 外部通訊安全


2.6 使用者介面
2.7 驅動程式


3 結構
4 分類

4.1 核心結構
4.2 通用與專用、嵌入式
4.3 即時與非即時
4.4 8位元、16位元、32位元、64位元、128位元


5 參考文獻

5.1 參照
5.2 書目


6 外部連結
7 參見



歷史[編輯]




各類平臺上作業系統的功能演化


主條目：作業系統歷史
綜觀電腦之歷史，作業系統與電腦硬體的發展息息相關。作業系統之本意原為提供簡單的工作排序能力，後為輔助更新更複雜的硬體設施而漸漸演化。從最早的批次模式開始，分時機制也隨之出現，在多處理器時代來臨時，作業系統也隨之添加多處理器協調功能，甚至是分散式系統的協調功能。其他方面的演變也類似於此。另一方面，在個人電腦上，個人電腦之作業系統因襲大型電腦的成長之路，在硬體越來越複雜、強大時，也逐步實踐以往衹有大型電腦才有的功能。
總而言之，作業系統的歷史就是一部解決電腦系統需求與問題的歷史。
1980年代前[編輯]




IBM System/360，大型主機的經典之作


第一部電腦並沒有作業系統。這是由於早期電腦的建立方式（如同建造機械算盤）與效能不足以執行如此程式。但在1947年發明瞭電晶體，以及莫裡斯·威爾克斯發明的微程式方法，使得電腦不再是機械裝置，而是電子產品。系統管理工具以及簡化硬體操作流程的程式很快就出現了，且成為作業系統的濫觴。到了1960年代早期，商用電腦製造商製造了批次處理系統，此系統可將工作的建置、排程以及執行序列化。此時，廠商為每一臺不同型號的電腦創造不同的作業系統，因此為某電腦而寫的程式無法移植到其他電腦上執行，即使是同型號的電腦也不行。
到了1964年，IBM System/360推出了一系列用途與價位都不同的大型電腦，而它們都共用代號為OS/360的作業系統（而非每種產品都用量身訂做的作業系統）。讓單一作業系統適用於整個系列的產品是System/360成功的關鍵，且實際上IBM目前的大型系統便是此系統的後裔，為System/360所寫的應用程式依然可以在現代的IBM機器上執行。
OS/360也包含另一個優點：永久貯存裝置—硬碟的面世（IBM稱為DASD）。另一個關鍵是分時概念的建立：將大型電腦珍貴的時間資源適當分配到所有使用者身上。分時也讓使用者有獨佔整部機器的感覺；而Multics的分時系統是此時眾多新作業系統中實踐此觀念最成功的。
1963年，奇異公司與貝爾實驗室合作以PL/I語言建立的Multics[1]，是激發1970年代眾多作業系統建立的靈感來源，尤其是由AT&T貝爾實驗室的丹尼斯·里奇與肯·湯普遜所建立的Unix系統，為了實踐平臺移植能力，此作業系統在1973年由C語言重寫；另一個廣為市場採用的小型電腦作業系統是VMS。
1980年代[編輯]
第一代微型電腦並不像大型電腦或小型電腦，沒有裝設作業系統的需求或能力；它們只需要最基本的作業系統，通常這種作業系統都是從ROM讀取的，此種程式被稱為監視程式（Monitor）。1980年代，家用電腦開始普及。通常此時的電腦擁有8-bit處理器加上64KB記憶體、螢幕、鍵盤以及低音質喇叭。而80年代早期最著名的套裝電腦為使用微處理器6510（6502晶片特別版）的Commodore C64。此電腦沒有作業系統，而是以一8KB唯讀記憶體BIOS初始化彩色螢幕、鍵盤以及軟碟機和印表機。它可用8KB唯讀記憶體BASIC語言來直接操作BIOS，並依此撰寫程式，大部分是遊戲。此BASIC語言的直譯器勉強可算是此電腦的作業系統，當然就沒有核心或軟硬體保護機制了。此電腦上的遊戲大多跳過BIOS層次，直接控制硬體。



家用電腦C64的抽象架構


簡單應用程式
機器語言
（遊戲直接操作）


8k BASIC ROM



8k ROM-BIOS



硬體（中央處理器、儲存裝置等）



早期最著名的磁碟啟動型作業系統是CP/M，它支援許多早期的微電腦，且被MS-DOS大量抄襲其功能。最早期的IBM PC其架構類似C64。當然它們也使用了BIOS以初始化與抽象化硬體的操作，甚至也附了一個BASIC直譯器！但是它的BASIC優於其他公司產品的原因在於他有可攜性，並且相容於任何符合IBM PC架構的機器上。這樣的PC可利用Intel-8088處理器（16-bit暫存器）定址，並最多可有1MB的記憶體，然而最初只有640KB。軟式磁碟機取代了過去的磁帶機，成為新一代的儲存裝置，並可在他512KB的空間上讀寫。為了支援更進一步的檔案讀寫概念，磁碟作業系統（Disk Operating System，DOS）因而誕生。此作業系統可以合併任意數量的磁區，因此可以在一張磁碟片上放置任意數量與大小的檔案。檔案之間以檔名區別。IBM並沒有很在意其上的DOS，因此以向外部公司購買的方式取得作業系統。1980年微軟公司取得了與IBM的合約，並且收購了一家公司出產的作業系統，在將之修改後以MS-DOS的名義出品，此作業系統可以直接讓程式操作BIOS與檔案系統。到了Intel-80286處理器的時代，才開始實作基本的儲存裝置保護措施。MS-DOS的架構並不足以滿足所有需求，因為它同時衹能執行最多一個程式（如果想要同時執行程式，只能使用ISR（中斷處理常式）的方式來跳過OS而由程式自行處理多工的部份），且沒有任何記憶體保護措施。對驅動程式的支援也不夠完整，因此導致諸如音效裝置必須由程式自行設置的狀況，造成不相容的情況所在多有。某些操作的效能也是可怕地糟糕。許多應用程式因此跳過MS-DOS的服務程式，而直接存取硬體裝置以取得較好的效能。雖然如此，但MS-DOS還是變成了IBM PC上面最常用的作業系統（IBM自己也有推出DOS，稱為IBM-DOS或PC-DOS）。MS-DOS的成功使得微軟成為地球上最賺錢的公司之一。



MS-DOS在個人電腦上的抽象架構


普通應用程式（Shell script、文字編輯器）


MS-DOS（檔案系統）



BIOS（驅動程式）



硬體（中央處理器、儲存裝置等）



而1980年代另一個崛起的作業系統異數是Mac OS，此作業系統緊緊與麥金塔電腦綑綁在一起。此時一位全錄帕羅奧多研究中心的員工Dominik Hagen存取了蘋果電腦的史蒂夫·賈伯斯，並且向他展示了此時全錄發展的圖形化使用者介面。蘋果電腦驚為天人，並打算向全錄購買此技術，但因帕羅奧多研究中心並非商業單位而是研究單位，因此全錄回絕了這項買賣。在此之後蘋果一致認為個人電腦的未來必定屬於圖形使用者介面，因此也開始發展自己的圖形化作業系統。現今許多我們認為是基本要件的圖形化介面技術與規則，都是由蘋果電腦打下的基礎（例如下拉式選單、桌面圖示、拖曳式操作與雙點擊等）。但正確來說，圖形化使用者介面的確是全錄創始的。
1990年代[編輯]




Apple I電腦，蘋果電腦的第一代產品。


延續1980年代的競爭，1990年代出現了許多影響未來個人電腦市場深厚的作業系統。由於圖形化使用者介面日趨繁複，作業系統的能力也越來越複雜與巨大，因此強韌且具有彈性的作業系統就成了迫切的需求。此年代是許多套裝類的個人電腦作業系統互相競爭的時代。
上一年代於市場崛起的蘋果電腦，由於舊系統的設計不良，使得其後繼發展不力，蘋果電腦決定重新設計作業系統。經過許多失敗的專案後，蘋果於1997年釋出新作業系統——Mac OS X的測試版，而後推出的正式版取得了巨大的成功。讓原先失意離開蘋果的史蒂夫·賈伯斯風光再現。
除了商業主流的作業系統外，從1980年代起在開放原碼的世界中，BSD系統也發展了非常久的一段時間，但在1990年代由於與AT&T的法律爭端，使得遠在芬蘭赫爾辛基大學的另一股開源作業系統——Linux興起。Linux核心是一個標準POSIX核心，其血緣可算是Unix家族的一支。Linux與BSD家族都搭配GNU計畫所發展的應用程式，但是由於使用的許可證以及歷史因素的作弄下，Linux取得了相當可觀的開源作業系統市佔率，而BSD則小得多。相較於MS-DOS的架構，Linux除了擁有傲人的可移植性（相較於Linux，MS-DOS衹能運行在Intel CPU上），它也是一個分時多行程核心，以及良好的記憶體空間管理（普通的行程不能存取核心區域的記憶體）。想要存取任何非自己的記憶體空間的行程衹能透過系統呼叫來達成。一般行程是處於使用者模式（User mode）底下，而執行系統呼叫時會被切換成核心模式（Kernel mode），所有的特殊指令衹能在核心模式執行，此措施讓核心可以完美管理系統內部與外部裝置，並且拒絕無權限的行程提出的請求。因此理論上任何應用程式執行時的錯誤，都不可能讓系統崩潰。



幾乎完整的Linux架構圖


使用者
模式
應用程式（sh、vi、OpenOffice.org等）


複雜函式庫（KDE、glib等）




簡單函式庫（opendbm、sin等）



C函式庫（open、fopen、socket、exec、calloc等）


核心
模式
系統中斷、呼叫、錯誤等軟硬體訊息


核心（驅動程式、行程、網路、記憶體管理等）


硬體（處理器、記憶體、各種裝置）



另一方面，微軟對於更強力的作業系統呼聲的回應便是Windows NT於1999年的面世。
1983年開始微軟就想要為MS-DOS建構一個圖形化的作業系統應用程式，稱為Windows（有人說這是比爾·蓋茲被蘋果的Lisa電腦上市所刺激）。一開始Windows並不是一個作業系統，只是一個應用程式，其背景還是純MS-DOS系統，這是因為當時的BIOS設計以及MS-DOS的架構不甚良好之故。在1990年代初，微軟與IBM的合作破裂，微軟從OS/2（早期為命令列模式，後來成為一個很技術優秀但是曲高和寡的圖形化作業系統）專案中抽身，並且在1993年7月27日推出Windows 3.1，一個以OS/2為基礎的圖形化作業系統。並在1995年8月15日推出Windows 95。直到這時，Windows系統依然是建立在MS-DOS的基礎上，因此消費者莫不期待微軟在2000年所推出的Windows 2000上，因為它才算是第一個脫離MS-DOS基礎的圖形化作業系統。
底下的表格為Windows NT系統的架構：在硬體階層之上，有一個由微核心直接接觸的硬體抽象層（HAL），而不同的驅動程式以模組的形式掛載在核心上執行。因此微核心可以使用諸如輸入輸出、檔案系統、網路、資訊安全機制與虛擬記憶體等功能。而系統服務層提供所有統一規格的函式呼叫庫，可以統一所有副系統的實作方法。例如儘管POSIX與OS/2對於同一件服務的名稱與呼叫方法差異甚大，它們一樣可以無礙地實作於系統服務層上。在系統服務層之上的副系統，全都是使用者模式，因此可以避免使用者程式執行非法行動。



簡化版本的Windows NT抽象架構


使用者
模式
OS/2
應用程式
Win32
應用程式
DOS
程式
Win16
應用程式
POSIX
應用程式



其他DLL函式庫
DOS系統
Windows模擬系統


OS/2副系統
Win32副系統
POSIX.1副系統


核心
模式
系統服務層


輸入輸出管理
檔案系統、網路系統
物件管理系統 / 安全管理系統 / 行程管理 / 物件間通訊管理 / 行程間通訊管理 / 虛擬記憶體管理

微核心
視窗管理程式


驅動程式
硬體抽象層（HAL）
圖形驅動


硬體（處理器、記憶體、外部裝置等）



副系統架構第一個實作的副系統群當然是以前的微軟系統。DOS副系統將每個DOS程式當成一行程執行，並以個別獨立的MS-DOS虛擬機器承載其運行環境。另外一個是Windows 3.1模擬系統，實際上是在Win32副系統下執行Win16程式。因此達到了安全掌控為MS-DOS與早期Windows系統所撰寫之舊版程式的能力。然而此架構只在Intel 80386處理器及後繼機型上實作。且某些會直接讀取硬體的程式，例如大部分的Win16遊戲，就無法套用這套系統，因此很多早期遊戲便無法在Windows NT上執行。Windows NT有3.1、3.5、3.51與4.0版。Windows 2000是Windows NT的改進系列（事實上是Windows NT 5.0）、Windows XP（Windows NT 5.1）以及Windows Server 2003（Windows NT 5.2）與Windows Vista（Windows NT 6.0）也都是立基於Windows NT的架構上。
而本年代漸漸增長並越趨複雜的嵌入式裝置市場也促使嵌入式作業系統的成長。
今日[編輯]
現代作業系統通常都有一個使用的繪圖裝置的圖形化使用者介面（GUI），並附加如滑鼠或觸控面版等有別於鍵盤的輸入裝置。舊的OS或效能導向的伺服器通常不會有如此親切的介面，而是以命令列介面（CLI）加上鍵盤為輸入裝置。以上兩種介面其實都是所謂的殼，其功能為接受並處理使用者的指令（例如按下一按鈕，或在命令提示列上鍵入指令）。
選擇要安裝的作業系統通常與其硬體架構有很大關係，只有Linux與BSD幾乎可在所有硬體架構上執行，而Windows NT僅移植到了DEC Alpha與MIPS Magnum。在1990年代早期，個人電腦的選擇就已被侷限在Windows家族、類Unix家族以及Linux上，而以Linux及Mac OS X為最主要的另類選擇，直至今日。
大型機與嵌入式系統使用很多樣化的作業系統。大型主機近期有許多開始支援Java及Linux以便共享其他平臺的資源。嵌入式系統近期百家爭鳴，從給Sensor Networks用的Berkeley Tiny OS到可以操作Microsoft Office的Windows CE都有。
個人電腦[編輯]
個人電腦市場目前分為兩大陣營，此兩種架構分別有支援的作業系統：

Apple Macintosh - Mac OS X，Windows（僅Intel平臺），Linux、BSD。
IBM相容PC - Windows、Linux、BSD、Mac OS X（非正式支援）。

大型電腦[編輯]
最早的作業系統是針對20世紀60年代的大型主結構開發的，由於對這些系統在軟體方面做了巨大投資，因此原來的電腦廠商繼續開發與原來作業系統相相容的硬體與作業系統。這些早期的作業系統是現代作業系統的先驅。現在仍被支援的大型主機作業系統包括：

Burroughs MCP-- B5000，1961 to Unisys Clearpath/MCP, present.
IBM OS/360 -- IBM System/360, 1964 to IBM zSeries, present
UNIVAC EXEC 8 -- UNIVAC 1108, 1964, to Unisys Clearpath IX, present.

現代的大型主機一般也可執行Linux或Unix變種。
嵌入式[編輯]
嵌入式系統使用非常廣泛的系統（如VxWorks、eCos、Symbian OS及Palm OS）以及某些功能縮減版本的Linux或者其他作業系統。某些情況下，OS指稱的是一個內建了固定應用軟體的巨大泛用程式。在許多最簡單的嵌入式系統中，所謂的OS就是指其上唯一的應用程式。
類Unix系統[編輯]
主條目：類Unix





Unix系統的演變






KDE SC 4桌面


所謂的類Unix家族指的是一族種類繁多的OS，此族包含了System V、BSD與Linux。由於Unix是The Open Group的註冊商標，特指遵守此公司定義的行為的作業系統。而類Unix通常指的是比原先的Unix包含更多特徵的OS。
類Unix系統可在非常多的處理器架構下執行，在伺服器系統上有很高的使用率，例如大專院校或工程應用的工作站。
1991年，芬蘭學生林納斯·托瓦茲根據類Unix系統Minix編寫並發布了Linux作業系統核心，其後在理察·斯托曼的建議下以GNU通用公共許可證發布，成為自由軟體Unix變種. Linux近來越來越受歡迎，它們也在個人桌面電腦市場上大有斬獲，例如Ubuntu系統。
某些Unix變種，例如惠普的HP-UX以及IBM的AIX僅設計用於自家的硬體產品上，而SUN的Solaris可安裝於自家的硬體或x86電腦上。蘋果電腦的Mac OS X是一個從NeXTSTEP、Mach以及FreeBSD共同衍生出來的微核心BSD系統，此OS取代了蘋果電腦早期非Unix家族的Mac OS。
經歷數年的披荊斬棘，自由開源的Linux系統逐漸蠶食以往專利軟體的專業領域，例如以往電腦動畫運算巨擘──矽谷圖形公司（SGI）的IRIX系統已被Linux家族及貝爾實驗室研發小組設計的九號計畫與Inferno系統取代，皆用於分散運算式環境。它們並不像其他Unix系統，而是選擇內建圖形化使用者介面。九號計畫原先並不普及，因為它剛推出時並非自由軟體。後來改在自由及開源軟體許可證Lucent Public License釋出後，便開始擁有廣大的使用者及社群。Inferno已被售予Vita Nuova並以GPL/MIT許可證釋出。
當前，計算機按照計算能力排名世界500強中472台使用Linux，6台使用Windows，其餘為各類BSD等Unix。[來源請求]
微軟Windows[編輯]
主條目：Microsoft Windows
Microsoft Windows系列作業系統是在微軟給IBM機器設計的MS-DOS的基礎上設計的圖形作業系統。現在的Windows系統，如Windows 2000、Windows XP皆是建立於現代的Windows NT核心。NT核心是由OS/2和OpenVMS等系統上借用來的。Windows可以在32位元和64位元的Intel和AMD的處理器上運行，但是早期的版本也可以在DEC Alpha、MIPS與PowerPC架構上運行。
雖然由於人們對於開放原始碼作業系統興趣的提升，Windows的市場佔有率有所下降，但是到2004年為止，Windows作業系統在世界範圍內佔據了桌面作業系統90%的市場。[2]
Windows系統也被用在低階和中階伺服器上，並且支援網頁服務的資料庫服務等一些功能。最近微軟花費了很大研究與開發的經費用於使Windows擁有能運行企業的大型程式的能力。
Windows XP在2001年10月25日發布，2004年8月24日發布服務包2（Service Pack 2），2008年4月21日發布最新的服務包3（Service Pack 3）。
微軟上一款作業系統Windows Vista（開發代碼為Longhorn）於2007年1月30日發售[3]。Windows Vista增加了許多功能，尤其是系統的安全性和網路管理功能，並且其擁有介面華麗的Aero Glass。但是整體而言，其在全球市場上的口碑卻並不是很好。其後繼者Windows 7則是於2009年10月22日發售，Windows 7改善了Windows Vista為人詬病的效能問題，相較於Windows Vista，在同樣的硬體環境下，Windows 7的表現較Windows Vista為好。而最新的Windows 10則是於2015年7月29日發售。
蘋果macOS[編輯]




Mac OS X 10.7


主條目：Mac OS和Mac OS X
macOS，前稱「Mac OS X」或「OS X」，是一套執行於蘋果Macintosh系列電腦上的作業系統。Mac OS是首個在商用領域成功的圖形化使用者介面系統。Macintosh開發成員包括比爾·阿特金森（Bill Atkinson）、傑夫·拉斯金（Jef Raskin）和安迪·赫茨菲爾德（Andy Hertzfeld）。從OS X 10.8開始在名字中去掉Mac，僅保留OSX和版本號。2016年6月13日在WWDC2016上，蘋果公司將OS X更名為macOS，現行的最新的系統版本是macOS Sierra。
Chrome OS[編輯]
主條目：Google Chrome OS
Google Chrome OS是一項Google的輕型電腦作業系統計劃，其基於Google的瀏覽器Google Chrome的Linux核心。
其他[編輯]
大型主機以及嵌入式作業系統均與Unix或Windows家族關係不大，除了Android，Windows CE、Windows NT及Windows XP Embedded是Windows的血親產品，以及數種*BSD和嵌入式Linux套件為例外。
少數較舊的OS今日依然在一些需要穩定性的市場中活躍，例如IBM的OS/2[4]、BeOS以及XTS-400。
在達康時代狂潮過後，如AmigaOS與RISC OS等少數人使用的OS依然持續建立，以滿足狂熱的愛好者社群與特殊專業使用者。
優秀的作業系統必定要具備能讓各種能力級別的使用者滿足各種需求的工具包視覺化的高效簡便程式環境，以程式來建立程式，就如立法的法律指導規範新的法案的建立。這其實是作業系統所隱含的一部分，決定了可以有多強的擴充能力。比如，某個作業系統有對應的開發者工具包整合環境程式並且是個視覺化的，還能讓能力不太高的人一看能懂的，用於修改某個聲音合成器包含頻譜顯示，可要是作業系統本身不支援也沒有提供可用的工具程式，就會變得很繁瑣，很可能為了達到這個目標，開發者就要預備好各種相關的工具程式，甚至自己來編寫一系列相關的工具程式建立專門的工具包，最後還要檢查代碼。若是有人想通過音樂來生成五線譜，要對類似標記式語言的五線譜規則對應一下，對各種音色，音準採集並總結出一整套規律，通過聲音識別可以識別出樂器的類別等，進而標出樂符完成從聲音到樂譜的轉換並生成。可是對人聲卻又更為複雜也不必要如此。若是需要用聲音的波形圖重現聲音，沒有相關的工具集是相當難實現，另外只有使用同一套聲音的波形繪製規則的所生成的波形圖用來再現的聲音才是原來的聲音。
在作為商品出售的作業系統軟體的歷史中常常因為其中包含的瀏覽器，媒體播放器在美國遭到反壟斷起訴，差點使得功能上殘缺不全。少數作業系統軟體能夠提供較為全面的App和實用工具程式。
作業系統軟體的編譯也需要對應的編譯環境。
在同一臺電腦上執行不同的作業系統軟體，就能夠以不同的方式來使用電腦資源。比如，在Mac上執行OS X和Windows以兩種不同的技術OpenCL，Core Image:DirectX來使用圖形卡實現類似的作用。
通過圖像識別和聲音識別來進行資訊搜尋。
能夠滿足不同需求所要求的精確程度對時間的精細劃分，以及尺度細分可以互聯，同步，協調原本必須由多個人協同合作才能完成的隨時需要調整並相互同步的操控作業，這就必須有即時訊息傳送顯示，視覺化的用於協調同步計劃任務的配置指令碼，以及執行這樣計劃任務的完整元件。
未來[編輯]
研究與建立未來的作業系統依舊進行著。作業系統朝提供更省電、網路化、易用、華麗的使用者介面的方向來改進。類UNIX OS通過和桌面環境開發者協作，正努力讓自己改進使用環境。
eyeOS是一套基於PHP實現的半開源模擬雲端運算操作系統，但其實質只是在網路瀏覽器中提供一種類似無界限的類獨立操作系統，其並非於任何類似虛擬化中實現的真正電腦操作系統，能提供諸如Word、PPT、Excel的在線處理功能…
GNU Hurd是一個以完全相容Unix並加強許多功能為目標的微核心架構。微軟Singularity是一個奠基於.Net並以建立較佳記憶體保護機制為目標的研究計畫。
功能[編輯]
作業系統位於底層硬體與使用者之間，是兩者溝通的橋樑。使用者可以通過作業系統的使用者介面，輸入命令。作業系統則對命令進行解釋，驅動硬體裝置，實現使用者要求。以現代標準而言，一個標準PC的作業系統應該提供以下的功能：


行程管理（Processing management）
記憶體管理（Memory management）
檔案系統（File system）
網路通訊（Networking）
安全機制（Security）
使用者介面（User interface）
驅動程式（Device drivers）


行程管理[編輯]
主條目：行程和執行緒
不管是常駐程式或者應用程式，他們都以行程為標準執行單位。當年運用馮·諾伊曼結構建造電腦時，每個中央處理器最多只能同時執行一個行程。早期的作業系統（例如DOS）也不允許任何程式打破這個限制，且DOS同時只有執行一個行程（雖然DOS自己宣稱他們擁有終止並等待駐留能力，可以部分且艱難地解決這問題）。現代的作業系統，即使只擁有一個CPU，也可以利用多行程（multitask）功能同時執行多個行程。行程管理指的是作業系統調整多個行程的功能。
由於大部分的電腦只包含一顆中央處理器，在單核心（Core）的情況下多行程只是簡單迅速地切換各行程，讓每個行程都能夠執行，在多核心或多處理器的情況下，所有行程透過許多協同技術在各處理器或核心上轉換。越多行程同時執行，每個行程能分配到的時間比率就越小。很多作業系統在遇到此問題時會出現諸如音效斷續或滑鼠跳格的情況（稱做崩潰（Thrashing），一種作業系統只能不停執行自己的管理程式並耗盡系統資源的狀態，其他使用者或硬體的程式皆無法執行）。行程管理通常實踐了分時的概念，大部分的作業系統可以利用指定不同的特權等級（priority），為每個行程改變所佔的分時比例。特權越高的行程，執行優先順序越高，單位時間內佔的比例也越高。互動式作業系統也提供某種程度的回饋機制，讓直接與使用者互動的行程擁有較高的特權值。
除了行程管理之外，作業系統尚有擔負起行程間通訊（IPC）、行程異常終止處理以及死結（Dead Lock）偵測及處理等較為艱深的問題。
在行程之下尚有執行緒的問題，但是大部分的作業系統並不會處理執行緒所遭遇的問題，通常作業系統僅止於提供一組API讓使用者自行操作或透過虛擬機器的管理機制控制執行緒之間的互動。
記憶體管理[編輯]
根據帕金森定律：「你給程式再多記憶體，程式也會想盡辦法耗光」，因此程式設計師通常希望系統給他無限量且無限快的記憶體。大部分的現代電腦記憶體架構都是階層式的，最快且數量最少的暫存器為首，然後是快取、記憶體以及最慢的磁碟儲存裝置。而作業系統的記憶體管理提供尋找可用的記憶空間、配置與釋放記憶空間以及交換記憶體和低速儲存裝置的內含物……等功能。此類又被稱做虛擬記憶體管理的功能大幅增加每個行程可獲得的記憶空間（通常是4GB，即使實際上RAM的數量遠少於這數目）。然而這也帶來了微幅降低執行效率的缺點，嚴重時甚至也會導致行程崩潰。
記憶體管理的另一個重點活動就是藉由CPU的幫助來管理虛擬位置。如果同時有許多行程儲存於記憶裝置上，作業系統必須防止它們互相干擾對方的記憶體內容（除非透過某些協定在可控制的範圍下操作，並限制可存取的記憶體範圍）。分割記憶體空間可以達成目標。每個行程只會看到整個記憶體空間（從0到記憶體空間的最大上限）被配置給它自己（當然，有些位置被作業系統保留而禁止存取）。CPU事先存了幾個表以比對虛擬位置與實際記憶體位置，這種方法稱為分頁配置。
藉由對每個行程產生分開獨立的位置空間，作業系統也可以輕易地一次釋放某行程所佔據的所有記憶體。如果這個行程不釋放記憶體，作業系統可以結束行程並將記憶體自動釋放。
磁碟與檔案系統[編輯]
主條目：檔案系統
所謂的檔案系統，通常指稱管理磁碟資料的系統，可將資料以目錄或檔案的型式儲存。每個檔案系統都有自己的特殊格式與功能，例如日誌管理或不需磁碟重整。
作業系統擁有許多種內建檔案系統。例如Linux擁有非常廣泛的內建檔案系統，如ext2、ext3、ext4、ReiserFS、Reiser4、GFS、GFS2、OCFS、OCFS2、NILFS與Google檔案系統。Linux也支援非原生檔案系統，例如XFS、JFS、FAT家族與NTFS。另一方面，Windows能支援的檔案系統衹有FAT12、FAT16、FAT32、EXFAT與NTFS。NTFS系統是Windows上最可靠與最有效率的檔案系統。其他的FAT家族都比NTFS老舊，且對於檔案長度與分割磁碟能力都有很大限制，因此造成很多問題。而UNIX的檔案系統多半是UFS，而UNIX中的一個分支Solaris最近則開始支援一種新式的ZFS。
大部份上述的檔案系統都有兩種建置方法。系統可以以日誌式或非日誌式建置。日誌式檔案系統可以以較安全的手法執行系統回復。如果一個沒有日誌式建置的檔案系統遇上突然的系統崩潰，導致資料建立在一半時停頓，則此系統需要特殊的檔案系統檢查工具才能復原；日誌式則可自動回復。微軟的NTFS與Linux的ext3、ext4、reiserFS與JFS都是日誌式檔案系統。
每個檔案系統都實作相似的目錄／子目錄架構，但在相似之下也有許多不同點。微軟使用「\」符號以建立目錄／子目錄關係，且檔案名稱忽略其大小寫差異；UNIX系統則是以「/」建立目錄架構，且檔案名稱大小寫有差異。(其實這是給system call看的，"/"或"\"並不實際存在硬碟)
網路[編輯]
許多現代的作業系統都具備操作主流網路通訊協定TCP/IP的能力。也就是說這樣的作業系統可以進入網路世界，並且與其他系統分享諸如檔案、印表機與掃描器等資源。
許多作業系統也支援多個過去網路啟蒙時代的各路網路通訊協定，例如IBM建立的系統網路架構、DEC在它所生產的系統所設定的DECnet（英語：DECnet）架構與微軟為Windows製作的特殊通訊協定。還有許多為了特殊功能而研發的通訊協定，例如可以在網路上提供檔案存取功能的NFS系統。現今大量用於影音串流（Streaming media）及遊戲訊息傳送的UDP協定等。
安全[編輯]
大多數作業系統都含有某種程度的資訊安全機制。資訊安全機制主要基於兩大理念：

作業系統提供外界直接或間接存取數種資源的管道，例如本地端磁碟機的檔案、受保護的特權系統呼叫、使用者的隱私資料與系統執行的程式所提供的服務。
作業系統有能力認證資源存取的請求。允許通過認證的請求並拒絕無法通過的非法請求，並將適當的權力授權（Authorization（英語：授權））給此請求。有些系統的認證機制僅簡略地把資源分為特權或非特權，且每個請求都有獨特的身分辨識號碼，例如使用者名稱。資源請求通常分成兩大種類：

內部來源：通常是一個正在執行的程式發出的資源請求。在某些系統上，一個程式一旦可執行就可做任何事情（例如DOS時代的病毒），但通常作業系統會給程式一個識別代號，並且在此程式發出請求時，檢查其代號與所需資源的存取權限關係。
外部來源：從非本地端電腦而來的資源請求，例如遠端登入本機電腦或某些網路連線請求（FTP或HTTP）。為了識別這些外部請求，系統也許會對此請求提出認證要求。通常是請求輸入使用者名稱以及相對應的密碼。系統有時也會應用諸如磁卡或生物識別資料的它種認證方法。在某些例子，例如網路通訊上，通常不需通過認證即可存取資源（例如匿名存取的FTP伺服器或P2P服務）。



除了允許／拒絕形式的安全機制，一個高安全等級的系統也會提供記錄選項，允許記錄各種請求對資源存取的行為（例如「誰曾經讀了這個檔案？」）。
肇因於軍方與商業組織將敏感資料記錄在電腦上，安全機制在作業系統歷史上是一個被長久關註與討論的問題。美國國防部（DoD）便創立了《可信賴之計算機系統評鑑程式》（TCSEC（英語：TCSEC）），此手冊確立了評鑑安全機製成效的基本原則。這對作業系統作者來說非常重要，因為TCSEC是用於評鑑、分類與選拔出用於處理、儲存與獲取敏感或機密資料的電腦系統的標準程式。
內部通訊安全[編輯]
內部資訊安全可視為防止正在執行的程式任意存取系統資源的手段。大多作業系統讓普通程式可直接操作電腦的CPU，所以產生了一些問題，例如怎樣把可如作業系統一樣處理事務、執行同樣特殊指令的程式強迫停止，畢竟在此情境下，作業系統也只是另一個平起平坐的程式。為通用作業系統所生產的CPU通常於硬體層級上實踐了一定程度的特殊指令保護概念。通常特權層級較低的程式想要執行某些特殊指令時會被阻斷，例如直接存取像是硬碟之類的外部裝置。因此，程式必須得經由詢問作業系統，讓作業系統執行特殊指令來存取磁碟。因此作業系統就有機會檢查此程式的識別身分，並依此接受或拒絕它的請求。
在不支援特殊指令架構的硬體上，另一個也是唯一的保護方法，則是作業系統並不直接利用CPU執行使用者的程式，而是藉由模擬一個CPU或提供一P-code機系統（虛擬碼執行機），像是Java一樣讓程式在虛擬機器上執行。
內部安全機制在多使用者電腦上特別重要：它允許每個系統使用者擁有自己個人的檔案與目錄，且其他使用者不能任意存取或刪除。因為任何程式都可能繞過作業系統的監控，更有可能繞過側錄程式的監控，擁有強制力的內部安全機制在側錄啟動時也非常重要。
外部通訊安全[編輯]
通常一個作業系統會為其他網路上的電腦或使用者提供（主持）各種服務。這些服務通常藉由埠或作業系統網路位址後的數字存取點提供。通常此服務包括提供檔案共享（NFS）、列印共享、電子郵件、網頁服務與檔案傳輸協定（FTP）。 外部資訊安全的最前線，是諸如防火牆等的硬體裝置。在作業系統內部也常設置許多種類的軟體防火牆。軟體防火牆可設定接受或拒絕在作業系統上執行的服務與外界的連線。因此任何人都可以安裝並執行某些不安全的網路服務，例如Telnet或FTP，並且設定除了某些自用通道之外阻擋其他所有連線，以達成防堵不良連線的機制。
使用者介面[編輯]
今日大部分的作業系統都包含圖形化使用者介面（GUI）。有幾類較舊的作業系統將圖形化使用者介面與核心緊密結合，例如最早的Windows與Mac OS實作產品。此種手法可提供較快速的圖形回應能力，且實作時不需切割模組因而較為省工，但是會有強烈副作用，例如圖形系統崩潰將導致整個系統崩潰，例如藍白當機畫面。許多近代的作業系統已模組化，將圖形介面的副系統與核心分開（已知Linux與Mac OS X原先就是如此設計，而某些擴充版本的Windows終於也採用此手法）。
許多作業系統允許使用者安裝或創造任何他們喜歡的圖形化使用者介面[5]。大部分的Unix與Unix衍生系統（BSD、Linux與Minix）通常會安裝X Window系統配合GNOME或KDE桌面環境。而某些作業系統就沒有這麼彈性的圖形化使用者介面，例如Windows。這類的作業系統只能透過外加的程式來改變其圖形化使用者介面，甚至根本只能改變諸如選單風格或顏色配置等部分[來源請求]。
圖形化使用者介面與時並進，例如Windows在每次新版本上市時就會將其圖形化使用者介面改頭換面，而Mac OS的GUI也在Mac OS X上市時出現重大轉變。
驅動程式[編輯]
主條目：驅動程式
所謂的驅動程式（Device driver）是指某類設計來與硬體互動的電腦軟體。通常是一設計完善的裝置互動介面，利用與此硬體連接的電腦匯排流或通訊子系統，提供對此裝置下令與接收資訊的功能；以及最終目的，將訊息提供給作業系統或應用程式。驅動程式是針對特定硬體與特定作業系統設計的軟體，通常以作業系統核心模組、應用軟體包或普通電腦程式的形式在作業系統核心底下執行，以達到通透順暢地與硬體互動的效果，且提供硬體在處理非同步的時間依賴性介面（asynchronous time-dependent hardware interface）時所需的中斷處理常式。
設計驅動程式的主要目的在於操作抽象化，任何硬體模組，既使是同一類的裝置，在硬體設計面上也有巨大差異。廠商推出的較新模組通常更可靠更有效率，控制方法也會有所不同。電腦與其作業系統每每不能預期那些現有與新裝置的變異之處，因此無法知道其操作方法。為解決此問題作業系統通常會主動制訂每種裝置該有的操作方式，而驅動程式功能則是將那些作業系統制訂的行為描述，轉譯為可讓裝置瞭解的自訂操作手法。
理論上適合的驅動程式一旦安裝，相對應的新裝置就可以無誤地執行。此新驅動程式可以讓此裝置完美地切合在作業系統中，讓使用者察覺不到這是作業系統原本沒有的功能。
結構[編輯]
作業系統理論研究者有時把作業系統分成四大部分：

驅動程式 - 最底層的、直接控制和監視各類硬體的部分，它們的職責是隱藏硬體的具體細節，並向其他部分提供一個抽象的、通用的介面。
核心 - 作業系統之最核心部分，通常執行在最高特權級，負責提供基礎性、結構性的功能。
支承庫 - （亦作「介面庫」）是一系列特殊的程式庫，它們職責在於把系統所提供的基本服務包裝成應用程式所能夠使用的編程介面（API），是最靠近應用程式的部分。例如，GNU C執行期庫就屬於此類，它把各種作業系統的內部編程介麵包裝成ANSI C和POSIX編程介面的形式。
外圍 - 所謂外圍，是指作業系統中除以上三類以外的所有其他部分，通常是用於提供特定高階服務的部件。例如，在微核心結構中，大部分系統服務，以及UNIX/Linux中各種守護行程都通常被劃歸此列。

當然，本節所提出的四部結構觀也絕非放之四海皆準。例如，在早期的微軟視窗作業系統中，各部分耦合程度很深，難以區分彼此。而在使用外核結構的作業系統中，則根本沒有驅動程式的概念。因而，本節的討論只適用於一般情況，具體特例需具體分析。
作業系統中四大部分的不同佈局，也就形成了幾種整體結構的分野。常見的結構包括：簡單結構、層結構、微核心結構、垂直結構、和虛擬機器結構。
分類[編輯]
作業系統的分類沒有一個單一的標準，可以根據工作方式分為批次處理作業系統、分時作業系統、實時作業系統、網路作業系統和分散式作業系統等；根據架構可以分為單核心作業系統等；根據執行的環境，可以分為桌面作業系統，嵌入式作業系統等；根據指令的長度分為8bit, 16bit, 32bit, 64bit的作業系統。
核心結構[編輯]
主條目：核心
核心是作業系統最核心最基礎的構件，其結構往往對作業系統的外部特性以及應用領域有著一定程度的影響。儘管隨著理論和實踐的不斷演進，作業系統高層特性與核心結構之間的耦合有日趨縮小之勢，但習慣上，核心結構仍然是作業系統分類之常用標準。
核心的結構可以分為單核心、微核心、超微核心、以及外核等。
單核心結構是作業系統中各核心部件雜然混居的形態，該結構產生於1960年代（亦有1950年代初之說，尚存爭議），歷史最長，是作業系統核心與外圍分離時的最初形態。
微核心結構是1980年代產生出來的較新的核心結構，強調結構性部件與功能性部件的分離。20世紀末，基於微核心結構，理論界中又發展出了超微核心與外核心等多種結構。儘管自1980年代起，大部分理論研究都集中在以微核心為首的「新興」結構之上，然而，在應用領域之中，以單核心結構為基礎的作業系統卻一直占據著主導地位。
在眾多常用作業系統之中，除了QNX和基於Mach的UNIX等個別系統外，幾乎全部採用單核心結構，例如大部分的Unix、Linux，以及Windows（微軟聲稱Windows NT是基於改良的微核心架構的，儘管理論界對此存有異議）。 微核心和超微核心結構主要用於研究性作業系統，還有一些嵌入式系統使用外核。
基於單核心的作業系統通常有著較長的歷史淵源。例如，絕大部分UNIX的家族史都可上溯至1960年代。該類作業系統多數有著相對古老的設計和實現（例如某些UNIX中存在著大量1970年代、1980年代的代碼）。另外，往往在效能方面略優於同一應用領域中採用其他核心結構的作業系統（但通常認為此種效能優勢不能完全歸功於單核心結構）。
通用與專用、嵌入式[編輯]
通用作業系統是面向一般沒有特定應用需求的作業系統。由於沒有特定的應用需求，通用作業系統為了適應更廣泛的應用，需要支援更多的硬體與軟體，需要針對所有的使用者體驗，對系統進行更新。通用作業系統是一個工程量繁重的作業系統。
即時與非即時[編輯]
「即時作業系統」（Real Time OS）泛指所有據有一定實時資源排程以及通訊能力的作業系統。而所謂「即時」，不同語境中往往有著非常不同的意義。某些時候僅僅用作「高效能」的同義詞。但在作業系統理論中「即時性」所指的通常是特定操作所消耗的時間（以及空間）的上限是可預知的。比如，如果說某個作業系統提供實時記憶體分配操作，那也就是說一個記憶體分配操作所用時間（及空間）無論如何也不會超出作業系統所承諾的上限。即時性在某些領域非常重要，比如在工業控制、醫療器材、影音訊合成、以及軍事領域，即時性都是無可或缺的特性。
常用即時作業系統有QNX、VxWorks、RTLinux等等，而Linux、多數UNIX、以及多數Windows家族成員等都屬於非實時作業系統。作業系統整體的即時性通常依仗核心的即時能力，但有時也可在非即時核心上建立即時作業系統，很多在Windows上建立的即時作業系統就屬於此類。
在POSIX標準中專有一系用於規範即時作業系統的API，其中包括POSIX.4、POSIX.4a、POSIX.4b（合稱POSIX.4）以及POSIX.13等等。符合POSIX.4的作業系統通常被認可為即時作業系統（但即時作業系統並不需要符合POSIX.4標準）。
8位元、16位元、32位元、64位元、128位元[編輯]
所謂8位元、16位元、32位元、64位元、128位元等術語有時指匯流排寬度，有時指指令寬度（在定長指令集中），而在作業系統理論中主要是指記憶體定址的寬度。如果記憶體的定址寬度是16位元，那麼每一個記憶體位址可以用16個二進位位來表示，也就是說可以在64KB的範圍內定址。同樣道理32位元的寬度對應4GB的定址範圍，64位元的寬度對應16 Exabyte的定址範圍。記憶體定址範圍並非僅僅是對作業系統而言的，其他類型的軟體的設計有時也會被定址範圍而影響。但是在作業系統的設計與實現中，定址範圍卻有著更為重要的意義。
在早期的16位元作業系統中，由於64KB的定址範圍太小，大都都採用「段」加「線性位址」的二維平面位址空間的設計。分配記憶體時通常需要考慮「段置換」的問題，同時，應用程式所能夠使用的位址空間也往往有比較小的上限。
在32位元作業系統中，4GB的定址範圍對於一般應用程式來說是綽綽有餘的，因而，通常使用一維的線性位址空間，而不使用「段」。
參考文獻[編輯]
參照[編輯]


^ （英文）Multicians.org and the History of Operating Systems, Thomas Haigh, 13 September 2002
^ Why Windows Won't Always Dominate - New devices will shrink Microsoft's OS market share, researcher predicts, David Legard, IDG News Service, Friday, April 23, 2004
^ （英文）微軟Vista作業系統官方網站公告（2007年1月10日造訪）
^ OS/2曾經是Windows系統的勁敵，且比爾蓋茲直到最近還是這樣認為，請看一段專訪內容（摘錄自今日美國報）：
蓋茲談Linux
問：人們對Linux對微軟的威脅有些擔心，Sim Desk等基於全球資訊網的作業系統也讓人擔心。休斯敦、慕尼黑和北京都在考慮用Linux產品，這個問題有多大？
答：這些是我們現在的競爭對手。這與以前人們採用IBM的OS/2作業系統並沒有什麼不同。
問：沒人用OS/2。
答：你在開玩笑嗎？讓我們認真談談吧。IBM當時是我們規模的15倍，你找不出一家不用OS/2的銀行。......
^ 各項多采多姿的KDE／GNOME桌面快照。


書目[編輯]


Deitel, Harvey M.; Deitel, Paul; Choffnes, David. Operating Systems. Upper Saddle River, NJ: Pearson/Prentice Hall. 2004. ISBN 978-0-13-182827-8.  引文使用過時參數coauthors (幫助)
Silberschatz, Abraham; Galvin, Peter Baer; Gagne, Greg. Operating System Concepts. Hoboken, NJ: John Wiley & Sons. 2008). ISBN 978-0-470-12872-5.  引文使用過時參數coauthors (幫助); 請檢查|date=中的日期值 (幫助)（俗稱恐龍書，OS教科書聖經本）
Tanenbaum, Andrew S.; Woodhull, Albert S. Operating Systems. Design and Implementation. Upper Saddle River, N.J.: Pearson/Prentice Hall. 2011. ISBN 978-0-13-142938-3.  引文使用過時參數coauthors (幫助)（Linux由此書而啟發，可惜新版本將實作內容移除）
Stallings, William. Operating Systems: Internals and Design Principles, 5/E. Prentice Hall. 2005. ISBN 978-0-13-147954-8. 


外部連結[編輯]

（英文） OS的歷史
（英文） 簡略OS介紹的教育網站....
（英文） OSDP，所有作業系統的檔案網站
（英文） Unix OS家族的歷史樹
（英文） Windows的歷史
（英文） TLDP，Linux核心徹底講解，適用於想要徹底瞭解OS核心結構者
（德文） 作業系統原理介紹

參見[編輯]

計算機
作業系統核心
實時作業系統-分時系統-多工-嵌入式系統-單一使用者-多使用者
對稱多處理機（SMP）-集群（Cluster）-分散式計算
64位元作業系統


部分作業系統



Unix
FreeBSD
Solaris
AIX
HP-UX
IRIX
Tru64
MS-DOS
GNU/Linux
Mac OS
Windows
Windows NT
其它作業系統










閱
論
編


作業系統






概述



使用者（英語：Operating system advocacy）
比較（英語：Comparison of operating systems）
Forensic software engineering（英語：Forensic software engineering）
歷史
業餘愛好者開發（英語：Hobbyist operating system development）
列表
年表
使用份額








核心





系統結構




Exokernel
混合
微內核
單核心
Rump kernel（英語：Rump kernel）
Unikernel（英語：Unikernel）









元件




驅動程式
可載入核心模組
微內核
使用者空間











行程管理





概念




上下文交換
中斷
行程間通訊
行程
行程控製表
實時作業系統
執行緒
分時系統









排程演算法




多工處理
固定優先級搶占（英語：Fixed-priority pre-emptive scheduling）
多級反饋佇列（英語：Multilevel feedback queue）
搶占式多工處理
循環制
Shortest job next（英語：Shortest job next）











記憶體管理和資源保護



匯流排錯誤
一般保護錯誤
記憶體保護
分頁
分級保護域
記憶體區段錯誤
虛擬記憶體








儲存存取和檔案系統



啟動程式
碎片整理（英語：Defragmentation）
裝置檔案（英語：Device file）
檔案屬性
Inode
記錄檔
分割
虛擬檔案系統
虛擬磁帶庫（英語：Virtual tape library）








作業系統列表



AmigaOS
Android
BeOS
BSD
Chrome OS
CP/M
DOS
GNU
Haiku
Illumos
IOS
Linux
Macintosh

Classic Mac OS
MacOS


MINIX
MorphOS（英語：MorphOS）
MUSIC/SP（英語：MUSIC/SP）
NOS（英語：NOS (software)）
OpenVMS
ORVYL（英語：ORVYL and WYLBUR）
OS/2
OSv（英語：OSv）
Pick（英語：Pick operating system）
QNX
ReactOS
RISC OS
RSTS/E（英語：RSTS/E）
RSX-11
RT-11（英語：RT-11）
Solaris
TOPS-10/TOPS-20（英語：TOPS-20）
TPF（英語：Transaction Processing Facility）
UNIX
Visi On（英語：Visi On）
VM/CMS（英語：VM (operating system)）
VS/9（英語：VS/9）
Microsoft Windows
Xinu（英語：Xinu）
z/OS（英語：z/OS）








其他概念



應用程式介面（API）
電腦網路
HAL
Live CD
Live USB
殼層（OS Shell）

命令列介面（CLI）
圖形化使用者介面（GUI）
TUI（英語：Text-based user interface）
VUI（英語：Voice user interface）


預啟動執行環境
















閱
論
編


電腦科學






數學基礎

數理邏輯 · 集合論 · 數論 · 圖論 · 類型論 · 範疇論 · 數值分析 · 資訊理論






計算理論

自動機 · 可計算性理論 · 計算複雜性理論 · 量子計算 · 數值計算方法






演算法和資料結構

演算法分析 · 演算法設計 · 計算幾何






程式語言和編譯器

語法分析器 · 直譯器 · 編程典範（程序化編程 · 物件導向程式編程 · 函數語言程式設計 · 邏輯編程等）






並行、並列和分散式系統

多處理器 · 網格計算 · 並行控制






軟體工程

需求分析 · 軟體設計 · 程式設計 · 形式化方法 · 軟體測試 · 軟體開發過程






系統架構

電腦系統架構 · 微處理器體系結構 · 作業系統






電信與網路

路由 · 網路拓撲 · 密碼學






資料庫

資料庫管理系統 · 關聯式資料庫 · 結構化查詢語言 · NoSQL · 事務處理 · 資料庫索引 · 資料探勘






人工智慧

自動推理 · 計算語言學 · 電腦視覺 · 進化計算 · 專家系統 · 機器學習 · 自然語言處理 · 機器人學






電腦圖形學

視覺化 · 電腦動畫 · 圖像處理






人機互動

電腦輔助功能 · 使用者介面 · 可穿戴電腦 · 普適計算 · 虛擬現實 · 聊天機器人






科學計算

人工生命 · 生物資訊學 · 認知科學 · 計算化學 · 計算神經科學 · 計算物理學 · 數值演算法 · 符號計算







註：電腦科學領域也可根據ACM-2012分類系統進行分類。











權威控制



LCCN: sh85094982
GND: 4006216-8
BNF: cb119333481（資料）
NDL: 00865121












 
						取自 "https://zh.wikipedia.org/w/index.php?title=操作系統&oldid=44918303"					
分類：作業系統隱藏分類：含有英語的條目有未列明來源語句的條目自2007年7月有未列明來源語句的條目含有過時參數的引用的頁面引文格式1錯誤：日期包含規範控制信息的維基百科條目使用ISBN魔術連結的頁面 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源維基新聞 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AcèhAfrikaansAlemannischአማርኛAragonésÆngliscالعربيةمصرىঅসমীয়াAsturianuAzərbaycancaتۆرکجهБашҡортсаŽemaitėškaБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBrezhonegBosanskiБуряадCatalàMìng-dĕ̤ng-ngṳ̄НохчийнکوردیČeštinaKaszëbscziЧӑвашлаCymraegDanskDeutschZazakiΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiVõroFrançaisFurlanGaeilgeGalego客家語/Hak-kâ-ngîעבריתहिन्दीHrvatskiHornjoserbsceMagyarՀայերենInterlinguaBahasa IndonesiaInterlingueIlokanoIdoÍslenskaItaliano日本語Basa JawaქართულიQaraqalpaqshaTaqbaylitҚазақшаಕನ್ನಡ한국어RipoarischKurdîКыргызчаLatinaLëtzebuergeschLumbaartLingálaລາວLietuviųLatviešuMalagasyОлык марийМакедонскиമലയാളംМонголमराठीBahasa MelayuMirandésမြန်မာဘာသာPlattdüütschनेपाल भाषाNederlandsNorsk nynorskNorsk bokmålOccitanଓଡ଼ିଆਪੰਜਾਬੀPälzischPolskiپنجابیپښتوPortuguêsRuna SimiRomânăРусскийРусиньскыйСаха тылаScotsSámegiellaSrpskohrvatski / српскохрватскиසිංහලSimple EnglishSlovenčinaSlovenščinaSoomaaligaShqipСрпски / srpskiBasa SundaSvenskaŚlůnskiதமிழ்తెలుగుТоҷикӣไทยTagalogTürkçeТатарча/tatarçaУкраїнськаاردوOʻzbekcha/ўзбекчаVènetoTiếng ViệtWalonWinarayWolofייִדישYorùbáBân-lâm-gú粵語 
編輯連結 





 本頁面最後修訂於2017年6月25日 (週日) 08:46。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 







2014 年嵌入式作業系統設計與實作公開小組 | Facebook






Facebook郵箱或手機號密碼忘記帳戶？註冊2014 年嵌入式作業系統設計與實作公開小組討論成員活動視頻照片文件在小組內搜索加入小組settings   中文(簡體)English (US)日本語한국어Français (France)Bahasa IndonesiaPolskiEspañolPortuguês (Brasil)DeutschItalianoMessengerFacebook Lite用戶地點游戲位置名人二手市場小組食譜彩色氣球Instagram公司簡介創建廣告創建主頁開發者招聘信息隱私權政策Cookie廣告選項條款設置活動日誌 Facebook © 2017































































作業系統：設計與實作- TAAZE 讀冊生活
















































書店
學堂
冊格子






歡迎光臨！您好
登入
註冊
會員中心









暫存清單


暫存清單






已暫存24件商品






優惠活動訊息















購物車


購物車






已選購24件商品，共600元






優惠活動訊息
































×




搜尋類型

全文
書名
作者
出版社
標籤
冊格子


商品類型


選擇業種
全館
圖書
雜誌
電子書/雜誌
創意生活


選擇商品源別


選擇類別


價格


元

元之間

折扣


請選擇
1折
2折
3折
4折
5折
6折
7折
8折
9折

折

請選擇
1折
2折
3折
4折
5折
6折
7折
8折
9折

折之間

出版日期


到

之間


二手書條件


請選擇書況
全新品
近全新
良好
普通
差強人意


請選擇備註
無畫線註記
有畫線
有註記
有畫線及註記
作家簽名
蓋藏書章
有附件
其他





















結痂（親簽限量版）
一個人的獲利模式
台味誌：暫歇
Power錕
霍格華茲圖書館
生酮飲食








書籍 



中文書




雜誌 



中文雜誌
日文MOOK
歐美雜誌




電子書 




電子書
電子雜誌




二手書 



二手中文書
二手簡體書
二手原文書




唱片影音 



影音DVD
唱片CD




文具雜貨 



創意文具
生活雜貨




我要賣二手書
















link









");
}
//-->











最多人搭配購買
買了這本書的人也買了
商品資料
學思行推薦
內容簡介
商品評價
收藏這本書的人也收藏了
近期最多人購買





首頁

>二手書
>中文書
>電腦>電腦總論















作業系統：設計與實作


(二手書)




評價
1收藏























作者：Andrew S. Tanenbaum


定價：NT$750


二手價：27折NT$199



現金回饋：1%
回饋金可全額折抵商品



本商品已絕版

看賣家資訊與書況










其他版本：







購買新書
85折638元













圖書館借閱 















臺北市立圖書館






新北市立圖書館






臺中文化局館藏






中部公共圖書館






臺南市立圖書館






高雄市立圖書館






台灣大學圖書館





什麼是借閱查詢





























































商品資料



作者：Andrew S. Tanenbaum
譯者：蔡明志


出版社：台灣東華書局股份有限公司
出版日期：1998-03-01
ISBN/ISSN：9576369274



語言：繁體中文
裝訂方式：平裝
頁數：381頁


類別：二手書>中文書>電腦>電腦總論

類別有誤？



我的分類建議：

您的建議正在處理中...





賣家：Watson


書況：普通













書況說明：


A. 全新：膠膜未拆，或似乎沒翻過，無瑕疵。


B. 近全新：如實體書店賣場上陳列的新書，雖有讀者翻過，但看不太出來。


C. 良好：因使用過，不像新書如此潔白。


D. 普通：因使用過，也因時間等因素，略有黃、黑斑。


E. 差強人意：印刷退色、模糊或其它更糟之書況。



















備註：有畫線及註記，書側有蓋章




商品備註與退貨說明















備註說明：
備註內容與書況影片有出入時，以書況影片為準。商品之附件或贈品，亦以書況影片為準。
商品退貨說明：
會員購買二手商品皆擁有10天的鑑賞期。若收到的商品狀況與網站描述不符合時，在鑑賞期內，皆可退貨。退貨辦法請詳見，客服退換貨說明




















標籤：

目前無標籤






您的標籤：



新增您自己的標籤



























我想讀



我想讀
正在讀
已讀完






同步收藏























行銷分紅















瞭解更多






立即開通權限






什麼是行銷分紅































購物須知










關於二手書備註：備註內容與書況影片有出入時，以書況影片為準。商品之附件或贈品，亦以書況影片為準。商品版權法律說明：TAAZE 單純提供網路二手書託售平臺予消費者，並不涉入書本作者與原出版商間之任何糾紛；敬請各界鑒察。退換貨說明：二手書籍商品享有10天的商品猶豫期（含例假日）。若您欲辦理退貨，請於取得該商品10日內寄回。二手影音商品（例如CD、DVD等），恕不提供10天猶豫期退貨。二手商品無法提供換貨服務，僅能辦理退貨。如須退貨，請保持該商品及其附件的完整性(包含書籍封底之TAAZE物流條碼)。若退回商品無法回復原狀者，可能影響退換貨權利之行使或須負擔部分費用。訂購本商品前請務必詳閱退換貨原則、二手CD、DVD退換貨說明。












商品評價

歡迎你給予星評或評論



我來寫評論


給星評








看更多評論















近期最多人購買





認識資料科學的第一本書定價：450元優惠價：79折356元迎接AI新時代：用圍棋理解人工智慧定價：350元優惠價：79折277元2018新趨勢計算機概論定價：520元優惠價：93折484元從樞紐分析到大數據分析：Power Query、Power...定價：480元優惠價：79折379元DIY！2017素人的電腦問題故障排除定價：450元優惠價：93折419元遺傳演算法原理與應用－活用Matlab(第五版)定價：620元優惠價：95折589元大數據：語意分析整合篇 定價：220元優惠價：93折205元演算法星球：七天導覽行程，一次弄懂演算法定價：360元優惠價：79折284元VMware vSphere疑難雜症排除手冊定價：500元優惠價：93折465元職業駭客的告白：軟體反組譯、木馬病毒與入侵...定價：620元優惠價：88折546元個人資料保護法釋義與實務（第二版）：如何面...定價：420元優惠價：93折391元密技偷偷報（49）定價：199元優惠價：75折149元
























認識TAAZE
關於我們
第一次購物
第一次賣二手書
現金回饋
加入會員
偏鄉孩童閱讀專戶
圖書館借閱查詢
工作機會


合作提案
加入書籍供應商
加入電子書供應商
加入創意生活供應商

行銷分紅夥伴計畫
異業合作
廣告合作
加入二手書義賣受捐單位


顧客服務
訂購、訂單查詢
取貨方式
付款方式與運費
退換貨
常見Q&A
客服信箱






保持聯繫




















學思行數位行銷股份有限公司
臺北市松山區南京東路四段56號六樓
|
會員服務使用條款
|
隱私權政策



























備註


無畫線註記
有畫線
有註記
有畫線註記
作家簽名
蓋藏書章
有附件
其他





其他




售價

金額




 

折扣






所得




教科書

是

否


請註記這本教科書所屬學校/系所

縣市區域




所屬學校




所屬系別




找不到你的學校？








取消
確定










一次性輸入多個標籤請用空格分開。 如：行銷 企業 管理 若輸入的標籤內容有空格，請用引號。如："Big apple"







取消
確定









折扣：


請選擇
1
2
3
4
5
6
7
8
9


折

價格：元
什麼是徵求價
可不填徵求價，直接按確定即徵求

取消
確定



同步分享至facebook








中文書































取消
確定

















none
1
100
none
none




TAAZE | facebook 動態分享
同步facebook帳號，將您的冊格子收藏分享給facebook上的好友們！瞭解更多






Q：這是什麼?

Q：分享後這則動態在facebook上會顯示怎樣?





如果你不想將動態同步到facbook上，你可以取消打勾後再更新書本狀態，這則更新將不會同步到facebook上。










不，我不想同步facebook帳號同步










作業系統設計與實作（非正式網站） - 首頁 | Facebook














Facebook電子郵件或電話密碼忘記帳號？註冊首頁關於相片貼文社群建立粉絲專頁社群查看全部邀請朋友 對這個粉絲專頁按讚61 人說這讚59 個人正在追蹤關於查看全部www.cs.ccu.edu.tw/~shiwulo/course教師用戶61 個讚更多大家都按讚的專頁臺灣符式推廣協會非營利組織霸王君主藍月技術日記電腦公司中文(台灣) · English (US) · Español · Português (Brasil) · Français (France)隱私政策 · 使用條款 · 廣告 · Ad Choices · Cookie · 更多 Facebook © 2017貼文作業系統設計與實作（非正式網站） · 2012年4月5日 · http://kerneltrap.org/node/2450 說明Linux32的記憶體管理機制，這在ARM上面也是做這樣的記憶體管理http://kerneltrap.org/node/2450kerneltrap.org作業系統設計與實作（非正式網站） · 2012年3月20日 · http://www.ljplus.ru/…/conan_hac…/Linux_kernel_map_img_3.png Linux kernel的架構圖ljplus.ru顯示全部貼文作業系統設計與實作（非正式網站） · 2012年3月20日 · 今年上課的感覺還蠻好的作業系統設計與實作（非正式網站） · 2012年3月1日 · https://www.google.com/search… 介紹linux上的程式設計，最後面介紹了GNU C與ANSI C的差異linux system programming - Google Searchgoogle.com作業系統設計與實作（非正式網站） · 2012年3月1日 · https://www.google.com/search… 除了太厚以外，沒啥缺點，概念講得很清楚。當工具書剛剛好Professional Linux Kernel Architecture - Google 搜尋google.com作業系統設計與實作（非正式網站） · 2012年3月1日 · https://www.google.com/search… 這本書講解的很「程式碼」，很x86，很32位元understand the linux kernel - Google Searchgoogle.com作業系統設計與實作（非正式網站） · 2012年3月1日 · http://gnugeneration.com/books/linux/2.6.20/kernel-api/ 可以快速地查到kernel裡面重要的函數的用法The Linux Kernel APIThis documentation is free software; you can redistribute      it and/or modify it under the terms of the GNU General Public      License as published by the Free Software Foundation; either      version 2 of the License, or (at your option) any later      version.gnugeneration.com作業系統設計與實作（非正式網站） · 2012年3月1日 · http://lxr.free-electrons.com/ Linux cross reference, 我常用這個，可選怎處理器，字型可愛Linux/ - Linux Cross Reference - Free ElectronsVersion:  2.6.27 2.6.28 2.6.29 2.6.30 2.6.31 2.6.32 2.6.33 2.6.34 2.6.35 2.6.36 2.6.37 2.6.38 2.6.39 3.0 3.1 3.2lxr.free-electrons.com作業系統設計與實作（非正式網站） · 2012年3月1日 · http://bijo-linux.com/tokyo/ Linux的指令東京美女LinuxLinuxコマンドをもっと素敵で身近にbijo-linux.com作業系統設計與實作（非正式網站） · 2012年2月21日 · 非正式網站，可供同學們自由發表與課程相關的文章，授課老師或者助教可能會不定期地上到這個ＦＢ作業系統設計與實作（非正式網站） · 2012年2月21日 · 作業系統設計與實作查看更多




�@�~�t�γ]�p�P��@






Instructor: Ren-Hung Hwang (�����A)






Hot Links

  >
  Linux 2.0.36 Source in HTML

  >
  
 Laboratory

  >
  
 Linux Basics
  >
  
 Linux ��������



  >
  Intel Architecture: Summary
  >
  Intel Architecture: System Programming Guide

  >
  
Summary of Intel Architecture (word)
  >
  CH 1 Slides
  >
  CH
2 Slides
  >
  CH
3(1) Slides
  >
  CH
3(2) Slides
  >
  
�Ĥ@�ճ��i(Signal)
  > 
  
  Programs to be traced in CH 3 
  >
  CH
4(1) Slides
  >
  CH
4(2) Slides
  >
  
  Programs to be traced in CH 4 
  >
  CH
6(1) Slides
  >
  CH
6(2) Slides

  Programs to be traced in CH 6 
  >

  




Time:Mon 2, Wed 56
Place:
�оǤj��220
TextBook: 
M. Beck,
et al., "Linux Kernel Internals,", 2nd ed., Addison-Wesley, 1998.
Reference Books:


D. A. Rusling, "The Linux Kernel,"

http://linux.cis.nctu.edu.tw/LDP/LDP/tlk



M. K. Johnson, "The Linux Kernel Hackers' Guide,"

http://khg.redhat.com/HyperNews/get/khg.html 



Course Goals:


In depth study Linux kernel implementation.


Hands on UNIX system and network administration.


Be a real hacker!!



Grading Policies:

  Homeworks
(3): 15% 
  Programs
(2): 20% 
  Report:
15% 
  Midterm Exam.:
25% 
  Final Exam.:
25% 


Homeworks:

 
 Homework 1 
 
 Homework 2 
 
 Homework 3 


Programs:

 
 Program 1 
 
 Program 2 


Course Outline:




LINUX - the operating system




Compiling the kernel




Introduction to the kernel




Memory Management




Inter-Process Communication




The LINUX File System



Device Drivers Under Linux




Network Implementation



Modules and debugging



Multi-Processing






