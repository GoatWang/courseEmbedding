




課程大綱










嵌入式作業系統設計、實作與移植DESIGN AND IMPLEMENTATION OF EMBEDDED OPERATING SYSTEMS






開課系所 Department/Institute:  資訊系          Computer Science and Information Engineering
開課教師 Instructor:   黃敬群 
開課學年 Academic Year:   0103
開課學期 Semester:    2
開課序號 Serial Number:   120

課程屬性碼 Attribute Code:   CSIE3013 
課程碼 Course Number:   F732300 
分班碼 Class Code: 
學分數 No. of Credits:           3
課程語言 Medium of Instruction:   中文


課程網址 Course Website:         成功大學資訊工程系 Wiki 開放資源: http://wiki.csie.ncku.edu.tw/embedded/schedule	

先修課程或先備能力 Prerequisite Course(s):   程式設計、作業系統、計算機組織      

教師聯絡資訊 Contact with Teacher
  	    黃敬群 jserv.tw@gmail.com      

助教資訊 Contact with Tutor
       李明益 pyth7853@gmail.com      

學習規範 Course Policy
	    不說謊，誠實面對自己。國難當前，期許師生一同找出得以殺出血路的方法      

評量方式 Grading


方法百分比%

其他 others:期初資格考試
20其他 others:作業與報告
40其他 others:學生自我評量
40




教學方法 Teaching Strategies


方法百分比%
實作 Workshop
60其他:理論回顧 others
40




		※請遵守智慧財產權觀念  不得不法影印
		 Please follow the Intellectual Property instruction and No illegal copy
	

課程教材 Course Material
	    詳見成功大學資訊工程系 Wiki 開放資源: http://wiki.csie.ncku.edu.tw/embedded/schedule    

參考書目 References
	    1. ARM System-on-Chip
Architecture, Steve Furber.
2. Embedded System Design: A
Unified Hardware/Software
Introduction, Vahid and
Givargis, John Wiley, 2002
3. Online Handout and documents.    

備註 Remarks
     來自資訊科技產業從業人員所揭露第一手系統軟體開發經驗和觀念。教育理念：「哥教的不是知識，是guts，讓學生日後有能力、有勇氣面對資訊科技產業的挑戰」。
課程從系統程式的「演化」來切入，一開始自 40 行 C 語言程式的 ARM系統開始，先演化為 300 餘行的多工作業系統，之後再逐步擴展諸 Process/Thread 執行單元、記憶體管理、檔案系統、即時多工、驅動程式等設計，並帶著學員逐步實踐以上機制。




基本素養 Basic Literacy
□ 畢業生應具備科技人文素養及資訊工程倫理之精神
 graduates should equip with both the attitude of technological/cultural literacy and the consciousness of information engineering ethics
□ 畢業生應具備良好溝通技巧及國際觀
 graduates should equip with appropriate communication skill and global view
 

核心能力 Competence
■ 畢業生應具備基礎專業數學及資訊理論知識之基本能力
 graduates should equip with the basic capability of the fundamental of professional mathematics and theoretical knowledge in informatics
■ 畢業生應具備資訊理論推導及實驗設計、數據分析歸納之能力
 graduates should equip with the capability of information theory derivation、experiment design and experimental data analysis/induction
■ 畢業生應具備培養學習興趣及持續學習之能力
 graduates should equip with the capability of learning interest development and continuous learning
■ 畢業生應具備獨立、創新思維及發掘、分析、解決資訊相關問題之能力
 graduates should equip with the capability to think creatively and independently and to explore, analyze, and solve information-related problems
□ 畢業生應具備資訊系統設計、測試及驗證之能力
 graduates should equip with the information system ability in designing and verification
□ 畢業生應具備資訊系統整合之能力
 graduates should equip with the capability of system integration
□ 畢業生應具備負責之工作態度及有效團隊合作之能力
 graduates should equip with a responsible attitude in working and the capability of effective team-work collaboration
□ 具備有效溝通表達的專業語文能力
 
 

課程概述 Course Description
       嵌入式作業系統的介紹，進而設計與實作一小型作業系統，並移植到一個以ARM Cortex 處理器為核心之嵌入式系統。 

課程學習目標 Course Objectives
ARM Cortex-A/R的架構與指令集ARMv7/ARMv8銜接產業界的關鍵技術、使用業界標準的開發工具、全部採用活躍的開放原始碼軟體。提供資訊科技工作諮詢和模擬面試服務。 

課程進度 Course Outline


週次 Week進度說明 Progress Description
1Embedded Operating System Concepts + RTOS concepts2ARM Architecture Introduction3ARM Architecture and Peripherals4Realtime Operating System5ARM: Toolchain and Development Flow6ARM: Interrupts and Exceptions7RTOS Evaluation8Case Study: Robotic control system9RTOS Design and Implementation10Case Study: FreeRTOS11Code review of Lab assignments12Case Study: Quadcopter13Advanced OS Design issues14Revise the implementations of existing RTOS15Group Presentation and Discussions16Case Study: L4 microkernel & F917Case Study: uClinux18Case Study: Xvisor hypervisor 

　以上每週進度教師可依上課情況做適度調整。The schedule may be subject to change.


有關課程其他調查 Other Surveys of Courses
                   1.本課程是否規劃業界教師參與教學或演講?   是，約 1 次            
Is there any industry specialist invited in this course? How many times? Yes, about 1 times.
			
           2.本課程是否規劃內含校外實習 (並非參訪)?   否		   
Is there any in (out of) school practicum involved in this course? How many hours?  No







嵌入式系統 - 維基百科，自由的百科全書































 







嵌入式系統

維基百科，自由的百科全書


					前往：					導覽，					搜尋






本條目不符合維基百科的品質標準，需要完全重寫。 
請在討論頁中討論相關議題，並參考更優秀條目寫作指南。 











Soekris net4801,適用於網路應用程式


嵌入式系統（Embedded System），是一種嵌入機械或電氣系統內部、具有專一功能和實時計算效能的電腦系統。[1][2]嵌入式系統常被用於高效控制許多常見裝置，被嵌入的系統通常是包含數位硬體和機械部件的完整裝置，例如汽車的防鎖死煞車系統。相反，通用電腦如個人電腦則設計靈活，可以智慧型處理各式各樣的運算情況，以滿足廣大終端用戶不同的需要。
現代嵌入式系統通常是基於微控制器（如含整合記憶體和/或外設介面的中央處理單元）的，但在較複雜的系統中普通微處理器（使用外部儲存晶片和外設介面電路）也很常見。通用型處理器、專門進行某類計算的處理器、為手持應用訂製設計的處理器等，都可能應用到嵌入式系統。常見的專用處理器有數位訊號處理器。
嵌入式系統的關鍵特性是處理特定的任務，因此工程師能對其進行最佳化，以降低產品的體積和成本，提升可靠性和效能。
嵌入式系統的物理形態包括便攜裝置如計步器、電子手錶和MP3播放器，大型固定裝置如交通燈、工廠控制器，大型複雜系統如混合動力汽車、磁共振成像裝置、航空電子裝置等。它們的複雜度低至單晶片，高至大型底盤或外殼內安裝有多個部件、外設和網路。



目錄


1 嵌入式系統例項
2 歷史
3 特性

3.1 使用者介面
3.2 嵌入式系統的處理器

3.2.1 嵌入式主機板
3.2.2 ASIC和FPGA解決方案


3.3 外圍裝置
3.4 工具
3.5 偵錯
3.6 作業系統
3.7 啟動

3.7.1 內部自檢


3.8 可靠性體系


4 嵌入式軟體架構的類型

4.1 控制迴圈
4.2 非搶先式任務
4.3 搶先式定時器
4.4 搶先式任務
4.5 微內核與外內核
4.6 虛擬機器
4.7 檢查點計算
4.8 辦公用（單核心）作業系統
4.9 Exotic custom作業系統


5 外部連結
6 常見的嵌入式作業系統
7 業界常見的開源嵌入式軟硬體系統



嵌入式系統例項[編輯]
嵌入式系統通常應用於消費類、烹飪、工業、自動化、醫療、商業及軍事領域。

電信系統

從網路級的電話交換機到手機終端都部署了大量嵌入式系統。

消費類電子

包括PDA、MP3播放器、行動電話、遊戲機、數字攝錄影機、DVD播放器、全球衛星定位系統接收器和印表機。

家居應用

微波爐、洗衣機和洗碗機中採用了嵌入式系統，帶來靈活性、效率和功能；高階暖通空調系統採用聯網的恆溫器更精確、高效地按天或季度控制溫度；智慧型家居使用嵌入式裝置進行感知、控制，通過有線和無線網路控制燈光、溫濕度、安全、音影片、監控等。

交通系統

安全要求相當高的飛機中採用了先進的航空電子裝置，如慣性導航系統、全球衛星定位接收器； 各種電機——直流無刷電機、異步電機和直流電機中使用了電氣/電子電機控制器； 汽車、電動車、混合動力汽車越來越多地採用嵌入式系統來節能減排； 其他汽車安全系統，包括防抱死制動系統、電子穩定控制系統、牽引力控制系統、自動四驅系統。

醫療裝置

使用嵌入式裝置進行生命體徵監測，電子聽診器放大聲音，各種醫療成像系統（正電子發射電腦斷層掃描、單光子發射電腦化斷層顯像、電腦斷層掃描、核磁共振成像）進行非入侵式內部檢查； 醫療裝置內的嵌入式系統通常採用工業電腦。

嵌入式系統應用在交通、消防、安防、醫療和生命攸關係統中，由於這些系統能夠與駭客等隔離，因而更可靠。在消防安全中，經過設計，系統能在高溫環境下持續工作。出於安全需要，嵌入式系統可以自給自足，能夠處理切斷了電氣和通訊系統的情況。
WSN領域的發展，促使一種新型的微型無線裝置微塵迅速普及。人們可以通過資訊監測和控制系統感知並作用於物理世界的無數事物。微塵採用微製造技術，通過先進的IC設計技術，將無線子系統與尖端的傳感器結合；從而讓人們可以通過資訊監測和控制系統感知並作用於物理世界的無數事物。這些微塵是完全自給自足的，在需要更換電池或充電前通常可以工作數年。
利用嵌入式Wi-Fi模組，原先利用串列埠進行通訊的裝置可以輕鬆啟用無線通訊功能。
歷史[編輯]
MIT儀器研究室的查爾斯·斯塔克·德雷珀開發的阿波羅制導電腦是現代嵌入式系統的雛形之一。在專案初期，它被看成風險最高的部分，原因是為了減小尺寸和重量，它採用了當時最新研發的單片積體電路。
第一款大批次生產的嵌入式系統是1961年發布的民兵I飛彈內的D-17自動制導電腦。當民兵II飛彈在1966年開始生產的時候，D-17升級成一種新型電腦，其中首次大量使用了積體電路。僅這個專案就將與非門模組的單價從1000美元降低至3美元，低到可用於商業產品。
由於二十世紀六十年代的這些早期應用，不僅嵌入式系統的價格降低了，同時處理能力和功能也獲得了巨大的提高。以第一款單晶片英特爾4004為例，它是為計算機和其他小型系統設計的，但仍然需要外部記憶體和外圍晶片。1978年，國家工程製造商協會發布了可編程單晶片的「標準」，涵蓋了幾乎所有以電腦為基礎的控制器，如單板機、數控裝置，以及基於事件的控制器。
隨著微控制器和微處理器的價格下降，消費品也可以更換掉基於按鈕的模擬器件，如分壓計和可變電容，採用微處理器讀取開關或按鈕訊號。
到了二十世紀八十年代早期，記憶體、輸入輸出部件整合到處理器內，產生了單晶片。在採用通用電腦占用的成本太高昂的應用中，單晶片取而代之。
較低成本的單晶片編程後可取代很多獨立部件，這種嵌入式系統通常比傳統解決方案更複雜，但這些複雜性多數體現在單晶片自身。嵌入式系統需要的外圍元件很少，多數設計工作集中在軟體，而軟體原型的建立及測試與設計、建立新的不使用嵌入式處理器的電路相比速度更快。
特性[編輯]
區別於可以執行多重任務的通用型電腦，嵌入式系統是為某些特定任務而設計的。有些系統則必須滿足實時性要求，以確保安全性和可用性；另一些系統則對效能要求很低甚至不要求效能，以簡化硬體、降低成本。
嵌入式系統並不總是獨立的裝置。許多嵌入式系統由嵌入較大裝置的小計算部件組成，提供較通用的功能。例如吉他機器人採用嵌入式系統來調弦，但總的來說它的設計目的絕不是調弦而是演奏音樂；車載電腦作為汽車的一個子系統存在，提供導航、控制、車況反饋等功能。
為嵌入式系統編寫的程式稱為韌體，儲存在唯讀記憶體或快閃記憶體晶片內，執行在有限的硬體資源上：小容量記憶體，小鍵盤或螢幕甚至沒有。
使用者介面[編輯]
嵌入式系統使用者介麵包括了從沒有使用者介面而只專註於單一任務、到類似於現代桌面作業系統的複雜圖形化使用者介面的各類介面。
簡單的嵌入式裝置使用按鈕、LED、圖形或數字LCD和簡單的選單系統。
較高端的嵌入式系統使用圖形螢幕，配合輕觸感應或屏邊按鈕使用，可使占用空間最小並提供靈活性：按鈕的含義隨螢幕顯示的內容而改變，而且指向想要的選項進行操作就能實現選擇。手持系統通常採用螢幕加操縱桿按鈕作為觸控裝置。
有些系統通過串行通訊介面（如RS-232、USB、I2C等）或網路連線遠端提供使用者介面。這種方式的優勢在於：擴充功能了系統的效能、削減了螢幕的成本、簡化了BSP，可以在PC上構建豐富的使用者介面。例如執行在嵌入式裝置平臺（如IP攝錄影機或路由器）上的嵌入式網路伺服器，它無需安裝客製軟體，而是在連到裝置的PC端的網路瀏覽器中顯示使用者介面。
嵌入式系統的處理器[編輯]
嵌入式處理器大概可分為兩類。一類是普通微處理器：使用獨立的積體電路記憶體和外設。另一類是單晶片：具有片上外設，降低了功耗、尺寸和成本。嵌入式系統的軟體是為某種應用客製的，而不是像個人電腦那樣的由終端用戶安裝的商品，因此可以使用各種不同的基本CPU架構：既有範紐曼型架構也有不同程度的哈佛結構；既有RISC也有非精簡指令集處理器；字長從4位元到64位元甚至更高，當然最典型的仍然是8/16位元。多數架構由幾家不同的公司生產，使用了大量不同的變數和類型。
嵌入式系統也會使用通用型微處理器，但比單晶片需要更多外圍電路。
嵌入式主機板[編輯]
PC/104和PC/104+是小型、小批次嵌入式強固系統的標準之一，大多基於x86架構；通常比標準PC要小，而比多數簡單的8/16位元嵌入式系統要大；使用MSDOS、Linux、NetBSD，或實時嵌入式作業系統如MicroC/OS-II、QNX、VxWorks。有時這些主機板也會使用非x86處理器。
在某些應用中，小巧、高效並非主要關註點，因而可以使用與x86型PC主機板相容的部件。VIA EPIA系列板卡則可以彌補這個空缺，它相容PC但是高度整合、體積較小，或提供其他對嵌入式工程師很有吸引力的特性。這種方法的好處是低成本商品也可以使用通用的軟體開發工具。用這種方法構建的系統仍然是嵌入式系統，因為它嵌入在較大的裝置中、用於滿足單一用途。例如ATM和電子遊戲機，它們都包含了針對各自應用的代碼。
多數嵌入式主機板都不是圍繞PC設計的，也不使用ISA或PCI匯流排。如果採用SoC處理器，用標準匯流排連線分立元件就不是上策，此外軟硬體開發環境都可能會很不一樣。
一種常用的設計模式是採用小型系統模組——也許只有商務卡片大小，容納高密度的BGA晶片如ARM處理器和外設、用於儲存的外部快閃記憶體、作為記憶體的DRAM。模組廠商通常會提供啟動軟體和作業系統選項，一般包括Linux和一些實時作業系統。這些模組由熟悉專業測試方法的組織大批次生產，配合較小批次的、帶特殊應用外設的客製主機板使用。
ASIC和FPGA解決方案[編輯]
SoC是一種常見的為超大批次嵌入式系統設計的可配置陣列。它在單個晶片內包含了多處理器、乘法器、快取和介面，形成一個完整的系統；通過專用積體電路或現場可編程門陣列來實現。
外圍裝置[編輯]
嵌入式系統通過外設與外部通訊：

串行通訊介面：RS-232、RS-422、RS-485等
同步串行通訊介面：I2C、SPI、ESSI等
USB
多媒體卡：SD卡、CF卡等
網路：乙太網、LonWorks等
現場匯流排：CAN匯流排、LIN匯流排、PROFIBUS等
定時器：PLL、捕獲比較模組和時間處理單元
分立IO：GPIO
模擬-數字/數字-模擬轉換(ADC/DAC)
偵錯介面：JTAG、ISP、ICSP、BDM埠、BITP、DP9埠等

工具[編輯]
同典型的電腦程式員一樣，嵌入式系統設計人員也使用編譯器、連結器和偵錯程式開發嵌入式系統軟體。然而，他們也使用一些大多數程式設計師不熟悉的工具。
軟體工具的來源有如下幾種：

專註於嵌入式系統市場的軟體公司
從GNU軟體開發工具移植（參見交叉平臺編譯）
有些情況下，如果嵌入式處理器與普通個人電腦處理器很近似的話也可以使用個人電腦開發工具

嵌入式系統設計人員也使用一些不為普通電腦程式員所熟悉的軟體工具：

一個常用工具是「電路內部仿真器」（ICE，in-circuit emulator）或者是最新設計中的嵌入式偵錯程式。這個偵錯工具是開發嵌入式程式的基本技巧。它代替微處理器或者嵌入微處理器內部，提供了在系統中快速呼叫和偵錯試驗代碼的便捷工具。一個焊點通常就是一個插入系統的特殊電路，通常使用一臺連結到這些焊點的個人電腦作為偵錯介面。
連結器通常是各種各樣。對於大多數商業編程來說，連結器幾乎是事後才考慮的部分，預設設定也從來不變。與此相反，嵌入式連結器有完整、複雜的命令列語言是很普通的。經常有不同類型的記憶體，分別儲存特殊的代碼和資料。單獨的資料結構能夠放在特殊的位址，這樣軟體能夠很方便地存取對映到記憶體的控制暫存器。嵌入式連結器經常有用於減小代碼大小和執行時間的外部最佳化工具。例如，他們可能移動子程式的位置以使用較小的呼叫和跳轉指令。它們經常帶有管理資料疊加（英語：data overlays）和band switch（英語：band switch）技術的特性，這些技術是在嵌入式軟體經常使用的擴充功能廉價CPU的方法。
另外一個常用的工具是一個在程式中添加代碼和或者CRC的工具程式（經常是自己寫的），使用這個工具嵌入式系統能夠在執行程式之前先進行程式資料檢查。
為數位訊號處理開發軟體的嵌入式程式設計師經常使用MathCad或者Mathematica這樣的數學工具進行數學仿真。
一些較少使用的工具有將資料檔案轉換成代碼的工具，使用這種工具就可以在程式中包含任意類型的資料。
少數一些專案為了特殊的可靠性或者數位訊號處理要求使用同步程式語言（英語：Synchronous programming language）。

一些程式語言為嵌入式系統編程提供了一些特殊支援。

對於C語言，ISO/IEC TR 18037:2005定義了

指定的位址空間
指定的儲存類
基本輸入輸出的硬體尋址



偵錯[編輯]
偵錯通常使用內部電路仿真器或者其他一些能夠在微控制器微碼（microcode）內部產生中斷的偵錯程式。微碼中斷讓偵錯程式能夠在只有CPU工作的硬體中進行操作，基於CPU的偵錯程式能夠從CPU的角度來測試和偵錯電腦的電路。PDP-11開創了這種特性的先河。
開發人員能夠仍然使用斷點、單步執行以及高階語言進行偵錯，在許多的偵錯工具上都有這種能力。另外開發人員在偵錯實時事件順序的時候需要記錄、使用簡單的記錄工具。
首先遇到這種問題的個人電腦和大型電腦程式設計師經常在設計優先級和可行方法的時候感到困惑。指導、代碼審查和非個人風格（egoless（英語：egoless））的編程是值得推薦的。
隨著嵌入式系統變得越來越複雜，更高層次的工具和作業系統逐漸移植到可行的裝置上。例如，蜂窩電話、個人數字助理和其他的消費用電腦需要一些從個人或者這些電子裝置製造商之外的公司購買或者提供的一些重要軟體。在這些系統中，需要如Linux、OSGi或者Java這樣的開放編程環境，這樣第三方軟體提供上才能夠在大規模的市場上銷售軟體。
大多數這樣的開發環境都有一個執行在個人電腦上的參考設計，這種軟體的絕大部分都可以在傳統的個人電腦上開發。然而，從開放環境移植到專用的電子裝置和電子裝置的驅動程式開發通常仍然是傳統的嵌入式系統軟體工程師的工作。在有些情況下，the engineer works for the integrated circuit manufacturer, but there is still such a person somewhere.
作業系統[編輯]




使用Windows XP的網際網路收費電話


嵌入式系統經常沒有作業系統、專用的嵌入式作業系統（經常是實時作業系統）或者指定程式設計師移植到這些新系統。
啟動[編輯]
嵌入式系統帶有啟動代碼，通常它禁止中斷、設定電子裝置參數、測試電腦（RAM、CPU和軟體），然後開始應用程式執行。許多嵌入式系統從短暫的掉電狀態取消復原，經常重起而不進行最近的自檢。在十分之一秒內重起是常見的現象。
許多設計人員發現LED在指示錯誤狀態上非常有用，它們可以幫助進行故障處理。一個常用的機制是在復位的時候點亮電子裝置所有的LED以表明供電和LED正常工作；然後在進行加電自檢時由軟體改變LED的狀態；在此之後，軟體用這些LED指示操作過程中的正常或者故障狀態。這可以讓技術人員、工程師和用戶瞭解系統的狀態。一個有趣的例外是電度表（electric power meters（英語：electric power meters））和其他一些大街上的東西，閃爍的指示燈是為了吸引註意力或者表示損壞狀態。
內部自檢[編輯]
許多嵌入式系統都有一定程度或者一定數量的內部加電自檢，自檢有幾種類型：

電腦檢查：檢查CPU、RAM和程式記憶體。通常一加電就開始這些檢查，在一些安全性非常重要的系統中，通常周期性地在安全時間間隔內進行自檢，或者經過一段時間就進行自檢。
外圍裝置檢查：仿真輸入和讀入資料或者測量輸出資料。有大量的通訊、模擬和控制系統都有這些非常廉價的檢查。
電源檢查：通常測試每個供電電路，也可能檢查電池或者主電源輸入。通常供電部分的負載都很重，並且少有餘量，所以這項檢查很有意義。
通訊檢查：驗證從相連單元接收到的簡單訊息，例如在網際網路上使用ICMP訊息「ping」。
電纜檢查：將線連結到待檢查的電纜上指示針進行檢查。如電話這樣的同步通訊系統經常使用「同步」測試。電纜檢查成本很低，當單元部分有插頭的時候這項檢查尤其重要。
裝備檢查：一個系統在安裝時經常需要進行調整，這項檢查就向安裝人員做出狀態指示。
消耗檢查：檢查系統所消耗的東西、在預量太低時發出警告。最常見的例子是汽車的油量表，最複雜的例子可能是維持化學反應物詳細狀態的自動醫學分析系統。
執行檢查：檢查用戶關心的系統執行狀態。顯然，在系統執行時必須進行這項檢查，這方面的檢查包括飛機上的導航儀器、汽車的速度表和磁碟的指示燈等。
安全檢查：在'安全時限'內進行檢查確保系統仍然可靠。安全時限通常小於能夠產生損害的最小時間。

可靠性體系[編輯]
根據人們需求的不同，可靠性也有不同的定義，有意思的是，可靠性的類型卻相對較少，相似可靠性類型的系統，使用相似類型的內在檢查和取消復原方法：

系統非常不安全或者無法修理。這包括太空系統、水下電纜、導航燈塔、鑽孔系統，非常奇怪的是還包括汽車和大規模生產產品。總的來說，嵌入式系統檢測各個子系統、線上切換到冗餘部分或者工作在「limp模式」提供部分的功能。大規模生產的消費產品如汽車、個人電腦或者印表機也屬於這個類別，這是因為與購買的費用相比維修費用高昂、維修人員又路途遙遠。
系統不能安全地停止執行。這包括飛機導航、反應控制系統、重要的化學工廠安全控制、鐵路訊號、單發動機飛機的發動機，如上所述，但是「limp模式」較難容忍，通常需要操作員選擇備份系統。
系統停機時將會造成大量的金錢損失。這些包括電話交換機、工廠控制、橋樑和電梯控制、資金轉移、市場開發、自動銷售和服務等，這些系統通常有一些運轉/不運轉測試，它們通常帶有線上冗餘或者使用替換系統和人工過程的limp模式。
系統不安全的時候不能操作。同上面的情況類似，系統的執行將會造成大量的金錢損失。醫療裝置、帶有發動機這樣的熱備份的飛行器、化學工廠控制、自動股票交易、遊戲系統等。測試可能是五花八門，但是出錯時能夠做的就是停止整個系統。

嵌入式軟體架構的類型[編輯]
常用的嵌入式軟體架構有幾種不同的基本類型。
控制迴圈[編輯]
在這種設計中，軟體有一個簡單的循環，這個循環調用各個子程式，每個子程式管理硬體或者軟體的某一部分。中斷通常用來設置標記或者更新軟體其他部分能夠讀取的暫存器。
系統使用簡單的API來完成允許和禁止中斷設置。如果處理得當的話，它能夠在巢狀子程式中處理巢狀調用，在最外面的中斷允許巢狀中恢復前面的中斷狀態。這種方法是實作Exokernel的一個最簡單的方法。
通常在循環中有一些子程式使用周期性的即時中斷控制一組軟體定時器，當一個定時器時間到的時候就會執行相應的子程式或者設置相應的標誌。
任何可能發生的硬體事件都應該有軟體定時器的支援，硬體事件大概每萬億次出現一次錯誤，對於現代的硬體來說大概是一年發生一次，對於以百萬計大規模生產的裝置來說，遺漏一個軟體軟體定時器在商業上可能是災難性的。
有時測試軟體運行一組基於軟體的安全定時器，它們周期性地複位硬體中的軟體看門狗。如果軟體錯過一個事件，安全定時器軟體將會捕捉到它。如果安全定時器出錯，看門狗硬體將會複位系統。
可以使用指向每個狀態機函式的指標實作狀態機，函式可以用C++、C或者組合語言等實作。變化的狀態將不同的函式放到指標中，每次循環運行時都會執行函式指標。
許多設計人員建議每個循環讀一次輸入輸出裝置、並且儲存得到的結果，這樣可以保證邏輯過程的在一致的參數上運行。
許多設計人員喜歡將狀態機設計成每個狀態僅僅檢查一到兩項內容，通常是檢查硬體事件和軟體定時器。
設計人員建議多級狀態機應該讓低層狀態機早於高層狀態機運行，這樣高層就能夠根據正確的資訊運行。
如內部燃燒控制這樣的複雜功能通常根據多維表格進行處理，代碼通常進行查表處理而不進行複雜的計算，為了減小表格的大小以及成本軟體可以在條目之間進行差值運算。
在最小的微控制器中，尤其是只有128位元組堆疊的8051中，控制環允許好的連結器使用靜態分配的資料覆蓋本地變數。在這種機制中，離子程式調用樹末端越近的變數得到的記憶體位址越高。當開始一個新的分支的時候，它的變數可以在以前分支遺棄的空間中進行重新分配。
簡單控制迴圈的一個主要缺點是它無法保證響應特定硬體事件的時間。
細心的設計可以很容易地保證中斷不會被長時間禁止，這樣中斷代碼就可以在非常精確的時間運行。
控制環的另外一個主要缺陷是增加新的特性的時候會變得複雜。需要花費很長時間的演算法必須小心地進行分解以使得每次只有一小部分在主循環中運行。
這種系統的優勢是它的簡單性，並且在很小的軟體上，循環執行地很快幾乎沒有人關心它是不可預測的。
它的另外一個優勢是這種系統保證運行軟體的質量，無法將不好的運行結果歸咎為其他的作業系統。
非搶先式任務[編輯]
非搶先式任務系統非常類似於上面的系統，只是這個迴圈是隱藏在API中的。我們定義一系列的任務，每個任務獲得自己的子程式棧；然後，當一個任務空閒的時候，它呼叫一個空閒子程式（通常呼叫「暫停」、「等候」、「交出（yield（英語：yield））」等等）。
帶有類似屬性的架構都帶有一個事件佇列，有一個迴圈根據佇列列表中的一個域確定刪除時間和呼叫子程式。
這種架構的優點和缺點都非常類似於控制環，只是這種方法添加新的軟體更加簡單，只需要簡單地編寫新的任務或者將它添加到佇列直譯器中。
搶先式定時器[編輯]
使用上面的任何一種系統，但是添加一個按照定時器中斷執行子程式的定時器系統，這樣就給系統添加了嶄新的能力，這樣定時器子程式第一次能在一個有保證的時間內執行。
另外，代碼第一次能夠在非預期的時間存取自己的資料結構。定時器子程式必須要象中斷子程式一樣進行處理。
搶先式任務[編輯]
使用上面的非搶先式任務系統，從一個搶先式定時器或者其他中斷執行。
這樣系統就突然變得很不一樣了。任何一個任務的代碼都有可能損害其他任務的資料&emdash;所以它們必須進行切缺的切分。對於共享資料的存取必須使用一些同步策略進行控制，如訊息佇列、訊號燈或者非阻塞同步機制。
經常在這一步開發組織就會購買一套實時作業系統。如果一個組織缺少能夠編寫作業系統的人才或者作業系統將要在幾個產品之上，這可能是一個明智的選擇。這通常要將開發計劃增加六到八周，and forever after programmers can blame delays on it.
微內核與外內核[編輯]
這種方法試圖將系統組織得比單核心更易於配置，而同時提供類似的特點。
微內核是實時作業系統的一個邏輯發展，通常的組織方式是作業系統內核分配記憶體並且將CPU在不同的執行緒之間進行切換。用戶模式的行程實現如檔案系統、用戶介面等主要的功能。
微內核在二十世紀五十年代開始首次嘗試，但是由於電腦在任務間切換以及在任務間交換資料速度非常緩慢，所以人們放棄了微內核而鍾情於MULTICS和UNIX風格的大內核。總體上來說，微內核在工作切換以及任務間通訊速度快的時候是比較成功的，在速度慢的時候是失敗的。
外內核通過使用普通的子程式呼叫獲得的通訊效率很高，硬體以及系統中的軟體都是程式設計師能用也能擴充功能的。資源內核（可能是庫的一部分）分配CPU時間、記憶體以及其他資源。如多工、網路以及檔案系統這樣的大內核特性通過代碼庫來提供。庫可以進行動態的連線、擴充功能或者共享。不同的應用甚至可以使用的不同的庫，但是所有的資源都來自於資源內核。
虛擬機器[編輯]
一些航空電子系統使用幾個商用電腦。這樣更進一步，每個電腦都在模擬它們自身的幾個副本，重要的程式同時在幾個電腦上執行並且進行投票控制（vote）。
模擬環境的優點就是即使一個電腦出現故障，軟體的不同常式能夠遷移到正常工作的軟體分割，表決的票數並不受影響。
通常虛擬軟體執行在電腦的用戶模式下，它捕捉、模擬硬體存取和不在用戶模式下執行的指令。
檢查點計算[編輯]
另外一種常用的機制是兩個電腦計算for a bit，然後將它們的計算結果報到那個點上。如果一個電腦的計算是nut，它就會被關閉。
辦公用（單核心）作業系統[編輯]
這種系統通常在沒有系統經費的嵌入式專案中流行，但是從這篇文章的多個作者來看，這通常是不正確的，它們的邏輯是：

作業系統是經過特殊封裝的重用代碼庫。如果這些代碼有用，設計人員就會節省時間和金錢，否則它們就是無用的。
商務系統的作業系統沒有嵌入式硬體的介面。例如，如果要用Linux寫一個馬達控制器或者電話交換機，絕大部分的實際控制操作都是IOCTL呼叫，同時，正常的讀、寫和查詢介面都是無用的。所以作業系統對於實際的開發妨礙很大。
大多數的嵌入式系統不處理辦公事務，所以辦公作業系統的大部分代碼都被浪費了。例如，絕大多數的嵌入式系統從來都不使用檔案系統或者螢幕，所以檔案系統和圖形化使用者介面部分就是浪費的，這些不用的代碼只會影響系統的可靠性。
辦公用作業系統保護硬體不讓用戶程式操作，這就嚴重地妨礙了嵌入式開發工作。
作業系統必須移植到嵌入式系統上，也就是說，硬體驅動程式無論如何都必須重寫，這也是作業系統最難的部分，所以使用這樣的作業系統幾乎沒有功效。
作業系統真正有用、可移植的特性是小段代碼。例如，一個基本的TCP/IP介面大約有3000行代碼，另外的一個例子是大約同樣大小的簡單檔案系統。如果設計需要這些代碼，能夠使用少於嵌入式系統開發10%的經費就能完成，不需要支付版權費用，只需要簡單地重寫就可以了。如果系統這些代碼有足夠的通用性，嵌入式系統雜誌封面的後面通常有公司銷售沒有版權費的C語言實現代碼。

然而許多工程師並不認同這一點，嵌入式Linux越來越受到人們的歡迎，尤其是在無線路由器和全球定位系統這樣的功能強大的嵌入式系統中。其中有下麵一些原因：

有現成的移植到普通嵌入式晶片的實現代碼。
它們允許重用公開獲得的裝置驅動程式、網頁伺服器、防火牆或者其他代碼。
開發系統能夠從許多特性組合開始，在發布的時候可以剔除不需要的功能，從而節約所消耗的記憶體。
許多工程師認為在用戶模式執行應用程式更為可靠、更容易偵錯，所以開發過程更容易、代碼更易於移植。
許多嵌入式系統沒有控制系統那樣對於實時性的嚴格要求，對於許多應用來說如嵌入式Linux這樣的系統的回應速度就已經足夠了。
要求更快的回應速度，而不是可靠性的特性，通常放到了硬體上。
許多實時作業系統都針對每件產品收取費用，當產品是消費品時，這項費用是巨大的。

Exotic custom作業系統[編輯]
一些系統需要安全、及時、可靠或者高效的特性，上面的架構卻無法達到，構建這樣的系統有一些廣為人知的技巧：

僱傭一個真正的系統程式設計師。他們的花費很小，但是能夠節約數年的偵錯以及相關的收入損失。
RMA（rate monotonic analysis），可以用來評估一組任務能否在特定的硬體系統下執行，在最簡單的形式下，設計人員保證最快完成的任務有最高的優先級，平均來說CPU至少有30%的空閒時間。
和諧的任務能夠高效地最佳化CPU。基本上來說，設計人員保證每件工作都是從heartbeat timer開始工作的。在實時作業系統上很難這樣做，因為它們在等候輸入輸出裝置的時候通常就會切換任務。
剛好有兩個優先級（通常是執行和禁止中斷）的系統不能出現高優先級任務等候低優先級任務釋放訊號燈或者其他資源的優先級倒置問題，
有監視器（monitor）的系統不能出現死結。監視器鎖住一段代碼禁止中斷和其他搶先任務。如果這個監視器只用於一小段快速執行的代碼，系統可能工作正常。如果能夠證明監視器API在所有情況下都能夠完整執行，例如僅僅禁止中斷，那麼就不會產生系統掛起的情況。

這就意味著使用兩個優先級和監視器的系統是安全、可靠的，因為它們沒有死結和優先級倒置的問題。如果監視器能夠執行到結束，那麼就永遠不會掛起。如果使用和諧的任務，可能還會相當高效。然而，RMA無法描述這些系統，優先級最好也不要到處都有，其中包括作業系統和硬體。
外部連結[編輯]

即時操作系統如何工作（英）
嵌入式系統門戶（英）
視窗嵌入開發者中心（英）
嵌入系統與VLIW處理器（英）
嵌入式C++ 首頁（英）
QNX首頁（英）
LynuxWorks嵌入式系統首頁（英）
嵌入式系統討論群、書籍、職缺、與其他林林總總（英）
嵌入式軟體設計（英）
擁有嵌入式系統研發社團的大學列表（英）
嵌入式系統編程（英）
EE概要 - 電機工程與嵌入系統編程（英）
DeviceTools - 給內嵌裝置開發者的工具與矽片（英）
Embedian（英）
內嵌計算工業的紀錄雜誌（英）
內嵌白皮書、下載、公司、新聞、文章（英）
內嵌系統疑難排解 - 一個概述從基版醞釀、製造、到後勤的問題。（英）
Working across Multiple Embedded Platforms跨平臺嵌入式系統。（英）

常見的嵌入式作業系統[編輯]
參見嵌入式作業系統

Android
Firefox OS
iPhone OS
uC/OS II
FreeRTOS
uCLinux
VxWorks
pSOS
Nucleus
PalmOS
Windows CE
Windows XP Embedded
Windows Vista Embedded
嵌入式Linux
ECOS
QNX
Lynx
Symbian
Arm-Linux
RT-Thread

業界常見的開源嵌入式軟硬體系統[編輯]



無作業系統
有作業系統 +弱GUI
有作業系統 + GUI介面


8/16位元處理器


ardunio開發板（軟硬體全套，開源，目前較熱門）
各家單晶片公司提供參考設計(如Ateml等)




Arduino開發板（軟硬體全套，開源，目前較熱門）
Ethernut/nutos專案（軟硬體配套，開源，偏重電腦網路）
UcosII作業系統(軟體，開源但商業版本需要license費)
FreeRTOS作業系統（軟體，商業公司提供的開源版本，也售賣對應的商業版本）
Keil RTX51 Real-Time Kernel（開源，Keil軟體內建需要license）


/


32位元處理器
/


Ethernut/nutos專案（軟硬體配套，開源，偏重電腦網路）
eCos作業系統（軟體，開源，優點是可以客製化RTOS）
uClinux作業系統（軟體，開源，有對應的硬體板uCsimm專案）
FreeRTOS作業系統（軟體，商業公司提供的開源版本，也售賣對應的商業版本）
Keil RTX Real-Time Kernel（開源，Keil軟體內建需要license）
RT-thread作業系統（軟體，開源，國內開發,有簡單GUI）




Android作業系統
Beagle board專案（軟硬體配套，開源）
Raspberry Pi 專案（軟硬體配套，開源）












閱
論
編


單晶片






總論



單板機
特殊功能暫存器（英語：Special function register）








架構



8051
ARM
AVR
PIC
C166（英語：C166）
TriCore（英語：TriCore）
FR-V（英語：FR-V）
MC6800








家族系列





4位元




TLCS-47（英語：Toshiba TLCS）









8位元




AVR
PIC（8-bit）
COP8
MCS-48（英語：Intel MCS-48）
英特爾MCS-51
Z8（英語：Zilog Z8）
eZ80（英語：Zilog eZ80）
飛思卡爾68HC08（英語：HC08）
飛思卡爾68HC11（英語：HC11）
H8
PSoC
東芝TLCS（英語：TLCS-870）
XC800系列（英語：XC800）









16位元




C166
CR16/CR16C
H8S
MSP430
PIC（16位元）
R8C
東芝TLCS-900
XC 2000
XE166









32位元




Am29000
CRX
富士通FR
FR-V
H8SX
MPC5xx
PIC（32位元）
TLCS-900
TriCore
英飛凌XMC4000
英飛凌AURIX
V850
應用級ARM核心列表











介面





編程




電路線上串列燒錄編程（ICSP）
系統線上燒錄編程（英語：In-system programming）（ISP）
程式和除錯介面（PDI）
高電壓串列編程燒錄（HVSP）
高電壓並列編程燒錄（HVPP）
Bootloader
ROM
aWire









除錯




debugWIRE
Joint Test Action Group（JTAG）
In-circuit debugging（ICD）
In-circuit emulator（ICE）
In-target probe（ITP）











模擬器



gpsim








列表



Common microcontrollers
By manufacturer

Freescale
Intel










參見



嵌入式系統
可程式邏輯控制器













權威控制



LCCN: sh87006632
GND: 4396978-1
BNF: cb12410613b（資料）
NDL: 01064710









^ Michael Barr. Embedded Systems Glossary. Neutrino Technical Library. [2007-04-21]. 
^ Heath, Steve. Embedded systems design. EDN series for design engineers 2. Newnes. 2003: 2. ISBN 978-0-7506-5546-0. An embedded system is a microprocessor based system that is built to control a function or a range of functions. 





 
						取自 "https://zh.wikipedia.org/w/index.php?title=嵌入式系統&oldid=44183591"					
分類：嵌入式系統隱藏分類：維基百科需要重寫的條目含有英語的條目包含規範控制信息的維基百科條目 



導覽選單


個人工具

沒有登入對話貢獻建立帳號登入 



命名空間

條目
討論




台灣正體



不轉換
簡體
繁體
大陸簡體
香港繁體
澳門繁體
馬新簡體
台灣正體






查看

閱讀
編輯
檢視歷史



更多







搜尋



 







導航


首頁分類索引特色內容新聞動態近期變更隨機條目 



說明


說明維基社群方針與指引互助客棧知識問答字詞轉換IRC即時聊天聯絡我們關於維基百科資助維基百科 



其他專案


維基共享資源維基教科書 



列印/匯出


下載成 PDF 



工具


連結至此的頁面相關變更上傳檔案特殊頁面可列印版靜態連結頁面資訊維基數據 項目引用此頁面 



其他語言


AlemannischالعربيةAzərbaycancaБългарскиCatalàČeštinaDanskDeutschEnglishEspañolEestiفارسیSuomiFrançaisעבריתहिन्दीMagyarBahasa IndonesiaItaliano日本語한국어Lietuviųമലയാളംမြန်မာဘာသာNederlandsNorsk nynorskNorsk bokmålPolskiPortuguêsRomânăРусскийSrpskohrvatski / српскохрватскиSimple EnglishSlovenčinaСрпски / srpskiSvenskaதமிழ்ไทยTürkçeУкраїнськаاردوTiếng Việt 
編輯連結 





 本頁面最後修訂於2017年4月30日 (週日) 05:39。
本站的全部文字在創用CC 姓名標示-相同方式分享 3.0 協議之條款下提供，附加條款亦可能應用（請參閱使用條款）。
Wikipedia®和維基百科標誌是維基媒體基金會的註冊商標；維基™是維基媒體基金會的商標。
維基媒體基金會是在美國佛羅里達州登記的501(c)(3)免稅、非營利、慈善機構。


隱私政策
關於維基百科
免責聲明
開發人員
Cookie 聲明
手機版檢視



 

 






 









艾鍗學院-嵌入式軟韌體教育訓練中心 - 嵌入式即時作業系統FreeRTOS 設計實作




































首頁關於艾鍗最新公告公司簡介師資介紹開發板介紹環境設備交通資訊最新職缺艾鍗新聞獲獎與榮耀課程資訊資料科學系列課程大數據分析與機器學習應用工程師養成班Embedded Linux課程[學程] 嵌入式Linux開發實務Linux系統建置實務嵌入式Linux開發實務 Linux系統程式設計Linux驅動程式 ARM Boot Loader設計Linux Socket網路程式設計Linux核心程式介面Raspberry Pi之Python程式設計硬體控制快速打造物聯網Web整合應用班韌體設計系列課程[學程] MCU韌體開發實戰USB韌體設計單晶片韌體開發班生醫感測器整合設計班ARM Cortex-M0 應用整合設計穿戴式裝置應用開發TI MSP430微控制器開發 嵌入式即時作業系統FreeRTOS 設計實作快速打造物聯網Web整合應用班硬體設計系列課程電路設計實作班感測電路設計與應用Allegro/PCB Layout設計FPGA 數位IC設計實戰 H.264視訊編、解碼器系統開發ARM系列課程快速打造物聯網Web整合應用班ARM Boot Loader設計ARM Cortex-M0 應用整合設計Android系列課程[學程] Android APP 實戰開發Android嵌入式平臺開發訓練班 Android FrameworkAndroid ADK周邊裝置開發班程式語言系列課程暑期C語言程式研習營JavaScript程式設計精修班Python程式設計班Java 物件導向程式 資料結構精修班C語言程式設計iOS程式開發系列課程iPhone程式設計基礎班iPhone程式設計進階班德州儀器課程Android嵌入式平臺開發訓練班 TI MSP430微控制器開發 Web及雲端系列課程快速打造物聯網Web整合應用班web全端開發工程師養成班雲端伺服器建置實務Google App Engine 雲端程式開發實務研發經理人才培育班產品應用系列課程生醫感測器整合設計班NFC無線通訊設計實作班快速打造物聯網Web整合應用班轉職就業班醫療電子產品開發人才養成班IoT平臺開發人才養成班 (政府補助)物聯網韌體工程師人才養成班物聯網平臺開發人才養成班(政府+企業雙重補助)課程說明會平日班_課程說明會假日班_課程說明會數位學習APCS檢定(C語言)數位課程Web全端程式設計數位課程資料結構數位課程Python數位課程MCU數位課程Linux驅動程式數位課程更多數位課程補助專班物聯網平臺開發人才養成班更多...企業服務企業內訓服務艾鍗企業VIP會員研發設計服務電腦教室租借服務學員專區學員見證資訊專區廠商求才學員常見問題學員權益與報名須知試聽專區最新成果展學習地圖研討活動前進校園



 

     


 









 













現在位置：艾鍗學院＞韌體設計系列課程＞嵌入式即時作業系統FreeRTOS 設計實作班

 報名好禮優惠

1. 8/30前報名享95折早鳥優惠 2. 分期方案:"可享6期/12期分期0利率"名額有限，別再錯過了！  



 


課程特色

隨著產品功能要求愈來愈複雜，MCU 已從8 位元朝向32 位元的發展，運作時脈也不斷提高，同時MCU 被要求不能只是傳統的單工處理而是要求多工並行作業，使得RTOS 嵌入及時作業系統應運而生。 本課程已目前MCU最多人使用的的FreeRTOS開放式嵌入及時作業系統之使用作深入的介紹。課程以動手實作為主，使學員對FreeRTOS作業系統之程式觀念、應用有更進一步瞭解，同時教授基於TI LM3S3748 的FreeRTOS 移植、硬體元件移植，非常適合於相關軟韌體開發從業人員進修。



 課程目標

本門課程以開源FreeRTOS作為嵌入式即時作業系統談論的重點。首先會介紹如何在TI LM3S3748(ARM Cortex M3)上移植FreeRTOS。接著說明FreeRTOS的任務管理、時間管理、資源分享、記憶體管理、任務通訊、硬體HAL 層等機制及具體使用方法，最終掌握嵌入式系統設計的基本方法。

 我想瞭解更多 


適合對象

1. 電子、電機 、資訊、自動控制等相關科背景。 2. 想從事ARM BSPdevelopment、ARM Bootloader研發相關工作者。 3. FreeRTOS programmer. 4. 須具C 程式設計基礎。


課程大綱

1. ARM Cortex-M3 微處理器架構簡介 2. Stellaris® LM3S3748 EVB介紹 3. 開發環境TI Code Composer Studio 安裝 4. FreeRTOS架構介紹 5. 基於TI LM3S748 的FreeRTOS移植 6. Task產生& 範例演練 7. Task優先權排程管理&範例演練 8. 佇列管理&範例演練 9. 中斷管理&範例演練 10. Task通訊&範例演練 11. 同步處理機制-Semaphore, mutex&範例演練 12. FreeRTOS硬體驅動程式的移植


職涯方向

嵌入式設計師 │ 韌體工程師 │ 資訊家電設計師 │ 網路應用程式設計


學生須知

報名須知 | 繳費方式 | 退費方法


上課花絮

▪ 從無到有的培訓過程，紮實前瞻且完善。


延伸學習


嵌入式Linux開發學程

MCU韌體開發實戰學程
ARM Bootloader







			
				熱門活動			




[政府補助]物聯網開發工程師養成班
[政府補助]嵌入式Linux開發實務
[小班教學]FPGA數位IC設計實戰
[數位課程]輕鬆學習不受限
[政府補助]MCU+韌體實戰開發
[熱門推薦]大數據應用工程師班
[職前訓練]工程師培訓後就業計畫
[暑假限定]高中生C語言程式研習營
[政府補助]物聯網整合應用實作班
[熱門推薦]Web全端工程師班
[高中限定]APCS程式認證培訓班
[熱門課程]感測電路設計與應用








			
				最新開課資訊			








已閱讀個資保護聲明
嵌入式即時作業系統FreeRTOS設計實作班
  


 

 

 

 







			
				熱門推薦			




 
8/15 ↑ 物聯網韌體工程師養成班 【待業限定，政府補助，名額倒數中】


8/12 ↑ 嵌入式Linux開發實務【本班符合政府補助】報名立即送Raspberry Pi 3開發套件組


8/12↑MCU+韌體設計實戰班【政府補助】報名送艾鍗獨家研發ARM實驗板+MCU套件包+電子模組

 
10/29↑FPGA 數位IC設計實戰   【百萬年薪的第一步】報名送BeMicro CV kit

 
8/16↑暑期C語言程式研習營  【7/31前報名，享早鳥優惠！！】好評加開中，額滿為止

 
↑物聯網整合應用實作班報名送最新Raspberry Pi 3開發套件包補助今年最後一梯次，剩8位



 








 

訂閱艾鍗電子報掌握最新課程優惠

 
Please enable JavaScript &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;br /&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;
 
 
 














已閱讀個資保護聲明
嵌入式即時作業系統FreeRTOS設計實作班
  


 

 

 

 





最新消息

 最新公告
 近期研討
 就業人才培訓計畫
 研發實習生計畫








關於艾鍗

 公司簡介
 師資簡介
 環境設備
 會員廠商
 活動相簿
 交通資訊








服務項目

 教育訓練
 職前訓練
 企業內訓
 數位學習
 教室租借








社群資源

 艾鍗 Facebook
 艾鍗 YouTube 頻道
 艾鍗技術討論區
 教學實錄分享
　　　　　　










學員專區

 個資保護聲明
 學習地圖
 學員見證
 課程Q&A
 學員權益
 加入會員













聯絡我們




 








 




首頁關於艾鍗最新公告公司簡介師資介紹開發板介紹環境設備交通資訊最新職缺艾鍗新聞獲獎與榮耀課程資訊資料科學系列課程大數據分析與機器學習應用工程師養成班Embedded Linux課程[學程] 嵌入式Linux開發實務Linux系統建置實務嵌入式Linux開發實務 Linux系統程式設計Linux驅動程式 ARM Boot Loader設計Linux Socket網路程式設計Linux核心程式介面Raspberry Pi之Python程式設計硬體控制快速打造物聯網Web整合應用班韌體設計系列課程[學程] MCU韌體開發實戰USB韌體設計單晶片韌體開發班生醫感測器整合設計班ARM Cortex-M0 應用整合設計穿戴式裝置應用開發TI MSP430微控制器開發 嵌入式即時作業系統FreeRTOS 設計實作快速打造物聯網Web整合應用班硬體設計系列課程電路設計實作班感測電路設計與應用Allegro/PCB Layout設計FPGA 數位IC設計實戰 H.264視訊編、解碼器系統開發ARM系列課程快速打造物聯網Web整合應用班ARM Boot Loader設計ARM Cortex-M0 應用整合設計Android系列課程[學程] Android APP 實戰開發Android嵌入式平臺開發訓練班 Android FrameworkAndroid ADK周邊裝置開發班程式語言系列課程暑期C語言程式研習營JavaScript程式設計精修班Python程式設計班Java 物件導向程式 資料結構精修班C語言程式設計iOS程式開發系列課程iPhone程式設計基礎班iPhone程式設計進階班德州儀器課程Android嵌入式平臺開發訓練班 TI MSP430微控制器開發 Web及雲端系列課程快速打造物聯網Web整合應用班web全端開發工程師養成班雲端伺服器建置實務Google App Engine 雲端程式開發實務研發經理人才培育班產品應用系列課程生醫感測器整合設計班NFC無線通訊設計實作班快速打造物聯網Web整合應用班轉職就業班醫療電子產品開發人才養成班IoT平臺開發人才養成班 (政府補助)物聯網韌體工程師人才養成班物聯網平臺開發人才養成班(政府+企業雙重補助)課程說明會平日班_課程說明會假日班_課程說明會數位學習APCS檢定(C語言)數位課程Web全端程式設計數位課程資料結構數位課程Python數位課程MCU數位課程Linux驅動程式數位課程更多數位課程補助專班物聯網平臺開發人才養成班更多...企業服務企業內訓服務艾鍗企業VIP會員研發設計服務電腦教室租借服務學員專區學員見證資訊專區廠商求才學員常見問題學員權益與報名須知試聽專區最新成果展學習地圖研討活動前進校園





Embedded Linux嵌入式系統移植實作 - 中華數位，嵌入式系統培訓專家





























 
  
  































姓      名







連絡電話





電子信箱






新舊學員




                                                舊學員


                                                新學員






選擇課程


Embedded Linux系統移植實作 





選擇場次


請選擇您想參加場次
週(一.三.五)7pm-8pm
週(二.四)2pm-3pm
週(六.日)11am-12pm
週(六.日)2pm-3pm
由專人為您安排另約時段




驗證碼







                                              資訊來源
                                            


請選擇
Google
Yahoo
Yes123
104
其他




























嵌入式Android物聯網系統移植培訓
Embedded Linux系統移植實作
Device Driver開發實務課程
Android系統整合移植實務
Android硬體框架整合實務



Android系列相關課程 Microcontroller系列相關課程
單元系列相關課程






課程簡介
｜
課程內容
｜
Embedded專題實作
｜
課程優勢
｜
學習流程
｜
開發板與模組專區























Embedded Linux系統移植實作
                                         上課時數:42小時       
									
( Embedded Linux System  )

































 embedded課程教學實錄





本課程使用業界全新ARM Cortex-A9四核心 Tiny4412開發板，從最底層SOC晶片系統設計理論，                               至上層每個環節的系統建置過程，詳細引導學員做循序漸進的學習。著重嵌入式系統設計架構流程，豐富的實例演練以及完整的移植教材讓學員在最短時間內深入淺出瞭解嵌入式硬體與
                                    系統核心的移植技巧與建置，同時針對開放源碼應用程式移植做詳細的探討，並藉由實作專題演練讓學員更進一步瞭解業界相關產品應用與創新；觀念脈絡的清晰使學員能夠在將來業界遇到不同的嵌入式平臺時能夠有能力移植與建置系統。








 



 





適合對象：


 具備 Linux 程式開發基礎，有志投入Embedded系統技術領域發展者。
 學習Linux程式開發技巧與Embedded實作者。 已在相關領域，欲再增強本身專業技能者。


職涯發展：嵌入式軟體工程師 │韌體工程師 │手持裝置開發工程師│驅動程式工程師│電子書開發工程師│車用電子工程師│







 具備Linux系統安裝與檔案系統架構，熟悉Linux 指令、核心編譯及主機架設。


 具備嵌入式C語言指標使用技巧、位元運算及檔案I/O探究、計憶體管理使用技巧


 具備Linux程式開發技巧與實作能力，System V IPCs 使用、Networking and  Socket Programming。


 掌握從無到有開發自己的嵌入式系統、瞭解Embedded開發各環節障礙及如何剋服 






 









































Introduction to Embedded System &amp; IOT Platforms.(嵌入式系統暨物聯網平臺介紹)






•嵌入式系統&amp;物聯網平臺介紹•嵌入式穿戴式裝置簡介•物聯網平臺應用導論•半導體製程、封裝概論•嵌入式系統硬體架構•嵌入式系統晶片設計流程
•嵌入式系統軟體暨物聯網平臺架構•嵌入式系統軟體設計流程•嵌入式系統建置流程(從底層硬體至上層系統軟體)•物聯網平臺實作•物聯網平臺實務Demo






ARM Architecture ( Exynos 4412) & Introduction to Development Board 
                                                                    (ARM 系統架構& 開發板介紹)






•CPU架構簡介(ARM MIPS x86 PPC)
                                                                    •ARM 公司簡介
                                                                    •ARM CPU 架構介紹
                                                                    •ARM 組合語言
•Exynos 4412  Cortex-A9 四核系統晶片手冊閱讀技巧
                                                                    •實作開發板硬體電路介紹
                                                                    •實作開發板軟體BSP介紹






GNU Software (GNU 工具軟體)






•Linux開發工具軟體介紹            
                                                                    •Makefile 撰寫技巧
                                                                    •建置函式庫
•嵌入式系統程式設計撰寫技巧 Embedded C
                                                                    •深入嵌入式系統程式執行流程
                                                                    •User Space and Kernel Space






Development Tools & Debugging Tools(嵌入式開發工具軟體& 除錯工具)






•跨平臺開發工具介紹(Toolchain)
                                                                    •建構物聯網跨平臺開發工具(Building your own toolchain)
                                                                    •建置嵌入式系統開發環境
•除錯軟體介紹
                                                                    •程式以及系統核心除錯技巧
                                                                    •除錯硬體介紹






Bootloader (開機管理程式)






•PC BIOS 以及Bootloader(U-boot)介紹
                                                                    •移植Bootloader技巧
                                                                    •編譯Bootloader
                                                                    •深入理解Bootloader核心程式
 •修改 Bootloader
                                                                    •Bootloader 驅動程式開發
                                                                    •SD card
                                                                    •LED
•Button
                                                                    •Ethernet






Embedded Linux Kernel (嵌入式系統核心)






•Linux 核心介紹
                                                                    •移植嵌入式系統核心技巧
                                                                    •設定嵌入式系統核心技巧
•修改系統核心
                                                                    •新增硬體裝置
•最佳化系統核心 (Down size)
                                                                    •核心除錯






File System(檔案系統)






•檔案系統介紹
                                                                    •建置檔案系統
                                                                    •NFS
•UBIFS
                                                                    •JFFS2
                                                                    •CRAMFS
•RAMDISK
                                                                    •檔案系統設定技巧
                                                                    •最佳化檔案系統大小






Open Source Application porting guide(開放源碼程式移植)






•應用程式移植介紹 (Porting)
                                                                    •導覽嵌入式系統應用程式
                                                                    •應用程式移植技巧
                                                                    •常見系統工具程式移植
 •常見函式庫移植
                                                                    •應用程式移植
                                                                    •驅動程式移植
                                                                    •GPS
 •Webcam
                                                                    •GPS
                                                                    •USB wifi
                                                                    •ADC






Linux Device Driver (Linux驅動程式)






•裝置驅動程式介紹
                                                                    •編譯系統核心模組
                                                                    •簡易驅動程式撰寫
•LED、溫溼度感測器、大氣壓力、三軸加速度
                                                                    •Button
                                                                    •新增驅動程式至開發板 
•Tiny4412 2D硬體驅動
                                                                    •Tiny4412 3D硬體驅動
                                                                    •Tiny4412 影音解碼硬體驅動






























































•業界專業講師，訓用合一為目標

                                                  •專業實務經驗講師，業界需求導向課程規劃，著重培養科技界即戰力人才。
•實作範例演練，紮實你的開發實力
                                                  •課程專題實作，獨家採用Tiny ARM Cortex-A9 四核心七吋電容觸控開發板實作範例演練  
                                                  •業界師資群自行技術研發，多元化周邊模組搭教學，與業界實際開發不脫節  
•由淺入深連貫性教學，完整的學程規劃
                                                 Linux系統管理→C語言程式設計→嵌入式Linux系統程式設計→Embedded實作→Android BSP Porting
        

循序漸進連貫性教學，掌握每階段的學習方向。
•中華數位F.B技術討論區，提供學員疑難雜症的好幫手
                                                  •不論在學中或結訓後提供你解決學習上的疑難雜症，讓學員學習上不再單打獨鬥。
•業界師資群編譯最新的實作教材
                                                  •業界資深師資群合作編譯最完整的課程教材，規劃更貼近業界需求課程內容，不斷創新。




 





CP值最高的Embedded Linux系統移植實作


※課程獨家採用ARM Cortex-A9 四核心 7吋開發板授課，具實際開發板經驗
業界講師，小班教學，結合實作與應用 。






 












 





 







 







實作範例演練第一階段 -請點選展開
                                



•Bootloader階段驅動LCD液晶螢幕
•開機顯示圖像至LCD螢幕


•Bootloader階段驅動LED
•開機階段控制LED燈號


•Bootloader階段驅動Button
•開機階段判斷按鍵觸發更換螢幕圖像


•Bootloader階段驅動SD card
•移植新版Bootloader


•Bootloader新增指令
•製作Bootloader patch 檔 






實作範例演練第二階段 -請點選展開
									



•建置新版Toolchain
•移植新版Linux Kernel 3.5


•修改MTD
•修改Nand Flash


•移植 LCD
•移植網路晶片


•移植觸控螢幕
•移植音效晶片


•移植RTC晶片
 •製作Linux Kernel patch檔


•嵌入式Linux Kernel選單設定技巧演練
•修改Linux Kernel 新增System Call


 •最佳化Linux Kernel 大小
•新增硬體裝置驅動程式至Linux Kernel


•Linux Kernel開機圖示更改
 






實作範例演練第三階段 -請點選展開
									



•Busybox 檔案系統製作
•移植新版Busybox


•函式庫移植
 •應用程式移植


•驅動程式移植
•ZD1211B無線網卡驅動移植


•Webcam ov511 snc9c10x 視訊晶片驅動移植
•開發板LED Button驅動程式移植


•開發板 ADC 類比轉數位驅動程式移植
•Mediatek GPS 衛星導航驅動函式庫移植


•溫度感測器驅動移植及應用程式撰寫
•圖形化應用程式移植(minigui qtopia…etc)


•系統應用程式移植
(thttpd php vsftp udhcpc wireless
                                          tool…etc)
•一般應用程式移植
(mplayer webcamtest gpstest…etc) 







 













 




 




















開課時間•106年9月3日至106年10月8日　(週日全天班 AM9:30至PM5:30)•106年10月31日至106年11月21日　(二四白天班 AM9:30至PM4:30)
相關課程：嵌入式Android物聯網人才養成

相關課程：嵌入式Android物聯網系統移植培訓      
                                        ................................................................................
報名方式
•電話報名:專線02-2311-7355•線上報名
下載報名錶

•Mail:grace@cadtc.com.tw
•傳真:02-2331-3591
•現場報名：•親洽中華行動數位教育訓練中心 - 臺北中心•(臺北市開封街1段2號9樓)                                      
                                    ................................................................................
上課地點臺北市開封街一段2號9樓　> 地圖 <(臺北火車站│館前路口│麥當勞隔壁大樓)































物聯網感測器傳送系統








 
將M4板子上的LM75溫度週邊模組，透過wifi將數據即時傳送到A9開發板，並進行超溫警報的動作。









 












 


 












                          課程規劃比想像中學得更多
                        

                          結訓學員-陳○宗
                        



        醫學工程研究所畢之後心想要從事linux為基礎的linux Device Driver或android BSP 相關工作。當初學嵌入式的動機是因為想學linux device driver，但是我沒有任何linuxprogramming 的基礎，所以詢問完課程後報名一整套從無到有從基礎、循序漸進上課的課程 ...





 


 














最新Cortex-A9四核開發板
搭配開發板周邊模組教學




模組專區










24-7雲端實驗室
全天後可上線操作練習




詳細內容










學員結訓專題作品發表 課程規劃的專題製作




影片分享










學員結業後服務更貼心 提供F.B.社團技術分享




技術分享









隨時提供學員工作職缺
供求職資訊，訓用合一




相關工作









講師親自撰寫上課講義
定時更新課程講義，掌握最新技術動脈








嵌入式系統書籍
定期訂閱熱門書籍，供學員免費借閱







免費供應飲料
研磨咖啡、特調冷飲、現泡熱茶







環型教室、數位設備
師生互動式廣播教學系統










 





 










                                2010年伴隨著各種技術與應用端產品的出現，近年來嵌入式系統設計應用範圍持續擴張，根據調查指出未來全球將有更多的嵌入式裝置出現於市面，如此龐大的潛在商機，使得許多高科技業者對於嵌入式市場的重視度有增無減，嵌入式產品應用的領域範圍，包括智慧型手機、STB、VoIP產品行動上網裝置(MID)、電子書、數位電子看板、工業控制、網路安全、數位相框、資訊家電、GPS導航裝置、遊樂器等領域與產品都是未來產業發展重點。
                        






 







 






 






課程簡介
｜
課程內容
｜
Embedded實作
｜
課程優勢
｜
學習流程
｜
開發板與模組專區






2017智慧電子人才職訓
|
嵌入式Android物聯網
|
Embedded Linux系統移植
|
Device Driver實務開發


Android BSP/HAL Porting
|
ARM穿戴式物聯網系統開發
|
Android App應用程式
|
Microcontroller 系列課程







































Wiki - Week #1 (Feb 18) :: Overview: Embedded Systems and OS





















成大資工 Wiki


所有頁面
分類
隨機頁面
最近活動
上傳檔案

本頁面

頁面原始檔
可列印版本
刪除本頁




登入 / 註冊帳號
登出 









搜尋
前往


LaTeXConTeXtTexinforeSTMarkdownCommonMarkPlain textMediaWikiOrg-modeICMLTextileAsciiDocMan pageDocBookDZSlidesSlidyS5EPUBODTDOCXRTF 













viewedithistorydiscuss

Week #1 (Feb 18) :: Overview: Embedded Systems and OS

教材

嵌入式作業系統設計、實作與移植 (2014 年春季) 課程說明
Facebook 討論區: https://www.facebook.com/groups/ncku.embedded2014
共筆: https://embedded2014.hackpad.com

共筆使用案例
2014 年冬季系統軟體短期課程
2013 暑期嵌入式短期訓練課程

面試心得分享: 從就業市場，看作業系統觀念的重要性
Case study: 高速公路收費站的故事
判斷車子的狀態圖的設計要根據車道的實測結果不斷的修正，加上一些計時器以過濾掉許多乾擾信號。這些調校都是由硬體 TTL 線路上加上電容、電阻等零件去過濾，一片印刷電路板後來焊上了許多的違章建築，真是苦不堪言。若用微電腦的話，改改程式就可達到目，這工作會輕鬆很多。在當時微電腦剛冒出土，知道的人甚少。好在經過數個月的調校，準確度總算到達可以接受的程度了
高工局沿用泰山站的設計，規定迷你電腦要採用聞名的 DEC (Digital Equipment Computer) 的 PDP-11。在當時，DEC 可是全世界排名前三名的電腦公司，在迷你電腦的領域執世界牛耳。生意好得不得了，交貨期長達14個月，若等到交貨後，我們的程式才能開始測試，正式啟用就不知道又要拖到甚麼時候。汐止站的開通日不可能等，而且按照合約規定，延誤一天罰總價的千分之三。總價約台幣八百多萬的合約，若要等到這迷你電腦正式啟用，大概合約總價會被罰光光
買了一片名為 KIM-1 的 6502 微電腦板與兩片 8 Mega Byte 的記憶板(每片單價 NT15,000—同樣價錢，今天在 PCHome，4GB DRAM 的價格NT1,000 元，價格相差 7500 倍)，自己再設計一片有兩個序列埠 (UART) 與並聯輸出入 (Parallel IO) 的擴充版。… 於是，一臺克難的電腦就此完成；以不到台幣五萬元的微電腦，想要取代一、兩百萬台幣的迷你電腦的功能，是不是痴人夢話？當時也沒絕對的把握，但是過河卒子，沒有退路，只能硬著頭皮幹了。
那時的微電腦也沒有高階語言，只能採用組合語言 (Assembly) 撰寫程式–真正的“撰寫”程式–先寫在紙上，用自己的腦袋編譯 (compile) 成機器碼(Machine code )，再寫在紙上，然後用人工以十六進位的鍵盤將其機器碼打入電腦中。經常是教授念出程式的機器碼，由我負責從鍵盤輸入 ，兩人合作，以提高程式的輸入效率
徐大老闆財大氣粗，深信「有錢就能擺平一切」的道理。但做這種系統工程，是一步一腳印沒有捷徑，若從系統規畫之初，就只盤算一年要賺多少，一切以成本、賺錢掛帥，抱著「反正出了狀況，花點小錢擺平的心態」，而不能完全尊重專業團隊的意見的話，產生今天的結果也就不足為奇。當然，投下去的幾十億，就算完全砸鍋的話，相對他的財力來說，也不過是九牛一毛而已，無關痛癢。更何況合約上明訂，若政府要接收，政府得付他45億元，當然是有恃無恐。
當年政府對我們的要求是萬分之三的準確度，現在對 ETC 系統的要求卻放寬到千分之一，實在有點奇怪。三十多年前，這些交大窮教授們，紛紛把房地產拿出來當履約保證，若系統不夠完善，不但工程款拿不到，還可能導致傾家蕩產，被銀行掃地出門的窘境。大家在沒有退路之下，只有盡全力地將系統做好。

Video

Make Your Own Smart Watch
Massimo Banzi: Arduino 是如何打開想像力的

預習項目

Priority Inversion on Mars
ARM & SoC 訓練: (閱讀 Page 1 -> Page 44)
QEMU 模擬器 (閱讀 Page 7 -> Page 56)
開放原始碼軟體衝擊下的新思維





Please enable JavaScript to view the comments powered by Disqus.




本站所有內容，除另有標註外，採用創用 CC 姓名標示-相同方式分享 3.0 台灣 授權條款授權
	

說明
Powered by gitit
Customized by CrBoy
















國立交通大學機構典藏：作業系統設計與實作



















































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏
數位教材
開放式課程






















標題: 作業系統設計與實作Operating System Design and Implementation (OSDI)
作者: 曹孝櫟Open Education Office開放教育推動中心
公開日期: 2015
摘要: 課程首頁

	本課程是由交通大學資訊工程學系提供。

	 

	本課程以Linux 作業系統為基礎來講授作業系統內部的設計與實作方法。課程將透過一系列的實驗模組，來對Linux的行程管理，記憶體管理，檔案系統，輸出入系統進行深入的剖析以及修改。修課學生預計除了累積實際動手修改作業系統的經驗，亦可培養大型程式專案規劃的概念以及大量程式原始碼追蹤（trace）的能力。課程目標/概述  

	 

	本課程以Linux 作業系統為基礎來講授作業系統內部的設計與實作方法。課程將透過一系列的實驗模組，來對Linux的行程管理，記憶體管理，檔案系統，輸出入系統進行深入的剖析以及修改。修課學生預計除了累積實際動手修改作業系統的經驗，亦可培養大型程式專案規劃的概念以及大量程式原始碼追蹤（trace）的能力。

	 

	課程章節

	 

	
		
			
				
					單元主題
			
		
		
			
				Course overview
		
		
			
				Getting started with kernel and kernel debugging　
		
		
			
				Booting process
		
		
			
				Process Management-Part I
		
		
			
				ProcessManagement-Part II
		
		
			
				Memory Management-Part I
		
		
			
				Memory Management-Part II
		
		
			
				Memory Management-Part III
		
		
			
				Kernel Synchronization
		
		
			
				Interrupt and Interrupt Handling-Part I
		
		
			
				Interrupt and Interrupt Handling-Part II
		
		
			
				Filesystem and Block I/O
		
		
			
				Network Protocol and NIC Driver
		
	
	
	


	 

	參考書目

	 

	
		OSDI references
		
			
				Andrew S Tanenbaum, and Albert S Woodhull, "Operating Systems Design and Implementation (3rd Edition)"   
			
				Marshall Kirk McKusick, Keith Bostic, Michael J. Karels, and John S. Quarterman, "The Design and Implementation of the 4.4 BSD Operating System"
		
	
	
		Linux Kernel
		
			
				Robert Love, "Linux Kernel Development (3rd Edition)"   
			
				Michael Beck, Harald Bohme, Mirko Dziadzka, Ulrich Kunitz, Robert Magnus, and Dirk Verworner, "Linux Kernel Internals (2nd Edition)"   
			
				Daniel P. Bovet, and Marco Cesati, "Understanding the Linux Kernel, Third Edition"
		
	
	
		Network subsystem
		
			
				Klaus Wehrle, Frank Pahlke, Hartmut Ritter, Daniel Muller, and Marc Bechler, "Linux Networking Architecture"
			
				Christian Benvenuti, "Understanding Linux Network Internals"
		
	
	
		Device Drivers
		
			
				Sreekrishnan Venkateswaran, "Essential Linux Device Drivers"
			
				Jonathan Corbet, Alessandro Rubini, and Greg Kroah-Hartman, "Linux Device Drivers, 3rd Edition"
		
	


	 

	評分標準  

	 

	
		每週上課時數為三小時，並搭配三小時的實驗課，故每週共六小時。實驗項目數量分配為：基礎知識與核心架構（3）、行程與記憶體（3）、檔案系統（3）、網路通訊（3）。實驗課有助教協助，做完實驗即可得分。除實驗之外，有一次期中考與一次期末口頭報告。
	
		成績計算方式為：
		
			
				核心架構實驗（20%）
			
				行程與記憶體實驗（20%）
			
				檔案系統實驗（20%）
			
				網路通訊實驗（20%）
			
				期中考（8%）
			
				期末報告（12%）
		
	


	
		
			 
		
			 授課對象：碩士生預備知識：計算機組織概論、作業系統概論
URI: http://ocw.nctu.edu.tw/course_detail.php?bgid=9&nid=546http://hdl.handle.net/11536/132464
顯示於類別：開放式課程



















文件中的檔案：存到雲端




L2 Getting started with kernel and kernel debugging.mp4





L3 Booting process.mp4





L4 Process Management – Part I.mp4





L5 Process Management – Part II.mp4





L6 Memory Management – Part I.mp4





L7 Memory Management – Part II.mp4





L8 Memory Management – Part III.mp4





L9 Kernel Synchronization.mp4





L10 Interrupt and Interrupt Handling - Part I.mp4





L10 Interrupt and Interrupt Handling - Part II.mp4





L11 Filesystem and Block I/O.mp4





L12 Network Protocol and NIC Driver.mp4





L2 Getting started with kernel and kernel debugging.pdf





L3 Booting process.pdf





L4 Process Management – Part I.pdf





L5 Process Management – Part II.pdf





L6 Memory Management – Part I.pdf





L7 Memory Management – Part II.pdf





L8 Memory Management – Part III.pdf





L9 Kernel Synchronization.pdf





L10 Interrupt and Interrupt Handling - Part I.pdf





L10 Interrupt and Interrupt Handling - Part II.pdf





L11 Filesystem and Block I/O.pdf





L12 Network Protocol and NIC Driver.pdf









IR@NCTUTAIRCrossRefHIPEC - HIGH PERFORMANCE EXTERNAL VIRTUAL MEMORY CACHING / LEE, CH;CHEN, MC;CHANG, RCA Practical Implementation Course of Operating Systems: Curriculum Design and Teaching Experiences / Tsao, Shiao-Li基於64位元作業系統之高可用度與自我管理的Web Services平臺之研究(I) / 張瑞川;CHANG RUEI-CHUAN動態置換驅動程式以增進作業系統之可用性 / 江英傑;Ying-Jay Chiang;張瑞川;林正中;Prof. Ruei-Chuan Chang在嵌入式爪哇虛擬機器中設計並實做動態電壓頻率調整技術 / 陳裕生;Yusheng Chen;單智君記錄式快閃記憶體儲存系統之設計與實做 / 李紀勳;Chi-Hsun Li;張瑞川;Ruei-Chuan ChangAn efficient B-tree layer implementation for flash-memory storage systems / Wu, Chin-Hsien;Kuo, Tei-Wei;Chang, Li Ping亞洲大學 - 網?監控系統設計與實作 / 賴傑奇 國立臺灣師範大學 - 可移植網路教學型作業系統的設計與實作 / 郭?彬; Chiung-Pin Kuo 國立成功大學 - 可熱抽換之作業系統核心之設計與實作 / 羅明遠; Lo, Ming-Yuan 國立成功大學 - 作業系統動態面向管理機制之設計與實作 / 周建甫; Chou, Chien-Fu 國立成功大學 - 微核心作業系統動態電源管理之設計與實作 / 柯昱仰; Ke, Yu-Yung 國立成功大學 - 作業系統動態面向管理機制之設計與實作 / 周建甫; Chou, Chien-Fu 國立清華大學 - 安全的網路嵌入式作業系統核心設計與實作 / 高迦南; Canaan Kao 國立成功大學 - Web作業系統環境音訊傳輸機制之設計與實作 / 蔡侑縉; Tsai, Yu-Chin Loading...












國立交通大學機構典藏：數位教材































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏






數位教材
: [3510]




























類別


考古題

開放式課程




探索


作者
8 
林念慈6 
劉美君6 
林琦焜6 
簡紋濱6 
莊重6 
蔣淑貞5 
徐雍鎣5 
李大偉5 
白啟光5 
陳永平.
下一步 >

關鍵字
308 
Department of Civil Engineering308 
土木工程系所186 
工程數學169 
Institute of Communication Studies169 
Institute of Management of Techno...169 
傳播研究所169 
科技管理研究所150 
計算機概論146 
Institute of Traffic and Transpor...146 
交通運輸研究所.
下一步 >

公開日期
2704 
2000 - 2016806 
1911 - 1999









國立交通大學機構典藏：開放式課程































Please click here if you are not redirected within a few seconds.
Skip navigation
















目前位置：國立交通大學機構典藏
數位教材






開放式課程
: [328]


























類別內的文件 (依公開日期由降冪排序排序)： 從 1 到 20 筆，總共 328 筆


 下一頁 >




公開日期標題作者2016105學年 (上) 經典通識教育講座通識教育委員會暨通識教育中心; Open Education Office; 開放教育推動中心
2016物理(一)-105學年度簡紋濱; Open Education Office; 開放教育推動中心
2015動態系統模擬與實現陳永平; Open Education Office; 開放教育推動中心
2015整合交通控制與先進技術於實務之應用張金琳; Open Education Office; 開放教育推動中心
2015學習的藝術：人生的一本書，學習的經驗。楊振寰; Open Education Office; 開放教育推動中心
2015亞際文化研究學會暑期班Open Education Office; 開放教育推動中心
2015演算法江蕙如; Open Education Office; 開放教育推動中心
2015整合性交通走廊控制與運作張金琳; Open Education Office; 開放教育推動中心
2015管理理論與實務討論- 103學年度蕭嬋; Open Education Office; 開放教育推動中心
2015電玩藝術文化分析梁世佑; Open Education Office; 開放教育推動中心
2015管理理論與實務討論-104學年度蕭嬋; Open Education Office; 開放教育推動中心
2015領袖學程的16堂課林志潔; 張兆恬; 金孟華; Open Education Office; 開放教育推動中心
2015104學年 (下) 經典通識教育講座通識教育委員會暨通識教育中心; Open Education Office; 開放教育推動中心
2015心理學概論羅仕宇; Open Education Office; 開放教育推動中心
2015104學年 (上) 經典通識教育講座通識教育委員會暨通識教育中心; Open Education Office; 開放教育推動中心
2015有機化學(二)蒙國光; Open Education Office; 開放教育推動中心
2015可變結構控制系統陳永平; Open Education Office; 開放教育推動中心
2015食品安全與法律倪貴榮; 陳鋕雄; Open Education Office; 開放教育推動中心
2015普通生物學(二)柯立偉; 陳文亮; Open Education Office; 開放教育推動中心
2015大腦與認知科學黃植懋; Open Education Office; 開放教育推動中心


類別內的文件 (依公開日期由降冪排序排序)： 從 1 到 20 筆，總共 328 筆


 下一頁 >




探索


作者
8 
林念慈6 
劉美君6 
林琦焜6 
簡紋濱6 
莊重6 
蔣淑貞5 
徐雍鎣5 
李大偉5 
白啟光5 
陳永平.
下一步 >

公開日期
327 
2000 - 20161 
1911 - 1999














給自己更好未來的 3 個練習：嵌入式作業系統設計、實做，與移植 (2015 年春季 ) 課程說明





































































































      Slideshare uses cookies to improve functionality and performance, and to provide you with relevant advertising. If you continue browsing the site, you agree to the use of cookies on this website. See our User Agreement and Privacy Policy.
    

      Slideshare uses cookies to improve functionality and performance, and to provide you with relevant advertising. If you continue browsing the site, you agree to the use of cookies on this website. See our Privacy Policy and User Agreement for details.
    






SlideShare



Explore



Search



You








Home


Technology


Education


More Topics




For Uploaders





                    Get Started




                    Tips & Tricks




                    Tools














































    給自己更好未來的 3 個練習：嵌入式作業系統設計、實做，與移植 (2015 年春季 ) 課程說明
  

































































































































































































































Upcoming SlideShare










Loading in …5
×




 










1

















1 of 51






























Like this presentation? Why not share!

Share
Email


 



 








Making Linux do Hard Real-time
by Jim Huang
8767 views







2016 年春季嵌入式作業系統課程說明
by Jim Huang
5121 views







How A Compiler Works: GNU Toolchain
by Jim Huang
25833 views







進階嵌入式作業系統設計與實做 (2015 年秋季 ) 課程說明
by Jim Huang
4754 views







中輟生談教育: 完全用開放原始碼軟體進行 嵌入式系統教學
by Jim Huang
23268 views







進階嵌入式系統開發與實做 (2014 年秋季 ) 課程說明
by Jim Huang
6575 views





 






Share SlideShare







Facebook




Twitter




LinkedIn




Google+





Email










Email sent successfully!



Embed



Size (px)



Start on




Show related SlideShares at end




WordPress Shortcode



Link



























                  給自己更好未來的 3 個練習：嵌入式作業系統設計、實做，與移植 (2015 年春季 ) 課程說明
                




                  9,133 views





Share


Like



                  Download
                











Jim Huang, Adjunct Faculty at National Cheng Kung University, Taiwan




 Follow
                        





















              Published on Feb 12, 2015






                    「哥教的不是知識,是 guts !」 GUTS: 與其死板傳授片面的知識,還不如讓學生有能力、有勇氣面對資訊科技產業的種種挑戰
                  



                    ...





Published in:
Technology


              License: CC Attribution-ShareAlike License







                    0 Comments
                





                  61 Likes
                





                Statistics
              




                Notes
              














Full Name






                          Comment goes here.
                        
12 hours ago  

                        

Delete
Reply
Spam
Block




Are you sure you want to
Yes
No



                          Your message goes here
                        





















Post









Be the first to comment















竣宇 楊


                                , 
                                研發工程師（鴻海精密工業股份有限公司）


                                 at 
                                鴻海精密工業股份有限公司




                              6 months ago
                            













Vincent Huang





                                 at 
                                京元電子




                              10 months ago
                            













政宏 蔡










                              11 months ago
                            













chyimoh










                              11 months ago
                            













Yang Majaja


                                , 
                                --







                              1 year ago
                            







                    Show More
                    




No Downloads




Views

Total views

                      9,133
                    
On SlideShare

                      0
                    
From Embeds

                      0
                    
Number of Embeds

                      38
                    



Actions

Shares
0
Downloads

                      198
                    
Comments

                      0
                    
Likes

                      61
                    




                    Embeds
                    0


No embeds






















No notes for slide






                  給自己更好未來的 3 個練習：嵌入式作業系統設計、實做，與移植 (2015 年春季 ) 課程說明
              


      1.
    給自己更好未來的 3 個練習
嵌入式作業系統設計、實做，與移植
(2015 年春季 ) 課程說明
Jim Huang ( 黃敬群 ) <jserv.tw@gmail.com>
台灣國立成功大學資訊工程系
Feb 24, 2015
 
  


        2.
      
    關於授課教師 (@jserv)
●
成功大學資訊工程系 / 兼任教師
●
交通大學資訊工程系 / 兼任教師
●
從事消費性電子產品開發達十餘
年，近年投入工業控制領域
– 台達電子 / 顧問
– 工研院資通所 / 顧問
– 聯發科技 / 顧問
– 南星創業加速器 / 技術長
– 晶心科技 / 幕僚工程師
●
多項世界級開放原始碼專案開發者
– 新酷音輸入法
– Android Open Source Project
– GCC / GNU Classpath
– LXDE
– Kaffe
– pcman(x)
– Linaro, 0xlab
 
  


        3.
      
    「哥教的不是知識，是 guts ！」
 GUTS: 與其死板傳授片面的知識，還不如讓學生有
能力、有勇氣面對資訊科技產業的種種挑戰
 我從產業回學校任教，希望學生畢業那刻，身心知
識方面是富足的，不要「窮得只剩下畢業證書」
– 二十年前能想像，成大電機系的畢業生會找不到好工作嗎？！若是如此，
畢業證書還不如黨證
 目標：兼顧理論和實務、開拓視野，從做中學習、
從做中肯定自己
 
  


        4.
      
     GUTS = General Unix Talk Show
 向 Unix 作業系統學習，要求學生從無到有打造類似
Unix 的作業系統核心，同時銜接最新產業發展，全
程採用活躍的開放原始碼技術，不用擔心學習的是
「屠龍術」
 課程也會一併引導學生在畢業後得以找到學以致用
的工作職務
授課內容就是 GUTS
 
  


        5.
      
    發展嵌入式裝置或作業系統有意義嗎？
 課程要求同學「開發一套嵌入式裝置或作業系統」的
動機其實是「理解開發作業系統的需求，並且實際
去解決問題」
 實務上，開發和設計系統是常態
– 每天都在接觸的手機作業系統
– 消費性電子產品裡頭也多內建作業系統
– 汽車、飛機、工廠設備等等都有特製的作業系統
– 甚至可能連核心也從頭打造
 
  


        6.
      
    嵌入式系統系列課程目標
 教學計劃：
– 體驗產品設計背後的工程考量
– 做中學
 最終打造出可用的電子產品雛型或基礎建設
– 裡頭就內建客製化的作業系統！
– open source!
● 好東西不怕人家看 ( 若有抄襲，也一併公諸於世 )
●
展示自己的技能給未來的同事、老闆，甚至是投資人看
 
  


        7.
      
    課程產出
 學生專業能力和視野的提昇
– 在2014 年，參與課程其中9 位學生獲得聯發科錄取為工程師
– 大學還沒畢業就拿到聘書，還有人生平第一次面試當天被聯發科錄取
 共筆大量ARM 優質技術文件，獲得高度能見度
 累積超過45 個完整專案並釋出原始碼
 學生在COSCUP(台灣最大的開放原始碼研討會，上千人)和SITCON(學生計算機年會)發表專題演
說和成果
 學生在Linux Foundation 舉辦的全球嵌入式Linux 技術論壇，發表專題演說和成果
– 台灣人出席此類研討會極少，若說第一位從缺，那老師我是第二位，學生則是第三位
 
  


        8.
      
    從作業系統核心、圖形系統、訊號處理系統都是由
成大資訊系學生 100% 自行開發的電吉他調音器
http://wiki.csie.ncku.edu.tw/embedded/os-team2014-2
 
  


        9.
      
    從無到有打造
四軸飛行器
http://wiki.csie.ncku.edu.tw/embedded/team2014-10
 
  


        10.
      
    http://wiki.csie.ncku.edu.tw/embedded/team2014-3
Demo video:
https://www.youtube.com/watch?v=hmJVLKOy7DA
 
  


        11.
      
    數學和物理很重要，
一起深入學習
http://wiki.csie.ncku.edu.tw/embedded/team2014-10
 
  


        12.
      
    自製電吉他效果器並
體驗 ARM 效能改善
http://wiki.csie.ncku.edu.tw/embedded/team2014-2
 
  


        13.
      
    親手打造
自動彈奏吉他機器
http://wiki.csie.ncku.edu.tw/embedded/team2013-8
Demo video:
http://www.youtube.com/watch?v=tk7hJ3-j62Q
 
  


        14.
      
    開發自動寫書法機器人
http://wiki.csie.ncku.edu.tw/embedded/team2013-11
機器人書寫的成果
Demo video:
https://www.facebook.com/photo.php?v=613934675322288
 
  


        15.
      
    親手打造空氣
烏克麗麗http://wiki.csie.ncku.edu.tw/embedded/os-team2014-7
 
  


        16.
      
    開發
自動排列骨牌
的機器
http://wiki.csie.ncku.edu.tw/embedded/team2014-6
Demo video:
https://www.youtube.com/watch?v=SWEcdNvyvD0
 
  


        17.
      
    人在做， Google 在看！人在做， Google 在看！
學生成果在 Google 搜尋名列前茅
 
  


        18.
      
    你以為這樣就結束了嗎？還有 ...
 教學用作業系統核心 : rtenv+
– 從 2013 年 100% 由學生自行開發的 ARM 作業系統核心
– 自己的教材自己寫！自己的核心自己開發！
 研究性質作業系統核心 : F9 microkernel
– 獲得美國新創公司採用，並發表於 CTHPC 2015
 即時虛擬化解決方案 : RTMux
– 在 Linux Foundation 發表 (ELCE 2014)
 uClinux 的 ARM Cortex-M4F 效能改善
– 在 Linux Foundation 發表 (ELC 2015)
 
  


        19.
      
    看了同學們的作品後，你還想問「開發作業系統有
什麼意義」這問題嗎？
 四軸飛行器得同時處理馬達轉速轉向、平衡感測、用演算
法修正飛行姿態、遙控訊號、影像運算，還有保存影像資
料等繁複的操作
– multi-tasking, synchronization, I/O, file system
 彈奏吉他的機器人對時間要求非常苛刻，否則不只是「慢
半拍」，還會無法正確地進行和弦刷法
– realtime, latency
 自動寫書法的機器人需要高效能的資料處理，否則無法自
外界擷取大量的書法資料
– throughput, networking
 
  


        20.
      
    開發產品，屢屢面對作業系統的議題
 本學期課程目標就是指出嵌入式系統中，若干關鍵的作業
系統設計議題，並且帶著同學著手處理
 不要說「怎麼可能？」，上學期修課的同學不就證明雙手
萬能的道理了嗎？現在我們則深入箇中的設計議題，並以
軟體思維去解構系統
– 讓你重新理解作業系統的基本觀念
– 同時也強調計算機組織與結構的概念
– 甚至還會複習數學觀念和工程方法
 
  


        21.
      
    捫心自問
 若 Google Inc. 和 Apple Inc. 的工程師
跟你一樣懵懵懂懂，得過且過地面對
工程挑戰，他們做出來的手機，你敢
每天放在身邊使用嗎？
 
  


        22.
      
    我心動了，但沒基礎怎麼辦？
 只要你願意花時間，就算沒修過作業系統或計算機組
織與結構一類的科目也沒關係，課堂中會有重點提示
 只要資訊系、電機系、工程科學系、機械系、航太系
或相關科系的大二以上 ( 含 ) ，學過 C 語言即可
– 去年還有物理系和經濟系的學生修課，依舊表現不俗，
所以千萬別擔心
– 不懂就 ( 重新 ) 學，不要裝懂，千萬別說謊
 
  


        23.
      
    這門課除了學作業系統和嵌入式系統外，
可能還有其他收穫 ...
 講師和邀請講者來自資訊產業
 我曾經是個對高等教育徹底失望的人，連大學都沒唸完
，但工作十年後 , 重返學校教書、再學習。如今想在台
灣南部建立新的事業，讓工程師能夠兼顧生活與工作的
品質，直接在學校培養工程人員
– 著墨於基礎建設 , 將資訊技術作多方應用
– 本課程不存在「與業界脫軌」的問題，這就是部份產
業的縮影
 
  


        24.
      
    你甚至可能因為寫作業而登上媒體！
 重點不是開發什麼產品，而是如何開發，而且保持
熱情堅持下去
 
  


        25.
      
    好東西不怕人看，勇敢接受外界挑戰
 若你身邊的親友都開始關註你的學習成果時，難道
不會想要持續精進下去嗎？
 工程就是要解決真正的問題，用作品打動人心！
 
  


        26.
      
    詹博丞是成功大學資訊工程所學生，他曾就讀於音樂資優班，但國中三年級時發生車禍，導致罹患點狀軟骨錯生症，因此不良於行，而且產生聽力、視
力障礙。但他仍 不放棄學習程式設計，並毅然地在兩年前參與新酷音輸入法的開發，並主導數位點字樂譜的設計，希望可以幫助視障朋友閱讀樂譜。
由於視力有障礙，加上盲人點字 閱讀機的限制，他撰寫程式時，是將所有程式碼背在腦海中進行開發、除錯，也由於聽力障礙，和他說話必須靠在耳
邊。在演講中他提到，開發的過程中遇到最大的 困難是交接程式碼，因為交接時必須閱讀（以點字方式）其他人的程式碼，最重要是放下成見，用別
人的角度去思考。
http://www.appledaily.com.tw/realtimenews/article/new/20140722/4378
65/1/
 
  


        27.
      
    雖然我不會教書，但我可以陪同學連續奮戰 20 小時以上雖然我不會教書，但我可以陪同學連續奮戰 20 小時以上
 
  


        28.
      
    一起看日出也行，我可是正宗的竹科工程師啊 ( 茶 )一起看日出也行，我可是正宗的竹科工程師啊 ( 茶 )
 
  


        29.
      
    累得只剩下程式碼！撐住，老師陪你們累得只剩下程式碼！撐住，老師陪你們
 
  


        30.
      
    Learn to Fail, or Fail to Learn
 作一個 CPU 、編譯器、作業系統並沒什麼了不起 ( 當
然，具體而微那種 ) ，但學生若能親眼看到自己親身實作
出這樣貌似遙不可及的項目，難道不會對投身於資訊
科技，更有信心嗎？有如此基礎，才能進一步改善科
技水平
 本學期，我們一同打造真正能用的作業系統，並且解
決實際的問題
– 作不到的話，恐怕連皮毛都學不到
 
  


        31.
      
    我的承諾
 只要你在這門課有充分付出 , 絕對不會讓你失望
– 學期分數、工作機會
– 我是為了尋覓工作夥伴而來 , 不是來打分數的
 只要你願意學 , 我就花時間教
 儘管課程作業有一定難度 , 但你只要開口 , 我陪你一起作、一同討論
 我的講師費全數捐出給同學買硬體、買參考書目
 若你在這門課表現不錯 , 拿著作品一定可找到中上的資訊科技相關工
程職務
– 每學期都有學生錄取聯發科技 / 晨星半導體公司的工程職務
 
  


        32.
      
    適用對象與假設
 對於資訊領域有熱情、並有堅持到底的學習精神
 樂於助人 , 願意分享所學知識
– 在打群架的年代 , 隔壁的同學就是夥伴 !
 願意花時間寫作業
 自主學習課程所需的前備知識以及課程參考資料
 願意花時間教會身邊的同學
 
  


        33.
      
    不建議選修的學生族群
 覺得自己無論怎麼努力，仍比隨便一位臺大資工系
畢業生還差的人
 覺得光靠著拿著成功大學的畢業證書，就能在資訊
科技產業有尊嚴地享有優渥生活者
 覺得每週看著游泳教練或鋼琴教師，但自己不動手
，卻又妄想能學到什麼技能的人
 
  


        34.
      
    課程規劃
 三大主軸
– ARM 組織和結構
– 作業系統界面和設計
– 系統效能、可靠度和安全議題
 搭配使用 GNU/Linux 豐富的開發工具
 引導同學拋開第二手資料，而是直接自源頭擷取知識
並重整
 
  


        35.
      
    從系統程式的「演化」來切入
 從不足 40 行 C 語言程式的 self-contained ARM 系
統開始，先演化為 300 行的多工作業系統核心，之
後再逐步擴展諸如 Process/Thread 執行單元、定址
空間、記憶體管理、檔案系統、即時多工、驅動程
式等設計，並帶著學生逐步實踐以上機制
 用「開發電動玩具」來驗證系統程式的功能和穩固
程度
 
  


        36.
      
    具體而微地說明最新技術
 預計涵蓋 ARM Cortex-A/R 的架構與指令集 (ARMv7
/ ARMv8) ，不會一次提供大量參資料，而是先給予小
到能用單一頁面展現的系統實例，要求學生參閱相
關資料並補充強化
 不只 multi-tasking kernel ，也探討 virtual machine
monitor / hypervisor 的設計概念
 
  


        37.
      
    學以致用㊣
 課堂模擬產業生態和規格
 銜接產業界的發展水平
 採用業界標準的開發工具與流程
 100% 應用活躍的開放原始碼軟體
 提供資訊科技工作諮詢和模擬面試
 
  


        38.
      
    時間地點
 Feb 24, 2015 – Jun 30, 2015
 每週二
– 15:10-18:00 ( 課程 )
– 19:30- ( 實習 / 解惑 )
– 你願意的話，我從下午三點陪你到凌晨三點
 每週四 19:30 補課 ( 舊系館一樓 203 教室 )
 成功大學資訊工程系新系館 65203 教室
 
  


        39.
      
    評分方式
 考試 : 20% ( 期初「資格考」 + 模擬面試 )
 作業和報告 : 40% ( 針對資訊產業需技能，所濃縮的訓練 )
 學生自我評量 : 40%
 加分 : 參與和作業系統相關的 open source 專案開
發 ( 需獲得講師認可 ) ，加學期總分 10 到 40 分
 
  


        40.
      
    註意須知
 不點名
 課程進行大量用到網路和客製化開發環境，建議攜帶筆記型電腦
 考試採筆試和一對一口試，可重複應考 ( 考到滿意為止 )
 歡迎旁聽，但請一同參與實習與進行作業繳交
 每週都有實習課 / 作業
– 在隔週六 ( 含 ) 之前需完成作業
– 如果連續二份作業寫不完的話，就不用來了 ( 視同作業項目零分 )
 期末有專題和口頭報告 (Final project)
– 修課同學可獲得開發板與相關硬體之補助
 
  


        41.
      
    課程資料
 不需要購買教科書 , 所有課程資料都放在網路上
– 作業或考試表現優異的同學 , 可獲贈參考書籍
 wiki: http://wiki.csie.ncku.edu.tw/
– 請先參閱「進階嵌入式系統開發與實作 (2014 Fall) 」和
「嵌入式作業系統設計與實作 (Spring 2014) 」
●
討論區 : https://www.facebook.com/groups/ncku.embedded2015/
 
  


        42.
      
    「黃金 30 天」假說
 每學期開始的前 30 天，學生的課業壓力相對小，這
時應強化基本訓練
– 軟體開發流程和素養
– 熟悉開發工具
– 每週都有 coding 作業
– 「柿子不能只挑軟的吃」
– 之後會讓同學準備期中報告和期末專題
 
  


        43.
      
    要求學生使用 open source 開發工具，連同作業
都提交到 GitHub 上，接受教師和同學的 code
review
課程作業協作平臺 :
https://github.com/embedded2015/
 
  


        44.
      
    每學期都有善心人士和廠商捐贈硬體和設備，希望學生珍惜這些愛心，創造更多成果出來每學期都有善心人士和廠商捐贈硬體和設備，希望學生珍惜這些愛心，創造更多成果出來
 
  


        45.
      
    我希望這個課程讓學生的人生有更多更好的選擇，來日有能力時，再提拔後進我希望這個課程讓學生的人生有更多更好的選擇，來日有能力時，再提拔後進
 
  


        46.
      
    本學期參考專題提案
 將 RTOS 應用於無人飛行器 ( 四軸、定翼機、機械鳥 )
 基於 ARM 架構的快速開機 (snapshot boot)
 研究 ARMv7/ARMv8 架構並修改指定的 hypervisor
實做
 延展前幾個學期的 RTOS ，改善整體效能和功能
 改善 Android Open Source Project 底層效能
 
  


        47.
      
    Make Your Own Smart Watch
http://hackaday.com/2014/02/17/make-your-own-smart-watch/
 
  


        48.
      
    How is a $12 phone
possible?
http://boingboing.net/2013/04/18/how-is-a-12-phone-possible.html
 The electronics consists of just two major IC
– Mediatek ( 聯發科技 ) MT6250DA
●
single-chip GSM/GPRS/EDGE-RX entry-
multimedia
– Vanchip ( 唯捷創芯 ) VC5276
●
transmit module for dual-band
 
  


        49.
      
    期末成果發表會
 2015 年 6 月下旬，將公開舉辦發表會，讓同學們
的成果有對外交流的機會
 邀請來自 Intel 、 Marvell 、聯發科技、晨星半導體
、工研院、台達電子、鴻海科技，和若干新創公司
等單位的代表給予評比
– 現在就有機會遇見未來的雇主和同事
 一同創造回憶
 
  


        50.
      
    「船停在港灣裡是最安全的，
但是那不是船存在的目的」
– Grace Hopper
電機資訊科系的學生，如果不能解決實際工程問題、為人群
尋求福祉，而只在教室「停泊」，是不是該反省呢？
來吧，一起在踏著 open source 的基礎而出航！
 
  


        51.
      
    「資訊人的本色，就是作什麼就
要像什麼」
– 洪良茂，成大資訊系第一屆畢業生
 
  








        Recommended
      












        Up and Running with Apple Watch
      















        Meeting the Challenge of Digital Transformation
      















        Cloud Computing First Look
      














        Making Linux do Hard Real-time
      
Jim Huang










        2016 年春季嵌入式作業系統課程說明
      
Jim Huang










        How A Compiler Works: GNU Toolchain
      
Jim Huang










        進階嵌入式作業系統設計與實做 (2015 年秋季 ) 課程說明
      
Jim Huang










        中輟生談教育: 完全用開放原始碼軟體進行 嵌入式系統教學
      
Jim Huang










        進階嵌入式系統開發與實做 (2014 年秋季 ) 課程說明
      
Jim Huang










        Interpreter, Compiler, JIT from scratch
      
Jim Huang
















×





Share Clipboard

×


Email









Email sent successfully..





Facebook


Twitter


LinkedIn



Google+






Link







Public clipboards featuring this slide

×




    No public clipboards found for this slide
  






×



Save the most important slides with Clipping




Clipping is a handy way to collect and organize the most important slides from a presentation. You can keep your great finds in clipboards organized around topics.
Start clipping
No thanks. Continue to download.








Select another clipboard

×






Looks like you’ve clipped this slide to  already.












Create a clipboard






You just clipped your first slide!

        Clipping is a handy way to collect important slides you want to go back to later. Now customize the name of a clipboard to store your clips.
      






Name*
          






Description
          





Visibility
        
Others can see my Clipboard







Cancel
Save




















嵌入式Linux系統開發工程師培訓實戰班[物聯網產品開發實作班(適用Qt/Android)]















 
 
 
 
 
 

















　　嵌入式Linux系統可以整合網路、無線傳輸、USB、音效裝置及ㄧ般微處理機周邊裝置等，同時具有Linux作業系統的優點及特性，所以適用於未來科技產品講求【高智慧性】、【多功能網路連結】、【無線網路傳輸】的訴求，因此嵌入式系統已變成未來生活的一個商品研發的技術基礎平臺。目前嵌入式系統熱門的生活應用產品有：智慧型手機、PDA、MP3、數位機上盒(Set-Top Box)、DVR、遊戲機、Home Gateway、VoIP等。且目前嵌入式系統亦大量應用於工業控制、家用電器產品、醫療應用、遠距視訊應用…等，這些應用已經大大地影響我們的生活方式。為了因應這一波產業IT技術應用的轉變，需要大量嵌入式系統研發及測試技術的人才。
　　另一股平臺Android系統，是一個在Linux為基礎的Mobile為主的開放原始碼作業系統，此平臺主要用於移動設備，所以規劃之課程將讓您學會如何「移植」Android平臺系統及在此平臺系統上撰寫Java語法的Android程式。
　　自強基金會規劃一系列嵌入式完整課程，完全以業界所需實務為導向，導入嵌入式物聯網產品實作，將所需之應用技術與系統移植於課堂上直接講授並且實作，將軟硬體直接整合。課程進行之範例將直接在各種ARM開發板(Cortex A8、ARM11、ARM9)上實戰，深入淺出的將此領域之技術傳授給學員，建立紮實功力，提升您在此領域的競爭力。

【課程安排】
103/3/8~7/26（每週六9:00至18:00）及8/2~8/23（每週六9:00至17:00）
共180小時（4/5、5/31停課）



嵌入式Linux系統開發工程師培訓實戰班
    【物聯網產品開發實作班(適用Qt/Android)】 
  【★贈送教學開發板ARM-CortexA8含7吋電容式多點觸控面板 (值9,500)】









課程代碼
  03C001
課程大綱(詳細內容請點選課程)
時數


【硬體設計】
ARM 嵌入式硬體設計技術應用實戰-物聯網產品模組實作
12


【基礎入門】
Linux作業系統使用/GNU Make及Makefile 檔案介紹
18


【實戰模組A】
設計實作ARM嵌入式開發板－以 A8、ARM11、9為例
24


【實戰模組B】
ARM 系統【無OS】BootLoader設計實務-以 A8為實例
12


【實戰模組C】
嵌入式 Linux系統實作與程式設計實務
30


【實戰模組D】
Step by Step講授嵌入式開發板Linux驅動程式實務
36


【實戰模組E】
嵌入式系統專案實戰：網路通訊I/O、多媒體系列、Qt移植
24


【實戰模組F】
嵌入式物聯網產品實作(含Qt程式設計)
24




若遇不可預測之突發因素，基金會保有相關課程調整、取消、教室及講師之變動權。




【主辦單位】
財團法人自強工業科學基金會


【上課地點】
自強基金會臺北分部 (臺北市金華街110號3樓)


【課程費用】
原價66,000元


 
★會員於103/3/01前報名及完成繳費，享有會員優惠價62,700元
[課程費用含講義自編教材、板材、餐點] 


【課程報名】
(02) 33223139 分機2287 林小姐 hclin@tcfst.org.tw


【課程洽詢】
(02) 33223139 分機2288 陳小姐 ywchen@tcfst.org.tw


【會員優惠】
會員於開課七日前(含)報名並於收到本會繳款通知後完成繳費，可享有會員優惠價


 
※本課程不適用於VIP廠商 


【報名方式】
上課前三天完成報名及繳費手續





網路報名：http://edu.tcfst.org.tw
	親自報名：填妥報名錶攜帶費用至『臺北市金華街110號3F』，週一至週五8：30∼18：00止 
	傳真報名02-33223141：填妥報名錶，傳真至本基金會並於報名截止日前繳清費用。
	



【繳費方式】
聯絡人 (02)33223139 Ext.2287 林小姐: E-mail: hclin@tcfst.org.tw





可使用現金、信用卡、支票、匯票等方式付款，請於收到本會繳款通知後，進行繳款作業並於課前繳清費用(信用卡繳費者於確認開課後才會過卡)。
	支（匯）票抬頭請寫「財團法人自強工業科學基金會」（請勿更改或縮寫，並檢附報名錶影本）。
	郵寄地址：臺北市金華街110號3F 財團法人自強工業科學基金會林小姐收。
	選課前請詳閱簡章之課程內容
	本課程適用VIP廠商優惠，使用VIP廠商優惠之學員，上課當日報到時需查核該公司識別證 (相關證明資料)
	



【證書發放】
 





課程時數16小時以上，出席率達80%(依簽到表記錄為準)，且成績合格者，方可取得結業證書。
	為響應政府節能減碳政策,故自即日起本會之結業證書採【電子化】發放，如需紙本證書者，請上網申請，謝謝~若為本會會員，可於基金會網頁學習記錄專區，查詢個人學習記錄及證書存檔列印。
	



TOP↑
【課程目標＆特色】

課程目標


熟悉Linux作業系統管理操作及程式技巧。
	熟悉嵌入式Linux C/C++語言程式設計。
	熟悉各種系列ARM計算機結構(ARM9、ARM11、A8)及ARM組合語言撰寫及使用。
	熟悉多種ARM嵌入式實驗板與ARM 處理器之軟硬體架構。
	熟悉ARM- Linux之Boot Loader及FLASH的Read/Write/Erase與開發板內之各類嵌入式硬體介面如何控制。
	熟悉如何將嵌入式ARM-Linux之OS Porting至ARM開發版及提升自製ARM嵌入式開發板之能力。
	熟悉嵌入式ARM-Linux之應用程式開發技術，以瞭解Android平臺系統底層驅動部分Linux技術。
	熟悉嵌入式ARM-Linux之系統的驅動程式開發技術，以瞭解Android平臺系統底層驅動部分Linux技術。
	增加多項進階LAB實戰(包含Qt)及增加ARM SoC CPU為主軸之產品製作實戰：硬體電路圖設計與PCB Layout佈線，零件選型與PCB板製作(PCB板廠洗板)與實際焊接技術，軟硬體調試技術。以符合業界需求。
	上完本課程可以銜接【Android移植與系統及應用開發實戰培訓班】。
	



選擇我們就對了

課程以實作為主、理論為輔之導向，分為基礎課程、基礎核心課程、進階核心課程、實作LAB課程等四部份。

課程依據業界（包含高階工控、消費性電子、家用電器、醫療裝置、多媒體電子產品等）使用ARM CortexA8、ARM11、ARM9等教學開發板授課，分別在ARM-Linux與Android兩種不同的平臺系統實作。師資為業界具實際產品開發板經驗，上課採小班教學，課程結合實務，整個課程均環繞在多種ARM開發板（ARM Cortex A8、ARM11、ARM9）上講解，且在這些ARM開發板上會以ARM-Linux與Android不同的平臺系統實作執行相關程式範例，課程規劃紮實、完整。
	從基礎的程式設計開發，再延展至各種不同的嵌入式Linux實作平臺與Android平臺系統練習，真正達到可符合不同業界產品，訓用合一的訓練目標。
	講師具有豐富的教學與實務經驗，讓學員真正學到嵌入式基本功夫
	
經過六個月精心安排且有系統的課程安排，可以讓學員由淺入深的對嵌入式系統與Android平臺完成全面學習，結訓後讓學員具有能夠獨立完成嵌入式Linux與Android平臺系統移植、驅動程式開發、應用系統軟體開發等多項技能。



課程特色

課程使用ARM Cortex A8(或ARM11-S3C6410)、ARM9-S3C2440教學開發板授課，業界具實際開發板經驗師資，小班教學，結合實務，以作業系統雙OS(ARM-Linux與Android)實作ARM開發板，紮實完整系統規劃
業界實務篇：提升動手做的實務實戰能力
  課程指定的實際專案案例（或學員共同討論之專案，成品PCB尺寸必須9cm*9cm，FR4雙面板或4層板，且需經講師評審通過），對本課程學習效果做一個總結，增強理論的掌握和動手能力，專案全程由老師進行並控制開發進度，最後進行作品的驗收，且每位學員將拿到一個完成後最終端之產品。



課程師資




【江義華 老師】
（教學經驗超過15年以上，同時是多家廠商聘請之專業技術顧問）【榮獲本會績優講師】上過學員一致好評熱推的講師!


【學歷】
逢甲大學資訊工程研究所、中正大學資訊工程所博士班研究


【經歷】
大學電子資訊相關科系講師、自強工業基金會講師、資策會講師、科技公司技術顧問


【專長】
嵌入式系統開發、智慧型嵌入式家庭自動化系統設計、8051單晶片、多套自動化系統及驅動程Driver、WEB-ERP系統、ERP系統、生產線自動化系統


【Blog】
http://blog.xuite.net/yhchiang/blog





修課條件

對此領域有興趣學員，具有C語言基礎為佳。

TOP↑
【使用板材】


TOP↑
【課程大綱】




03C001
嵌入式Linux系統開發工程師培訓實戰班
【物聯網產品開發實作班(適用Qt/Android)】 
【★贈送教學開發板ARM-CortexA8含7吋電容式多點觸控面板 (值9,500)】







上課日期
103/3/8~7/26（每週六9:00至18:00）及8/2~8/23（每週六9:00至17:00）
共180小時（4/5、5/31停課）


課程大綱


【硬體設計】	ARM 嵌入式硬體設計技術應用實戰-物聯網產品模組實作	12小時
	【基礎入門】	Linux作業系統使用/GNU Make及Makefile 檔案介紹	18小時
	【實戰模組A】	設計實作ARM嵌入式開發板－以 A8、ARM11、9為例  24小時
	【實戰模組B】	ARM 系統【無OS】BootLoader設計實務－以 A8為實例  12小時
	【實戰模組C】	嵌入式 Linux系統實作與程式設計實務  30小時
	【實戰模組D】	Step by Step講授嵌入式開發板Linux驅動程式實務  36小時
	【應用模組E】	嵌入式系統專案實戰: 網路通訊I/O、多媒體系列、Qt移植	24小時
	【應用模組F】	嵌入式物聯網產品實作(含Qt程式設計)	24小時
	




TOP↑


【硬體設計】ARM 嵌入式硬體設計技術應用實戰-物聯網產品模組實作



課程目標

熟悉電路圖繪製
	      熟悉PCB印刷電路板佈局（PCB Layout）設計與PCB製造過程(Gerber資料/鑽孔資料)
	      培訓成為PCB Layout能夠獨當一面的電子工程師
	      


修課條件

有電子電路基本概念的人員、電子電機自控類應屆畢業生、系統 開發設計工程師均可
	      欲培養第二專長或 SOHO工作室創業人員
	      欲在短時間內熟悉 PCB Layout人員
          欲從線路圖設計到 Layout建構完整作業能力者
	      RD研發人員加強設計一貫化品質作業
	      欲從事 Layout設計人員可從毫無經驗到實作上手
	      


課程大綱


功能強大、小巧且免費之EDA軟體：EAGLE PCB軟體安裝、各項環境設置
	EAGLE個人設置、使用者介面介紹、Control Panel介紹
	元件庫建立：Package封裝、Symbol符號、Device器件；利用TOOL 快速建立 BGA/QFN/QFP/SOP/SSOP/PLCC/TSOP/PSOP/SOIC元件庫
	繪製電路圖(線路圖)、簡介使用元件庫、連線、圓形、弧形、長 方 形和TEXT、國際規範 要
	電氣規則檢查(ERC)
	Layout基本概念、設計印刷電路板/PCB Layout(手動佈 線/Autorouter 自動佈線器)
	PCB LAOUT 銅箔線寬與電流計算
	PCB Layout繪圖與PCB製造資料的輸出(Gerber資料/鑽孔資料) 
	設計實作演練：繪製電路圖(線路圖)/轉入PCB，零件佈局規劃 Placement/PCB Rule設定/PCB走線、自動走線/PCB製造資料的輸出(Gerber資料/鑽孔資料)
	EMC重點介紹、進階PCB Layout電磁相容（EMC）
	




TOP↑


【基礎入門】Linux作業系統使用/GNU Make及Makefile 檔案介紹



課程目標

	讓學員熟悉嵌入式Linux Device Driver課程所需具備之嵌入式Linux BSP操作及嵌入式Linux程式設計(含進階C語言)，課程以實際在ARM開發版上操作教學，讓學員未來能更專註於學習嵌入式系統相關知識
	讓學員熟悉嵌入式Linux Programming課程所需具備之GNU Make知識，課程以實際在ARM開發版上操作教學，讓學員可在未來能更專註於學習嵌入式系統相關知識



修課條件

	對此領域有興趣學員，具有C語言基礎為佳
	


課程大綱


How to Build an Effective Embedded Linux Environment
	嵌入式Linux指令使用
	嵌入式Linux開機管理與網路設定
	Introduction ARM BSP & SDK(適用於A8、ARM11、9)
	Create Embedded System GNU Development Toolchain
	Boot Loader (A8、ARM11-S3C6410、ARM9-S3C2440) Brief Introduction
	Configure and Make Embedded System Kernel / Create Root-File System( arm-linux)
	★Lab: Create Kernel and Root-File System(ARM-Linux)
	How to Porting the Linux to New A8、ARM11-S3C6410、ARM9-S3C2440
	GNU Make/Makefile
	
●An Introduction to Makefiles
●How to Writing Makefile Rules and Writing the Commands in Rules
●How to Use Variables
●Conditional Parts of Makefiles
●How to Run Make
●Using Implicit Rules
	




TOP↑


【實戰－模組Ａ】 設計實作ARM嵌入式開發板－以 A8、ARM11、9為例



課程目標

	嵌入式技術是近年竄起直升的熱門科技，而嵌入式技術目前正廣泛運用在多元的產品上，但各產品所使用之嵌入式作業系統也是百家爭鳴，並無統一之標準。然而就嵌入式 Boot Loader 和OS/Driver 等設計，以及開發之實務上的操作程序而言，卻有脈絡可循，在熟悉這套程序和方法之後，只要搭配硬體上對產品之特定SoC(System on Chip)的瞭解，便能舉一反三，藉以開發各項嵌入式產品。而本課程就以 ARM處理器核心為例，並利用實驗板A8、ARM11-S3C6410、ARM9-S3C2440進行實作，讓學員藉此逐步瞭解嵌入式系統之各種不同應用的ARM硬體架構，包括: A8、ARM11、ARM9處理器底層架構、ARM處理器之組合語言、Boot Loader、開機初始化流程、FLASH 的 Read/Write/Erase、開發板內之各類嵌入式硬體介面控制實作，以及如何將嵌入式Linux 雙OS(ARM-Linux x) Porting至 ARM開發版，以此熟悉嵌入式開發版設計的程序和方法。藉此自製ARM嵌入式開發板之能力，做為徜徉嵌入式技術領域的敲門磚


修課條件

	電子、電機、資工、自控相關科系，且具備C程式語言能力與計算機基礎概念需熟悉Linux操做環境及介面或修過【基礎入門】Linux 先修班才建議上此課程
	


課程大綱

	一、嵌入式ARM計算機組織
	
嵌入式A8、ARM11、9處理器系統架構
	嵌入式ARM處理器軟體設計
		★【Lab】：輔以大量的 ARM 組語LAB講解
		★【Lab】: Flash the LED on Boot Loader
	A8、S3C6410、S3C2440 CPU規格書說明
	不同Flash Rom及相關週邊IC規格書說明
	嵌入式ARM開發板電路講解－ARM CPU/ROM/RAM/Peripheral
	
	二、實作ARM 嵌入式系統開發平臺-以A8、ARM11、9為例
	
適用於A8、ARM11、9之Boot Loader 簡介
	如何撰寫Boot Loader與Boot Loader程式功能(分別以適用於A8、ARM 11、9講解)
	如何撰寫Flash Rom的Read/Write/Erase程式(分別以適用於A8、ARM 11、9講解)
	U-Boot 與 ADS BootLoader 的移植(分別以適用於A8、ARM 11、9講解)
	透過JTAG下載Boot Loader至ARM板(分別以適用於A8、ARM 11、9講解)
	透過Boot Loader下載編譯好的嵌入式Linux Kernel Image(分別以適用於A8、ARM 11、9講解)
	透過Boot Loader下載編譯好的嵌入式Root File System(分別以適用於A8、ARM 11、9講解)
	Boot Loader & 嵌入式Linux之開機流程
	




TOP↑


【實戰－模組B】ARM 系統【無OS】BootLoader設計實務



課程目標

	每個【無OS】BootLoader設計程式都實作有原始程式碼，講師課堂上全面詳細的講解，為以後Bootloader的移植、Linux驅動的編寫打下扎實的基礎。


修課條件

	電子、電機、資工、自控相關科系，且具備C程式語言能力與計算機基礎概念
需熟悉Linux操做環境及介面或修過【基礎入門】Linux 先修班與【實戰－模組Ａ】設計實作ARM嵌入式開發板－以 A8、ARM11、9為例，才建議上此課程




課程大綱


實作bootloader可讓系統開機
	實作boot device與config MCU to boot over our-made boot device
	【無OS】周邊介面driver開發: LED Flash LAB、UART LAB
	




TOP↑


【實戰－模組C】嵌入式 Linux系統實作與程式設計實務



課程目標

	本課程之Linux系統實作與程式設計，全部是在A8、ARM11-S3C6410、ARM9-S3C2440嵌入式開發板上實作完成。課程內容從A8、ARM11-S3C6410、ARM9-S3C2440開發板平臺開始介紹，講解ARM開發板、GNU Toolchain(Cross Compiler)、Boot Loader、建立自己的嵌入式Kernel與Root File System，再以自己建立的【嵌入式Linux雙OS系統】學習Linux指令使用及開機管理與網路設定。接著在ARM開發板以自己建立的【嵌入式Linux雙OS系統】為作業系統，以此雙OS系統為基礎在上面講授各種Linux 程式設計。整個【嵌入式Linux雙OS系統】程式設計課程，講師會現場撰寫實作程式的範例，隨後將程式透過Cross Compiler後上傳至ARM開發板執行。不同於一般幾乎都在PC的Linux上講授Linux程式設計。而且這些程式範例均會在ARM開發板上與硬體結合，使學員可以熟悉《軟硬兼施》的程式設計，讓偏【純軟的工程師】不會看到硬體就傻眼、讓偏【純硬的工程師】不會看到軟體就頭痛。課程結束後可以熟悉【嵌入式Linux】程式設計


修課條件

	電子、電機、資工、自控相關科系，且具備C程式語言能力與計算機基礎概念
需熟悉Linux操做環境及介面或修過【基礎入門】Linux 先修班，才建議上此課程



課程大綱

	Embedded Linux 設計，適用於ARM-Linux、uCLinux
	
What is Needed Lib for Embedded System? ( System Calls & Library)
	Embedded Linux File I/O：★【Lab】STDIO/STDOUT Programming
	Embedded Linux Files and Directories：★【Lab】open/create/read/ write/lseek/fcntl/close
	Embedded Linux Standard I/O Library：★【Lab】Buffering I/O、Reading and Writing a Stream、Binary I/O、Formatted I/O
	Embedded Linux System Data Files & Info：★【Lab】Linux System Information Programming
	Embedded Linux Termios：★【Lab】RS232 Programming
	Embedded Linux Process Control：★【Lab】fork、vfork、exec
	Embedded Linux Signals：★【Lab】signal、kill and raise Functions、Ｓigaction Function
	Embedded Linux Inter-Process Communication：★【Lab】Pipes、FIFOs、Message Queues、Semaphores、Shared Memory
	Embedded Linux多執行緒程式設計：★【Lab】pThread Programming、Mutux Programming
	Embedded Linux Network Socket Programming：★【Lab】TCP/UDP Programming
	Embedded Linux Shell 程式設計：★【Lab】Embedded Linux Shell Programming：Simple Shell Example、Shell Operators Example、Shell Logic Structures Example
	




TOP↑


【實戰－模組D】Step by Step講授嵌入式開發板Linux驅動程式實務



課程目標

	學習不牽涉到硬體控制之單純的Linux驅動程式，是不難的。學習如何撰寫Linux驅動程式是難在其與硬體結合，使得驅動程式必須正確的驅動要控制的硬體。本課程重點在Step by Step介紹嵌入式產品開發過程中，產品研發人員如何實地撰寫【嵌入式 Linux 雙OS驅動程式】，我們從簡單的開發板之 Linux 驅動程式可適用於ARM-Linux架構入手，進而至 Character Device 的撰寫(分別以 LED 或SEG-7裝置實作)，並可執行在ARM-Linux系統，並剖析 Linux 驅動程式與硬體間的運作，再深入 Linux 驅動程式撰寫的各個層面，同時搭配各種不同的周邊裝置，如 LED、LCD、Keypad、SEG-7、Network 裝置等一般嵌入式系統常用之硬體。講師於課堂中撰寫這些常見的驅動程式，並在現場於 A8、ARM 11、9開發板上測試撰寫的【嵌入式 Linux 雙OS系統驅動程式】，讓學員實際熟悉【嵌入式 Linux 雙OS系統驅動程式】於實務上是如何撰寫，且於現場實際上機測試的過程中，更提供了從業學員之間技術交流的機會，締造教學相長之契機，共同朝向發揚嵌入式產業之目標邁進。


修課條件


應具備C程式語言能力與計算機基礎概念
	Linux Programming 基本概念，Makefile，Shall指令
	需熟悉Linux操做環境及介面或修過【基礎入門】Linux先修班
	



課程大綱


嵌入式Linux 驅動程式程式架構
	嵌入式Linux 驅動程式之程式設計流程:Building and Running Module
	★	【LAB】Hello World on ARM 開發板
	嵌入式Linux字元驅動程式
	★	【LAB】A Simple LED Device Driver on ARM 開發板
	除錯技術:Debugging Techniques 
	★	【LAB】Create a /Proc Entry File system on ARM 開發板
	進階Linux字元驅動程式
	★【LAB】The LED Device Driver Using IOCTL on ARM 開發板
	Getting Hold of Memory and Hardware Management
	★	【LAB】ARM BSP I/O Operations on ARM 開發板
	Flow of Time: Current Time、Delaying Execution、Task Queues、Kernel Timers
	★	【LAB】ARM BSP Experiment for LCM(or LED) Device on ARM 開發板(Current Time、Delaying Execution、Task Queues、Kernel Timers)
	嵌入式Linux Interrupt Handling
	★	【LAB】ARM BSP Interrupt Example on ARM 開發板
	嵌入式Linux Memory Mapped I/O：
	★【LAB】Frame Buffer(TFT LCD顯示) on ARM 開發板
	嵌入式Linux 區塊驅動程式
	★	【LAB】A Simple Block Device Driver on ARM 開發板
	網路卡驅動程式(以網路晶片dm9ks為例) dm9ks IC's Network Device Driver Tracing
	Embedded Linux-USB Device Driver(USB驅動程式) 
	★	【LAB】A Simple USB Drive Tracing
	Add your Device Driver into Kernel/ How to Porting Device Drivers to the Kernel
	★【LAB】On ARM 開發版Experiment:
	1. Add a LED Driver into Kernel 　2. Make Kernel  　3.Testing
	




TOP↑


【實戰－模組E】嵌入式系統專案實戰: 網路通訊I/O、多媒體系列、Qt移植



課程目標


完全以業界所需實務為導向，將嵌入式Linux常見之應用技術於課堂上直接講授並且實作
	軟硬體直接整合，課程範例將直接在ARM開發板上執行測試
	


修課條件


須熟悉嵌入式Linux C程式設計(包含GNU Makefile )
	須熟悉ARM BSP與嵌入式硬體
	上過模組A、B、C、D，才建議上此課程
	



課程大綱

一、網路通訊I/O

ARM開發板GPIO Linux 驅動程式
	ARM開發板UART驅動程式控制實驗
	ARM開發板周邊Linux驅動程式控制實驗
	TCP/IP Socket Programming on ARM Development Platform
	Serial Programming for POSIX on ARM Development Platform
	Http Server Introduction & Porting to ARM Development Platform.(Httpd&BoA)
	Porting SQLite Data Base to ARM Development Platform
	
二、多媒體系列

ARM開發板GPIO Linux 驅動程式
	ARM開發板周邊Linux驅動程式控制實驗
	Multi-Media System Programming
	QT X Window System
	




TOP↑


【實戰－模組F】嵌入式物聯網產品實作(含Qt程式設計)



課程目標


完全以業界所需實務為導向，將嵌入式Linux常見之應用技術於課堂上直接講授並且實作
	軟硬體直接整合，課程範例將直接在ARM開發板上執行測試
	


修課條件


須熟悉嵌入式Linux C程式設計(包含GNU Makefile )
	須熟悉ARM BSP與嵌入式硬體
	上過模組A、B、C、D，才建議上此課程
	



課程大綱
(業界實務篇：提升動手做的實務實戰能力)學習方式：通過課程指定的實際專案案例（或學員共同討論之專案，成品PCB尺寸必須小於9cm*9cm，FR4雙面板或4層板，且需經講師評審通過），對本課程學習效果做一個總結，增強理論的掌握和動手能力，專案全程由老師進行並控制開發進度，最後進行作品的驗收，且每位學員將拿到一個完成後最終端之產品。
PS1:本次課程指定的實際專案: 物聯網產品
PS2:學員需共同平均分擔專案BOM表之零件備料費用與PCB空板樣品製作費及零件焊接費用。
PS3:因PCB板製作需時大約7至14工作天，及專案BOM表之零件備料也要花時間，所以課程進度【實戰－模組F】，會安排在課程進度A之後，適當時間就開始進行，以利於課程進度的進行。
	  
	  課程內容：
根據需求編寫需求分析報告和詳細設計，經講師評審通過後，進行下列步驟:
	電路圖和PCB設計、PCB板製作(送PCB板廠洗板)
	器件選型、專案BOM表之零件備料、元件外包焊接
	完成硬體調試
	完成軟韌體程式設計和系統調試
	




TOP↑

 
 



