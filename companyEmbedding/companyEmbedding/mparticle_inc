mParticle - Gramercy Park - New York, NY


FoursquareLog InSign UpNearby:Get inspired:Top PicksTrendingFoodCoffeeNightlifeFunShoppingPlanning a trip to New York?Foursquare can help you find the best places to go to.Find great things to doSee all26 photosmParticleTech StartupGramercy Park, New YorkSaveShareTips 1Photos 26mParticle1 Tip and reviewLog in to leave a tip here.PostYuan RenAugust 17, 2016Been here 5+ timesHouse-made bulletproof coffee is awesome here26 PhotosRelated Searchesmparticle new york  mparticle new york photos  mparticle new york location  mparticle new york address  mparticle new york  mparticle new york  mparticle gramercy park new yorkAboutBlogBusinessesCitiesDevelopersHelpJobsCookies (Updated)Privacy (Updated)TermsEnglishEnglish Français Deutsch Bahasa Indonesia Italiano 日本語 한국어 Português Русский Español ภาษาไทย Türkçe Cities:AtlantaAustinBostonChicagoDallasDenverHoustonLas VegasLos AngelesNew YorkPhiladelphiaPortlandSan DiegoSan FranciscoSeattleWashington, D.C.Countries:BelgiumBrazilCanadaChileFinlandFranceGermanyGreat BritainHungaryIndonesiaJapanMexicoNetherlandsPhilippinesRussiaSingaporeSpainThailandTurkeyMore Great Places in New York:abcdefghijklmnopqrstuvwxyz#Foursquare © 2017  Lovingly made in NYC & SFmParticle257 Park Ave SNew York, NY 10010United StatesGet directions None listed (See when people check in)People tend to check in during these times:TodayNoneSunNoneMon8:00 AM–NoonTue8:00 AM–2:00 PMWed8:00 AM–7:00 PMThu9:00 AM–1:00 PM5:00 PM–6:00 PMFri9:00 AM–3:00 PMSee MoreTop places in the areaThe 15 Best Places for Potatoes in New York CityThe 15 Best Places for Bagels in New York CityThe 15 Best Places for a Banana Pudding in New York CityUnited States » New York » New York » Gramercy ParkProfessional & Other Places » Office » Tech StartupIs this your business? Claim it now.Make sure your information is up to date. Plus use our free tools to find new customers.You must enable JavaScript to use foursquare.comWe use the latest and greatest technology available to provide the best possible web experience.Please enable JavaScript in your browser settings to continue.Download Foursquare for your smart phone and start exploring the world around you!










 





The Customer Data Platform for Every Screen






























































































 
 

mParticleThe customer data platform for every screen.
 


Win the Mobile Moment
Integrate & orchestrate your growth stack across the entire customer journey





SimpleCollect and control all your customer data through a single API.

SmartUnify and enrich customer profiles for improved insight.

EffectiveBuild multi-channel, multi-screen journeys that supercharge ROI.


Request a Demo
Request a Demo





 
Trusted by the world's most forward-thinking brands.





Our Customers



 
Created for Marketers
Faster GrowthDeploy new tools quickly, without consuming engineering cycles.

Better CoordinationOrchestrate advertising and marketing across channels, partners, and screens.

Enhanced InsightGet a complete view of your customer's journey and lifetime value.



Learn More



 

Loved by Engineers
Turnkey IntegrationsSave time and clean up code with a single API that connects to all the leading marketing and analytics tools.

Better App PerformanceReduce network usage, app binary size and battery consumption by moving integrations server-side.

Enhanced Data SecurityEncrypt and secure data from collection to connection and easily monitor and control which data gets sent where.



Go to docs




 

Deep Integrations with Growth Stack Leaders
Full-featured integrations with the top marketing, advertising, analytics, and data warehousing platforms.






All Integrations





Customer SpotlightLearn how Postmates Unites Data to Deliver a Wordclass User ExperienceRead MoreIn the NewsAdweek names Michael and Andrew Katz Marketing Technology TrailblazersRead MoreCustomer SpotlightLearn How Retail Brand Lilly Pulitzer Drove 8K App Installs in 90 DaysRead MoreLatest ReportForrester Report: Mobile Moments Transform Commerce and Service ExperiencesDownload 

 Get Started with mParticle today! Get Started
Get Started with mParticle today! Get Started


Product
Overview
Controls & Filters
Segmentation
Data Enrichment
Redshift Sync
Security

Partners
Join the Platform
Integrations

Resources
Resource Center
Docs
The Periodic Table of SDKs

Company
About Us
Customers
Careers
Contact Us
Press Kit
Blog
News
Privacy
Terms

Insights




Sign up for mobile marketing and analytics insights in your inbox.





  










This iframe contains the logic required to handle AJAX powered Gravity Forms.

Connect With Us
















Get Started


All fields are required******

*My company is a..Current mParticle CustomerApp Marketer/DeveloperMobile Technology VendorAgency/ConsultancyOther*I am trying to reach someone in…SalesDeveloper RelationsTechnology Partner RelationsPR/MarketingHR/OperationsFinanceNone of the above

  










This iframe contains the logic required to handle AJAX powered Gravity Forms.





			CLOSE            








































mParticle Privacy Policy - mParticle


































































































 
mParticleThe customer data platform for every screen.
mParticle Privacy Policy
This Privacy Policy is effective June 6, 2017
About this Policy
This Policy explains how information collected on www.mparticle.com (our “Site”) is used and disclosed by mParticle and its subsidiaries and affiliated companies (“mParticle or “We”). This Policy also explains how information is collected, used and disclosed via our technology platform (the mParticle “Platform”) and how we collect information from our clients and prospective clients.
mParticle complies with the EU-US Privacy Shield Framework and the Swiss-US Privacy Shield Framework as set forth by the US Department of Commerce regarding the collection, use, and retention of personal information from European Union and Switzerland. mParticle has certified that it adheres to the Privacy Shield Privacy Principles of Notice, Choice, Accountability for Onward Transfer, Security, Data Integrity and Purpose Limitation, Access, and Recourse, Enforcement and Liability. If there is any conflict between the policies of this privacy policy and the Privacy Shield Principles, the Privacy Shield Principles shall govern. To learn more about the Privacy Shield program, and to view our certification page, please visit https://www.privacyshield.gov/
Data Collection and Use for our Site, from Clients and Employees.
Data Collection via the Site, from Clients and from Employees
Our Site is primarily directed to our clients and prospective clients (our “Clients”) which are generally businesses. We collect personally identifiable information (“PII”) via the Site. PII is information that can be used to identify or contact a unique person. We generally will only collect PII via the Site when you provide it directly to us. For example, you may provide PII such as an email address or a telephone number by sending us an email or filling out a form on the Site. Prospective employees may also send their resume or other employment details. And our Clients may register via the Site with their email address and other contact details. Clients, Site visitors and employees will sometimes provide additional PII to bolster what was provided via the Site.
When you visit our Site, some information is automatically collected. This may include information such as the Operating System running on your device, Internet Protocol address, access times, browser type and language, and the website you visited before visiting our Site. We automatically collect information using “cookies” and Web beacons. Cookies are small data files stored on your hard drive by a website and web beacons are electronic images that may be used on our Site or in our emails. Among other things, cookies help us improve our Site, our marketing activities, and your experience. We use cookies to see which areas and features are popular and to count visits to our Site. Most Web browsers are set to accept cookies by default. If you prefer, you can choose to set your browser to remove cookies and / or to reject cookies. If you choose to remove cookies or reject cookies, this could affect certain features or services of our Site. For more information about cookies and web beacons, please visit http://www.allaboutcookies.org/. mParticle does not respond to “Do Not Track” browser signals or other mechanisms.
How We Use Information We Collect via the Site, from Clients and from Employees
We use the information we collect primarily to provide, maintain, protect and improve our current products, to develop new ones and to manage Client accounts and human resources functions. We use PII for the general purpose it was provided. For example, if you ask a question about our products and services, we may send you an email in response, and might even have a salesperson contact you to gauge your interest in learning more about our services. In general, we may use your information to:

Improve our services, Site and how we operate our business;
Understand and enhance your experience using our Site, products and services;
Provide and deliver products and services you request;
Respond to your comments or questions and allow our Services team to provide service;
Send you related information, including confirmations, invoices, technical notices, updates, security alerts and support and administrative messages;
Communicate with you about promotions, upcoming events and news about products and services offered by mParticle and our selected partners;
Link or combine it with other information we get from third parties, to help understand your needs and provide you with better service; and
Protect, investigate and deter against fraudulent, unauthorized or illegal activity.

mParticle may store and process PII in the United States and other countries. By using our Platform as a Client, you consent to this transfer of your information into the U.S.
Data Collection and Use for the mParticle Platform
Platform Data Collection and how mParticle Processes that Information
Our Platform is designed to allow our Clients to better understand how their customers, prospective customer and other individuals (their “Users”) utilize the products and services offered by our Clients. The platform provides our Clients with the ability to collect information based on User interaction with their mobile application(s), mobile website(s) or other digital properties where Clients have integrated with the Platform (collectively, “Client Digital Properties”) and send communications to such Users. Some information is automatically collected from or about Users when they use Client Digital Properties. The types of information collected via Client Digital Properties for the Platform includes: the date/time for a visit to a Client Digital Property, referrer information such as what search engine and search keywords Users may have used to get to a Client Digital Property, information about the browser or device your User is on such as their Operating System, as well as the city/country location of Users, and any pseudonymous tokens and mobile advertising IDs (e.g., IDFA in iOS). In addition, our Clients can choose what other User data they want to collect and store on the platform such as an IP address, location information, a User’s age, user names, real names, email addresses and other custom data points as determined by each Client.
We contractually prohibit Clients from placing sensitive information (e.g., passwords, authentication credentials, credit cards, social security or driver’s license numbers) or information that is deemed sensitive by applicable law or self-regulatory codes such as the Digital Advertising Alliance. mParticle functions strictly as the data processing agent of our Clients. Accordingly, other than those aforementioned restrictions, the data stored on the Platform is subject to the privacy policies of each Client.
Other Relevant Privacy Information
Sharing of Information, Onward Transfer
We may share your information with certain third-parties as specified below:

With third-party agents who work on our behalf as sub-processors, provided such third parties agree to adhere to the same privacy principles as mParticle;
To protect the rights and property of mParticle, our agents, Clients and others including enforcement of our agreements, policies and terms of use;
In an emergency, including protection of the personal safety of any person;
For the purposes of a business deal (or negotiation of a business deal) involving sale or transfer of all or a part of our business or assets (business deals may include, for example, any merger, financing, acquisition, divestiture or bankruptcy transaction or proceeding);
As required in response to a lawful request by public authorities, including meeting of national security or law enforcement requirements;
We may also share aggregate or anonymous information without restriction.

In cases of onward transfer to third parties of data of EU or Swiss individual received pursuant to the EU-US and Swiss-US Privacy Shield, mParticle is potentially liable. Our privacy policy does not cover any third-party websites services. To learn about those third parties’ privacy practices, please visit their privacy policies. 
Information Security
We take reasonable steps to help protect your information in an effort to prevent loss, misuse, unauthorized access, disclosure, alteration and destruction. It is your responsibility to protect your usernames and passwords to help prevent anyone from accessing or abusing your accounts and services. You should not use or reuse the same passwords you use with other accounts as your password for our services. We encrypt transmission of data on pages where you provide payment information or otherwise provide sensitive information. However, no security or encryption method can be guaranteed to protect information from hackers or human error. Information we collect may be stored or processed on computers located in any country where we do business.
Children
We do not knowingly contact or collect personal information from children under 13. If you believe we have inadvertently collected such information, please contact us so we can promptly obtain parental consent or remove the information. If you are under 18, or the age of majority in the jurisdiction in which you reside, you may only use the mParticle Site and mParticle Services with the consent of your parent or legal guardian. 
Data Retention
mParticle retains Client data for so long as you remain are a Client and will delete Client’s information within 12 months of either party’s termination of applicable Client agreement upon written request. We retain User level data on the Platform as directed by our Clients and for a reasonable time thereafter for audit purposes and as otherwise required by law.
Access to your Personal Data
If you are a mParticle Client, you can sign into your account to see any PII we have stored, such as your name, email, address or phone number. You can also contact us by email to request to see this information. If you are a job applicant and have provided this kind of information, you can also contact us via e-mail to request to see the information we have in our systems.
mParticle acknowledges that EU and Swiss individuals have the right to access the personal information that we maintain about them.  An EU or Swiss individual who seeks access, or who seeks to correct, amend, or delete inaccurate data, should direct their query to support@mparticle.com. If requested to remove data, we will respond within a reasonable timeframe.
Your Information Choices and Changes
You may opt out of receiving promotional emails from mParticle by following the instructions in those emails. If you opt out, we may still send you non-promotional emails, such as emails about your mParticle projects or our ongoing business relationship. An individual wishing to limit the use or sharing of their data should contact email support@mparticle.com. mParticle will respond within ninety (90) days to any request to delete your information. Individuals who have provided information directly to one of mParticle’s Clients must send follow-up requests to change or delete such information to that particular mParticle Client.
Changes To This Policy
mParticle may change this Policy from time to time. If we make any changes to this Policy, we will change the “Last Updated” date above. You agree that your continued use of our Site Services after such changes to our privacy practice have been published will constitute your acceptance of such revised Policy.
Contacting mParticle and Dispute Resolution
mParticle provides periodic training for its employees involved in the collection and dissemination of data. In addition, mParticle’s internal policies and procedures provide for disciplinary action if our employees fail to follow this Privacy Policy. We periodically self-assess and review these internal policies and procedures to review compliance.
In compliance with the US-EU and Swiss-US Privacy Shield Principles, mParticle commits to resolve complaints about your privacy and our collection or use of your personal information. European Union or Swiss individuals with inquiries or complaints regarding this privacy policy should first contact mParticle at:

Email: support@mparticle.com
Postal mail: mParticle Inc., 257 Park Avenue South, Floor 9, New York, NY 10010

For complaints that cannot be resolved between mParticle and the individual concerned, mParticle has further committed to refer unresolved privacy complaints under the EU-US and Swiss-US Privacy Shield Principles to BBB EU PRIVACY SHIELD, a non-profit alternative dispute resolution provider located in the United States and operated by the Council of Better Business Bureaus. If you are an EU or Swiss individual and you do not receive timely acknowledgment of your complaint, or if your complaint is not satisfactorily addressed, please visit www.bbb.org/EU-privacy-shield/for-eu-consumers/ for more information and to file a complaint.
If your complaint is not satisfactorily addressed, and your inquiry or complaint involves human resource data, you may have your complaint considered by an independent recourse mechanism: for EU/EEA Data Subjects, a panel established by the EU data protection authorities (“DPA Panel”), and for Swiss Data Subjects, the Swiss Federal Data Protection and Information Commissioner (“FDPIC”). To do so, you should contact the state or national data protection or labor authority in the jurisdiction where you work.  mParticle agrees to cooperate with the relevant national DPAs and to comply with the decisions of the DPA Panel and the FDPIC.
Should your complaint remain fully or partially unresolved after a review by mParticle, BBB EU Privacy Shield and the relevant DPA, you may be able to, under certain conditions, seek arbitration before the Privacy Shield Panel.  For more information, please visit www.privacyshield.gov. mParticle is subject to the investigatory and enforcement powers of the Federal Trade Commission (FTC).
Privacy Inquiries
If you have any questions or concerns about this policy, please contact us:
support@mparticle.com
mParticle, Inc
257 Park Avenue South
Floor 9
New York, NY 10010
 Get Started with mParticle today! Get Started
Get Started with mParticle today! Get Started


Product
Overview
Controls & Filters
Segmentation
Data Enrichment
Redshift Sync
Security

Partners
Join the Platform
Integrations

Resources
Resource Center
Docs
The Periodic Table of SDKs

Company
About Us
Customers
Careers
Contact Us
Press Kit
Blog
News
Privacy
Terms

Insights




Sign up for mobile marketing and analytics insights in your inbox.





  










This iframe contains the logic required to handle AJAX powered Gravity Forms.

Connect With Us
















Get Started


All fields are required******

*My company is a..Current mParticle CustomerApp Marketer/DeveloperMobile Technology VendorAgency/ConsultancyOther*I am trying to reach someone in…SalesDeveloper RelationsTechnology Partner RelationsPR/MarketingHR/OperationsFinanceNone of the above

  










This iframe contains the logic required to handle AJAX powered Gravity Forms.





			CLOSE            































mParticle - Gramercy Park - New York, NY


FoursquareLog InSign UpNearby:Get inspired:Top PicksTrendingFoodCoffeeNightlifeFunShoppingPlanning a trip to New York?Foursquare can help you find the best places to go to.Find great things to doSee all26 photosmParticleTech StartupGramercy Park, New YorkSaveShareTips 1Photos 26mParticle1 Tip and reviewLog in to leave a tip here.PostYuan RenAugust 17, 2016Been here 5+ timesHouse-made bulletproof coffee is awesome here26 PhotosRelated Searchesmparticle new york  mparticle new york photos  mparticle new york location  mparticle new york address  mparticle new york  mparticle new york  mparticle gramercy park new yorkAboutBlogBusinessesCitiesDevelopersHelpJobsCookies (Updated)Privacy (Updated)TermsEnglishEnglish Français Deutsch Bahasa Indonesia Italiano 日本語 한국어 Português Русский Español ภาษาไทย Türkçe Cities:AtlantaAustinBostonChicagoDallasDenverHoustonLas VegasLos AngelesNew YorkPhiladelphiaPortlandSan DiegoSan FranciscoSeattleWashington, D.C.Countries:BelgiumBrazilCanadaChileFinlandFranceGermanyGreat BritainHungaryIndonesiaJapanMexicoNetherlandsPhilippinesRussiaSingaporeSpainThailandTurkeyMore Great Places in New York:abcdefghijklmnopqrstuvwxyz#Foursquare © 2017  Lovingly made in NYC & SFmParticle257 Park Ave SNew York, NY 10010United StatesGet directions None listed (See when people check in)People tend to check in during these times:TodayNoneSunNoneMon8:00 AM–NoonTue8:00 AM–2:00 PMWed8:00 AM–7:00 PMThu9:00 AM–1:00 PM5:00 PM–6:00 PMFri9:00 AM–3:00 PMSee MoreTop places in the areaThe 15 Best Places for Potatoes in New York CityThe 15 Best Places for Bagels in New York CityThe 15 Best Places for a Banana Pudding in New York CityUnited States » New York » New York » Gramercy ParkProfessional & Other Places » Office » Tech StartupIs this your business? Claim it now.Make sure your information is up to date. Plus use our free tools to find new customers.You must enable JavaScript to use foursquare.comWe use the latest and greatest technology available to provide the best possible web experience.Please enable JavaScript in your browser settings to continue.Download Foursquare for your smart phone and start exploring the world around you!

mParticle Launches Partner Certification Program, Highlighting Best-of-Breed Companies in Mobile Strategy, Design and Development 
































PRWeb
Home
News Center
Blog



United States
United Kingdom
France

			Login
		
			Create a free account
		




RSS


Email Newsletters


Put PRWeb on your site




mParticle Launches Partner Certification Program, Highlighting Best-of-Breed Companies in Mobile Strategy, Design and Development



Share Article

















Inaugural Certified Partners include Bottle Rocket Studios, Mutual Mobile, Prolific Interactive, POSSIBLE Mobile, The Mobile Growth Agency (TMGA), and Y Media






New York, NY (PRWEB)
June 20, 2017
 mParticle, the leading customer data platform for every screen, today announced the launch of its Partner Certification Program. With this new Program, mParticle certifies mobile-first Partners that lead the industry in driving omni-channel growth by effectively leveraging the mParticle platform.
The Program also provides Partners with unique and valuable access, including joint market development, prioritized product access, enablement and training and additional dedicated services. Certified Partners will have a clear market advantage in accelerating mobile growth, engagement and revenue for their clients.
The inaugural mParticle Certified Partners are Bottle Rocket Studios, Mutual Mobile, Prolific Interactive, POSSIBLE Mobile, The Mobile Growth Agency and Y Media.
“In the mobile space, which increasingly demands flexibility and real-time information, mParticle has become an essential foundation layer to get the right data, in the right place, at the right time,” said Al Harnisch, Director of Strategy and Growth for Prolific. “We are excited to be named a mParticle Certified Partner and look forward to using the platform to drive further success for our clients.”
mParticle empowers its customers to integrate and orchestrate their entire growth stack through its many cross-platform integrations as well as establish a master audience profile to improve insights and tailor marketing experiences across screens, devices and customer journey stages.
“We are thrilled to launch the mParticle Certified Partner Program,” said Michael Katz, CEO of mParticle, “The shift to mobile has completely changed the rules of engagement and ensuring that our customers have the ability to work with certified, best in class partners is great for all parties involved.”
About mParticle
mParticle is the customer data platform for every screen. Sophisticated marketers at companies like Venmo, Starwood, NBC Universal, Spotify and Airbnb use mParticle to integrate and orchestrate their entire growth stack, enabling them to win in key moments of the customer journey. Founded in 2013, mParticle is headquartered in New York City and manages $5 billion in transactions and 250 billion API calls monthly.



Share article on social media or email:









View article via:
											Pdf
										
											Print
										






Contact Author

David Spitz
mParticle Inc. +1 (646) 374-8824
				Email >
			
@mParticles
				Follow >
			
Follow us on


									Visit website
								




News Center


mParticle - Gramercy Park - New York, NY


FoursquareLog InSign UpNearby:Get inspired:Top PicksTrendingFoodCoffeeNightlifeFunShoppingPlanning a trip to New York?Foursquare can help you find the best places to go to.Find great things to doSee all26 photosmParticleTech StartupGramercy Park, New YorkSaveShareTips 1Photos 26mParticle1 Tip and reviewLog in to leave a tip here.PostYuan RenAugust 17, 2016Been here 5+ timesHouse-made bulletproof coffee is awesome here26 PhotosRelated Searchesmparticle new york  mparticle new york photos  mparticle new york location  mparticle new york address  mparticle new york  mparticle new york  mparticle gramercy park new yorkAboutBlogBusinessesCitiesDevelopersHelpJobsCookies (Updated)Privacy (Updated)TermsEnglishEnglish Français Deutsch Bahasa Indonesia Italiano 日本語 한국어 Português Русский Español ภาษาไทย Türkçe Cities:AtlantaAustinBostonChicagoDallasDenverHoustonLas VegasLos AngelesNew YorkPhiladelphiaPortlandSan DiegoSan FranciscoSeattleWashington, D.C.Countries:BelgiumBrazilCanadaChileFinlandFranceGermanyGreat BritainHungaryIndonesiaJapanMexicoNetherlandsPhilippinesRussiaSingaporeSpainThailandTurkeyMore Great Places in New York:abcdefghijklmnopqrstuvwxyz#Foursquare © 2017  Lovingly made in NYC & SFmParticle257 Park Ave SNew York, NY 10010United StatesGet directions None listed (See when people check in)People tend to check in during these times:TodayNoneSunNoneMon8:00 AM–NoonTue8:00 AM–2:00 PMWed8:00 AM–7:00 PMThu9:00 AM–1:00 PM5:00 PM–6:00 PMFri9:00 AM–3:00 PMSee MoreTop places in the areaThe 15 Best Places for Potatoes in New York CityThe 15 Best Places for Bagels in New York CityThe 15 Best Places for a Banana Pudding in New York CityUnited States » New York » New York » Gramercy ParkProfessional & Other Places » Office » Tech StartupIs this your business? Claim it now.Make sure your information is up to date. Plus use our free tools to find new customers.You must enable JavaScript to use foursquare.comWe use the latest and greatest technology available to provide the best possible web experience.Please enable JavaScript in your browser settings to continue.Download Foursquare for your smart phone and start exploring the world around you!


The Customer Data Platform for Every Screen






























































































 
 

mParticleThe customer data platform for every screen.
 


Win the Mobile Moment
Integrate & orchestrate your growth stack across the entire customer journey





SimpleCollect and control all your customer data through a single API.

SmartUnify and enrich customer profiles for improved insight.

EffectiveBuild multi-channel, multi-screen journeys that supercharge ROI.


Request a Demo
Request a Demo





 
Trusted by the world's most forward-thinking brands.





Our Customers



 
Created for Marketers
Faster GrowthDeploy new tools quickly, without consuming engineering cycles.

Better CoordinationOrchestrate advertising and marketing across channels, partners, and screens.

Enhanced InsightGet a complete view of your customer's journey and lifetime value.



Learn More



 

Loved by Engineers
Turnkey IntegrationsSave time and clean up code with a single API that connects to all the leading marketing and analytics tools.

Better App PerformanceReduce network usage, app binary size and battery consumption by moving integrations server-side.

Enhanced Data SecurityEncrypt and secure data from collection to connection and easily monitor and control which data gets sent where.



Go to docs




 

Deep Integrations with Growth Stack Leaders
Full-featured integrations with the top marketing, advertising, analytics, and data warehousing platforms.






All Integrations





Customer SpotlightLearn how Postmates Unites Data to Deliver a Wordclass User ExperienceRead MoreIn the NewsAdweek names Michael and Andrew Katz Marketing Technology TrailblazersRead MoreCustomer SpotlightLearn How Retail Brand Lilly Pulitzer Drove 8K App Installs in 90 DaysRead MoreLatest ReportForrester Report: Mobile Moments Transform Commerce and Service ExperiencesDownload 

 Get Started with mParticle today! Get Started
Get Started with mParticle today! Get Started


Product
Overview
Controls & Filters
Segmentation
Data Enrichment
Redshift Sync
Security

Partners
Join the Platform
Integrations

Resources
Resource Center
Docs
The Periodic Table of SDKs

Company
About Us
Customers
Careers
Contact Us
Press Kit
Blog
News
Privacy
Terms

Insights




Sign up for mobile marketing and analytics insights in your inbox.





  










This iframe contains the logic required to handle AJAX powered Gravity Forms.

Connect With Us
















Get Started


All fields are required******

*My company is a..Current mParticle CustomerApp Marketer/DeveloperMobile Technology VendorAgency/ConsultancyOther*I am trying to reach someone in…SalesDeveloper RelationsTechnology Partner RelationsPR/MarketingHR/OperationsFinanceNone of the above

  










This iframe contains the logic required to handle AJAX powered Gravity Forms.





			CLOSE            





































Yuan's tip at mParticle


FoursquareLog InSign UpNearby:Get inspired:Top PicksTrendingFoodCoffeeNightlifeFunShoppingPlanning a trip to New York?Foursquare can help you find the best places to go to.Find great things to doSee all26 photosmParticleTech StartupGramercy Park, New YorkSaveShareTips 1Photos 26mParticle1 Tip and reviewLog in to leave a tip here.PostYuan RenAugust 17, 2016Been here 5+ timesHouse-made bulletproof coffee is awesome here26 PhotosRelated Searchesmparticle new york  mparticle new york photos  mparticle new york location  mparticle new york address  mparticle new york  mparticle new york  mparticle gramercy park new yorkAboutBlogBusinessesCitiesDevelopersHelpJobsCookies (Updated)Privacy (Updated)TermsEnglishEnglish Français Deutsch Bahasa Indonesia Italiano 日本語 한국어 Português Русский Español ภาษาไทย Türkçe Cities:AtlantaAustinBostonChicagoDallasDenverHoustonLas VegasLos AngelesNew YorkPhiladelphiaPortlandSan DiegoSan FranciscoSeattleWashington, D.C.Countries:BelgiumBrazilCanadaChileFinlandFranceGermanyGreat BritainHungaryIndonesiaJapanMexicoNetherlandsPhilippinesRussiaSingaporeSpainThailandTurkeyMore Great Places in New York:abcdefghijklmnopqrstuvwxyz#Foursquare © 2017  Lovingly made in NYC & SFmParticle257 Park Ave SNew York, NY 10010United StatesGet directions None listed (See when people check in)People tend to check in during these times:TodayNoneSunNoneMon8:00 AM–NoonTue8:00 AM–2:00 PMWed8:00 AM–7:00 PMThu9:00 AM–1:00 PM5:00 PM–6:00 PMFri9:00 AM–3:00 PMSee MoreTop places in the areaThe 15 Best Places for Potatoes in New York CityThe 15 Best Places for Bagels in New York CityThe 15 Best Places for a Banana Pudding in New York CityUnited States » New York » New York » Gramercy ParkProfessional & Other Places » Office » Tech StartupIs this your business? Claim it now.Make sure your information is up to date. Plus use our free tools to find new customers.You must enable JavaScript to use foursquare.comWe use the latest and greatest technology available to provide the best possible web experience.Please enable JavaScript in your browser settings to continue.Download Foursquare for your smart phone and start exploring the world around you!










 















Bing Places for Business
























































































































Bing
 places for business


Sign in using your




Microsoft Account





Work Account





Google Account





Facebook Account

Don't have an account? Create one.





Data Enrichment - mParticle











































































































 
mParticleThe customer data platform for every screen.
Data Enrichment


Data Enrichment
Learn more about your users
Enrich your data for more relevant and scalable marketing.
Go to Docs




Uncover new insights
Append customer data with demographic, behavioral and cross-device insights from your internal systems as well as 3rd party APIs.










Learn what’s really working
Analyze audience composition and lift against key performance metrics.







Scale your marketing
Create new segments and lookalikes based on your combined 1st and 3rd party data.




 Get Started with mParticle today! Get Started
Get Started with mParticle today! Get Started


Product
Overview
Controls & Filters
Segmentation
Data Enrichment
Redshift Sync
Security

Partners
Join the Platform
Integrations

Resources
Resource Center
Docs
The Periodic Table of SDKs

Company
About Us
Customers
Careers
Contact Us
Press Kit
Blog
News
Privacy
Terms

Insights




Sign up for mobile marketing and analytics insights in your inbox.





  










This iframe contains the logic required to handle AJAX powered Gravity Forms.

Connect With Us
















Get Started


All fields are required******

*My company is a..Current mParticle CustomerApp Marketer/DeveloperMobile Technology VendorAgency/ConsultancyOther*I am trying to reach someone in…SalesDeveloper RelationsTechnology Partner RelationsPR/MarketingHR/OperationsFinanceNone of the above

  










This iframe contains the logic required to handle AJAX powered Gravity Forms.





			CLOSE            

































mParticle Inc: Company Profile - Bloomberg



































































  









Feedback

























mparticle inc
Private Company









Company Profile
Sector: Technology
Industry: Software
Sub-Industry: Application Software
mParticle Inc. develops mobile technology. The Company develops a cloud-based platform that puts app and mobile web owners in control of their data assets. mParticle offers solutions to controls and manage data collection and activate with service providers and media partners for marketing and consumer experiences, and user acquisition.




Corporate Information
Address:

381 Park Ave South
Suite 815
New York, NY 10016
United States


Phone:
-


Fax:
-


Web url:
www.mparticle.com





Board Members




Board Members
Company


Scott Friend
Bain Capital Venture Partners LLC


Theodore Maidenberg
Social+capital Partnership LLC/The


























From The Web











Key Executives


Michael Katz


CEO/Co-Founder




Max Clark


Chief Revenue Officer







Sponsored Financial Commentaries







More From The Web


















Home


News


Top Headlines
Most Popular
Exclusive
Law
Entrepreneurs
Leaders
Economy
Environment
Science
Sports
Markets Magazine
Pursuits Magazine
Bloomberg Visual Data
Bloomberg Best (and Worst)
For comments or complaints about news coverage click here


Regions
U.S.
China
Europe
Asia
U.K. & Ireland
Australia & New Zealand
Canada
India & Pakistan
Japan
Africa
Eastern Europe
Latin America
Middle East
Markets
Commodities
Currencies
Bonds
Stocks
Energy Markets
Municipal Bonds
Emerging Markets
Funds
Islamic Finance
Industries
Energy
Technology
Real Estate
Finance
Health Care
Transportation
Insurance
Retail
Media
Manufacturing




Quick


Market Data


Stocks
Stock Futures
World Indexes
Americas
Europe, Middle East, & Africa
Asia-Pacific
Gainers & Losers
Earnings Calendar
Industry Leaders
Currencies
Americas
Europe, Middle East, & Africa
Asia-Pacific
Foreign Exchange Cross Rates
FX Fixings
Currency Converter
Forex Trading Videos
Commodities
Energy Prices
Metals Prices
Agricultural Prices


Rates & Bonds
US Treasuries
UK Gilts
Germany Bunds
Japan Bonds
Australia Bonds
Bloomberg Bond Indexes
Corporate Bonds
Consumer Rates
Economic Calendar
Watchlist
European Debt Crisis
Symbol Search
The Market Now




Personal Finance


Top Headlines
Saving & Investing
Real Estate
Retirement Planning
Financial Advisers
Taxes
Blog: Ventured & Gained
Real Cost Of
Money Gallery
Calculators
Watchlist (Portfolio Tracker)




Tech


Top Headlines
Social Media
Mobile & Wireless
Web
Enterprise Tech
TV, Games & Movies
Apple
Tech Deals
Global Tech
Slideshows
Videos




U.S. Politics


Sustainability


Top Headlines
Energy
Corporate Sustainability
Policy
Natural Resources
Health & Population
Slideshows
Videos
Blog: The Grid




Luxury


Top Headlines
Autos
Billionaires
Living
Property
Travel
Well Spent
Loot Blog
Pursuits Magazine
Videos




TV


Live TV
Channel Finder
Personalities
Apple TV
iPad App
Schedule
U.S.
Asia
Europe


Shows
Surveillance
Market Makers
Lunch Money
Street Smart
Bloomberg West
Game Changers




Video


Must See
Latest
Live TV
Shows
Playlist




Radio


Live Radio
Shows
Schedule
Personalities
Podcasts
Bloomberg Brief
Featured Podcasts and New Shows
Bloomberg View
Masters in Business
First Word
Surveillance
Bloomberg Advantage
In the Loop
Bloomberg Law
Taking Stock
Bloomberg Best
More Podcasts




Blogs


Global Tech
The Grid
Loot
The Market Now
Political Capital
Tech Deals
Ventured and Gained




Opinion




My Saved



Registration



Sign In



Bloomberg.com



Businessweek.com



Company



About
Blog
Careers
Diversity & Inclusion
News Mission
Philanthropy & Engagement
Press Room
Procurement
Sustainability




Products



Financial Products
Bloomberg Professional Service
Bloomberg Anywhere
Bloomberg Tradebook
Bloomberg Briefs
Bloomberg Indexes
Bloomberg SEF
Service Center
Customer Support
Enterprise Products
Enterprise Solutions
Trading Solutions
Industry Products
Bloomberg BNA
Bloomberg Government
Bloomberg Law
Bloomberg Link
Bloomberg New Energy Finance
Bloomberg Sports
Content Licensing




Bloomberg Anywhere



Mobile Apps



Bloomberg Visual Data






































Security - mParticle











































































































 
mParticleThe customer data platform for every screen.
Security


Security
Protect your data and safeguard consumer privacy
Encrypt and secure data from collection to connection.
Download as pdf







Security begins with data collection via
the mParticle SDK
The mParticle SDK automatically collects anonymous lifecycle data: Advertising IDs (Apple IDFA/Google Ad ID), app version, device data (e.g. OS, OS Version, Carrier), and session information (session start/session end).
Our customers explicitly control what custom events are collected by mParticle’s SDK beyond the aforementioned data points.
All data is encrypted via Transport Layer Security (TLS) for transport to the mParticle data store. TLS v1, TLS v1.1 and TLS v1.2 are supported.
The SDK further ensures security by ensuring that encryption is signed by a specific Certification Authority (CA), which ensures third parties are unable to inspect data packets via proxies.
All server-to-server endpoints require encryption and authentication.







Upon arrival at the mParticle Data Store
All data encrypted via Advanced Encryption Standard 256 bit (AES-256).
All data stored with unique AWS Identity and Access Management (IAM) credentials.
Data resides in its own partition, ensuring your data never co-mingles with data from another customer.
mParticle employees are prohibited from storing any customer data on their workstations.






Access to mParticle systems is controlled and secured
The ability to access internal systems is restricted to whitelisted internal IP addresses.
Only trusted, background checked operations personnel can access customer accounts, with all access logged and available for auditing purposes.
Multi Factor Authentication (MFA) via mobile tokens is required for all mParticle personnel.
No non-employees have access to internal mParticle systems.
No customer data is ever transmitted to employee computers.







User Authentication and Authorization
Role based permissioning is supported (admin, read-only, and custom rights).
Integration partner tiles exposed to clients can be configured to ensure no data is sent
to unauthorized vendors.
Multi-Factor Authentication Supported.







Outbound data is sent securely
All data is sent with the strongest data encryption made available by the partner.
Whenever supported, hashed device and user identifiers are sent instead of raw identities.





 Get Started with mParticle today! Get Started
Get Started with mParticle today! Get Started


Product
Overview
Controls & Filters
Segmentation
Data Enrichment
Redshift Sync
Security

Partners
Join the Platform
Integrations

Resources
Resource Center
Docs
The Periodic Table of SDKs

Company
About Us
Customers
Careers
Contact Us
Press Kit
Blog
News
Privacy
Terms

Insights




Sign up for mobile marketing and analytics insights in your inbox.





  










This iframe contains the logic required to handle AJAX powered Gravity Forms.

Connect With Us
















Get Started


All fields are required******

*My company is a..Current mParticle CustomerApp Marketer/DeveloperMobile Technology VendorAgency/ConsultancyOther*I am trying to reach someone in…SalesDeveloper RelationsTechnology Partner RelationsPR/MarketingHR/OperationsFinanceNone of the above

  










This iframe contains the logic required to handle AJAX powered Gravity Forms.





			CLOSE            


































The Periodic Table of SDK's - mParticle





































































































 
The Periodic Table of App Data SDKsThe top growth, retention and monetization solutions for mobile marketersThe app economy is growing rapidly, with App Annie predicting a 5-year compound annual growth rate of 18% to the point of representing more than $60 billion in consumer spend by 2021. A major factor contributing to this growth is consumer’s insatiable demand for speed and convenience in their “mobile moments”.
Keeping up with this demand is not easy, however, especially given the current dearth of mobile engineering, product, and marketing talent on the market. Fortunately, there’s a burgeoning supply of software-as-a-service (SaaS) solutions that provide app creators with turn-key access to many of the core components needed to build and maintain high-quality mobile experiences.
The Periodic Table of App Data ServicesOn average it’s estimated that apps have 14 SDKs, which stands for Software Development Kits (also known as “third-party libraries”). These SDKs can serve a variety of purposes. There are SDKs for payment processing (such as Cardio, Paypal, Braintree, Stripe, Venmo) and SDKs for user login and authentication (such as Agilebits, Google SignIn, 1Password). Roughly half of the SDKs in apps are marketing and customer experience related, addressing needs such as analytics, attribution, A/B testing and user engagement.
It’s this latter group of marketing and customer experience services that are the focus of our Periodic Table. We hope you find it useful! Be sure to fill out the form below for regular updates.
While app data services often come with their own SDKs , many of them can be implemented through a single API, without the need for standalone libraries. For more on how to do this, visit mParticle.com.
Stay connected to the ecosystemGet weekly updates on what's happening across the mobile marketing landscape and access to exclusive video interviews with mobile growth leaders!


Email*



 Sign Up Now! 










This iframe contains the logic required to handle AJAX powered Gravity Forms.
mParticle Connects the Mobile EcosystemIntegrate & orchestrate your customer data to win the mobile momentmParticle is the customer data platform for every channel, partner, and screen.Trusted by the leading multi-screen marketersLearn MoreCopyright © 2017 mParticle All rights reserved. Terms of ServicePrivacy Policy







Get Started


All fields are required******

*My company is a..Current mParticle CustomerApp Marketer/DeveloperMobile Technology VendorAgency/ConsultancyOther*I am trying to reach someone in…SalesDeveloper RelationsTechnology Partner RelationsPR/MarketingHR/OperationsFinanceNone of the above

  










This iframe contains the logic required to handle AJAX powered Gravity Forms.





			CLOSE            


































Careers - mParticle




































































































 
mParticleThe customer data platform for every screen.
Careers


Join us at the forefront of the mobile ecosystem
Imagine yourself at mParticle.





Benefits to working at mParticle


Full Medical, Dental and Vision



Flexible office hours



Maternity, Paternity and PAWternity leave



Unlimited vacation policy



Delicious snacks & free meals



Commuter discounts



Dog-friendly office



401k Program



Free gym membership




Named “One of the Best Places to Work” 2016 by Crain’s Business Daily
Learn More





Meet mParticle


mParticle’s holiday party named one of the top 8 hottest startup parties in NYC. Rick Ross’ performance may have something to do with it.
Read More




mParticle team members discuss what we’re up to and why it matters.
Watch Now




Check out our CEO Michael Katz’s recent podcast appearance, where he discusses the third wave, mobile and where mParticle is today.
Listen Now




 Get Started with mParticle today! Get Started
Get Started with mParticle today! Get Started


Product
Overview
Controls & Filters
Segmentation
Data Enrichment
Redshift Sync
Security

Partners
Join the Platform
Integrations

Resources
Resource Center
Docs
The Periodic Table of SDKs

Company
About Us
Customers
Careers
Contact Us
Press Kit
Blog
News
Privacy
Terms

Insights




Sign up for mobile marketing and analytics insights in your inbox.





  










This iframe contains the logic required to handle AJAX powered Gravity Forms.

Connect With Us
















Get Started


All fields are required******

*My company is a..Current mParticle CustomerApp Marketer/DeveloperMobile Technology VendorAgency/ConsultancyOther*I am trying to reach someone in…SalesDeveloper RelationsTechnology Partner RelationsPR/MarketingHR/OperationsFinanceNone of the above

  










This iframe contains the logic required to handle AJAX powered Gravity Forms.





			CLOSE            


































Segmentation - mParticle









































































































 
mParticleThe customer data platform for every screen.
Segmentation


Audiences
Orchestrate marketing and advertising
Across channels, vendors and screens.
Go to Docs





Transform raw data into actionable audience segments
Easily build audiences using a combination of first, second and third party data without getting stuck in the engineering queue.








Automatically sync updates, in real-time
Unlike static .csv uploads, audience segments are updated constantly based on user behaviors and journey milestones.



Automatically sync updates, in real-time
Unlike static .csv uploads, audience segments are updated constantly based on user behaviors and journey milestones.





Send audience segments to multiple channels and tools
Build audience segments once and instantly connect to multiple channels including paid advertising, email, push and more.

All Integrations


 Get Started with mParticle today! Get Started
Get Started with mParticle today! Get Started


Product
Overview
Controls & Filters
Segmentation
Data Enrichment
Redshift Sync
Security

Partners
Join the Platform
Integrations

Resources
Resource Center
Docs
The Periodic Table of SDKs

Company
About Us
Customers
Careers
Contact Us
Press Kit
Blog
News
Privacy
Terms

Insights




Sign up for mobile marketing and analytics insights in your inbox.





  










This iframe contains the logic required to handle AJAX powered Gravity Forms.

Connect With Us
















Get Started


All fields are required******

*My company is a..Current mParticle CustomerApp Marketer/DeveloperMobile Technology VendorAgency/ConsultancyOther*I am trying to reach someone in…SalesDeveloper RelationsTechnology Partner RelationsPR/MarketingHR/OperationsFinanceNone of the above

  










This iframe contains the logic required to handle AJAX powered Gravity Forms.





			CLOSE            































Mparticle Inc. Executives, Organizational Chart, Company Profile Information, Contacts | Headquarters, Locations, News   












Submit

ContactCareersLogin

MENUtoggle
Our Difference Research Client SuccessWho We Serve Sales Professionals Marketing Professionals Executives Recruiting/Staffing ProfessionalsSolutions [Column]  ABM & ABS Actionable Intelligence Competitive Intelligence Customer Success & Retention  [Column]  Data Quality & Management Data Sets Integrations Lead Generation  [Column]  Predictive Analytics Sales & Marketing Alignment Targeting & Ranking Knowledge Hub Blog Case Studies Insights FAQsAbout Careers News Pricing

Menu

HomeOur Difference Research Client SuccessWho We Serve Sales Professionals Marketing Professionals Executives Recruiting/Staffing ProfessionalsSolutions ABM & ABS Actionable Intelligence Competitive Intelligence Customer Success & Retention Data Quality & Management Data Sets Integrations Lead Generation Predictive Analytics Sales & Marketing Alignment Targeting & RankingKnowledge Hub Blog Case Studies Insights FAQsAbout Careers News PricingGet a Free ProfileSchedule a DemoRequest PricingContact UsLogin
Home / Companies / Mparticle Inc.


Mparticle Inc.

381 Park Avenue South Suite 815
New York NY 10016 United States
Phone: +1 917-___-____
Fax: 
https://www.mparticle.com





6
Managers




9
IT employees




$2.1MEST.
IT Budget




Mparticle Inc. is a a mobile technology company that develops and manages a mobile data activation platform. It is headquartered in New York, NY.






Sector (Industry)
Services (Consumer Services)


Employees
27


Revenue
$9.6M


FYE
12/31




Breaking news on investment signals




Date
Type
Inside Scoop




2016-11-21
Newly Funded
Topic: Software, Infrastructure.
Mparticle Inc.: Mparticle Inc., New York, NY
Opportunity: The company, which provides mobile solutions, recently received $17.5M in funding.




2016-09-15
Technology Updates
Opportunity: Cloud.
Company: Mparticle Inc., New York, NY
Opportunity: Deployed Softlayer (cloud) in the last 60 days.




2016-06-20
Technology Updates
Topic: Cloud.
Company: Mparticle Inc., New York, NY
Opportunity: Deployed Linode in the last 60 days.







Want full access to this profile and more?
RainKing's clients have access to over 1,500 new investment signals published daily, which provide insights on spending initiatives, pain points, management changes and more from companies around the globe. Interested in becoming a client?
Request a demo
Request a quote




Technologies currently being used

IT
Marketing


Data Analytics/ Databases

Big Data/NoSQL

Data Tools

Web Analytics
DoubleClick FloodlightGoogle Analytics (GA)Google eCommerce Conversion TrackingOptimizelyWebTrends
Data Infrastructure

Cloud Systems
Google Cloud AppsOpscode Chef

Email Hosting
Google (mail server)Microsoft (mail server)

IaaS
Amazon (cloud)Amazon EC2Amazon Web ServicesSoftlayer (cloud)
Enterprise/ ERP

Enterprise Systems Support
Information Mgmt

Content Management
WordPressWP EngineYouTube

Imaging and Graphics
Google AdSense

Search
Information Security

Governance, Risk and Compliance
Sumo Logic
This is just a subset of the full Technolgies being used by this company.
Advertising/ Search

Search Engine Optimization
Google AdSense

Search Marketing
DoubleClick
Analytics

Business Intelligence
Python

Web Analytics
DoubleClick FloodlightOptimizelyWebTrends
Creative/ Content

Customer Experience Management

Website Design
LinkedInButton
eCommerce

Online Retailing
Amazon S3Google eCommerce Conversion TrackingWordPress

Social Commerce
Amazon (cloud)Amazon Web ServicesGitHub
Product/ Brand Mgmt

Marketing Portfolio Management

Mobile Application and Content Services
AndroidApple iOSTwitter
This is just a subset of the full Technolgies being used by this company.



Become a RainKing power-user today!
RainKing's rich data provides clients with a deeper understanding of who will be making – and what will be driving – upcoming investments in IT. Know what your prospects are planning before your competition does, and beat them to the negotiating table.
Request a demo
Request a quote




Org chart of IT decision makers




Lori Magyar
Director, Administration

+1 917-___-____







Sarah Skapik
Director, Creative

+1 917-___-____







Andrew Katz
Chief Technology Officer (CTO) and Co-Founder
___@mparticle.com
+1 917-___-____



This is just a subset of the full Org Chart for this company.


Want access to this and more? Become a client today!
RainKing clients get access to all 615 decision makers in this company's org chart.
Request a demo
Request a quote








Want full access to this profile and more?
RainKing's clients have access to over 1,500 new investment signals published daily, which provide insights on spending initiatives, pain points, management changes and more from companies around the globe. Interested in becoming a client?
Request a demo
Request a quote









To receive a FREE PDF of this company, simply fill out the form below










Get your free company profile




Search





Subscribe to our newsletter



Connect with Us
 





 





 





 





 







 




7700 Old Georgetown Road
Bethesda, MD 20814-6100
1.866.592.7122
contactus@rainkingonline.com


 Sitemap Terms of Use Privacy Policy 


©2017 RainKing








Andrew S. Katz - Chief Technology Officer & Co-Founder at Mparticle, Inc.



























































                      NEWS HOME
                    

Advertising
Board and Executive Moves
Energy
Health Care
Hedge Funds
M & A
Private Equity
Technology








            You have  
            
9 free profiles

              left this month   
			      

                Start Your Free Trial ➤
              








            Hey, we noticed you're a RelSci Pro subscriber! Would you like to view the page there?
            

                View on RelSci Pro ➤
              




























































































































Email







LinkedIn







Facebook







Google+







Tweet







Reddit





Permalink





Andrew S. Katz
Chief Technology Officer & Co-Founder at Mparticle, Inc.



Overview
Relationships Paths
Education Career History Boards & Committees Investments Transactions 


Andrew S. Katz
Chief Technology Officer & Co-Founder at Mparticle, Inc.



 Overview



Age



36
                                  (Born 1981)
                                              




Notable Companies


Mparticle, Inc.

mStyle, Inc.

interCLICK, Inc.




Board Seats



1





Number of Relationships



                This person is connected to 277 people.
              






 Relationships
              See Details




Michael Stephen Katz

Chief Executive Officer & Co-Founder at Mparticle, Inc.




Mike Brown, Jr.

Co-Founder at Bowery Capital Management LLC





Ashley Carroll

Partner at The Social+Capital Partnership LLC




Ted Maidenberg

Co-Founder at The Social+Capital Partnership LLC





Dave Myers

Chief Operating Officer & Co-Founder at Mparticle, Inc.




Scott C. Friend

Managing Director at Bain Capital Ventures LP





David Spitz

Chief Marketing Officer at Mparticle, Inc.




Adam Biehler

Head of Partnerships at Mparticle, Inc.





Laurel Peppino

Head of Talent Acquisition at Mparticle, Inc.




Lori Magyar

Director of Administration at Mparticle, Inc.







See 267 more listings with RelSci Professional.

Start My Free Trial ➤








See 267 More 


 


 Paths to Andrew S. Katz



            Andrew S. Katz          




 You



 Connections via Relationship Science



 Andrew S. Katz






Sync your contacts to see how you can connect with Andrew S. Katz.

Start My Free Trial ➤








See  More 


 


 Educational Background



BS Business Administration, Entrepreneurship 


Babson College

                  Babson College is a private business school located in Wellesley, Massachusetts near Boston. Founded in 1919, the school offers a Bachelor of Science in Business Administration as well as masters degrees in business administration, accounting, management, and finance. Babson’s MBA program has been ranked #1 in entrepreneurship for 19 consecutive years by U.S. News & World Report.                





 Career History



Chief Technology Officer & Co-Founder

                                    2012 - Current                


Mparticle, Inc.


                  mParticle, Inc. operates a cloud-based platform that puts applications and mobile web owners in control of their data assets. Its solutions provide mobile app owners a framework to better solve for data ownership, activation, and attribution. It helps application owners transparency and control over data collection and connection, frees mobile app owners from the chaos of managing numerous integration partners. The company was founded in 2012 by Michael Stephen Katz, Andrew S. Katz, Jason Lynn and David William Myers and is headquartered in New York, NY.                




Co-Founder

                                    2004 - Prior                


mStyle, Inc.






Co-Founder & Chief Technology Officer

                                    2004 - 2011                


interCLICK, Inc.


                  interCLICK, Inc. was provided digital advertising services. The company was founded in 2006 and was headquartered in New York, NY.                




Senior Software Engineer

                                    2003 - 2008                


Jenzabar, Inc.


                  Jenzabar, Inc. provides enterprise software, strategies and e-learning solutions. It offers two kind of higher education ERPs Jenzabar EX and Jenzabar JX. The firm serves private and public institutions, continuing education institutions, consortia, specialized schools, online institutions, and associations and organizations. The company was founded by Ling Chai in 1998 and is headquartered in Boston, MA.                




Vice President-Engineering

                                    Prior                


Yahoo! Inc.


                  Yahoo!, Inc. is a global technology company, which delivers personalized, including search, content, and communications tools on the web and on mobile devices. The company provides a variety of products and services, many of them personalized, including search, content, and communications tools-all daily habits for hundreds of millions of users, on the Web and on mobile devices. The majority product offerings are available in more than 45 languages and in 60 countries, regions and territories. The company's offerings to users include, Yahoo.com is a starting point that brings together the most relevant content and functionality from across the Web, including original Yahoo! content. It offers a majority of these services free of charge to users around the world. Yahoo! Search is available free to users and often serves as the starting point from which they navigate the Internet to find and discover information that matters to them. It provides users with a free search capability, offering rich search results ranked and organized based on relevance to each user's search query. It currently offers Yahoo! Search experiences and applications across connected devices, including PCs, tablets and mobile phones. Yahoo! News provides original, premium, partner, and syndicated news via text, photos, and video to engage users with wide-ranging, up-to-the-minute coverage and analysis into topical news events. Yahoo! Sports serves one of the largest audiences of digital sports enthusiasts in the world. It is anchored by Fantasy Sports, editorial reporting, real-time scores, statistics and breaking news, coverage of the biggest global sports events, and premium college sports coverage through Rivals publisher network. Yahoo! Finance provides a comprehensive set of financial data, information, and tools that helps users make informed financial decisions. It offers mobile solutions, including dedicated Yahoo! Finance iPhone and Android applications and MarketDash for iPad. Yahoo! Entertainment and Lifestyles is a collection of properties focused on emerging trends and information in popular culture, women's issues, and media. Yahoo! omg!, Movies, TV and Music are leading destinations for celebrity gossip, movie, music, and TV premieres, and awards coverage. Yahoo Shine! is targeted to women and provides tips, features and in-depth analysis in areas such as health, fashion, careers and parenting. Yahoo! Video provides original, premium and third-party news, finance, sports, entertainment, and lifestyle video content distributed in contextually relevant experiences across the Yahoo! network. Yahoo! Video includes Yahoo! Screen, a video destination site where videos from across the Yahoo! network are aggregated and watched. Yahoo! Toolbar is a Web browser add-on that conveniently enables users to access and preview Yahoo! Properties and third-party content via applications from anywhere on the Web. In addition to bringing together personalized content and information consumed by hundreds of millions of users, it also provide communications tools to connect the world, include: Yahoo! Mail, Yahoo! Messenger, Yahoo! Groups, Yahoo! Answers, Flickr, Mobile & Emerging Products, IntoNow from Yahoo! and Connected TV, which provides a wide range of communication and social services to users and small businesses across a variety of devices and through its broadband Internet access partners enable users to organize into groups and share knowledge, common interests, and photos. Yahoo! was founded by Jerry Chih-Yuan Yang and David Filo in January 1994 and is headquartered in Sunnyvale, CA.                




Software Engineer

                                    Prior                


Zefer Corp.


                  ZEFER Corp. provides internet consulting and implementation services. The company offers content management, cognitive engineering, security and risk management to supply chain and vendor technologies. the company is headquartered in Boston, MA.                




Chief Builder

                                    Prior                


Something New







 Boards & Committees



Corporate Boards ▾




Director & Chief Technology Officer

                    2012 - Current                  


Mparticle, Inc.

                    mParticle, Inc. operates a cloud-based platform that puts applications and mobile web owners in control of their data assets. Its solutions provide mobile app owners a framework to better solve for data ownership, activation, and attribution. It helps application owners transparency and control over data collection and connection, frees mobile app owners from the chaos of managing numerous integration partners. The company was founded in 2012 by Michael Stephen Katz, Andrew S. Katz, Jason Lynn and David William Myers and is headquartered in New York, NY.                  





 Investments



 Details Hidden


Mparticle, Inc.

                  mParticle, Inc. operates a cloud-based platform that puts applications and mobile web owners in control of their data assets. Its solutions provide mobile app owners a framework to better solve for data ownership, activation, and attribution. It helps application owners transparency and control over data collection and connection, frees mobile app owners from the chaos of managing numerous integration partners. The company was founded in 2012 by Michael Stephen Katz, Andrew S. Katz, Jason Lynn and David William Myers and is headquartered in New York, NY.                





 Transactions



 Details Hidden



                  Mparticle, Inc. raised money in a private placement transaction                                  




 Details Hidden



                  Mparticle, Inc. raised money in a private placement transaction                                  




 Details Hidden



                  Mparticle, Inc. raised money in a private placement transaction                                  




 Details Hidden



                  Mparticle, Inc. raised money in a private placement transaction                                  





 Other Affiliations




              Andrew S. Katz is affiliated with
                            Mparticle, Inc., mStyle, Inc., interCLICK, Inc., Jenzabar, Inc., Yahoo! Inc., Zefer Corp., Something New, Mparticle, Inc..
            





You've reached your 10 free profiles limit this month.
Upgrade to RelSci Pro today to enjoy unlimited article views and much more!

Start My Free Trial  ➤

Still not convinced? Check out our full listing of features here.












Are you a RelSci Pro Subscriber?

Login to RelSci Pro 
                        ➤


Not a Pro Subscriber? Log in here to manage your alerts









 Keep me signed in.
        

Login  ➤



        Forgot your Password?
    

























 I have read the LexisNexis terms & conditions




Sign Me Up  ➤


















mParticle SDK Reference











        NAV
        





iOS
Android
Javascript
Unity











Getting Started
There are a few key steps to get going with the mParticle platform:
1. Plan
“It’s not the plan that’s important, it’s the planning.” - Dr. Gramme Edwards
Planning app data collection is critical for understanding user behavior and tracking against your business objectives so that you can make informed decisions.  And while the output of a planning process - such as a data collection plan - is very important, often the planning process in and of itself is a crucial exercise for getting clear on your business objectives and testing some basic assumptions about what you want to achieve with your app.  Proper Planning is a key best practice for app owners regardless of what platforms you use and is really a business exercise, not a technology exercise.   For some more thoughts from us on how to properly plan for mobile app data collection see the Planning Best Practices article.
2. Setup your workspace in mParticle
Select your App in the top left corner and click the Workspace gear to create a new workspace.  You can then define the inputs that your workspace supports - iOS, Android, tvOS, Web, etc. in order to obtain your mParticle Key and Secret to be used in your app with the mParticle SDK.
3. Instrument your app using the mParticle SDK
mParticle customers have a wide range of data collection requirements and all are supported via our SDK.  On the easy / basic end of the scale you can start with a few lines of code which gives you app lifecycle events such as installs & upgrades, session starts & ends, background/foreground, app starts & stops, crash reports, and network performance.  If you have a data rich app and want to fully instrument, on the more advanced end of the scale you can use our flexible SDK to fully instrument all your custom events, navigation events, push events, and literally anything else that goes on in your app and for which data collection is important to your business.
Regardless of how basic or advanced your needs, it is still important to go through some degree of planning as we describe in Step #1 above.  Your goal should be to make the app developer’s instrumentation job as mechanical as possible so when it comes time to instrument your app, key considerations such as which events should be instrumented and what their naming conventions should have already been worked out.  Your developer will thank you!
mParticle provides a handy tool called the Live Stream that helps you validate that your app is properly instrumented and sending data to mParticle correctly.  The Live Stream is a real time event viewer that displays data as it’s arriving into the mParticle platform (and as it’s being forwarded out of the platform if you are forwarding to an output event service):

In the Live Stream you can click into a message to inspect its contents, filter for inbound and/or outbound messages, and perform additional message filtering & inspection tasks.
4. Service Setup
If you want to forward data to an output event service, we recommend that you review the documentation for each service within this documentation set before you actually instrument your app, since the services you select may influence your instrumentation strategy.  But for many of them you can simply enter your API key, enable the service, and you’re off to the races.  Again, depending upon how you want to use a service, it may influence your instrumentation strategy.  If you are to get the most out of the service, we recommend that you incorporate your service requirements into your planning and instrumentation steps.
Once you’re ready to begin forwarding to a service, you can simply navigate to the mParticle Setup -> Outputs, select the service from the directory, configure the required settings, connect your input workspace to the service and enable.  No coding or additional SDKs needed.
Each service supported by mParticle has its own topic in the knowledge base.  If you don’t see one that you are interested in, or have questions about a service that we currently support but don’t see the answer in our knowledge base, please drop us a line at support@mparticle.com.  We are continually adding new services and every one that we add is based upon customer requests!
For more on service configuration options, including how to sample and/or filter data that gets forwarded, click Connections to connect your input workspace to the output configuration.
5. Submit your app to the app store
Submit your app to the respective app store and let’s get to business!
6. Extra Credit!
Of course, the mParticle platform offers additional powerful features that we haven’t touched upon here in this brief getting started section.  Depending upon your needs, here are some additional important capabilities:

Audiences - Create user audiences from literally any mobile data and instantiate those audiences in key partners such as Facebook (as custom audiences), media partners, push notification partners, email marketing partners, and others.  Create your audiences once and engage with your users everywhere.
Activity Reports - Allows you to view metrics around your event data including active users, installs, sessions and more.
Account Management - Setup and manage users, manage your subscription plan, and manage your billing.
Data Replay - Send historical data to almost any endpoint.

Planning Best Practices
It is critical to spend time up front planning out your data capture strategy.  This gets to the very core of what it is that you are trying to accomplish with your app.  How well you have aligned your data capture to your business objectives will make all the difference when it comes to being successful!  We recommend the following basic planning steps:

Get clear on your business objectives
Identify your key events
Name your events and attributes
Determine your approach for managing user identification
Account for privacy

1. Get clear on your business objectives
First things first.  Let’s start with your business.  It is important to establish clearly what your business objectives are along with the corresponding critical metrics.  This seems obvious but it is a due diligence step that sometimes gets taken for granted.  What are you really trying to accomplish with your app and what are the key metrics that tell you if you are being successful?  What do you want to do with your data?  Do you need to forward your data to integrations such as analytics firms, push notification providers, or others?  If so what data do you need to forward to them in order to fully enable the desired integration?  Do you need to segment your users?  If so based upon what?  Do you need to do some form of funnel analysis?  Think about your business holistically, on an end-to-end basis.
2. Identify your key events
What are the events that are critical to your business?  Oftentimes it helps to classify events by major type, and when you instrument your apps you will need to pass an event type along with the event name and attributes.  For example, depending upon your business model some of the event types and their respective events below will certainly apply to you, while others may not:



Event Type
Description
Sample Events




Transaction
Any events which are part of a transaction workflow starting with item selection
Purchase, Subscribe, Upgrade, AddtoCart, Bid


Search
Any event where users input criteria to find content/answers
Search, Comparison Search, Voice Search, Tag Scan


Navigation / Content View
Events which indicate a user click stream or content consumption
Page View, Listen Music, Video View, Category View, Menu Selection, Tab Selection, Back Button


Social
Any action where users share content with others; note that sharing is not limited to social media
Post, Rate, Tweet, Share, Attach, Email


User Preference
Any event which creates personalization for the user; this includes registration, saving/labeling content items, creating profiles, setting application functions, permissions.   Important: This should not be confused with ‘interests’ – while personalization can reveal preference, preferences (or interests) can also be reflected via search, purchases, navigation, etc.
Favorite, Rate, Bookmark, Tag, Register, Grant Permission, Profile Setting, Connect Friends


Location
Events which indicate where a user is located or interacting physically
Check In, Geo Fence, Navigate GPS


User Content
Events where users create content of any sort
Create Task, Compose, Upload, Capture, Record, Scan, Save



Start with your critical events.  Although you can certainly instrument every single thing that happens in your app, you should focus on those things that really have business relevance.
Once you’ve identified your critical events, establish your funnels.  A funnel is simply a series of steps, for our purposes identified as events, that a user will take prior to accomplishing a critical business event in your app.  This becomes important later on for understanding user behavior, accomplishing funnel analytics, and ultimately making data-driven decisions when it comes to app design and user workflow.  Depending upon the scope of your app, you may have one to many funnels that you will need to instrument.  Explicitly documenting your funnel(s) is also a good additional quality check to make sure that users have a straightforward path to conversion and that you haven’t forgotten any key event steps along the way.
3. Name your events and attributes
The data ingested into mParticle is generally decomposed into events and attributes.  Events are the name for an action performed by a user such as Purchase, Subscribe, Upgrade, AddtoCart, or Share.  Attributes are name-value pairs that represent the event details.  For example, an event could be AddToCart and the attributes could be SKU:1234, color:blue, price:75.35.  This corresponds to the user adding an item to the shopping cart that has a stock keeping unit (SKU) of 1234, a color of blue, and a price of $75.35.
It is worth noting a couple best practices when it comes to event and event attribute naming:

Keep all event and attribute names concise and human readable; this makes your instrumented code much easier to review, makes your reporting much easier to read, and in general constitutes a much more sustainable business practice.
Keep your event names general; attributes are where the details of the event go.  Some of the integrations have restrictions on the number of events and/or attributes that can be forwarded that you may need to be aware of in naming your events and attributes.  Refer to the individual integration sections for details.
    
Adjust
Amazon Mobile Analytics
Amplitude
Appboy
AppsFlyer
Apteligent
Facebook
Flurry
Google Adwords
Google Analytics
Google DoubleClick
Intercom
Kochava
Leanplum
Mixpanel
Nanigans
Oracle Bluekai
SFDC Email
SFDC MobilePush
TapCommerce
Tune
Webtrends



The mParticle SDK imposes a length restriction of no more than 256 characters on the following SDK fields:

Event name 
Event attribute key
Event attribute value
User attribute key
User identity value

Attribute restrictions:

The maximum length of a user attribute value is 4096 characters
100 event attributes (key/value pairs)
100 user attributes (key/value pairs)
1000 entries can be included in a user attribute list
The maximum length of a single entry in a user attribute list is 512 characters

4. Determine your approach for managing user identification
It is important to identify the possible ways that a user will come to your app and your web site, how you will identify the user, and how your app developer will implement the mParticle SDK to ensure maximum alignment between events and identified users.  Explicitly planning for this is important because not considering all user paths can lead to a larger amount of event data that is not linked to a specific user id.  
5. Account for privacy
Depending upon your app functionality and data capture, several privacy considerations can come into play when planning your implementation.  At a minimum you should consider the following:

Is your customer privacy policy up to date?  Where is it located / how can it be accessed by customers?
Will personally identifiable information (PII) be captured?  Capturing PII invokes a host of considerations when it comes to consumer privacy.
Are you in compliance with the Children’s Online Privacy Protection Act (COPPA)?  If you are collecting information from users under the age of thirteen, you must comply with the FTC COPPA.  
What are your data retention requirements?  Exactly what data should be retained for exactly how long?

Planning Artifacts
We’ve seen a wide range of planning artifacts that mParticle customers use as an output of their planning process.  Often the best tool is the simplest, such as an excel or Google docs spreadsheet that identifies data collection elements and maps to their explicit naming conventions that should be used by the app developer when instrumenting the app.  If you need help getting started here we’re always happy to assist - drop us a line at support@mparticle.com.
Glossary
The mParticle glossary provides definitions of common and important terms relating to the mParticle platform.



Term Name
Definition




Audience
A segmented list of users that is based on defined logic


Audience Output
Data output to a service provider in the form of segmented user lists


Configuration Type
Defines how the configuration will be used (example: app, feed, audience, data warehouse)


Configuration
Settings that connect to the mParticle platform (example: API keys, secret)


Connection
The sending of data from an input to an output


Connection Settings
Configurations that determine how data will send from an input to an output


Connection Tools
Optional tools on the input to output configuration flow that control how data is sent


Data Direction
Describes the flow of data for a connection on the mParticle platform (input or output)


Directory
The directory provides a list of all services integrated with mParticle. You can search for a service by name, view all, new, or added services, filter by selecting a category or you can filter based on Configuration Type - All, Event, Feed, Audience, or Data Warehouse.


Environment
Describes development or production data


Event Output
Data output to a service provider in the form of raw event data


Feed Provider
A partner vendor who supports sending Data Feeds into the mParticle platform


Feeds
Data inputs from partner vendors, AKA Feed Providers


Input
Data that is sent into the mParticle console via a customer’s own Platforms or configured partner Feeds


Organization
Parent of an account, typically used by development shops and large enterprise customers


Platforms
Data inputs from a customer’s own properties, including iOS and Android apps, web and tvOS


Service
A partner on the mParticle platform


Workspace
mParticle organizes your apps and services in groups called “Workspaces.” Each Workspace includes one of each type of app (ie: iOS, Android, tvOS) and allows you to add additional services to collect and connect your data.



Activity
The Activity section of the mParticle platform allows you to view information about your event data.   The following types of reports are available:

Activity Overview
System Alerts
Event Forwarding
User Insights

Activity Overview
The following types of activity information are available:



Activity
Description




Active Users
Displays the number of active users.


Installs
Displays the number of installation events.


Sessions
Displays the number of active sessions.


Average Session
Displays the average length of a session.   In additional to individual information on the selected apps and platforms, the average session length across all selected values is also displayed.


Data In
Displays the number of event messages received.


Data Out
Displays the number of event messages sent to the configured service.   This tab allows for further filtering by Input or Output Service.


Alerts
Displays the number of alerts which occurred when forwarding data to an output service.   Only the Fatal alert type is displayed.   The date ranges 60 days and 90 days are not available for the Alerts tab.  This tab allows for further filtering by Input or Output Service.


Revenue
Displays total revenue.   This tab is only shown if non-zero revenue stats have been received.



The following filters are available for all activities to further specify the information displayed:

Date Range - You can select one of the following date ranges - 24 hours, 7 days, 30 days, 60 days, or 90 days.

60 days and 90 days are not available for the Alerts tab


Environment - You can select to include either Production or Development data.

Summary information is included in each activity tab displaying a percent delta of the activity from the current time period to the previous time period, along with an activity count.
Additional filter capabilities:

Input - Select which input you want to view the data for.  The default is All.
Output - When viewing the Data Out or Alerts tab and have selected a single input, all outputs are shown by default.  You can further select an output.
Fatal Error - When viewing the Alerts tab and have selected a single input and a single output, you can further filter by Fatal Errors.

Below the graphical data for all activity tabs, the following technographic information is displayed:

All Operating Systems

The percentage of users for each supported platform for the selected app(s) which has received data is displayed.  The total number of sessions is also shown.
For the iOS and tvOS platforms, the % of Jailbroken sessions is displayed
For the Android platform, the % of Rooted sessions is displayed


Platform Versions

The percentage of customers on each version of the supported platforms which have received data is displayed.   The latest 5 app versions by session count are displayed.  App versions with less than 5% share are displayed as “Other”



System Alerts
The System Alerts report provides information related to any issues forwarding data from mParticle to your connected services.  The following alert types are supported:

Fatal - An alert of this nature is serious and requires attention.
Warning (Retriable) - An alert has occurred however the system will retry the action but the alert may become fatal if not resolved.
Informational - An alert has occurred which is for information purposes only and does not require attention.

There are several filters which can be used to generate the Alert Report which are:

Date Range - You can specific a single day to look at system alerts.
Environment - You can select to include either Production or Development data.

Once you have specified your filter values, the report displays the number of alerts in each alert type category and provides all active output event service(s) with counts and details of alerts for a 12-hour period.  You can navigate across the selected day or to a different day by selecting the left and right arrow buttons on either side of the date/hour display.
The following alert details may appear in the report:



Alert Detail
Description
Integrations




Error Parsing SDK Version
The SDK version in the event batch is invalid.
Kochava


Event Arrived Late
A message arrived which is older than can be supported by the integration and will be discarded.
Adjust, Mixpanel


Feature Unsupported by SDK Version
The forwarding of events is not supported by the current SDK version - A later version of the mParticle SDK is required.
Kochava


Identifier Too Long
The Device ID or Customer ID exceeds the length which the integration supports.
Leanplum


Invalid Credentials
A token cannot be obtained due to invalid credentials.
AgilOne, SFDC Email


Missing Android ID
Android ID is required, and is missing in the event batch.
Appboy, Fiksu, Leanplum


Missing App Info
Application Info is required, and is missing in the event batch.
AgilOne, Appboy, Google Adwords, Google Analytics, Kochava, Krux, Oracle BlueKai, Tune, Webtrends,


Missing AppName
Application Name is required, and is missing in the event batch.
Google Analytics, Webtrends


Missing Device Info
Device Info is required, and is missing in the event batch.
Appboy, Apsalar, Google Adwords, Kochava, Krux, Leanplum, Oracle BlueKai, SFDC Email, SFDC MobilePush, Webtrends


Missing Event Name
Event Name is required, and is missing in the event batch.
Amazon Mobile Analytics


Missing Google Advertising Identifier
Google Advertising Identifier is required, and is missing in the event batch.
Facebook Atlas, Google Adwords, Krux, Leanplum, Nanigans, Oracle BlueKai, TapCommerce, Tapstream


Missing Google Advertising Identifier and Android ID
Google Advertising Identifier or Android ID is required, and neither is present in the event batch.
Adjust, AppLovin, Leanplum, Quantcast


Missing Identity
A required identity (i.e. Customer ID, etc.) is required, and is missing in the event batch.
AgilOne


Missing Identity and Device ID
An identity and device ID are required, and both are missing in the event batch. For Appboy, a Customer ID and Push Token are required.  For Webtrends, a Customer ID and either IDFA or IDFV (iOS) or Google Advertising Identifier or Android ID (Android) are required. For Localytics data to be forwarded server side, the Customer ID or Other User Identity must be set, or the Google Advertiser ID or Android ID (Android) or IDFA (iOS) is required.
Appboy, Amplitude, Localytics, Webtrends


Missing IDFA
IDFA is required, and is missing in the event batch.  The IDFA can be turned off by the end user by turning on ‘Limit Ad Tracking’ on their iOS device in Privacy Settings.
Applovin, Fiksu, Facebook Atlas, Google Adwords, Leanplum, Nanigans, Oracle BlueKai, Quantcast, TapCommerce, Tapstream


Missing IDFA and IDFV
IDFA or IDFV is required, and both are missing in the event batch.
Adjust, Appboy, Krux, Leanplum


Missing IDFV
IDFV is required, and is missing in the event batch.
Leanplum


Missing IP Address
IP Address is required, and is missing in the event batch.
Apsalar, Facebook Atlas, Google DoubleClick, Quantcast


Missing OS Version
OS Version is required and is missing in the event batch
Apsalar


Missing PackageName
Package Name is required, and the application is not presenting one in the event batch.  For Tune, you can override the Package Name in the configuration settings.
Applovin, Apsalar, Google Adwords, Quantcast, Tune, Urban Airship


Missing Required Setting
A required setting is missing.
Appboy, Appsflyer, Fiksu


Missing User Agent
User Agent is required, and is missing in the event batch.
Facebook Atlas, Google DoubleClick


No Route Available
The source of the event batch is not supported.  This is used to indicate that the source of the event batch was not from a native client with the extended SDK (appropriate kit included) or the mParticle server to server API.
Appboy, Urban Airship


Retry Count Exceeded
This indicates that the data has repeatedly been attempted for delivery, but has exceeded the retry limit.
Any


306-Unknown
This may occur in cases of network issues which may be retried.
Any


400-Bad Request
This indicates an error with the request sent to the integration and will not be retried by default.
Any


401-Unauthorized
This may indicate a poor response from the remote server.
Any


403-Forbidden
This may indicate the credentials used to authenticate with the remote server are incorrect.  Check the configuration settings to ensure a valid value was entered (i.e. API Key, Username, Password, etc.).
Any


404-Not Found
This may indicate an issue on the remote server (i.e. if DNS changes are not observed fast enough).
Any


408-Request Timeout
This indicates a timeout occurred in sending data to an integration.  A timeout will be noted as a Warning and retried. If the retry limit is exceeded, the timeout will be classified as Fatal.
Any


409-Conflict
This may indicate an issue with the request to the integration or the remote endpoint.  The request will be dropped.
Any


413-Request Entity Too Large
This indicates the request was too large for the integration and it will not be retried.
Any


414-Request-URI Too Long
This is similar to 413, but for a different portion of the request, and it will not be retried.
Any


500-Internal Server Error
This indicates that there is a server error, and will be retried.
Any


502-Bad Gateway
This usually indicates a temporary network glitch or configuration issue on the remote endpoint which may resolve itself.  This type of alert will be retried
Any


503-Service Unavailable
This is similar to 500, indicates a server error, and will be retried.
Any


504-Gateway Timeout
Usually a temporary network glitch or configuration issue on the remote endpoint; will usually resolve itself, and will be retried.
Any


525-SSL Termination Error
This may indicate an issue with the SSL configuration, but may also be seen during a network outage, and will not be retried.
Any



Event Forwarding
The Event Forwarding report provides information on your app’s incoming event data and the data that is forwarded to enabled output event services. This is where you can verify how much data mParticle captured per event, and how much data was sent downstream .  If multiple accounts are enabled for an integration, the data sent to each account will be shown separately. We recommend checking this report if you notice any discrepancies in your vendor dashboards. 
There are several filters which can be used to generate the Event Forwarding Report which are:

Date Range - You can specific a single day to look at system alerts.
Environment - You can select to include either Production or Development data.
Input - You can select which input you want to view the data for.

Once you’ve specified your filter values, the report displays a daily summary of events.  It provides counts for each message type and event name, along with the inbound and outbound counts for each enabled service.  By default a summary of data is shown, you can also select a specific hour to display hourly data.  You can navigate across different days by selecting the left and right arrow buttons on the day/hour setting.
You may notice deltas between an inbound data count and an outbound data count. There are a few reasons these deltas can occur, below are a few things to review that can cause deltas:

Did you enable/disable the service on the date in question?
Are you using data filters?
Is the message type not supported by the integration?
Have you chosen configuration settings that exclude certain message types?

User Insights
Once your first-party app data is available in mParticle, we enrich it with data from 3rd party data providers such as Datalogix to promote a deeper understanding of your app users. By appending 3rd party data to an app’s existing user data, mParticle allows app owners to discover:

Who their most engaged users are, including demographics, brand preferences, interests & hobbies etc.
What data points are common among the most valuable users in order to improve user acquisition and retention strategies
Which brands app users are most loyal to in order to create sponsorship and cross-promotional opportunities
How to improve scalability and performance of desired KPI’s

mParticle supports 3rd party data in the User Insights report and in your audience definitions.
User Insights Report
The User Insights report will be updated daily using the last 30 days of app data. 
The following categories of performance stats are shown in the report:

Overlap - This tells you the reach of a data segment within your current user base.
Engagement Lift -  mParticle has selected 3 common KPIs that represent how users interact with your app in general: Session Per User, Median Session Duration, and Average Revenue Per User.
Goal Event Lift - Other than the 3 general KPIs we’ve selected, you can pick up to five custom events that you deem important, such as in-app purchases, social shares,  account creation, etc.

Each row in the report is a segment, and it shows how many app users this segment reaches as well as lift percentage on various KPI metrics.  The top 5% are shown in green and the bottom 10% are shown in red.
Building Audiences with 3rd Party Data
mParticle allows you to combine your app data with 3rd party data in your audience definitions.  Refer to the Audiences section for general information for building audiences.  The steps for adding a 3rd party segment to your audience definition are:

Select 3rd Party Data as the type
Select the Data Provider (i.e. Datalogix)
Navigate through the 3rd party data provider data hierarchy to select the 3rd party segment to include in your audience definition.  


Audiences
When clicking Audiences from the left navigation, a listing of your audiences is shown separated by Single Workspace and Multi Workspace.  The following metrics are displayed about each audience:

Size
Adds
Drops
Volatility
Connected Outputs
Created By
Last Updated
Status
Actions

Audiences Overview
The mParticle Audience Manager allows you to define audiences and connect them to integrations for the purpose of engaging with your users.  This can be very powerful when it comes to user engagement and monetization scenarios.
We will illustrate several basic Audience Manager scenarios and then delve into the details.
First example scenario: drive user engagement.  Let’s say you want to engage with users that have recently installed your app but are only lightly engaged users.  Your objective is to drive higher engagement and convert those new users to high lifetime value users.  You want to accomplish this across several different messaging mediums, in this example push notification and email.  Therefore your audience qualification criteria is that the user has installed your app in the last 72 hours and has less than three sessions.  With Audience Manager, you can easily and visually define this audience and then configure audience integrations to push notification and email end points - in this example, let’s use Kahuna for push and Mailchimp for email.  Once you configure the respective integrations in the Audience Manager, mParticle instantiates a corresponding audience in Kahuna and updates the corresponding email marketing list in Mailchimp.  No coding is necessary.
Second example scenario: drive app downloads. As the second scenario, let’s use an app install objective.  You want to find more users like your currently highly engaged users and run an app download campaign in Facebook against that target audience.   You start by defining your highly engaged users using whatever criteria is important to you.  You may define this from lifetime value metrics, session activity, event activity or literally any other data points ingested into the platform.  Once your audience is defined in Audience Manager, you configure the Facebook integration and corresponding custom audiences are defined in your Facebook account.  From there you can leverage those custom audiences like any other custom audience in Facebook.  In this example, because we want to target users that look like our highly engaged users, we will create a Facebook lookalike audience from our highly engaged user audience and run a Facebook app install campaign that targets that lookalike audience.  Later on in this article we will provide a more detailed Facebook example.
The two basic scenarios above are simply several among many Audience Manager possibilities leveraged by mParticle clients.  If you have a specific scenario in mind give us a shout at support@mparticle.com and we’d be happy to provide some tips!
Effectively leveraging the capabilities of Audience Manager entails the following basic steps:

Capture Data
Define Use Case
Create Audience
Specify Audience Criteria
Connect Service

Each of these is described in detail in the following sections.
Capture Data
Audience Manager is the most flexible audience builder tool on the market today - it allows you to define your criteria and build audiences from literally any of your data ingested into the platform.  Data is ingested into the platform from the following sources:

Mobile Apps
Feeds
Server to Server

When you fully instrument your app using the mParticle SDK, you are sending data from your Mobile Apps to the mParticle platform.  mParticle also has the ability to enrich that data stream with third party data sources in addition to clients’ own data.  For example, in addition to sending your Mobile App data you may want to send in data that is not collected in the App and have the mParticle platform match the data based upon a user identifier, and then leverage the capabilities of Audience Builder to create audiences based upon this superset of data.  Examples of data sent server side might include CRM data, purchase / revenue data from other non-mobile channels, and so on.  Making sure all data is captured is important for audience creation as that is the first step.
If you need to enable server to server data ingestion, please contact us at support@mparticle.com.
Define Use Case
The second step in using Audience Manager is fleshing out your segmentation and engagement strategies.  What user audiences are important and why?  How will you engage and/or monetize each user audience?  How will you evaluate the effectiveness of this strategy, and what audience definition and engagement strategies do you anticipate will need to be adjusted with your learnings?  This really constitutes the planning activity that will drive your implementation of Audience Manager.  
It is important to validate your use cases against your data capture to ensure that you are actually capturing the data needed for your use case!
Create Audience
When you first create an audience you must specify if it will be a single workspace or multi workspace audience.  A single workspace audience includes data from a single workspace, however a multi workspace audience allows you to combine data across your workspaces into a single audience definition.  In addition, you can also include any added feeds to your audience definitions.
The example audience for this section will be a New Users Low Engagement audience using the single workspace mP Traveler across all supported platforms.  
The criteria will be all users who have installed the app in the last 72 hours and have less than 3 session with the same time period and the audience will be connected to send to Facebook.
Below are the steps to create an audience:

Click Audiences from the left navigation
Click New Audience
Enter the Audience Name and optionally an External Audience Name.  The external name can be displayed in place of the name to ensure data confidentiality. We will auto fill the External Name, unless you specify a value.  
Select the Configurations to Include by checking the Platforms and Feeds for which data can be used in this audience definition.  
Click Create

Specify Audience Criteria
The scope of data that is evaluated by your audience criteria is dependent upon:

The configurations you have selected 
The amount of data the mParticle platform has available for the configurations

Audience Manager will incorporate all input data ingested from your app, limited by the data storage limit of your current  subscription plan.
Now that you have created an audience, it’s time to add to the audience definition.  Follow these steps to add criteria to your audience definition:

Click Add Criteria
Select the type of data to be used in the audience definition
 
If you have selected both Platforms and Feeds, you will need to specify which one to use in the audience criteria.
Specify additional qualifying parameters (i.e. attribute value, recency, frequency, platform version, build version, etc.)
Click Done
Optionally add multiple criteria to the audience by adding and/or/exclusive criteria to the definition and click Done
Once you have completed the definition of your audience, you can either elect to Save or Activate the audience. 
    
Save - saves your audience definition, but does not activate the audience for population
Activate - activates the audience and it will start populating with users and be available for connecting to end points
In this example, we will go ahead and activate the audience by clicking Activate



Below is as screen shot showing the New Users Low Engagement audience definition.

On Audience criteria: the possibilities for audience definition within mParticle are endless - at the end of this article we explain more about the way data is organized in Audience Manager and the different criteria filtering capabilities that you can utilize for exceptionally flexible and granular audience creation.
Connect Audience to Output Audience Service
The next step is to connect the audience to the service(s) where you want to ship your audience to.  A listing and overview of currently supported audience integrations is located here.  For this example we will forward the New User Low Engagement audience to Facebook.
Follow these steps to add the audience integration:

Within the Directory, select the Facebook tile and click Add Facebook to Setup.  
Check the Output Audience Integration Type and click Add to Setup.  
On the Setup screen, Facebook will be added to the Output Audience Configuration section
Select the Facebook configuration and click Configure to display the Audience Configuration form
Enter a Configuration Name and the specific Facebook audience settings.  
Click Save


Now that you have configured the Facebook audience configuration, follow these steps to connect the audience to the Facebook output audience service:

Select the audience you want to connect.  In this example, we will select the New Users Low Engagement audience under Single Workspace
Click Connect
Click Connect Output to display a list of configured output audience services
Select the Facebook service
Select the Configuration Name of the Output Facebook configuration
Specify the Facebook specific connection settings
    
For this Facebook example, you can specify the user matching criteria: emails, Facebook IDs, IDFAs, and/or Google Advertising IDs. A Facebook custom audience will be created for each matching criteria that you specify. In the example we will leave the defaults. 



Click Add Connection

For the Facebook service specifically, once you complete your connection, you will see audiences in your Facebook Ad Manager Account as custom audiences within a couple of seconds:

Once your audiences are created and configured, they will be listed in tabular form in Audience Manager with stats about each audience:

Size
Adds
Drops
Volatility
Connected Outputs
Created By
Last Updated
Status
Actions

Bulk Audience Connections
If you have defined a large number of audience that you want to send to an audience configuration, you can establish the connections for many audiences at once, rather than doing them one at a time.


Navigate to Setup > Outputs and select Audience Configurations.


Select Connect Audiences to the right of the Audience Configuration you want to connect audiences to.



Select the audiences you want to connect and click Next.



Choose your settings. The same settings will apply to all audiences. Click Connect.



You will see a status message showing all successful audience connections. If any audiences cannot be connected, error details will be shown.
Selecting Data Criteria
Audience Manager organizes data into major categories in order to make it easier for you to find and select your criteria.  Every time you add a new criteria, you begin by choosing one of the following major data categories:

Events
eCommerce
Users
Crashes
Installs
Uninstalls
Sessions
Upgrades
Attribution
Screen Views
3rd Party Data

Depending on the category selected, you can also specify attributes in your audience definition.  You can search for attribute values by entering a search term into the text box.  If there is a match, at most 10 results will be shown and you can further refine the list of attribute values by adding additional characters to the search term.  Recency & frequency along with app & build versions can also be included in the audience definition.
Event Data
Event Data represents the “heavy lifting” of app instrumentation.  All custom events that you have logged will be available here.  When you select your event data criteria, you can simply include the event name, or you can keep filtering the criteria down to attribute name and values, recency and frequency, and event app version and app build version.  The criteria drop-downs will dynamically populate based upon the app data that has been sent in by your apps - so for example any custom event names that you have will automatically populate in the criteria drop downs.
Only an event name is selected:

More granular event data is specified to include attributes, recency and frequency (JFK Airport at least once in the last 30 days):

eCommerce Data
Similar to event data, all eCommerce events that you have logged can be used as part of your audience criteria. Below are some of the possible choices:

Shopping - Cart Level
    
Purchase
Cart Abandonment


Shopping - Product Level
    
Add to Cart
Remove from Cart
Purchase
Refund
Product Detail
Item Abandonment


Promotions
    
View
Click


Impressions
Product Bags

User Data
User data represents data specific to users.  Using Audience Manager, you can include user data in your audience definition criteria by including:

User Attributes - This must be explicitly instrumented by the app developer using the mParticle SDK.  
User Attribute Lists - This must be explicitly instrumented by the app developer using the mParticle SDK.  
Lifetime Value (LTV) - This must be explicitly instrumented by the app developer using the mParticle SDK.
Location - This information is automatically detected and captured by the mParticle SDK if location tracking is enabled.
Technographic information such as Device, Operating System (OS), and Carrier - This information is automatically detected and captured by the mParticle SDK.

Crash Data
With Audience Manager you can include app errors as part of your audience criteria.  You can select the types of crashes:

All
Handled
Unhandled (crashes) 

You can further specify recency & frequency along with app & build version.
Install Data
With Audience Manager you can include install data as part of your audience criteria.  You can specify the time frame of the install.
You can further specify app & build version.
Session Data
With Audience Manager you can include session data as part of your audience criteria.  You can specify the session frequency and recency.
Upgrade Data
With Audience Manager you can include upgrade data as part of your audience criteria.  You can specify upgrade recency.
You can further specify app & build version.
Attribution
With Audience Manager you can include attribution data as part of your audience criteria.  You can select an Attribution Type:

Attributed Install
Unattributed Install

If you select Attributed Install, you can further qualify the criteria by specifying the following additional properties:

Service Provider
Campaign
Publisher

Screen Views
With Audience Manager you can include screen views as part of your audience criteria.  
You can further specify recency & frequency along with app & build version.
3rd Party Data
Refer to the 3rd Party Data topic for additional details.
Multi Workspace Audiences
If you have multiple workspaces in your account, you can combine data received from these workspaces to create more complex audience definition.   When you first create an audience, you must specify if it is a Single or Multiple Workspace audience.  
The Audience Manager is a very powerful and flexible tool for taking your raw data and creating actionable audiences.  If you have any questions about Audience Manager please drop us a line at support@mparticle.com.
Audience Sharing
Audience Sharing is in beta testing. If you would like to enable audience sharing in your mParticle account, please contact your Success Manager.
Audience Sharing lets mParticle clients share audience data with each other. 
There are two basic use cases for Audience Sharing:


Sharing an audience with a media platform to efficiently target campaigns.
mPTravel wants to run a retargeting campaign for their web app on the mPMovies media platform. Since both are mParticle clients, mPTravel can share the retargeting Audience they have created with mPMovies, who can then use that audience to determine which users to target with ads for mPTravel.


Mutually sharing audiences with a related app to allow both parties to expand their user base.
mPTravel and mPRestaurants both target users interested in travel and entertainment. Since they are both mParticle customers, they agree to share audiences with each other, so that each can target the other’s users.


Any Audience Sharing arrangement has two parties:

The Initiator offers to share one or more of the audiences they have created in mParticle.
The Receiver gains access to the shared audience in their own mParticle dashboard. In order to receive audiences, you must opt in.

Either party can end the arrangement at any time.
Opt In to Receive Audiences
To be able to receive audiences, navigate to Audiences in the Dashboard, click P2P Audiences, and turn on the Receiving switch.

You will be prompted to accept the sharing terms and conditions, and upload a PNG file of your company logo.
Share an Audience
To share an audience, from the Audience page, under P2P Audiences > Shared, and click Share Audience.

Select the audiences you want to share and the mParticle customers you want to receive them. Only activated audiences can be shared.
The Receiver must accept the audiences before sharing begins. Until the audience is accepted, it will appear as ‘pending’ in your Shared audience tab.
Your Shared tab will show an up-to-date view of each audience you’ve shared, and which mParticle customers they are shared with.
Receive an Audience
If another mParticle customer has shared an audience with you, you will see a notification on the Audience page, under P2P Audiences > Received, showing that you have audiences pending. Click it to accept or reject the audiences.

Once you have accepted an audience, you can connect it to any of your audience services, just like an audience you have created yourself.
Updates to Shared Audiences
Once an Audience is shared, any users added, deleted or updated will be reflected for all parties that share the audience.
Stop Sharing
Once a particular audience is being shared, the sharing arrangement can end in several ways.

The Initiator deletes the audience.
The Initiator chooses to ‘unshare’ the audience.
The Receiver removes the audience from their ‘Shared Audiences’ tab.
The Receiver opts out of Audience Sharing.

If any of the above occur, the shared audience will no longer be available to the Receiver.
Cancelling a sharing arrangement cannot be undone. If you wish to resume it, the Initiator must resend the audience to the receiver.
Connections
The Connections screen allows you to connect your added and configured Platform and Feed Inputs to an Event Output service, setup filters and view the Live Stream.  The following sections provide additional details on each topic:

Connect
User Splits
Filter
Live Stream

Connect
The Connect screen is where you can setup and view the connection between your configured inputs (platforms and feeds) and your configured output event services.  In this example, we’re setting up a connection between our iOS platform and the Google Analytics output event configuration.  To setup a connection follow these steps.

Click Select Input to display the list of added platform and configured input feeds
Select the iOS Platform and click Select
Click Connect Output to display the list of configured output event services
Select Google Analytics as the service you want to connect to the selected input 
Select the Configuration Name for the selected service and click Next
Enter the connection specific parameters
Click Add Connection
Google Analytics will now be shown as a connected output

Min Platform Version
A key consideration if you are already sending data to a service is to ensure that you do not send duplicate data once you start forwarding from mParticle.  For example, you will have some users that have an older version of your app and are therefore still sending data via the service SDK, and when you enable data forwarding from mParticle you will want to ensure that the same data is not sent twice, e.g., app data for a user is sent to a service via their SDK and the same data is forwarded by mParticle. 
In scenarios such as this when you are already working with a service and will be removing their SDK from your app once you begin forwarding via mParticle, you will use mParticle’s app version filtering capability.
mParticle allows you to specify a minimum version of your app for data forwarding to mParticle.  For example, let’s say your current version that includes a services SDK is version 1.0.  You next version, which incorporates the mParticle SDK and removes the service SDK, is version 2.0.  In your mParticle connection settings, you will want to specify 2.0 in the Version settings.  This will ensure that older app versions that still have the service’s SDK still send data directly to the service and that newer versions with the mParticle SDK included and the services SDK removed will forward data via mParticle.
If you return to the connect screen and select an input, the list of currently connected event outputs is displayed.  The list that is displayed can be changed by:

Toggling Show Info to show or hide the configuration name, service and output environment.   
Filtering by Status - All, Active, or Inactive
Filtering by Environment - All, Production or Development
Entering search terms

If you select a connected output, the details panel is shown where you can see additional details about the connection.  If you click Settings, the connection settings form is displayed and you can update the connection settings and toggle the Status of the forwarding to Sending.  If you click Tools, you are provided with additional connection tools which are described in the next section:

Forwarding Rules
Custom Mappings
User Sampling

Forwarding Rules
You can setup forwarding rules to a connected output service based on Attribute or Attribution rules.  Select the type of forwarding to specify.
Attribute
You can specify a particular attribute/value combination rule for event forwarding.  Select Only forward to forward events when there is a match and Do not forward to not forward events when there is a match.  In order for the rule to apply, the attribute must have been mapped to an event previously sent into the mParticle platform and the value must be an exact match.  You can search for attribute values by entering a search term into the text box.  If there is a match, at most 10 results will be shown and you can further refine the list of attribute values by adding additional characters to the search term.

Attribute value filtering should be configured before the integration is enabled.  
For eCommerce events, the attribute must be set at the commerce event level, not the individual product level.


Attribution
You can specify a particular Attribution Publisher rule for event forwarding.  Select Only forward to forward events when there is a match and Do not forward to not forward events when there is a match.  In order for the rule to apply, the publisher must have been mapped to an attribution event previously sent into the mParticle platform and the value must be an exact match.  

Custom Mappings
Some services allow your incoming events to be translated into events specific to the service. For example, if you have a custom event named “NextLevel”, typically this event would be forwarded as a custom event to a service, however with custom mappings, you can specify that this event be forwarded to a service using their specific event name as follows:



Integration
Integration Description
Integration Event Name




Criteo
User Level Finished
UserLevel


Facebook
Achieved Level
fb_mobile_level_achieved


Tune
Level Achieved
level_achieved



Once you have connected the service, you can view and set these mappings by clicking the Custom Mappings on the Connection Tools.  You can then select your incoming event and associated attributes to configure sending your incoming event to the selected service.  The screen shot below shows Tune’s “Level Achieved” event and the additional attributes that can be mapped for this event.

The following integrations support custom mappings:

AgilOne
Amazon Mobile Analytics
AppLovin
AppsFlyer
Criteo
Facebook
Fiksu
SimpleReach
Tune

User Sampling
You can choose to send a subset, or a sample, of your data to a service.  For example, if you do not need to send all your data to a particular service in order to realize the benefit that the service offers, and/or if you want to control the volume-based costs that are charged to you by a service.   mParticle sampling is user based, e.g. if you enter a sampling value of let’s say 50% we will forward data for 50% of your users.  This ensures we are not forwarding data that is disassociated from user identities.  In order to enable sampling, enter the percent of data that you want to forward in the User Sampling box and click Save. 
User Splits
User Splits is generally used to describe the practice of comparing two versions of a web page or an app view to determine which performs better.  For example, you would compare two app views by showing two variants - let’s call them A and B - to different users at the same time.  You would monitor results, and the one that performs better for your business objective, wins.
In the rapidly proliferating app ecosystem world, mParticle enables a different kind of User Split testing - the ability to test two different services.
mParticle enables you to send a specific range of users and their data to one service, and a mutually exclusive range of users and their data to a different service.  mParticle customers use these capabilities to effectively test different services for push notification effectiveness, analytics, email marketing, and others.
This is an easy, powerful way for you to test and evaluate similar services against one another before making a buying decision.  In addition, we have built the feature in a very flexible fashion so that you can design and execute other forms of tests as well.  
mParticle has implemented User Splits via user ranges. The mParticle platform algorithmically assigns users a random number between 1 and 100, ensuring an even distribution of your users across this range. This implementation allows you to create up to 5 overlapping or mutually exclusive groups of users for your User Split test.  
Setting up User Splits in mParticle entails the following steps:

Plan your test
Setup your data sampling
Execute your test

1. Plan Your Test
The most important aspect of User Split testing is completely independent of the capabilities offered by mParticle.  Planning an effective test is of paramount importance.  What are you testing for?  What is the design of the test?  What is a reasonable user population size for the test?  How long with the test run?  How will you evaluate the results?  What happens if you need to change the design of the test midstream for some reason?  And so on.
mParticle strongly recommends that you consult with the services that you will be testing as well - a comparison test is something that they should be prepared to support and conversely they should be offered an opportunity to provide input on how best to conduct a test of their capabilities.  
2. Setup Your Data Sampling
Once you have defined your test, the mParticle setup can be done through the following steps.

Configure the output event services and connect them to the input you plan to use for the User Split test
    
Do not toggle forwarding on as that would begin forwarding all data before you’ve set the range, just enter the configuration parameters and save.


Click Connections, Connect and then select the input to use for the User Split
Click User Splits
Select the services you want to include in the User Split
Specify the percentage of users to go to each of the selected services and click Save

Now you are ready to setup a test.  For this test, we will send a sample of users to Kissmetrics and a sample to Google Analytics so that we can compare two different analytics integrations.  From the Select Integration dropdown, select Kissmetrics and then Google Analytics:

If you already have user data sampling on for a given integration and you include that same integration in a User Split, mParticle automatically disables user sampling as they are mutually exclusive features.

You can also see that by default the sampling range for an integration is 100%.  In this example, let’s send 50% of user data to Kissmetrics and 50% to Google Analytics, so we will adjust the sliders until the range parameters are correct:

3. Execute Your Test
When you are ready to start sending sampled data to the configured services, select the integration and toggle the Status to on to begin forwarding data those services.  Then execute your test plan. 
Key Considerations
When you are using the mParticle User Splits feature, there are some important considerations.

Plan your user data ranges carefully.  Needing to adjust these after the test goes live can have unintended consequences.  For example, if you are testing two different push notifications services and midway through the test decide to decrease the range of users being sent to one service, it will have no effect on that service since push tokens for the initial range of users will have already been forwarded to those users’ devices and once issued cannot be retracted.
Embedded kits require mParticle support.  In order to enable these providers for User Splits, you must contact us at support@mparticle.com.

Filter
The Filtering section of the Connection screen allows you to filter data from your input Platforms and Feeds to the connected output Event services.  You first need to select at most 6 connected services to display in the filter view to view and modify their filter parameters.  If you have configured multiple configurations for a service, you can select the specific configurations for the service.
For each output Event service there are standard mParticle filter configurations that are available to all event integrations including:

Send New Data Points by Default
Event Filters

Let’s review each of these in turn.
Send New Data Points by Default
The Send New Data Points by Default feature you allows you to control whether new data points are automatically sent to a service or if you have to review and enable data by service. 
The value is set to true by default, which means that mParticle will automatically forward all newly-detected events and user identities to the service that support them.   If you set this value to false by unchecking the field, and you you make a change to your app to send in additional data to mParticle, the data will not be forwarded to the service until you review and enable it.  
Event Filters
You can easily filter what data gets sent to a given service, for example filtering out personally identifiable information (PII) or if there are company insights inherent in the data that you don’t want to share with a particular service.  For each configured service, you can enable/disable which data is sent to each based upon your app and service requirements.   All events that have been send into mParticle are available for filtering.  You can switch between the following tabs to restrict filtering of the following types:

Events
Users - a maximum of 750 user attributes are displayed
Screens
eCommerce

Only the Events and Users tabs are available for Feeds.
Live Stream
The Live Stream is a real time view of inbound and outbound data to mParticle.  It allows you to review inbound data from mParticle instrumented apps to ensure correct SDK and/or S2S implementation and review outbound events to services to ensure a correct implementation.  A timestamp, name, message, device and location details are displayed in tabular form.  If there are any errors in forwarding event data to a specific integration, an error icon will appear next to the integration message type displaying the reason.
Live Stream Filters
There are several filters which can be used to restrict the list of events shown in the Live Stream.  


Inputs - You can select an individual platform or feed in your workspace
The following filters will impact newly arriving events and will not filter events already displayed in the tabular view.


Outputs - You can select an individual output event configuration in your workspace


Message Direction - When you incorporate the SDK into your mobile app, a device running your app generates events that are sent to mParticle.  These events are referred to as inbound events, measured from the perspective of the mParticle server. When the server receives these inbound events, it processes them and produces outbound events to the integrations that you have configured and enabled for your app. You can choose to view only inbound messages, only outbound messages, or both types of messages. When evaluating your event instrumentation, you typically watch only inbound messages.  When attempting to evaluate your service configuration(s), you typically choose to observe outbound messages although you may choose to watch both so that you can more easily see the cause and effect of your code instrumentation.    This filter takes place on newly arriving events.


Device - Typically during testing, you will want to monitor a specific test device. The Device drop-down shows all devices that are currently sending messages to all workspaces in the account.  Additionally, the drop-down list shows all devices that have been saved.  You can use the device filter to choose a specific device to monitor.  You can also choose to monitor All Dev Data. 
Saved devices typically have a user-assigned friendly name, while observed devices have the following format:  (Platform) device’s 32-digit UUID - i.e. (IOS) 09984094-08b5-4547-afc8-df1d07e5658d.  
To save a specific device:

Click Add/Edit Device to display the Device list
Click + next to the device you want to add, or click Add New Device to display the Add Device form
Enter/Modify the Device ID, Device Name, Device Type and click Add Device
Click Save

Once you save a device, it remains in the drop down list.
If you add an iOS or Android device, by providing a Device ID, the Live Stream will also show events from the Production environment. When attempting to match a device to a Device ID, mParticle will look first for an Advertising Identifier (IDFA for iOS, GAID for Android), if an Advertising Identifier is not present, mParticle will attempt to match against a persistent device ID (IDFV for iOS, Android ID for Android.


Pausing and Resuming
To pause the event view, click Pause or click on a particular event. When the event view is paused, the Pause button changes to a Resume button.  The stream remains paused as you select additional events.  It will resume by clicking Resume.
Examining a Specific Event
To view the details of a specific event, select the event from the Live Stream list. The Live Stream pauses, the selected event expands to display additional message details, and the Event Details pane is shown.  When an event is selected, you can examine a different event by clicking the second event; the first event contracts and the newly selected event expands.   
The Event Details panel contains additional event information arranged by category. Click View Event Data to see a JSON representation of the event. The Event Details panel remains open even if you have changed the selected event or resume the event View. If no event is selected, the Event Details panel displays the attributes for the most recent event in the event view.  Below is an example of expanded event row as well as an Event Details panel to the right hand side of the view:
If you select a Batch message, the Event Details panel will display general batch details, user attributes, user identities and location information.
If you select an event message, the Event details panel will display general event details, app version, event attributes, device information, platform information and location information
Clear Entries
When initiating a new session on the test device, you may want to clear the Live Stream from the last test session. To do this, simply click Clear Entries. The live Stream and event details clear immediately, but the filters retain their values.  
Rules
The Rules feature is currently in beta testing. Testers, please refer to our beta documentation.

Event Configurations
Abakus
Abakus is marketing measurement software. Abakus helps brands optimize marketing to more efficiently acquire new customers and effectively retain existing customers.
Supported Features

User Analytics
Attribution

Event Data Mapping
mParticle’s integration forwards the following event types to Abakus:

Application State Transition
Commerce Events
Custom Event
Error
Screen View
Session Start
Session End
User Attribute Change
User Identity Change

Prerequisites
In order to enable mParticle’s integration with Abakus, you will need an Abakus account to obtain your API Key.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Your API key issued by Abakus Inc.



ActionX
ActionX offers mobile and cross-screen re-targeting capabilities to brands and mobile app publishers.  mParticle’s integration with ActionX enables you to push audiences created in mParticle’s Audience Manager to ActionX for use in re-targeting and re-engagement campaigns, as well as forward in-app event data to ActionX for conversion tracking and campaign optimization.
Supported Features

Event Forwarding
Audience Forwarding

Prerequisites
In order to enable our integration with ActionX, you’ll need to obtain one or more Advertiser Tokens from ActionX - one for each App that you’re planning to forward Audiences to.  Please reach out to your contact at ActionX for additional information on how to obtain your Advertising Tokens.
Event Data Mapping
mParticle’s integration forwards the following event types to ActionX:

App Installs
App Opens/Activations
App Login/Logout
Screen Views
E-Commerce
    
Purchases
Product Views
Add/Remove from a Shopping Cart
Add/Remove from a Wish List


Custom Event Types (all event types not listed above will be forwarded as custom events)

The following table details how mParticle E-Commerce events are mapped into ActionX’s data model: 



mParticle Method
ActionX Event Data Mapping




logTransaction
All Events generated by calls to logTransaction will be passed as revenue-increasing product purchase events to ActionX.  The transaction ID in the associated MPProduct will be passed as the product ID, and total price will be passed as revenue.


logLtvIncrease
Calls to logLtvIncrease will increase App and User revenue in ActionX by the specified amount.


logProductEvent
Calls to logProductEvent will be forwarded to ActionX as Product View, Add/Remove from Cart, or Add/Remove from Wishlist Product Action Events, according to the enum value passed to logProductEvent.


logEvent
All calls to logEvent with the reserved attribute “$Amount” defined will increase App and User revenue in ActionX by the value of $Amount.



E-Commerce Product Attributes
If defined in an MPProduct object, the Unit Price and Category will be passed as product attributes to ActionX and utilized for campaign optimization.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Advertiser Token
string

The ActionX Advertiser Token for your app.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Use Customer ID
bool
True
All
If enabled, mParticle will forward your Customer ID values to ActionX.



AdChemix
AdChemix helps you create massively scalable marketing campaigns across search, display and social advertising to help you profitably generate transactions, but help you acquire, engage and retain valuable customers.
This integration is only supported for the Web platform.
Supported Features

User Analytics

Prerequisites
In order to enable mParticle’s integration with AdChemix you will need an account and to work with your AdChemix representative to obtain your Site ID for mParticle configuration.
Configuration Settings



Setting Name
Data Type
Default Value
Description




SiteId
string

AdChemix Site ID



Adjust
Adjust is a business intelligence platform for mobile app marketers, combining attribution for advertising sources with advanced analytics and store statistics.
Supported Features

All Adjust features are supported

Prerequisites
Setup an account with Adjust at https://www.adjust.com.  If you will be forwarding custom app events, define the events in the Adjust dashboard to obtain the Adjust event tokens for mapping the events in mParticle to Adjust events.
Data Processing Notes
mParticle will only forward events to Adjust if:

iOS - An IDFA or IDFV is set
Android - A Google Advertising ID or Android ID is set

mParticle will only forward events to Adjust if the data is less than 28 days old - https://docs.adjust.com/en/event-tracking/#server-side-event-tracking
Adjust Kit Integration
mParticle’s Adjust integration requires that you add the Adjust kit to your iOS or Android app, and the mParticle SDK will initialize and automatically map mParticle method calls directly onto Adjust method calls. This approach means that every feature of the Adjust SDKs are supported, as if the app had integrated Adjust directly. The source code for each kit is available if you would like to learn exactly how the method mapping occurs:

iOS
Android

//Sample Podfile
target '<Your Target>' do
    pod 'mParticle-Adjust', '~> 6'
end

//Sample build.gradle
dependencies {
    compile ('com.mparticle:android-adjust-kit:4.+')
}

Add the Adjust Kit to your iOS or Android app. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.
Adjust mParticle Configuration
Create an Adjust output configuration:

Select Directory, and click the Adjust tile
Click Add Adjust to Setup
Select the Output Event Integration Type and click Add to Setup
Select the Adjust output configuration group to configure an output event configuration
Enter a Configuration Name and your Adjust configuration settings and click Save

Connect inputs to the Adjust output configuration:

Select Connections
Select the Input for the connection definition
Click Connect Output
Select the Adjust configuration
Enter your Event Tokens - Select the incoming events and define the mapping to the appropriate Adjust event tokens which have been setup in the Adjust dashboard.

Toggle the Status to Sending
Click Save

 Only incoming events which are mapped to Adjust event tokens will be forwarded to Adjust.  All event attributes are forwarded along with the event.  No user attributes are forwarded.
Configuration Settings



Setting Name
Data Type
Default Value
Description




App Token
string

The App token is located in the Adjust.com dashboard.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Event Tokens
Custom Field

All
Define the mapping from incoming events to the Adjust event token previously setup in your Adjust dashboard.


Revenue Token
string

All
Specify the revenue event token from your Adjust dashboard.  This will be used if an event token is not provided for the ‘eCommerce - Purchase’ event



Adobe Analytics Mobile Services
Adobe provides analytics and optimizations for mobile apps and brings together all marketing capabilities across Adobe Marketing Cloud. This version sends data to your account using version 4.X of the Adobe API.
mParticle supports Adobe Marketing Cloud’s Mobile Services through our mobile SDKs and platform forwarding functionality.  Data collection is enabled through SDK instrumentation.  Once your app is properly instrumented, data is ingested into the mParticle platform, which maps inbound data to the Adobe Mobile Services’ features and their required formats and then forwards the data to Adobe.
Adobe Analytics Overview and Prerequisites
Currently mParticle supports Adobe’s 4.x SDK. The workflow of using the mParticle SDK is similar to using Adobe 4.x SDK. 
If you are new to setting up Adobe Marketing Cloud’s Mobile Services, your best place to start is of course Adobe itself and the below is a must-read before proceeding:

Mobile Service Features

If you are migrating from Adobe v2 or v3 to the latest Adobe Marketing Cloud platform, please take a moment to read the following:

 Best Practices for setting up your events in v4.x

When mParticle sends data to the Adobe Marketing Cloud, mParticle utilizes the Amazon Marketing Mobile Services’ native APIs.  This allows mParticle to implement server side data forwarding and supports our value proposition to customers of not requiring that additional app SDK components be continually added and updated for integrations.
You will need an Adobe Marketing Cloud account to get your Reporting Suite ID (RSID) and your Tracking Server.  You will need these settings when configuring Adobe in mParticle Setup.
Follow one of these steps to create your Tracking Server:

Create a value as defined here
Create a CNAME record in your domain that points to Adobe’s servers as defined here

The following settings are available for backwards compatibility with Adobe V3.x and are not necessary for Adobe V4.x.

Events
Props
eVars
Hier Variables

Supported Features



Adobe Analytics Feature Name
Adobe Analytics Feature Category
Feature Description
mParticle Supported?
Comments




Track App States
Analytics
Track the state of your application.
Yes
 


Track App Actions
Analytics
Actions are the events that occur in your app that you want to measure.
Yes
 


Track App Crashes
Analytics
Answers to questions about how crashes are tracked and best practices for avoiding false crashes.
Yes
 


Timed Actions
Analytics
Measure how long an event takes
No
mParticle will add support in a future release. For now developers can time events themselves and pass timing via eventLength parameter


Visitor Lifetime Value
Analytics
Lifetime value lets you measure and target on a lifetime value for each user.
Yes
 


Products Variable
Analytics
Product variablee store Product details for which an action is taking place.
Yes
 


Video Analytics
Analytics
Video Analtyics is the process of collecting and aggregating video metrics.
No
 


Geofencing and points-of-interest (POI)
Location
Location tracking; Automatically calculates distance to a predefined list of POI
Yes
mParticle supports location tracking but not geofencing; geofencing support is planned for a future release.


Experience Testing
Target
Create and edit A/B testing campaigns
No
 


Audience Management
Audience
Audience management allows you to design tests and create audience segments to target content.
No
 



Reference: https://marketing.adobe.com/resources/help/en_US/mobile
Supported Feature Reference
App Lifecycle tracking



Adobe Mobile Services SDK method
mParticle SDK method




collectLifecycleData
automatically collected



mParticle sends all app lifecycle metrics that Adobe collects.



Metric
Adobe’s Configuration
Additional Comments




Crashes
Triggered when the application does not exit gracefully. Event is sent on application start after crash (the application is considered to crash if quit is not called).
If the mParticle SDK detects a crash, a CrashEvent will be sent to Adobe.


Daily Engaged Users
Triggered when the application is used on a particular day.
The mParticle SDK will forward a DailyEngagedEvent the first time it sees a user within a day. To determine this, the SDK tracks “last use date” (“lud” parameter) and sends that date time along with the last use date stored by Adobe’s SDK (if any) to the mParticle server, and the forwarder will compare the last use date to the date of the current event.


First Launches
Triggered on first run after installation (or re-installation).
mParticle forwarder sends the min of the first run timestamp and the install timestamp stored by Adobe’s SDK on a device (if any).


Launches
Triggered on every run, including crashes and installs. Also triggered on a resume from background when the lifecycle session timeout has been exceeded.
mParticle forwarder sends the sum of the launch count tracked by the SDK and the previous launch count stored by Adobe’s SDK on a device (if any).


Monthly Engaged Users
Triggered when the application is used during a particular month.
mParticle forwards a MonthlyEngagedEvent the first time a user is seen within a month. The logic is similar to above.


Previous Session Length
Reports the number of seconds that a previous application session lasted based on how long the application was open and in the foreground.
mParticle calculates session length as “session end time” - “session start time” - “time spent in background”.


Upgrades
Triggered on first run after upgrade (anytime the version number changes).
mParticle detects app upgrades and will forward the timestamp of upgrades.



Note for Existing Adobe Customers:
Since the mParticle SDK always looks for any existing data on a device stored by Adobe’s SDK, the transition to the mParticle SDK is straightforward.
Event Tracking
The following methods are used to track state and actions (event creation and tracking):



Adobe Mobile Services SDK
mParticle SDK




trackState:data:
logScreen:eventData


trackAction:data:
logEvent:eventData



In Adobe Mobile Services v4.x, you can map events using an Event/Attribute structure, which maps almost exactly to mParticle’s data structure.
Notes for Existing Adobe (3.x) Customers
e.Vars and s.Props are no longer needed in the Adobe Mobile Services 4.x, but you can pass Adobe legacy values for each of those by adding them to the attributes of an event.
Product Variables
The following methods are used to track commerce events (product creation and tracking):



Adobe Mobile Services SDK
mParticle SDK




trackAction:data:
logEvent:eventData



Product events are mapped between Adobe and mParticle as follows:



Adobe Product Events
mParticle Commerce event




prodView
Product.DETAIL


scCart
N/A


scOpen
N/A


scAdd
Product.ADD_TO_CART


scRemove
Product.REMOVE_FROM_CART


scCheckout
Product.CHECKOUT


purchase
Product.PURCHASE



LTV Tracking



Adobe Mobile Services SDK
mParticle SDK
Additional Comments




trackLifetimeValueIncrease
logLTVIncrease
mParticle SDK has a “MPProduct” object to help with logging transactions that lead to LTV increase.



The mParticle SDK can calculate the lifetime value of customers once the mParticle SDK has been added to an app. The mParticle forwards the sum of the lifetime value tracked by the SDK and the lifetime value tracked by Adobe’s SDK previously.  There are a few methods that can be used to track LTV using mParticle’s SDK:

Use logLTVIncrease method. Any numeric value logged by this method will be automatically tracked as LTV.
Use logEvent or logTransaction method. 

Opt-in/Opt-out Management



Adobe Mobile Services SDK
mParticle SDK




Set default value via privacyStatus in a SDK config file (also has setPrivacyStatus method to change the status in the app)
OptOut in iOS, setOptOut in Android



mParticle assumes that users have opt-in status by default, whereas Adobe’s SDK supports setting the default status in an SDK config file per app.
Location Tracking



Adobe Mobile Services SDK
mParticle SDK




trackLocation:data:
beginLocationTracking in iOS, enableLocationTracking in Android



If the Generate Location Message setting is enabled, mParticle will forward the location data (if available) of each event to Adobe.
Offline Tracking



Adobe Mobile Services SDK
mParticle SDK




offlineEnabled setting in config
enabled by default



The mParticle SDK always collects offline data and sends that data to the mParticle SDK server. 
If the Offline Tracking Enabled setting is enabled, mParticle will includes a “ts” parameter that represents the timestamp (in seconds) of the event.
User Identification



Adobe Mobile Services SDK
mParticle SDK




setUserIdentifier
setUserIdentity (with CustomerId type)



If the Use Customer ID setting is enabled, and the User Identity Customer ID has been set, mParticle will forward customerId as a custom user identifier (the “vid” parameter in Adobe).  Adobe Mobile Services’ 4.x version SDK also has a tracking identifier (aid) that Adobe uses to identify each unique device per app. mParticle generates a random GUID for each device per app and sends it to Adobe as the “aid”. Similar to Adobe’s SDK, this ID is preserved between app upgrades, is saved and restored during the standard application backup process, and is removed on uninstall.
Notes for Existing Adobe Customers
If an app has already integrated with the Adobe Marketing Cloud before using mParticle, then “vid” and “aid” are likely already stored on consumers’ devices. The mParticle SDK checks if there is existing data stored on a device from Adobe’s SDK; if there is it will get the IDs from a device and send them to the mParticle SDK server. mParticle will then use those IDs when sending data to ensure a seamless transition.
App and Device Attributes
mParticle supports forwarding selected App and Device attributes to Adobe as context variables. Add the values you want to forward as a comma-separated list in the Connection Settings panel under App and Device Attributes. Accepted values are:

mp_GoogleAdvertisingIdentifier
mp_VendorIdentifier
mp_AdvertisingIdentifier
mp_LocaleCountry
mp_LocaleLanguage
mp_DeviceManufacturer
mp_DeviceName
mp_AppName
mp_PackageName
mp_AppVersion

These values are case sensitive and must be entered exactly.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Report Suite IDs
string

The report suite ID from Adobe settings page.  Multiple IDs can be entered, separated by commas


Tracking Server
string

The URL of the Adobe tracking server


Character Set
string
UTF-8
The character set used to display data in the Adobe interface


Timestamp Enabled
bool
True
If enabled, the timestamp will be included in messages sent to Adobe


Send Messages Securely
bool
True
If enabled, mParticle will forward all data to Adobe using SSL


Offline Tracking Enabled
bool
True
If enabled, any messages that are received when the device is offline will be forwarded



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Use Customer ID
bool
True
All
If enabled, Customer ID will be forwarded if it exists


Include User Attributes
bool
False
All
If enabled, all user attributes will be included in the context data for each event


Generate Location Message
bool
True
All
If enabled, location data will be forwarded if available


Context Variables
Custom Field

All
Mapping of your application’s event attributes to Adobe context variables


Product Incrementors
Custom Field

All
Mapping of your application’s custom event names to Adobe product incrementor event numbers


Product Merchandisings
Custom Field

All
Mapping of your application’s event attributes to Adobe product merchandising


Events
Custom Field

All
Mapping of your application’s custom event names to Adobe event numbers


Props
Custom Field

All
Mapping of your application’s custom event attributes to Adobe props


eVars
Custom Field

All
Mapping of your application’s custom event attributes to Adobe eVars


Hier Variables
Custom Field

All
Mapping of your application’s screen view attributes to Adobe hier variables


App and Device Attributes
string

All
A comma separated list of app and device attributes to forward as context variables



AgilOne
AgilOne is is a predictive marketing cloud that helps retailers deliver omni-channel experiences in order to increase customer loyalty and profitability.
Prerequisites
In order to enable mParticle’s integration with AgilOne, you will need to work with your AgilOne representative to obtain credentials for your AgilOne environment. See Configuration Settings for details.
Custom Flags
The AgilOne integration supports one Custom Flag: AgilOne.SubType. This custom flag is necessary for sending checkout events to AgilOne. Allowed values for this custom flag are: "Demand", "Canceled", "Shipped", or "Returned". If this flag is not set for an event where it is required, it defaults to "Demand".
Data Processing Notes
mParticle forwards all custom events and user attributes to AgilOne, but for these to be captured, they must first be defined in the AgilOne dashboard. For this reason, unlike most integrations, the event filter for AgilOne initially sets all events to Off. You must manually enable each event you want to forward to AgilOne and ensure that the necessary event and attribute names are defined in the AgilOne dashboard.
You can provide credentials for both your Production and CS AgilOne environments in the configuration settings. mParticle will identify Development and Production events and forward them to the appropriate AgilOne environment. To use a development environment, you must explicitly set up separate event configuartions for Production and Development. You cannot check Use same settings for Development and Production.
Event Data Mapping
Each message forwarded to AgilOne contains up to four sections:

events: type and attributes of the event that occurred,
customers: users involved in the event,
transactions: id and attributes of any transaction in a commerce event
transactionItems list of items involved in the transaction.

We support the following AgilOne event types



AgilOne Event
mParticle trigger




productBrowsed
Product Action - View Detail


cartUpdated
Product Action - Add to Cart / Remove from cart


checkout
Product Action - Purchase


{{ custom event name }}
Custom Event



mParticle will send all custom events to AgilOne, but only events that match custom events defined in the AgilOne dashboard will actually be captured.
The following AgilOne events can also be supported via Custom Mappings

login 
logout 
onsiteSearch 
productBrowsed 
categoryBrowsed
brandBrowsed
cartUpdated

Event Attribute Mappings



AgilOne
mParticle
Required
Notes




Type
event.data.event_name
Yes
Event type for standard events will be set as above. This mapping applies to custom types only, but the custom event must be defined in AgilOne before it can be captured.


SourceCustomerNumber
user_identities
Yes
Customer ID used if available, if not, email can be used. If neither are available the event is not sent.


SourceTransactionNumber
event.data.product_action.transaction_id
 
Only for checkout events.


SourceProductNumber
product.id
 
Only for productBrowsed and cartUpdated events.


EventTimestamp
event.data.timestamp_unixtime_ms
 
 


Variables
device_info.http_header_user_agent
 
mParticle forwards only a single key-value pair containing the UserAgent header.


UserClient
 
 
Static value A is used for all events.


cookie
 
Yes
Static value a1cookie is used for all events.



Customer Attribute Mappings



AgilOne
mParticle
Required
Notes




SourceCustomerNumber
user_identities
Yes
Customer ID used if available, if not, email can be used. If neither are available the event is not sent.


Email
user_identities
Recommended
User identity where identity_type == "email", if available.


MobileAdvertisingID
device_info
 
IDFA for iOS devices, GAID for Android.


MobileDeviceId
device_info
 
IDFV for iOS devices, Android ID for Android.


{{ custom attributes }}
user_atributes
 
User attributes are sent by mParticle but must be defined in AgilOne before they can be captured.



Transaction Attribute Mappings
These apply only to checkout events



AgilOne
mParticle
Required
Notes




SourceTransactionNumber
event.data.product_action.transaction_id
Yes
 


SourceOrganizationNumber
 
Yes
Defined in configuration settings.


SourceCustomerNumber
user_identities
Yes
Customer ID used if available, if not, email can be used. If neither are available the event is not sent.


Tax
event.data.product_action.tax_amount
 
 


Type
 
Yes
For checkout events this value will always be purchase.



Transaction Item Attribute Mappings
These apply only to checkout events



AgilOne
mParticle
Required
Notes




SourceTransactionItemNumber
event.data.product_action.transaction_id
Yes
 


SourceOrganizationNumber
 
Yes
Defined in configuration settings.


SaleRevenue
product.quantity x product.price
Recommended
 


Type
 
Yes
For checkout events this value will always be purchase.


SubType
event.custom_flags.AgilOne.SubType
Yes
This custom flag must be set to one of the following values: "Demand", "Canceled", "Shipped", or "Returned". If the cutom flag is not set, the value defaults to "Demand".


Discount
product.coupon_code
 
 


{{ product attributes }}
product
 
 



Configuration Settings



Setting Name
Data Type
Default Value
Description




Zone ID
string

Your AgilOne Zone ID


Username
string

Username for your AgileOne Account


Password
string

Password for your AgileOne Account


Tenant
string

The Tenant for your AgilOne Account


Source Organization Number
string

The Source Organization Number for your AgilOne Account



Alooma
Alooma lets you build custom data pipelines in minutes, so you can focus on your business. Our SaaS service provides scalable, fault-tolerant, real-time connections to Amazon Redshift for every kind of data source, from analytical data to transactional sources like MySQL and MongoDB. Break down your data silos and never worry about data loss or pipeline maintenance
Supported Features

User Analytics

Prerequisites
In order to enable mParticle’s integration with Alooma, you will need to work with your Alooma representative to obtain your Alooma Input Token and Hostname for configuration.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Alooma Input Token
string
 
The token that corresponds to your Alooma REST input


Alooma Hostname
string
 
Your Alooma hostname, i.e. <hostname>.alooma.io



Amazon Kinesis
Amazon Kinesis is a platform for streaming data on AWS, offering powerful services to make it easy to load and analyze streaming data, and also providing the ability for you to build custom streaming data applications for specialized needs.
Supported Features

Event Forwarding

Prerequisites
In order to take advantage of the Amazon Kinesis integration, you’ll need the Stream Name, Kinesis Service Region and the credentials of an Identity and Access Management (IAM) user that has access to Kinesis.  Refer to the links below for Amazon setup:
Click here for information on Kinesis ARN syntax.  Sample ARN syntax for Kinesis is:  arn:aws:kinesis:region:account-id:stream/stream-name. 
{
   "Version": "2012-10-17",
   "Statement": [
       {
           "Effect": "Allow",
           "Action": [
               "kinesis:PutRecord"
           ],
           "Resource": [
               "arn:aws:kinesis:{region}:{account-id}:stream/{stream-name}"
           ]
       }
   ]
}


Create a Stream

The Kinesis Stream Name and Kinesis Service Region are required for mParticle setup 


Create an IAM user

Be sure to save the credentials file which contains the Access Key Id and Secret Access Key required for mParticle setup.


Create a Custom Policy.  Use one of the following methods to create the policy:
    
Manual Policy Creation
        
Select Amazon Kinesis as the AWS Service
Include the following actions: PutRecord
Enter the ARN
Click Add Statement


Create Policy from JSON
        
Paste the template policy on the right hand panel into the “Policy Document” field.  Be sure to replace the {region}, {account-id} and {stream-name} with your specific values.




Assign Customer Policy to User

Event Data Format
The event data will be forwarded as JSON objects.  Please refer to the JSON documentation for a detailed description of the data format.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Access Key ID
string

This is your IAM user’s Access Key Id, which can be found on your IAM dashboard, or in the credentials.csv file that you might have downloaded after creating the IAM user.


Secret Access Key
string

This is your IAM user’s Secret Access Key, which can be found in the credentials.csv file that you might have downloaded after creating the IAM user.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Stream Name
string

All
This is your Kinesis stream name.


Kinesis Service Region
string

All
This is your Kinesis endpoint region.


Unique ID
string

All
An optional string identifier for your app that will be forwarded with each event batch.  Standard app identifiers (Apple OS Bundle ID, Android Package Name) will be forwarded regardless of this setting.


Send Lifecycle Events
bool
True
All
If enabled, lifecycle events (application start/stop, session start/end) will be forwarded.


Send Screen Views
bool
True
All
If enabled, screen view events will be forwarded.


Send Crash Events
bool
True
All
If enabled, app crashes will be forwarded.


Send Network Performance Events
bool
True
All
If enabled, network performance events will be forwarded.


Send Custom Events
bool
True
All
If enabled, custom app events will be forwarded.


Send Push Registrations and Receipts
bool
True
All
If enabled, push registration and receipt notifications will be forwarded.


Send as Batch
bool
True
All
If enabled, this setting will cause your app’s events to be sent in (roughly) 10-minute batches per device.  If disabled, mParticle will POST each event to you individually, as its received.  This setting is ignored if “Wait for Complete Batch” is enabled.


Wait for Complete Batch
bool
False
All
If enabled, mParticle will POST events to you in batches only after a user session has ended, so that each event batch you receive will represent a full session of user activity within your app.


Include Location Information
bool
True
All
If enabled, location data will be forwarded with event data whenever possible.


Include User Identities
bool
True
All
If enabled, user identity information will be forwarded with event batches.


Send Profile Change Events
bool
True
All
If enabled, mParticle will forward ID profile events, such as user sign ups, logins logouts, updates, and deletes.


Send Commerce Events
bool
True
All
If enabled, commerce events will be forwarded.


Include Metadata
bool
True
All
If enabled, the following metadata - application_info, device_info and source_info will be forwarded.


Include User Attribute Change Events
bool
False
All
If enabled, User Attribute Change Events will be forwarded.


Include User Identity Change Events
bool
False
All
If enabled, User Identity Change Events will be forwarded.



AWS Mobile Analytics
Amazon Mobile Analytics lets you simply and cost effectively collect and analyze your application usage data. In addition to providing usage summary charts that are available for quick reference, Amazon Mobile Analytics enables you to set up automatic export of your data to Amazon S3 and Amazon Redshift.
Supported Features

User Analytics

Data Processing Notes
Mobile Analytics has limits around the number of unique event names and attributes their platform can process as noted here: http://docs.aws.amazon.com/mobileanalytics/latest/ug/limits.html

1500 custom events per application
40 attributes and metrics per event
50 characters in the key of an attribute or metric
200 characters in the value of an attribute

Prerequisites
In order to take advantage of our AWS Mobile Analytics integration, you will need your app’s AWS Mobile Analytics App ID which is available on the AWS Mobile Analytics Console.  You will also need the credentials of an IAM user that has access to your AWS Mobile Analytics account.  
Refer to the steps below for Amazon user setup:

Create an IAM user

Be sure to save the credentials file which contains the Access Key Id and Secret Access Key required for mParticle setup.


Attach the AWS built-in AmazonMobileAnalyticsFullAccess policy to grant your IAM user the appropriate access level.  To attach this policy to your IAM user
    
Select the user created in step 1
Scroll to the Permissions section and click the Attach Policy button
Select the AmazonMobileAnalyticsFullAccess policy and click the Attach Policy button



Event Data Mapping
mParticle’s AWS Mobile Analytics integration supports custom mappings which allows you to map your events and attributes for AWS Mobile Analytics. mParticle provides mappings for the following AWS Mobile Analytics event types:

Monetization Event

Configuration Settings



Setting Name
Data Type
Default Value
Description




Access Key ID
string

Your IAM User’s Access Key ID.


App ID
string

Your app’s AWS Mobile Analytics App ID. You can obtain this from your AWS Mobile Analytics Console.


Secret Access Key
string

Your IAM User’s Secret Access Key.



Amazon S3
Amazon S3 provides a simple web-services interface that can be used to store and retrieve any amount of data, at any time, from anywhere on the web.
Supported Features

Event Forwarding

Prerequisites
In order to take advantage of the Amazon S3 integration, you’ll need the name of an S3 bucket and determine the approach for bucket access:

Identity and Access Management (IAM) Setup
Bucket Policy Setup

If using the IAM Setup, the Access Key ID and Secret Access Key settings are required when configuring Amazon S3. They are not required if using the Bucket policy setup.  The following sections describe the setup.
Identity and Access Management (IAM) Setup
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListAllMyBuckets"
      ],
      "Resource": [
        "arn:aws:s3:::*"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket",
        "s3:GetBucketLocation"
      ],
      "Resource": [
        "arn:aws:s3:::{bucket}"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:ListBucket",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::{bucket}/*"
      ]
    }
  ]
}

In order to take advantage of the Amazon S3 integration, you’ll need the name of an S3 bucket and the credentials of an Identity and Access Management (IAM) user that has access to S3.  Click here for information on S3 ARN Syntax.  Sample ARN syntax for S3 is: arn:aws:s3:::bucket_name/*key_name.
Refer to the steps below for Amazon setup if you are Assigning Customer Policies to a User:

Create an S3 Bucket

The Bucket Name is required for mParticle setup and for creating the custom policy


Create an IAM user

Be sure to save the credentials file which contains the Access Key Id and Secret Access Key required for mParticle setup.


Create a Custom Policy.  Use one of the following methods to create the policy:
    
Manual Policy Creation - this policy requires 3 statements
        
Select Amazon S3 as the AWS Service
Include the following actions: ListAllMyBuckets
Enter the following ARN:  arn:aws:s3:::*
Click Add Statement
Include the following actions: ListBucket, GetBucketLocation
Enter the following ARN:  arn:aws:s3:::{bucket}.  Be sure to replace the word “{bucket}” with the name of the S3 bucket created in step 1.
Click Add Statement
Include the following actions: GetObject,ListBucket, PutObject
Enter the following ARN:  arn:aws:s3:::{bucket}/*.  Be sure to replace the word “{bucket}” with the name of the S3 bucket created in step 1.
Click Add Statement


Create Policy from JSON
        
Paste the template policy on the right hand panel into the “Policy Document” field.  Be sure to replace the word {bucket} with the name of the S3 bucket created in step 1.




Assign Customer Policy to User

Bucket Policy Setup
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::338661164609:role/Prod-Role-DG12-Default"
      },
      "Action": "s3:PutObject",
      "Resource": "arn:aws:s3:::{bucket}*"
    }
  ]
}


In order to take advantage of the Amazon S3 integration, you’ll need the name of an S3 bucket to setup the Policy.  Click here for information on S3 ARN Syntax.  Sample ARN syntax for S3 is: arn:aws:s3:::bucket_name/*key_name.
Setting up access via a Bucket Policy requires some configuration on the mParticle side. Contact your Success Manager to enable this route for your account.
Refer to the steps below for Amazon to setup a Policy for the Bucket:

Create an S3 Bucket

The Bucket Name is required for mParticle setup and for creating the custom policy


Use one of the following methods to create the policy:
    
Manual Policy Creation

Select Type of Policy - S3 Bucket Policy
Create the following statement:
            
Effect - Allow
Principal - aws:iam::338661164609:role/Prod-Role-DG12-Default 
AWS Service - Amazon S3
Action - PutObject
ARN - arn:aws:s3:::{bucket}/*.  Be sure to replace the word “{bucket}” with the name of the S3 bucket created in step 1.
Click Add Statement
Click Generate Policy
The Policy JSON Document is shown.
Copy the JSON




Create Policy from JSON
        
Copy the template policy on the right hand panel and be sure to replace the word {bucket} with the name of the S3 bucket created in step 1.




Assign Policy to Bucket

In the Bucket Policy Editor
        
Click Properties
Click Permissions
Click Add bucket policy
Paste the JSON from step 2 above





Event Data Format
The event data will be forwarded as JSON objects.  Please refer to the JSON documentation for a detailed description of the data format.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Access Key ID
string

This is your IAM user’s Access Key Id, which can be found on your IAM dashboard, or in the credentials.csv file that you might have downloaded after creating the IAM user.


Secret Access Key
string

This is your IAM user’s Secret Access Key, which can be found in the credentials.csv file that you might have downloaded after creating the IAM user.


AWS Region Endpoint
string
us-east-1
AWS Region Endpoint for the S3 Bucket. Defaults to US East (N. Virginia) also known as us-east-1



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




S3 Bucket Name
string

All
The name of the S3 Bucket that you’d like mParticle to forward your event data to.


Folder Name
string

All
An optional folder name in your S3 Bucket to store the event data.


Server Side Encryption Method
string
None
All
If enabled, server side encryption method will be used.


Unique ID
string

All
An optional string identifier for your app that will be forwarded with each event batch.  Standard app identifiers (Apple OS Bundle ID, Android Package Name) will be forwarded regardless of this setting.


Send Lifecycle Events
bool
True
All
If enabled, lifecycle events (application start/stop, session start/end) will be forwarded.


Send Screen Views
bool
True
All
If enabled, screen view events will be forwarded.


Send Crash Events
bool
True
All
If enabled, app crashes will be forwarded.


Send Network Performance Events
bool
True
All
If enabled, network performance events will be forwarded.


Send Custom Events
bool
True
All
If enabled, custom app events will be forwarded.


Send Push Registrations and Receipts
bool
True
All
If enabled, push registration and receipt notifications will be forwarded.


Send as Batch
bool
True
All
If enabled, this setting will cause your app’s events to be sent in (roughly) 10-minute batches per device.  If disabled, mParticle will POST each event to you individually, as its received.  This setting is ignored if “Wait for Complete Batch” is enabled.


Wait for Complete Batch
bool
False
All
If enabled, mParticle will POST events to you in batches only after a user session has ended, so that each event batch you receive will represent a full session of user activity within your app.


Include Location Information
bool
True
All
If enabled, location data will be forwarded with event data whenever possible.


Include User Identities
bool
True
All
If enabled, user identity information will be forwarded with event batches.


Send Profile Change Events
bool
True
All
If enabled, mParticle will forward ID profile events, such as user sign ups, logins logouts, updates, and deletes.


Send Commerce Events
bool
True
All
If enabled, commerce events will be forwarded.


Store Data In Folders By Date
bool
False
All
If enabled, your data will be stored in an S3 folder by date.


Use Compression
bool
False
All
If enabled, your data will be compressed in gzip format.


Include Metadata
bool
True
All
If enabled, the following metadata - application_info, device_info and source_info will be forwarded.


Include User Attribute Change Events
bool
False
All
If enabled, User Attribute Change Events will be forwarded.


Include User Identity Change Events
bool
False
All
If enabled, User Identity Change Events will be forwarded.



Amazon SNS
Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients. 
Supported Features

Event Forwarding

Prerequisites
In order to take advantage of the Amazon SNS integration, you’ll need the SNS Topic ARN and the credentials of an Identity and Access Management (IAM) user that has access to SNS.  
Click here for information on SNS ARN Syntax.  Sample ARN syntax for SNS is:  arn:aws:sns:region:account-id:topicname.  
Refer to the steps below for Amazon setup:
{
   "Version": "2012-10-17",
   "Statement": [
       {
           "Effect": "Allow",
           "Action": [
               "sns:Publish"
           ],
           "Resource": [
               "arn:aws:sns:{region}:{account-id}:{topicname}"
           ]
       }
   ]
}


Create an SNS Topic

The SNS Topic ARN is required for mParticle setup and for creating the custom policy


Create an IAM user

Be sure to save the credentials file which contains the Access Key Id and Secret Access Key required for mParticle setup.


Create a Custom Policy.  Use one of the following methods to create the policy:
    
Manual Policy Creation
        
Select Amazon SNS as the AWS Service
Include the following actions: Publish
Enter the ARN from step 1
Click Add Statement


Create Policy from JSON
        
Paste the template policy on the right hand panel into the “Policy Document” field.  Be sure to replace the {region}, {account-id} and {topicname} with your specific values.




Assign Customer Policy to User

Event Data Format
The event data will be forwarded as JSON objects.  Please refer to the JSON documentation for a detailed description of the data format.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Access Key ID
string

This is your IAM user’s Access Key Id, which can be found on your IAM dashboard, or in the credentials.csv file that you might have downloaded after creating the IAM user.


Secret Access Key
string

This is your IAM user’s Secret Access Key, which can be found in the credentials.csv file that you might have downloaded after creating the IAM user.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Topic ARN
string

All
This is your SNS topic ARN.


Unique ID
string

All
An optional string identifier for your app that will be forwarded with each event batch.  Standard app identifiers (Apple OS Bundle ID, Android Package Name) will be forwarded regardless of this setting.


Send Lifecycle Events
bool
True
All
If enabled, lifecycle events (application start/stop, session start/end) will be forwarded.


Send Screen Views
bool
True
All
If enabled, screen view events will be forwarded.


Send Crash Events
bool
True
All
If enabled, app crashes will be forwarded.


Send Network Performance Events
bool
True
All
If enabled, network performance events will be forwarded.


Send Custom Events
bool
True
All
If enabled, custom app events will be forwarded.


Send Push Registrations and Receipts
bool
True
All
If enabled, push registration and receipt notifications will be forwarded.


Send as Batch
bool
True
All
If enabled, this setting will cause your app’s events to be sent in (roughly) 10-minute batches per device.  If disabled, mParticle will POST each event to you individually, as its received.  This setting is ignored if “Wait for Complete Batch” is enabled.


Wait for Complete Batch
bool
False
All
If enabled, mParticle will POST events to you in batches only after a user session has ended, so that each event batch you receive will represent a full session of user activity within your app.


Include Location Information
bool
True
All
If enabled, location data will be forwarded with event data whenever possible.


Include User Identities
bool
True
All
If enabled, user identity information will be forwarded with event batches.


Send Profile Change Events
bool
True
All
If enabled, mParticle will forward ID profile events, such as user sign ups, logins logouts, updates, and deletes.


Send Commerce Events
bool
True
All
If enabled, commerce events will be forwarded.


Include Metadata
bool
True
All
If enabled, the following metadata - application_info, device_info and source_info will be forwarded.


Include User Attribute Change Events
bool
False
All
If enabled, User Attribute Change Events will be forwarded.


Include User Identity Change Events
bool
False
All
If enabled, User Identity Change Events will be forwarded.



Amazon SQS
Amazon Simple Queue Service (Amazon SQS) offers reliable and scalable hosted queues for storing messages as they travel between computers. By using Amazon SQS, you can move data between distributed components of your applications that perform different tasks without losing messages or requiring each component to be always available.
Supported Features

Event Forwarding

Prerequisites
In order to take advantage of the Amazon SQS integration, you’ll need the SQS Queue URL and the credentials of an Identity and Access Management (IAM) user that has access to SQS.  Refer to the links below for Amazon setup:
Click here for information on SQS ARN syntax.  Sample ARN syntax for SQS is: arn:aws:sqs:region:account-id:queuename.  
{
   "Version": "2012-10-17",
   "Statement": [
       {
           "Effect": "Allow",
           "Action": [
               "sqs:SendMessage"
           ],
           "Resource": [
               "arn:aws:sqs:{region}:{account-id}:{queuename}"
           ]
       }
   ]
}

Refer to the steps below for Amazon setup:

Create an SQS Queue

Click on the new SQS Queue and the Queue URL will be shown in the details tab - the SQS Queue URL is required for mParticle setup 


Create an IAM user

Be sure to save the credentials file which contains the Access Key Id and Secret Access Key required for mParticle setup.


Create a Custom Policy.  Use one of the following methods to create the policy:
    
Manual Policy Creation
        
Select Amazon SQS as the AWS Service
Include the following actions: SendMessage
Enter the ARN (available on the details tab of the SQS Queue)
Click Add Statement


Create Policy from JSON
        
Paste the template policy on the right hand panel into the “Policy Document” field.  Be sure to replace the {region}, {account-id} and {queuename} with your specific values.




Assign Customer Policy to User

Event Data Format
The event data will be forwarded as JSON objects.  Please refer to the JSON documentation for a detailed description of the data format.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Access Key ID
string

This is your IAM user’s Access Key Id, which can be found on your IAM dashboard, or in the credentials.csv file that you might have downloaded after creating the IAM user.


Secret Access Key
string

This is your IAM user’s Secret Access Key, which can be found in the credentials.csv file that you might have downloaded after creating the IAM user.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Queue URL
string

All
This is your SQS queue URL.


Unique ID
string

All
An optional string identifier for your app that will be forwarded with each event batch.  Standard app identifiers (Apple OS Bundle ID, Android Package Name) will be forwarded regardless of this setting.


Send Lifecycle Events
bool
True
All
If enabled, lifecycle events (application start/stop, session start/end) will be forwarded.


Send Screen Views
bool
True
All
If enabled, screen view events will be forwarded.


Send Crash Events
bool
True
All
If enabled, app crashes will be forwarded.


Send Network Performance Events
bool
True
All
If enabled, network performance events will be forwarded.


Send Custom Events
bool
True
All
If enabled, custom app events will be forwarded.


Send Push Registrations and Receipts
bool
True
All
If enabled, push registration and receipt notifications will be forwarded.


Send as Batch
bool
True
All
If enabled, this setting will cause your app’s events to be sent in (roughly) 10-minute batches per device.  If disabled, mParticle will POST each event to you individually, as its received.  This setting is ignored if “Wait for Complete Batch” is enabled.


Wait for Complete Batch
bool
False
All
If enabled, mParticle will POST events to you in batches only after a user session has ended, so that each event batch you receive will represent a full session of user activity within your app.


Include Location Information
bool
True
All
If enabled, location data will be forwarded with event data whenever possible.


Include User Identities
bool
True
All
If enabled, user identity information will be forwarded with event batches.


Send Profile Change Events
bool
True
All
If enabled, mParticle will forward ID profile events, such as user sign ups, logins logouts, updates, and deletes.


Send Commerce Events
bool
True
All
If enabled, commerce events will be forwarded.


Include Metadata
bool
True
All
If enabled, the following metadata - application_info, device_info and source_info will be forwarded.


Include User Attribute Change Events
bool
False
All
If enabled, User Attribute Change Events will be forwarded.


Include User Identity Change Events
bool
False
All
If enabled, User Identity Change Events will be forwarded.



Amplitude
Amplitude provides product analytics that helps companies leverage cross-platform behavioral data to drive user growth.
Supported Features

Analytics
Data Export
Real-Time Dashboards
Retroactive Funnels

Prerequisites
In order to activate mParticle’s integration with Amplitude, you will need the Amplitude API Key for each app that you’d like to setup.  Your API key can be found on the Settings page of the Amplitude dashboard.
Data Processing Notes
mParticle will only forward events to Amplitude if the value specified in the User Identification setting is available or the Device ID is set.
mParticle will forward User Identities and Attributes to Amplitude, even if there are no events in the batch.
Event Data Mapping
Screen Views
mParticle will forward all screen views to Amplitude with the Amplitude Event Type set to “Viewed ScreenName”, where “ScreenName” is the screen name passed to the logScreen SDK method (or the name of the screen’s Activity class if you’re using automatic screen tracking on Android).  
Session Forwarding
mParticle will forward all session start and session end events to Amplitude with the Amplitude Event Type set to “session_start” and “session_end”.
eCommerce Event Forwarding
mParticle will translate eCommerce events into Amplitude events by expanding the eCommerce event into multiple events per product by appending the event name with “ - Item” , i.e. eCommerce - AddToCart - Item. This expansion applies to all eCommerce transactions; Add To Cart, Add To WishList, Checkout Purchase, etc. 
All in app purchases and refunds logged by mParticle’s logTransaction or an eCommerce event of will be forwarded to Amplitude with the Amplitude Event Type set to “revenue_amount”, using the MPProduct attribute revenueAmount.
eCommerce Field Mappings



Parameter
mParticle details
Amplitude field




Quantity
Item Quantity
quantity


Revenue
Item Revenue
revenue


Product ID
Product ID or SKU
productId


Price
Item Price
price



The TotalAmount attribute is not forwarded to Amplitude on a CommerceEvent
Custom Event Forwarding
Custom events logged via mParticle’s logEvent SDK method and their attributes will be forwarded to Amplitude, with the event name passed to logEvent as the Amplitude Event Type.
Attribution Custom Event Forwarding
Attribution Custom events will be forwarded to Amplitude prefixed with the attribution provider in the event name.  For example, [Tune] attribution.  Event Attributes that are included with the event are forwarded to Amplitude in user_properties, also prefixed with the attribution provider.
Field Mappings



Parameter
mParticle details
Amplitude field




Event Type
Described above for each supported event
event_type


Event Properties
All event attributes included with eCommerce, Custom and Screen View events.  See above for Attribution Custom Events.
event_properties


User Properties
All user attributes included with the event.  See above for Attribution Custom Events.
user_properties


email
If the Include Email in User Properties setting is enabled, email is included in user_properties
email


User ID
Set based on the value of the User Identification setting
user_id


Device ID
Set based on Operating System;  if iOS/tvOS then IDFA, if Android then Android Advertising ID, if Roku then Roku Advertising ID or Roku Publisher ID
device_id


Time
Event Timestamp, in milliseconds
time


Application Version
Application Version
app_version


Platform
iOS, Android, Apple TV, Web, Roku
platform


OS Name
iOS, tvOS, Android, Roku
os_name


OS Version
The version of the mobile OS or browser the user is on
os_version


Brand
The device brand the user is on.  This is not passed for Apple devices.
device_brand


Manufacturer
Device Manufacturer
device_manufacturer


Model
Device Model
device_model


Carrier
Device Carrier
device_carrier


Country
Country
country


Region
Region (or State) the user is in; this is also included in User Properties
region


City
City the user is in; this is also included in User Properties
city


Language
Language the user has set
language


Latitude
Latitude of the user
location_lat


Longitude
Longitude of the user
location_lng


IP Address
IP address of the user
ip


IDFA
Passed if OS is iOS or tvOS
idfa


Android Advertising ID
Passed if OS is Android
adid


Session Start Time
Session Start Timestamp
session_id



Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

Your app’s Amplitude API Key.  You can find this on the “My Account” page of Amplitude’s dashboard.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Instance Name
string
default
Mobile Web
The name of the client-side Amplitude instance to use. This should be unique for each Amplitude connection.


User Identification
string
customerId
All
To identify users, choose “Customer ID” to send Customer ID if provided or or “Email” to send Email addresses if provided.


Include Email in User Properties
bool
False
All
If enabled, the email user identity will be forwarded in the Amplitude user_properites


Allow unset user attributes
bool
True
All
 



Ampush
Ampush provides direct integrations with the largest sources of in-feed, identity-authenticated inventory, and is a preferred partner of Facebook, Twitter, Instagram and Pinterest.
Supported Features

Advertising
User Acquisition
Retargeting

Prerequisites
In order to enable mParticle’s integration with Ampush you will need an account with Ampush and work with your account manager to obtain your API Key.
Configuration Settings



Setting Name
Data Type
Default Value
Description




apiKey
string
 
Contact your account manager to obtain an API key



Appboy
Appboy is a marketing automation platform for mobile apps with app analytics, segmentation, newsfeed, push, in-app messaging, email marketing, and user feedback feature sets. 
Appboy offers a broad range of functionality via their solution and it is critically important that you work directly with your Appboy representative to ensure that you are correctly planning and implementing their features.  mParticle does not recommend enabling forwarding to Appboy until you have completed the Appboy planning process with your Appboy team.

AppBoy Documentation

mParticle Appboy Implementation Scenarios
The mParticle SDK allows you to include the Appboy kit which allows Appboy interface components (images, layout files, etc.) and as a result supports the entire Appboy feature set, which includes:

App Analytics
User Segmentation
Push Notifications
Email
News Feed
In-App Messaging
Feedback

No features are supported by the standard mParticle SDK, alone. You must install mParticle's Appboy Kit to be able to forward data from your app to Appboy.
The mParticle S2S API allows you to send data server side (API reference). In this scenario, mParticle forwards data via Appboy’s REST API which supports a limited set of features:

App Analytics
User Segmentation
Push Notifications
Email

Implementing for Full Appboy Feature Support
The Appboy solution offers features that involve Appboy-proprietary user interaction components including Newsfeed, In-App Messaging, and Feedback.  In order to properly incorporate Appboy with the mParticle SDK, please review the Kits section of the mParticle SDK Guide.  To enable Newsfeed, In-App Messaging, and Feedback features you will need to call the Appboy embedded kit directly.
Special Considerations for mParticle A/B Testing With Appboy and the mParticle SDK
mParticle supports the ability to conduct A/B testing with different integrations by sending a sample of users and their data to one integration and a different sample of users and their data to a different integration.  If you are using the mParticle SDK for Appboy deployment and calling Appboy methods directly, when instrumenting with the mParticle SDK you must ensure that the Appboy kit is active in the App before calling an Appboy method.  This is very important and ensures that you are not inadvertently calling Appboy methods for apps/users that are not part of an Appboy A/B sample.
Data Processing Notes
mParticle will always forward events if sent via the mParticle SDK, provided you have included the Appboy kit, but will only forward events sent via the mParticle S2S API if the following conditions apply:

The App Group Identifier setting is specified
Either a CustomerId or a push token is specified
Appboy has limits on the number of characters in a property key - they must be less than or equal to 255 characters, with no leading dollar signs.  mParticle will remove the dollar sign ($) when forwarding property keys for user attributes, custom and e-commerce events.  https://documentation.appboy.com/REST_API/#properties-object

Prerequisites
In order to activate the Appboy integration, you will need your Appboy API key and your “App Group Identifier” if using the S2S API.

Sign into your AppBoy Account at https://dashboard.appboy.com/developers/sign_in
Click on App Settings in the left navigation to get your API Key
If you are sending data to mParticle via the S2S API, your “App Group Identifier” value is required.  Click on the Developer Console in the left navigation to get this value.


Event Data Mapping
Purchases
All events enabled for LTV tracking will forwarded as purchase events to Appboy, if the following event attributes are defined:

transactionId
unitPrice

Please note that this includes events generated by calls to logTransaction, with the MPProduct attributes transactionId and unitPrice defined.  We also pass the currencyCode attribute of the corresponding MPProduct object, or assume that the currency is USD if it’s not defined.  
If productQuantity is greater than 1, we will forward Appboy a purchase event for each individual unit of the product (i.e. we’ll send two identical purchase events if productQuantity equals 2).
Screen Views
Your screen view events will be passed to Appboy using the screen name that you passed to our logScreen SDK method, as the event name.  
If you are using automatic screen tracking in our Android SDK, the automatically-generated screen view events will be forwarded to Appboy using the name of the associated Activity class.
Custom Events
All custom events will be forwarded to Appboy using the event name that you passed to your logEvent SDK method.  All event attributes will be forwarded to Appboy as Appboy custom event properties using the attribute names you passed to your logEvent SDK method as well.
User Attributes
The table below describes how the mParticle integration maps user attributes to Appboy’s profile attributes.



mParticle Field
Appboy Profile Attribute
Description




User Identity of type CustomerId
external_id
 


User Attribute $FirstName
first_name
 


User Attribute $LastName
last_name
 


User Identity of type Email
email
 


Derived from User Attribute $Age)
dob
mParticle estimates the user’s date of birth by subtracting $Age from the current year, and using January 1st as the month and day.  For example, if $Age is 10 and the current year is 2014, we’ll forward the user’s date of birth as 2004-01-01. If an exact birth date is desired, set a user attribute called dob with user’s birth date. When both $Age and dob user attributes are sent, one value may override the other when mParticle forwards data to Appboy. So it is recommended that one of them is toggled Off in mParticle’s data filter for Appboy.


User Attribute $Country
country
 


User Attribute $City
home_city
 


User Attribute $Gender
gender
 


User Attribute $Mobile
phone
 


Derived from SDK opt-out status
email_subscribe
This is based on calling the OptOut (setOptOut in Android) SDK method .  It will be set to opted_in when called with a value of true and will be set to unsubscribed when called with a value of false.


 
push_tokens
Because Appboy can only accept a single push token for each app/user pair, we will forward the most recently-registered push token to Appboy per user and per app.


User Identity of type Facebook
facebook
 


User Identity of type Twitter
twitter
 



Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

Your app’s API Key can be found in your Appboy dashboard.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Enable HTML within in-app messages
bool
False
Mobile Web
Enable HTML within in-app messages. This correlates to the enableHtmlInAppMessages setting of the Appboy SDK.


Forward screen view messages
bool
False
All
If enabled, all screen view messages will be forwarded to Appboy as separate events.


Automatically display new in-app messages
bool
True
Mobile Web
Automatically display new in-app messages when they come in from the server.


App Group Identifier
string
 
All
The App Group Identifier can be found in the developer console section of the Appboy dashboard.  This field is optional when sending in data via the SDK, but is required for using the S2S API.


Push Enabled
bool
True
iOS, Android
Forward GCM registration IDs to the Appboy SDK and enable Appboy push notifications.


Event Attributes that add to array
Custom Field
 
iOS, Android
Select your mParticle event names and event attributes and enter the corresponding Appboy custom attribute array name you want the event attribute ADDED to.


Event Attributes that remove from array
Custom Field
 
iOS, Android
Select your mParticle event names and event attributes and enter the corresponding Appboy custom attribute array name you want the event attribute REMOVED from.


Event Attributes that set to custom attribute value
Custom Field
 
iOS, Android
Select your mParticle event names and event attributes and enter the corresponding Appboy custom attribute you want the event attribute to map to. Note each time this event attribute is present, it will get sent to Appboy and overwrite any previously sent value.


Appboy SDK Flush Interval
string

iOS, tvOS
Appboy SDK data flush internal in seconds (iOS only). Refer to Appboy sdk doc for “ABKFlushIntervalOptionKey”.


Appboy SDK Request Policy
string

iOS, tvOS
Appboy SDK request policy at app start time (iOS only). Refer to Appboy sdk doc for “ABKRequestProcessingPolicyOptionKey”.


Appboy SDK Session Timeout
string

All
Appboy SDK time interval for session time out in seconds.


Appboy SDK Minimum Time Interval Between Triggers
string

iOS, tvOS
Appboy SDK minimum time interval in seconds between triggers (iOS only). Refer to Appboy sdk doc for “ABKMinimumTriggerTimeIntervalKey”.


Appboy SDK Collect IDFA?
bool
False
iOS, tvOS
Informs the Appboy Kit whether to collect IDFA.



AppLift
DataLift Retargeting helps our advertisers re-engage with their loyal and paying users for their mobile apps on a performance basis.
Supported Features

Re-Targeting
Custom Events
eCommerce events

Prerequisites
In order to enable mParticle’s integration with AppLift, you will need to work with your AppLift Account Manager to obtain your AppLift API Key for configuration.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
AppLift API Key which you can obtain from your AppLift Account Manager



AppLovin
AppLovin is a mobile marketing platform that empowers brand advertisers to profitably acquire and re-engage customers through its ability to automate the mobile buying process and attribute revenue for every dollar spent on its platform. Its mobile advertising technology moves beyond targeting and segmenting to use personalized ad creative, data and predictive models to deliver dynamic mobile advertising. AppLovin offers dynamic ads to over a billion consumers each month and works with 300+ world-class brands including OpenTable, Hotels.com, eBay, Spotify, GREE, Zynga, and Groupon.
Supported Features

Mobile User Acquisition
Mobile Re-Targeting

Prerequisites
In order to activate mParticle’s integration with AppLovin, you will need the SDK keys for each app that you’d like to setup.  Please reach out to your AppLovin representative for more information on how to obtain your SDK keys.
Event Data Mapping
mParticle’s integration forwards the following event types to AppLovin:

Installs
App Opens
Search Events
Product Views
Add to Cart Events
Purchase Events
Custom Events

To identify devices and users, mParticle forwards the following information with each forwarded event, if available:

iOS:
    
IDFA


Android:
    
Android ID
Android Advertising ID


Both Platforms:
    
MPUserIdenityCustomerId (as the AppLovin login_id)
Device IP Address



mParticle’s AppLovin integration supports custom mappings. You can map your events and attributes for AppLovin. mParticle provides mappings for the following AppLovin event types:

Added to Cart
Product View
Purchased
Search

Configuration Settings



Setting Name
Data Type
Default Value
Description




SDK Key
string

Your application’s SDK key



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Query Attribute
string
query
All
The name of the event attribute that mParticle should forward to AppLovin as the query value. This applies only to Search events.



AppsFlyer
AppsFlyer is a leading Mobile Attribution & Marketing Analytics platform that allows app marketers to easily measure the performance of all their marketing channels - paid, organic and social - from a single real-time dashboard.
Supported Features

Attribution Analytics

Data Processing Notes
AppsFlyer has limits around the number of characters in an event name as noted below

An In-app event name must be no longer than 45 characters. 

Prerequisites
In order to enable mParticle’s integration with AppsFlyer you will need an account with AppsFlyer to get your Dev Key which can be found on the AppsFlyer settings page by clicking SDK Integration in the left navigation.
mParticle AppsFlyer Implementation
mParticle’s AppsFlyer integration requires that you add the AppsFlyer kit to your iOS or Android app, and the mParticle SDK will initialize and automatically map mParticle method calls directly onto AppsFlyer method calls. This approach means that every feature of the AppsFlyer SDKs are supported, as if the app had integrated AppsFlyer directly. The source code for each kit is available if you would like to learn exactly how the method mapping occurs:

iOS
Android

//Sample Podfile
target '<Your Target>' do
    pod 'mParticle-Appsflyer', '~> 6'
end

//Sample build.gradle
dependencies {
    compile ('com.mparticle:android-appsFlyer-kit:4.+')
}

Add the AppsFlyer Kit to your iOS or Android app. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.
Server Integration
The mParticle server-to-server API allows you to additionally send your data server side. mParticle will forward data received via our server-API to AppsFlyer’s respective server-API, including custom events and commerce events.  
The AppsFlyer Kit must be included in your app - the server integration may only be used as a complement to the kit integration.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Dev Key
string

You can find your Dev Key within the AppsFlyer settings page



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Apple App ID
string

iOS
You can find your app’s Apple ID in the app page in iTunes Connect.



Apptentive
Apptentive’s mobile customer engagement software empowers you to identify who to talk to, intelligently engage user segments, and mobilize customers to take action through in-app messages, surveys, and ratings prompts.
mParticle’s Apptentive integration is provided via the Apptentive Kits for the mParticle Apple and Android SDKs. 
Supported Features

User feedback
App events
eCommerce events

Prerequisites
In order to enable mParticle’s integration with Apptentive you will need an Apptentive account to obtain your API key. Once logged into your Apptentive account, your API Key is available by clicking Settings and then API & Development.  
Apptentive Kit Integration
mParticle’s Apptentive integration requires that you add the Apptentive kit to your iOS or Android app, and the mParticle SDK will initialize and automatically map mParticle method calls directly onto Apptentive method calls. This approach means that every feature of the Apptentive SDKs are supported, as if the app had integrated Apptentive directly. The source code for each kit is available if you would like to learn exactly how the method mapping occurs:

iOS
Android

//Sample Podfile
# Uncomment the line below if you're using Swift or would like to use dynamic frameworks (recommended but not required)
# use_frameworks!
target '<Your Target>' do
    pod 'mParticle-Apptentive', '~> 6'
end

//Sample build.gradle
dependencies {
    compile ('com.mparticle:android-apptentive-kit:4.+')
}



Add the Apptentive Kit to your iOS or Android app. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.


In the mParticle platform, enable the Apptentive integration for your app. You will be asked for your Apptentive API key.


The Apptentive SDK is able to customize the user and survey experience based on the first and last name. The mParticle SDKs will automatically forward these to the Apptentive Kit when set as user attributes, see the code samples to the right for an example.


[[MParticle sharedInstance] 
    setUserAttribute:mParticleUserAttributeFirstName value:@"John"];
[[MParticle sharedInstance] 
    setUserAttribute:mParticleUserAttributeLastName value:@"Smith"];

MParticle.getInstance()
    .setUserAttribute(MParticle.UserAttributes.FIRSTNAME, "John");
MParticle.getInstance()
    .setUserAttribute(MParticle.UserAttributes.LASTNAME, "Smith");

Showing the Message Center
After performing steps 1-3 you’ve successfully added Apptentive to your app. The mParticle SDK will take care of initializing Apptentive and forwarding data to it. Depending on your intended user-experience, you may make direct calls Apptentive’s SDK to show their Message Center. See Apptentive’s documentation for more information.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

Apptentive API key



Apptimize
Apptimize allows iOS and Android teams to make real-time updates to the native app experience and data-driven product decisions. Teams can A/B test user flows, control feature rollouts, make instant UI changes, and more.
Supported Features
A/B Testing
Prerequisites
In order to enable mParticle’s integration with Apptimize, you will need your App Key which can be found on your Apptimize settings page.
Apptimize Kit Integration
mParticle’s Apptimize integration requires that you add the Apptimize kit to your iOS or Android app, and the mParticle SDK will initialize and automatically map mParticle method calls directly onto Apptimize method calls. This approach means that every feature of the Apptimize SDKs are supported, as if the app had integrated Apptimize directly. The source code for each kit is available if you would like to learn exactly how the method mapping occurs:

iOS
Android

//Sample Podfile
target '<Your Target>' do
    pod 'mParticle-Apptimize', '~> 6'
end

//Sample build.gradle
dependencies {
    compile ('com.mparticle:android-apptimize-kit:4.+')
}

Add the Apptimize Kit to your iOS or Android app. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.
Apptimize mParticle Configuration
Create a Apptimize output configuration:

Select Directory, and click the Apptimize tile
Click Add Apptimize to Setup
Select the Output Event Integration Type and click Add to Setup
Select the Apptimize output configuration group to configure an output event configuration
Enter a Configuration Name and your Apptimize configuration settings and click Save

Connect inputs to the Apptimize output configuration

Select Connections
Select the Input for the connection definition
Click Connect Output
Select the Apptimize configuration
Enter your connection configuration settings
Toggle the Status to Sending
Click Save

Configuration Settings



Setting Name
Data Type
Default Value
Description




App Key
string

You can find your App Key on the Apptimize settings page



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Collect experiment data
bool
False
All
Collect experiment data from the Apptimize SDK as custom events and user attributes.



Apsalar
Apsalar is a mobile analytics platform providing funnel, attribution and lifetime value analytics solutions. 
mParticle forwards events to Apsalar via the Apsalar Event API. If you choose to forward ‘Launch’ events to Appsalar, a Launch event will be sent each time a session begins in your app. Apsalar will interpret the first Launch event for a device as an Install event. All App events, Screenview events and Commerce events will be forwarded. If you are using the mParticle SDKs in your app, standard device information will be forwarded automatically, along with a dictionary of product attributes, for commerce events, or event attributes, for app events and screenviews.
mParticle forwards events to Apsalar via Apsalar's Event API. Apsalar will not show events received via the event API in its Event Report. However, the events will be visible in the Cohort report and in raw data exports.
Supported Features

User Analytics

Prerequisites
To activate mParticle’s Apsalar integration, you will need the Apsalar API Key for each app that you’d like to setup.  Please contact your Apsalar account representative if you need help locating your API Key.
Data Processing Notes

Event Names may be truncated to 32 characters.  
Apsalar allows a maximum of 400 unique event names
For the additional attributes JSON object, Keys are restricted to a maximum of 255 characters, and values to a maximum of 500 characters.
The entire query string cannot exceed 4000 characters. Any attributes that would cause this limit to be exceeded will be dropped.

See Apsalar’s Restrictions document for more information.
Event Data Mapping
Basic fields sent for all events
These parameters will be sent automatically with every event.



Apsalar Field
mParticle Mapping
Notes




Apple Advertising ID (idfa)
device_info.ios_advertising_id
Only one of four possible Device IDs is required.


Apple Vedonr ID (idfv)
device_info.ios_idfv
Only one of four possible Device IDs is required.


Android Advertising ID (aifa)
device_info.android_advertising_id
Only one of four possible Device IDs is required.


Android UUID (andi)
device_info.android_uuid
Only one of four possible Device IDs is required.


IP address (ip)
ip
Raw IP address for the device.


Version (ve)
device_info.os_version or device_info.version_release(android)
OS version


Make (ma)
device_info.device_manufacturer
Device manufacturer, e.g., ‘Apple’, ‘Samsung’


Model (mo)
device_info.device_model
Device name, eg, ‘iPhone9,2’


Locale Code (lc)
device_info.locale_language + device_info.locale_country
Two-part IETF locale code for the device, eg. ‘en_US’


OS Build (bd)
device_info.build_identifier
OS Build identifier for iOS/tvOS/Android


Application Longname (i)
application_info.package
 


Platform (p)
device_info.platform
iOS, tvOS, or Android


Timestamp (umilisec)
timestamp_unixtime_ms
 



Additional Parameters for Launch event
These parameters will be sent automatically with Launch events.



Apsalar Field
mParticle Mapping
Notes




Application Name (n)
application_info.application_name
 


Do not track (dnt)
device_info.limit_ad_tracking
This is enabled if the user has selected ‘limit ad tracking’ in their device options.


Connection type (c)
device_current_state.data_connection_type
cellular or wifi


Carrier name (cn)
device_info.network_carrier
 



Additional Parameters for App Events
mParticle will forward App events, Commerce Events and Screenview events to Apsalar with the following attributes.



Apsalar Field
mParticle Mapping
Notes




Event Name (n)
event.data.event_name
 


Total Amount (amt)
event.data.product_action.total_amount
 


Currency Code (cur)
event.data.currency_code
 


Event Attributes (e)
event.data.custom_attributes, event.data.product_action.products
See below



Additional Attributes
Any additional attributes for each event will be forwarded as a JSON object. For Commerce events, a products array will be sent which includes id, 
name, brand, category, and quantity for each product. For non-commerce events, any available event attributes will be forwarded.

Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

Your app’s Apsalar API Key which can be found under Developer Tools -> Get the SDK.


Secret
string

Your app’s Apsalar API Secret.



Apteligent
Apteligent’s (formerly Crittercism) crash reporting combined with real-time app performance data helps you build better, engage deeper and monetize faster.  Apteligent reveals operational and usage trends, uncovers issues, and analyzes behaviors. This allows you to continuously improve apps, keep users happy, and put your mobile business at the top of its game.
Supported Features

Crash Reporting
Handled Exception Reporting
Network Performance Reporting
Breadcrumbs

Data Processing Notes
Apteligent supports up to 10 key/value pairs of arbitrary metadata for each user as noted for Android and iOS
Prerequisites
In order to activate mParticle’s integration with Apteligent, you will need to have your Apteligent App ID handy.  You can find your app’s Apteligent App ID on the App Settings page of Apteligent’s dashboard.
Please review mParticle’s SDK documentation for more information on error and exception tracking.  Crash handling and network performance monitoring can also be controlled server-side via the Advanced App Settings in the mParticle platform.  
Apteligent Kit Integration
mParticle’s Apteligent integration requires that you add the Apteligent kit to your iOS or Android app, and the mParticle SDK will initialize and automatically map mParticle method calls directly onto Apteligent method calls. This approach means that every feature of the Apteligent SDKs are supported, as if the app had integrated Apteligent directly. The source code for each kit is available if you would like to learn exactly how the method mapping occurs:

iOS
Android

//Sample Podfile
target '<Your Target>' do
    pod 'mParticle-Apteligent', '~> 6'
end

//Sample build.gradle
dependencies {
    compile ('com.mparticle:android-apteligent-kit:4.+')
}

Add the Apteligent Kit to your iOS or Android app. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.
Apteligent mParticle Configuration
Create a Apteligent output configuration:

Select Directory, and click the Apteligent tile
Click Add Apteligent to Setup
Select the Output Event Integration Type and click Add to Setup
Select the Apteligent output configuration group to configure an output event configuration
Enter a Configuration Name and your Apteligent configuration settings and click Save

Connect inputs to the Apteligent output configuration

Select Connections
Select the Input for the connection definition
Click Connect Output
Select the Apteligent configuration
Enter your connection configuration settings
Toggle the Status to Sending
Click Save

Handled Exception Reporting
//Crittercism SDK method call
@try {
 	[self callNonExistingMethod];
} @catch (NSException *exception) {
  [Crittercism logHandledException:exception]
}

//Equivalent mParticle SDK method call
@try {      
    [self callNonExistingMethod];
}
@catch (NSException *exception) {
    [[MParticle sharedInstance] logException:exception];
}

//Crittercism SDK method call
try {
    throw new Exception("Exception Reason");
} catch (Exception exception) {
    Crittercism.logHandledException(exception);
}

//Equivalent mParticle SDK method call
try {
    throw new Exception("Exception Reason");
} catch (Exception exception) {
    MParticle.getInstance().logException(exception);
}

Handled exceptions can be logged and forwarded to Apteligent by using the logException method in the mParticle SDK.  Please see the code samples in the right hand panel for a sample Crittercism SDK method call, and the equivalent call using mParticle’s SDK.
Breadcrumbs
//Crittercims SDK method call
[Crittercism leaveBreadcrumb:@"parsing began"];

//Equivalent mParticle SDK method call
[[MParticle sharedInstance] leaveBreadcrumb:@"parsing began"];

//Crittercims SDK method call
Crittercism.leaveBreadcrumb("parsing began");

//Equivalent mParticle SDK method call
MParticle.getInstance().leaveBreadCrumb("parsing began");

You can use mParticle’s leaveBreadCrumb SDK method to drop breadcrumbs, which will be forwarded to Apteligent in the event of a crash or handled exception.  Please see the right hand panel for a sample Crittercism SDK method call, and the equivalent call using mParticle’s SDK.
Session start breadcrumbs
[Crittercism leaveBreadcrumb:@"session_start"];

Crittercism.leaveBreadcrumb("session_start");

mParticle will automatically generate breadcrumbs for session start events.  Please see the code samples to the right for the analogous call using Crittercism’s SDK.
Symbolication Support
In order for Apteligent to symbolicate your stack traces, you will need to upload your app’s symbol files, just as you would when using Crittercism’s SDK directly.  For details on this process, please review Apteligent’s documentation.
Configuration Settings



Setting Name
Data Type
Default Value
Description




App ID
string

Your app’s Apteligent App ID.  It can be found in the App Settings page of your Apteligent dashboard.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Service Monitoring
bool
False
Android
Enable Service Monitoring to measure network performance and API calls.



Arbor
Arbor operates the first marketplace for people-based data. Publishers and app developers are empowered to surface, value, and fully monetize their match and location data asset in a privacy-friendly, transparent manner
By working with Arbor, events with location coordinates and/or log-in information (hashed email addresses) will be made available to a marketplace of buyers, although the identity of your app will remain private. Arbor will then provide revenue earned and detailed reporting.
Please visit http://www.arbor.io or contact inquiries@arbor.io to learn more.
Supported Features

Event forwarding

Prerequisites
In order to enable the integration with Arbor, you will need to work with your Arbor technical manager to obtain your API Key and Placement ID for mParticle configuration.

To sell location data, you must have a minimum of 50,000 daily active users, with 20 data points per user per day, in the United States.
For match data, you must collect user email address, which is then hashed to be privacy safe before sending to Arbor.

Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
The API key is used for Arbor API authentication. To obtain an API Key, please contact your Arbor technical manager.


Placement ID
integer
 
Placement ID is unique to each publisher. To obtain a Placement ID, please contact your Arbor technical manager.



Beemray
Beemray is an Audience Intelligence Platform, and offer Location Data as a Service. Enabling premium publishers/broadcasters (adtech players & brands/marketers) to build 1st party audiences based on precise locations and context, then send them to any platform for targeting and monetisation.   Beemray  functions across app (android/iOS) & web (any browser), offering a holistic mobile strategy.  Everything is real time. From data capture, to audience fulfillment, to visualizations/analytics, and audience output.
Supported Features

Event Forwarding

Prerequisites
To set up the Beemray integration, you will need the API Key from your Beemray Honeypot.
Data Processing Notes
Beemray will not accept data more than 24 hours old.
Supported Events

Session Start / End

Configuration Settings



Setting Name
Data Type
Default Value
Description




Beemray API Key
string
 
API key from your Beemray Honeypot.



Bing Ads
Bing Ads Universal Event Tracking (UET) you can create one UET tag and place it across your website, allowing you to collect data for tracking conversion goals and targeting audiences with remarketing lists.
Supported Features

Conversion Tracking

Prerequisites
In order to enable mParticle’s integration with Bing, you will need your Universal Event Tracking (UET) Tag ID.  Follow the steps here to create your UET tag.  In the View UET tag tracking code box, your Tag ID will be shown.
Event Data Mapping
At least one of the following fields is required to forward events to Bing: 

Event Category
Event Label
Event Value

mParticle maps logged events to Bing’s event structure as follows:



Bing Parameter
Description
Mapping




ec
Event Category
event.EventCategory


ea
Event Action
Set to ‘pageLoad’ or ‘ecommerce’, if logEvent or logPurchaseEvent is called, respectively.


el
Event Label
event.EventName


ev
Event Value
Set to the ‘Bing.EventValue’ Custom Flag


gv
Goal Value (Variable Revenue)
event.ProductAction.TotalAmount (Only used if logPurchaseEvent is called)



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Tag ID
string

Mobile Web
The ID associated with the Universal Event Tracking (UET) tag



Blueshift
Blueshift enables large-scale consumer marketers to automate hyper-personalized ‘Segment of One’ marketing, combining dynamic segmentation with highly personalized content, across multiple marketing channels.
Supported Features

User Analytics

Prerequisites
In order to enable mParticle’s integration with Blueshift, you will need to work with your Blueshift representative to obtain your configuration settings.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Event API Key
string
Event API key used to send click-stream data to BlueShift API - You will need an event-stream API key which is accessible from Blueshift dashboard at https://app.getblueshift.com/dashboard#/account_setup or contact success@getblueshift.com
 


User API Key
string
 
User API key used to send user data to BlueShift API - You will need a “user-access API key” which can be obtained by contacting success@getblueshift.com



Branch Metrics
Branch helps mobile apps grow with deep links that power referral systems, sharing links, invites and marketing links with full attribution and analytics.
Prerequisites
In order to activate mParticle’s integration with Branch Metrics, you will need to have your Branch Metrics API key handy - one for each app that you would like to set up.  Here is a screenshot from Branch Metric’s dashboard where you can find the API Key.

Branch Metrics is integrated with mParticle via the Branch Metrics Kits on iOS and Android. In order to use it, you must add the Branch Metrics kit to your project. See the getting started section for how to add individual kits. In order to test your Branch integration, be sure that the mParticle SDK is running in development mode, and that you’ve configured your Branch test API key in the development-mode settings for your app in the mParticle dashboard. The mParticle SDK will automatically use the right key to initialize the Branch SDK for you.
Forwarding Data to Branch Metrics
Once you have added the kit and configured your branch API key in the mParticle dashboard, the mParticle SDKs will take care of initializing the Branch Metrics SDK and forwarding the appropriate application lifecycle events to handle deep links.
iOS Implementation
The mParticle iOS SDK (version 5.4.1 and later) will automatically call the following methods of the Branch Metrics SDK:

initSessionWithLaunchOptions: within application:didFinishLaunchingWithOptions:
handleDeepLink: within application:openURL:options:
continueUserActivity: within application:continueUserActivity:restorationHandler:

Android Implementation
The mParticle Android SDK will initialize the Branch SDK with your Branch API key, and will automatically invoke the Branch#initSession and Branch#closeSession APIs when appropriate.
When implementing Branch Metrics with the mParticle Android SDK, also keep in mind:

As with any attribution-related integration, be sure that you have added the mParticle ReferrerReceiver to your app’s AndroidManifest.xml
If you need to make direct calls to the Branch Metrics SDK, use the Branch getAutoInstance() API, rather than the typical getInstance() method.

Deferred Deep Linking
The mParticle Android SDK provides a deep link API that you can use to query Branch Metrics and customize your app experience based on the parameters of deep links. Refer to the deep linking section to learn how to use these APIs. Rather than making direct API calls to the Branch Metric SDK, this API let you write integration-agnostic apps that are easier to maintain.
Register a URI scheme (iOS and Android)
Though mParticle takes care of initializing the Branch SDK, you still need to choose and define a URI scheme for your app. Follow the iOS and Android links below to register your scheme with Branch Metrics and in your app:

iOS
Android

Events
By calling logEvent in mParticle, the Branch Kit will automatically call the Branch userCompletedAction API. Calling logScreen in the mParticle SDK will call the same API, prepending "Viewed " to the name of the event. You can filter event and screen data that you don’t want or need to go to Branch Metrics in the Data Filters section of the mParticle dashboard.
User Identity
mParticle maps Customer IDs to the Branch Metrics setIdentity API. See the documentation on user identity to learn how to set Customer IDs in the mParticle SDKs.
Logout
mParticle will also map our logout() method to the Branch SDK logout() method.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Branch Key
string

Your app key found on the Settings page of the Branch Metrics dashboard



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Forward screen view messages
bool
False
All
If enabled, all screen view messages will be forwarded to Branch as separate events.



Bugsnag
Bugsnag provides real time exception management, reporting and alerts.  It helps resolve errors quickly via integrations with popular ticketing systems.
Supported Features

Crash Reporting
Handled Exception Reporting

Prerequisites
In order to activate mParticle’s integration with Bugsnag, you will need to have your Bugsnag Project API Keys handy - one for each app that you’d like to setup.  You can find a given app’s Project API Key on the Project Settings page in Bugsnag’s dashboard.
Crash Reporting
In order for mParticle to forward crash data to Bugsnag, you will need to enable unhandled exception logging in mParticle’s SDK.  Once enabled, crash data will be automatically captured and forwarded to Bugsnag.  Please review mParticle’s SDK documentation for more information on how to enable unhandled exception logging.
Server-Side Override: Advanced App Settings
In addition to the SDK methods and configuration settings that control crash handling and network performance monitoring functionality, crash handling and network performance monitoring can also be controlled server-side via the Advanced App Settings in the mParticle console.  For more information on these settings, please review mParticle’s console documentation.
Handled Exception Reporting
//Bugsnag SDK method call
@try {
 	[self callNonExistingMethod];
} @catch (NSException *exception) {
	[Bugsnag notify:exception];
}

//Equivalent mParticle SDK method call
@try {      
    [self callNonExistingMethod];
}
@catch (NSException *exception) {
    [[MParticle sharedInstance] logException:exception];
}

//Bugsnag SDK method call
try {
	throw new Exception("Exception Reason");
} catch(Exception exception) {
	Bugsnag.notify(exception);
}

//Equivalent mParticle SDK method call
try {
    throw new Exception("Exception Reason");
} catch (Exception exception) {
    MParticle.getInstance().logException(exception);
}

Handled exceptions can be logged and forwarded to Bugsnag by using the logException method in the mParticle SDK.  Please see the code samples in the right hand panel for a sample Bugsnag SDK method call, and the equivalent call using mParticle’s SDK.
User Attributes
If the Include User Attributes settings is enabled, mParticle will forward the following user attributes to Bugsnag when available:

$Gender
$Age
$Country
$Zip
$City
$State
$Address
$FirstName
$LastName
$Mobile

User Identities
If the Include User Identities setting is enabled, mParticle will forward the following user identity information to Bugsnag when available:

MPUserIdentityEmail
MPUserIdentityTwitter
MPUserIdentityCustomerId

Bugsnag Release Stage
Bugsnag supports an attribute called Release Stage that is associated with every crash or handled exception.  The typical, suggested values of this attribute are “development” or “production”.  mParticle will forward one of these values with each crash or handled exception based on the environment that is detected by the SDK.  For more information on the app environments, please review mParticle’s SDK documentation.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

Your app’s Bugsnag Project API Key.  You can find this on your app’s Project Settings page in Bugsnag’s dashboard.


Send Messages Securely
bool
True
If enabled, mParticle will forward all data to Bugsnag using SSL.  In some development and testing situations, in might be beneficial to have this disabled, but it should always be enabled before your app goes live.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Include User Attributes
bool
True
All
If enabled, mParticle will forward user attributes to Bugsnag in crash report messages.


Include User Identities
bool
True
All
If enabled, mParticle will forward user identity information to Bugsnag in crash report messages.



Button
Button connects your app to leading commerce brands, earns you money, and generates user loyalty.
Supported Features

Attribution
Deep Linking

Prerequisites
The Button integration requires that you use the Button kits for the mParticle iOS and Android SDKs. In order to enable mParticle’s integration with Button, you will need an account with Button to obtain your Application ID. You can get your Application ID by creating an App in the Button Dashboard or by reaching out to the Button team.
Button Integration Setup
Add the Button Kit to your iOS or Android app. See here if you’re unsure of how to add a kit. Just by adding the kit, your app is setup to attribute installs and referrals from Button!
Create a Button output configuration

Select Directory, and click the Button tile
Click Add Button to Setup
Select the Output Event Integration Type and click Add to Setup
Select the Button output configuration group to configure an output event configuration
Enter a Configuration Name, your Button Application ID and click Save

You will need to create a separate Button configuration for iOS and Android



Connect your platform inputs to the Button output configuration

Select Connections 
Select the iOS or Android input for the connection definition
Click Connect Output
Select the appropriate Button configuration for the platform you are configuring
Toggle the Status to Sending
Click Save

Deferred Deep Linking
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    
    //It's important to set up this listener *prior* to starting the mParticle SDK
    NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
    [notificationCenter addObserver:self
                           selector:@selector(handleKitDidBecomeActive:)
                               name:mParticleKitDidBecomeActiveNotification
                             object:nil];
    
    
    [[MParticle sharedInstance] startWithKey:@"REPLACE ME"
                                      secret:@"REPLACE ME"];

    
    return YES;
}

//once the kit is active, check for a deferred deep link
- (void)handleKitDidBecomeActive:(NSNotification *)notification {
    NSDictionary *userInfo = [notification userInfo];
    NSNumber *kitNumber = userInfo[mParticleKitInstanceKey];
    MPKitInstance kitInstance = (MPKitInstance)[kitNumber integerValue];
    
    if (kitInstance == MPKitInstanceButton) {
        [[MParticle sharedInstance] checkForDeferredDeepLinkWithCompletionHandler:^(NSDictionary<NSString *,NSString *> * _Nullable params, NSError * _Nullable error) {
          
            if (params) {
                //Insert custom logic to inspect the params and route the user/customize the experience.
                NSLog(@"params: %@", params.description);
            }
        }];
    }
}

//you can call this at anytime after MParticle.start()
MParticle.getInstance().checkForDeepLink(new DeepLinkListener() {
    @Override
    public void onResult(DeepLinkResult deepLinkResult) {
        //Insert custom logic to inspect the params and route the user/customize the experience.
    }

    @Override
    public void onError(DeepLinkError deepLinkError) {
        Log.d("Deep link error", deepLinkError.toString());
    }
});

The Button Kit allows you to query Button in your app to check if the given user arrived via a Button link. Follow the iOS and Android code samples to the right to get started.
eCommerce and Referrer Token
//at the time of a purchase
MPIButton *button = [[MParticle sharedInstance] kitInstance:MPKitInstanceButton];
if (button) {
    //access the token
    button.referrerToken
}

//at the time of a purchase
final ButtonKit button = (ButtonKit) MParticle.getInstance().getKitInstance(MParticle.ServiceProviders.BUTTON);
if (button != null) {
    //access the token
    button.getReferrerToken();
}

At this time, the Button integration does not process mParticle eCommerce events, so it’s required that any purchases/orders be reported to Button manually. The Button Kit surfaces a “referrer token” that should be associated with eCommerce purchases that are reported to Button for correct attribution.
See the code samples to the right for how to extract the token, which you can then forward along to your backend and to Button’s API.
Read More
See here for Button’s documentation covering app setup, mParticle’s integration, and interacting with the Button API.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Application ID
string
 
A Button specified unique key for each of your device types (iOS, Android).



Chance
Chance is a global marketing solution provider, helping marketers succeed across display and video.
Supported Features

Advertising
User Acquisition

Prerequisites
In order to enable mParticle’s integration with Chance you will need an account with Chance in order to obtain your App Name.
Configuration Settings



Setting Name
Data Type
Default Value
Description




App Name
string
 
App name/identity



comScore
comScore Direct is an analytics platform that enables publishers to measure the effectiveness of their content across multiple media channels.
Prerequisites
In order to activate mParticle’s integration with comScore, you need your comScore Client ID also known as the C2 Value and Publisher Secret Code for each app that you’d like to setup.  

Sign into your comScore Direct account at http://direct.comscore.com/clients/MobileApp.aspx.
Confirm you are on the “Mobile App” tab
Click on “Get Tag” to copy the C2 Value and Publisher Secret Code for mParticle configuration

mParticle comScore Implementation
mParticle’s comScore integration requires that you add the comScore kit to your iOS or Android app, and the mParticle SDK will initialize and automatically map mParticle method calls directly onto comScore method calls. This approach means that every feature of the comScore SDKs are supported, as if the app had integrated comScore directly. The source code for each kit is available if you would like to learn exactly how the method mapping occurs:
//Sample Podfile
target '<Your Target>' do
    pod 'mParticle-comScore', '~> 6'
end

//Sample build.gradle
dependencies {
    compile ('com.mparticle:android-comScore-kit:4.+')
}


iOS
Android

Add the comScore Kit to your iOS or Android app. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.
Supported Features

App Measurement

Event Data Mapping

mParticle will forward all mParticle’s app_init events to the SetAppContext comScore event.
You must be using the Digital Analytix Enterprise product in order to receive the following events:
    
App Events
Screen Views
Commerce Events



Configuration Settings



Setting Name
Data Type
Default Value
Description




Customer C2 value
string

Customer C2 Value for your comScore account


Publisher Secret
string

Publisher Secret for your comScore account


comScore Product
string
direct
Indicates whether to forward data using the comScore Direct API or the comScore Digital Analytix Enterprise API.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




App Name
string

All
Optional. If specified, comScore will use the chosen app name in its reporting views.


Auto-Update Mode
string
disabled
All
Enable this feature if you’d like comScore to automatically update app usage timing behavior on a regular basis, and if so, whether to update it when the app is in the background in addition to the foreground.


Auto-Update Interval
int
60
All
Sets the time interval, in seconds. Has no effect if Auto-Update Mode is disabled.



Criteo
Criteo allows you to run dynamic retargeting ad campaigns to drive conversions for retail, travel, and gaming apps, intelligently targeting users with personalized creatives.
Supported Features

Event Forwarding

Prerequisites
In order to enable mParticle’s integration with Criteo, you will need to work with your Criteo Account Strategist to obtain your Criteo API Key for mParticle configuration.
Event Data Mapping
The following table details how mParticle events are mapped into Criteo’s data model:



Description
mParticle Event
Criteo Event Data Mapping




When an app launches or comes into the foreground
 
ViewHome


When a user opens a product view
CommerceEvent (Android) and MPCommerceEvent (iOS and tvOS) with ActionType of ViewDetail
ViewProduct


When a user adds a product to their cart
CommerceEvent (Android) and MPCommerceEvent (iOS and tvOS) with Action Type of AddToCart
ViewCart


When a user completes a transaction
CommerceEvent (Android) and MPCommerceEvent (iOS and tvOS) with Action Type of Purchase or Checkout
Purchase



By default, both Purchase and Checkout events will be treated as purchase events by Criteo. If you send both events, this is likely to cause double-counting of transactions when calculating a user's LTV. To avoid double-counting, either turn off forwarding for either Purchase or Checkout events in Event Filter, or include an id attribute on both Purchase and Checkout events.
mParticle’s Criteo integration supports custom mappings. You can map your events and attributes for Criteo. mParticle provides mappings for the following Criteo event types:

Achievement Unlocked
Commerce - Transaction
Deeplink
High Purchase Intention
Low Purchase Intention
Transaction
Tutorial Finished
User Level Finished
User Logged In
User Registered
User Status
User Subscribed
View Item
View Search Results

 eCommerce events such as Purchases should be mapped to Commerce - Transaction. The Transaction mapping exists to support older, pre-eCommerce integrations. Attempting to map eCommerce events to Transaction will result in forwarding errors.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Criteo API Key
string
 
Your Account Strategist will provide an API Key that you will enter here.



Customer.io
Customer.io provides an email service that allows you to generate and execute against email lists based upon user mobile app activity. 
Supported Features

Event Forwarding
Audience Forwarding
Email Marketing
User Opt-Out

Prerequisites
In order to enable mParticle’s integration with Customer.io, you will need the Site ID and API Key of your Customer.io account. Both of these can be found on the “Integration” page of your Customer.io console.
Event Data Mapping
mParticle will forward all events logged with the mParticle SDK logEvent, logScreen, or logTransaction methods along with their attributes. When forwarding events, mParticle will include the timestamp of the events in JSON data format.  When forwarding event names, mParticle trims the leading/trailing spaces and replace spaces with “_”.
User Attribute Mapping
mParticle will only forward event and user data to Customer.io for users that have an email address (MPUserIdentityEmail) defined. When forwarding user data, mParticle uses MPUserIdentityCustomerId as the Customer.io user_id. If CustomerId is not defined, mParticle uses the email address instead.  mParticle always forwards  users’ email, $FirstName, and $LastName, and will optionally forward all user attributes if the configuration parameter “Include ALL user attributes?” is enabled.
User Opt-out
Please note that users who opt out of event tracking via mParticle’s opOut (in iOS) or setOptOut SDK methods will be unsubscribed from email communications in Customer.io, but their user profiles will remain in Customer.io.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

The API Key of your Customer.io account.  You can find it on the “Integration” page of your Customer.io console.


Site ID
string

The Site ID of your Customer.io account.  You can find this ID on the “Integration” page of your Customer.io console.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Include user attributes
bool
True
All
If enabled, mParticle will forward all user attributes to Customer.io.  If disabled, mParticle will just send the users’ first and last names (so that they can be properly addressed in email campaigns).



Datadog
Datadog is a cloud-based monitoring service for IT, operations, and development teams.
Supported Features

Crash Reports
Active Session Details
3rd Party Network Performance Data
Device CPU, Memory, and Battery Utilization

Prerequisites
In order to enable mParticle’s integration with Datadog, you will need an account at Datadog to get your API key for mParticle configuration.  Your API key can be found by selecting Integrations -> APIs from the Datadog Dashboard.
Event Details
The following table describes the metrics forwarded to Datadog.



Metric name in Datadog
Description
Type
Tags associated with the metric




mparticle.active.sessions
Number of Currently Active Sessions
Counter
App Name, Device Country, US State, All session attributes


mparticle.crashes
Number of Crashes
Counter
Method Name (parsed from stack trace), App Version


mparticle.session.peak.cpu
Session Peak CPU
Gauge
OS Version, Device Model, All session attributes


mparticle.session.battery.delta
Session Battery Delta
Gauge
OS Version, Device Model, All session attributes


mparticle.upload.latency
Latency of a Network Event (Refer to the Network APIs)
Gauge
Upload Endpoint, Device Country, US State




Device Country is specified as country:value (i.e. country:usa)
US State is specified as state:value (i.e. state:ca)
Session attributes are specified in “attribute:value” format

Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

The Datadog API keys are unique to your organization, required by the Datadog Agent to submit metrics and events to Datadog



Facebook Atlas
Facebook Atlas is an ad server that also allows ad buyers to measure, target, and optimize digital and mobile ads.
Supported Features

Re-Targeting
Measurement

Prerequisites
In order to enable mParticle’s integration with Facebook Atlas, you will need a Facebook Atlas account to obtain your Universal Tag ID.  
Event Data Mapping
mParticle’s integration forwards the following event types to Facebook Atlas:



Event Type
Event Mapping




App Event
event=app_event, app_event_name={appEvent.EventName}, app_event_type={appEvent.CustomEventType}.  All other event attributes passed to mParticle with the event are passed to Facebook Atlas as attribute=value pairs.


Application State Transition
event=app_transition_event, app_transition_type={transition type}


Commerce Events
event=commerce_event, app_event_name={commerceEvent.EventName}.  All other event attributes passed to mParticle with the event are passed to Facebook Atlas as attribute=value pairs.


Opt Out
event=opt_out_event


Screen View
event=screen_view_event, screen_view_name={screenViewEvent.ScreenName}



All commerce events will forward multiple events to Facebook Atlas, one for each product.  If the commerce event, specifies an action of Purchase or Refund, an additional event will be forwarded containing overall transaction details.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Universal Tag ID
string

Your Atlas Universal Tag ID which you exported from Atlas UIs or received with the API.



Facebook
This section describes the configuration settings necessary to activate mParticle’s event tracking integration with Facebook.  The event tracking integration enables conversion tracking for Facebook advertising campaigns.
For further information on mParticle’s audience integration with the Facebook Custom Audiences platform, please see the Facebook Custom Audiences section located here.
Supported Features

Event Forwarding

Data Processing Notes
Facebook has limits around the number of unique event names and attributes their platform can process as noted here: https://developers.facebook.com/docs/reference/android/current/class/AppEventsLogger/

1000 unique event names
25 attributes per event
Between 2 and 40 characters in an event name and attribute
It may takes up to 24 hours to see refreshed stats in Facebook Analytics

Prerequisites
In order to enable mParticle’s Facebook event integration, you’ll need the following parameters for setup available on your Facebook Ads dashboard:

For iOS/tvOS and Android platforms, you’ll need your app’s Facebook Application ID and Application Secret
For the Web platform, you’ll need your Facebook Pixel ID

Event Data Mapping

The iOS/tvOS and Android integrations forward App, App State Transition, Commerce, Screen View and Session Start events.  
The Mobile Web integration forwards App, Commerce, and Screen View events.

mParticle’s Facebook integration supports custom mappings which allows you to map your events and attributes for Facebook. mParticle provides mappings for the following Facebook event types:

Achieved Level
Added Payment Info
Added to Cart
Added to Wishlist
Completed Registration
Completed Tutorial
Initiated Checkout
Purchased
Rated
Searched
Spent Credits
Unlocked Achievement
Viewed Content

Product Events
//Facebook SDK call
[FBAppEvents logEvent:FBAppEventNameAddedToCart
           valueToSum:54.23
           parameters:@{ FBAppEventParameterNameCurrency    : @"USD",
                         FBAppEventParameterNameContentType : @"shoes",
                         FBAppEventParameterNameContentID   : @"HDFU-8452" } ];

//Equivalent mParticle SDK call
MPProduct *product = [[MPProduct alloc] initWithName:@"A Shoe"
                                            category:@"shoes"
                                            quantity:1
                                       revenueAmount:54.23];
product.unitPrice = 54.23;
product.sku = @"HDFU-8452";

[[MParticle sharedInstance] logProductEvent:MPProductEventAddedToCart product:product];

//Facebook SDK call
Bundle parameters = new Bundle();
parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY, "USD");
parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_TYPE, "shoes");
parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_ID, "HDFU-8452");

logger.logEvent(AppEventsConstants.EVENT_NAME_ADDED_TO_CART,
        54.23,
        parameters);

//Equivalent mParticle SDK call
MPProduct product = new MPProduct.Builder("A Shoe", "HDFU-8452")
    .quantity(1)
    .unitPrice(54.23)
    .totalRevenue(54.23)
    .productCategory("shoes")
    .currencyCode("USD")
    .build();
mp.logProductEvent(MPProduct.Event.ADD_TO_CART, product);

mParticle forwards the mParticle product events Added to Cart and Added to Wishlist to Facebook using Facebook’s corresponding pre-defined event names.  mParticle Product Views are forwarded to Facebook as the pre-defined event “Viewed Content”.  The unit price, currency, product category, and SKU are passed to Facebook as well.  Please see the panel on the right hand side for a sample Added to Cart event call using the Facebook SDK, and an equivalent call using the mParticle SDK.
Purchase Events
//Facebook SDK call
[FBAppEvents logPurchase:4.32 currency:@"USD"];

//Equivalent mParticle SDK call
[[MParticle sharedInstance] logTransaction:@"A Product"
                                 unitPrice:4.32
                              currencyCode:@"USD"];

//Facebook SDK call
logger.logPurchase(BigDecimal.valueOf(4.32), Currency.getInstance("USD"));

//Equivalent mParticle SDK call
MPProduct product = new MPProduct.Builder("A Product")
    .quantity(1)
    .unitPrice(4.32)
    .currencyCode("USD")
    .build();
mp.logTransaction(product);

All calls to mParticle’s logTransaction SDK method call will be forwarded to Facebook using Facebook’s “Purchased” pre-defined event name.  Please see the panel on the right hand side for a sample call using the Facebook SDK, and the equivalent call using the mParticle SDK.
Custom Events
//Facebook SDK call
[FBAppEvents logEvent:@"battledAnOrc"];

//Equivalent mParticle SDK call
[[MParticle sharedInstance] logEvent:@"battledAnOrc"];

//Facebook SDK call
logger.logEvent("battledAnOrc");

//Equivalent mParticle SDK call
mp.logEvent("battledAnOrc");

All custom app events, which are logged via mParticle’s logEvent SDK method, will be forwarded to Facebook as custom app events, using the event name passed to mParticle’s logEvent SDK method.  Facebook does not support custom event attributes, so no attributes will be forwarded along with the events.  Please see the panel on the right hand side for a sample custom app event call using Facebook’s SDK, and the equivalent call using the mParticle SDK.
Screen Views
Screen views are forwarded as follows based on platform:

iOS/tvOS and Android platforms - mParticle will forward screen views as a ‘Viewed Content’ event, with the screen name mapped to the ‘Content ID’ attribute. 
Web platform - mParticle will forward screen views as a ‘PageView’ event.

Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Facebook Application ID
string

iOS, Android, tvOS
The App ID found on your Facebook application’s dashboard


Facebook Application Secret
string

iOS, Android, tvOS
The App Secret found on your Facebook application’s dashboard


Pixel ID
string

Mobile Web
Facebook Pixel ID


Send Activate On
string
ast
iOS, Android, tvOS
Specifies whether to send Facebook activate and deactivate messages based on mParticle application state transition messages or session start messages


Limit Event and Data Usage
bool
False
iOS, Android, tvOS
Sets whether data sent to Facebook should be restricted from being used for purposes other than analytics and conversions, such as targeting ads



Fiksu
Fiksu uses its programmatic media buying and optimization technologies to help app developers cost-effectively acquire new users.
Supported Features

App Events
Commerce Events

Event Data Mapping
mParticle’s Fiksu integration supports custom mappings which allows you to map your events and attributes for Fiksu. mParticle provides mappings for the following Fiksu event types:

Purchase
Registration

Configuration Settings



Setting Name
Data Type
Default Value
Description




App ID
string
 
For Apple OS apps, your app’s iTunes ID.  For Android, your app’s package name.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Hash Customer ID
string
 
All
mParticle forwards your Customer ID values as Fiksu’s clientid. If this setting is enabled, mParticle will hash your Customer ID values before forwarding them to Fiksu. Fiksu does not permit clientid values to contain personally identifying information (PII), so If your Customer IDs contain PII, you should enable this setting.



Flurry
Flurry provides analytics and advertising solutions.  Their analytics services include demographic, traffic source, and event reporting.
Supported Features

Analytics

Data Processing Notes
Flurry has limits around the number of unique event names and attributes their platform can process as noted here: https://developer.yahoo.com/flurry/docs/analytics/gettingstarted/events/ios/

300 event names
10 attributes per event

Prerequisites
In order to activate mParticle’s integration with Flurry, you will need the Flurry Project API Key for each app that you’d like to setup.
Event Data Mapping
All purchase events logged via mParticle’s logTransaction SDK method, and all custom events logged via the logEvent method, will be forwarded to Flurry as though they were logged using Flurry’s logEvent or logEventWithParameters SDK methods.
Page Views
All calls to mParticle’s logScreen SDK method will be forwarded to Flurry as Page Views - equivalent to a call to Flurry’s logPageView SDK method.  The page name will match the screen name passed to the logScreen method.
All Screen Views that are automatically tracked by mParticle’s Android SDK will also be forwarded to Flurry as Page Views.
Timed Events
mParticle will forward all app events with an eventValue attribute as Timed Events to Flurry.  You will need to manually manage the timing of the events that you’d like to measure.
User Identity Mapping
By default, mParticle will forward the appropriate Device ID (IDFA on iOS and Android ID on Android) to Flurry as the User ID.  Alternatively, if “Use CustomerId” is enabled, mParticle will use MPUserIdentityCustomerId (or its hash if “Hash CustomerId” is enabled) when available and the hash of device id otherwise.
User Attribute Mapping
If “Include user attributes” is enabled, mParticle will forward users’ $Age and $Gender attributes to Flurry, to enable demographic reporting.
Location Reporting
If mParticle’s location tracking SDK functionality is enabled in your app, mParticle will forward location information to Flurry.  The forwarded location data will correspond to the user’s location at the time that his/her app session ended (mParticle forwards event data to Flurry in batches that correspond to full user sessions).
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

Your app’s Flurry Project API Key.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Hash Customer ID
bool
True
All
If enabled, mParticle will hash your users’ Customer ID values before forwarding them to Flurry.  You should enable this if your Customer ID values contain PII (personally identifying information).  Please note that if filtering is configured to exclude forwarding the Customer ID, this configuration parameter has no effect.


Track Geographic Location
bool
True
All
If enabled, Flurry will track where your app is being used and report this back to you at the city level.  Otherwise, Flurry will use the IP address of the user’s device and report this information at the country level.


Capture Exceptions
bool
False
All
Used to allow the Flurry SDK to report uncaught exceptions



ForeSee
ForeSee continuously measures satisfaction with the customer experience and delivers powerful insights on where organizations should prioritize improvements for maximum impact.
Prerequisites
In order to enable mParticle’s integration with ForeSee, you will need to work with your ForeSee Satisfaction Research Analyst to obtain your Client ID.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Client ID
string

Your ForeSee Client ID.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Survey ID
string

All
The ForeSee Survey ID of the survey that you’d like to serve to users of this app.


Send App Version
bool
True
All
If enabled, mParticle will include the application version in the Custom Passed Parameters sent to ForeSee



Google AdWords
mParticle’s Google AdWords integration allows you to seamlessly measure the effectiveness of your AdWords app install and app engagement campaigns by sending installs and in-app events (such as purchases and sign-ups) that were driven by your advertising.  Setting up mParticle Google AdWords integration involves the following steps:

Enter your desired mobile app conversion actions and settings in Google AdWords
Configure Google AdWords forwarding settings in mParticle

Supported Features

Conversion Tracking

Data Processing Notes
Google AdWords has limits around the number of unique event names and attributes their platform can process as noted here: https://developers.google.com/adwords/api/docs/appendix/limits?hl=en

200 labels per account

You can map mParticle events to Google AdWords labels in the Connection Settings dialog. If necessary, you can map an mParticle event to more than one Google AdWords label.
Prerequisites
If you are not familiar with conversion tracking in Google AdWords, we recommend that you start by reviewing the following Google AdWords documentation:

Setting Up Conversion Tracking
iOS App Conversions
Android App Conversions
Website Conversion Tracking

Here’s what you’ll need before you can set up iOS app conversion tracking:

An AdWords account: Don’t have one yet? Sign up at Google AdWords.
A Display Network campaign: iOS app conversion tracking is available for mobile app install and mobile app engagement campaigns on the Google Display Network. For other types of Display Network campaigns, you can also see cross-device conversions for conversions that happen between the web and in-app ad clicks or in-app conversions. These conversions will be reported in your Google AdWords Estimated cross-device conversions and Google AdWords Estimated total conversions columns.
An iOS app: This is the app for which you want to track downloads or in-app activity.
Ability to set up conversion data: make sure that you have instrumented the app events that you want to map to AdWords in-app conversion actions.  For installs, mParticle will automatically pass first run / install data to AdWords once you configure forwarding.

Here’s what you’ll need before you can set up Android app conversion tracking:

An AdWords account: Don’t have one yet? Sign up at Google AdWords.
An Android app: This is the app for which you want to track installs or in-app actions.
Ability to set up conversion data: make sure that you have instrumented the app events that you want to map to AdWords in-app conversion actions.  For installs, mParticle will automatically pass first run / install data to AdWords once you configure forwarding.

Configuring Conversion Tracking in Google AdWords

Figure 1: Google AdWords Conversion Actions panel
This starts the AdWords create conversion action workflow, which begins with choosing the source of the conversion that you want to track:

Figure 2: Google AdWords Select Conversion Source Dialogue
Since we’ll be tracking mobile app conversion actions, select “App” as the conversion source.  Once you click on “App,” you will be asked to select the mobile app platform:

Figure 3: Google AdWords App Conversions Select App Platform Dialogue
In this example, we’ll select “iOS,” upon which we are prompted to select the type of conversion action:

Figure 4: Google AdWords iOS Conversion Type
mParticle supports conversion tracking for both app installs and in-app actions, in this example we’ll select “App installs (first open)” which takes us to the “Review & install” screen in AdWords:

Figure 5: Google AdWords iOS App Install Tracking Review & Install Screen
Once on the “Review & install” screen in AdWords, you can configure the four parameters displayed: Name, Value, Optimization, and Postback URL (Postback URL is for app install conversions only).
Upon entering and saving these settings, on the final review page select “set up a server-to-server conversion feed from an app analytics package to AdWords.”:

Figure 6: Google AdWords Review Conversion Settings
The Conversion ID and Conversion label will be entered into the mParticle UI when you configure Google AdWords forwarding in the next step.  For AdWords, Conversion ID is the same across all conversions created.  The conversion label will vary and be specific to each conversion action that you create.
If you are setting up conversion actions for in-app events in addition to app installs, you follow very similar steps in AdWords as above in order to generate conversion labels for those events.  For example, below is a sample screenshot from AdWords for creating an in-app conversion action for an Android app:

Figure 7: Google AdWords Android App In-App Conversion Settings
Tracking Values of In-App Conversion Events
Google AdWords users have three options when configuring a value for each conversion action:

The in-app conversion action always has the same value
The value of the in-app conversion action may vary (for example, by purchase amount)
Don’t assign a value to the in-app conversion action

Below is a screenshot from Google AdWords for iOS in-app action which illustrates this:

Figure 8: Google AdWords Setting an In-App Conversion Value
If your conversion action value varies, there are scenarios where mParticle will automatically populate the value as part of our Google AdWords integration.  We’ll walk through these specific scenarios now.
First, select “The value of this in-app action may vary”:

Figure 9: Google AdWords Setting an In-App Conversion Variable Value
mParticle will dynamically set this value under the following conditions:

When you log an LTV event in mParticle
When you log a basic eCommerce transaction
When you log advanced ecommerce purchases

If you have any questions about whether or not your instrumentation will trigger mParticle to automatically populate the Google AdWords conversion value, please reach out to us at support@mparticle.com and we’d be happy to assist!
Postbacks
In cases where AdWords detects that an install was driven by an AdWords Ad, optionally you may also notify third party sources of this install attribution by providing a postback URL.  For example, if you use an attribution  integration such as Tune, Kochava, Adjust or others you may provide AdWords with a postback URL from that provider so that you can track attribution within that integration as well.  For additional detail on how to do this, please see your respective attribution integrations documentation.  For reference, here is a sample screenshot from AdWords of the postback URL input box.

Figure 10: Google AdWords Inputting an App Install Postback URL
Configure Google AdWords forwarding settings in mParticle
Once you’ve setup your app conversions in your Google AdWords account, configuring forwarding to Google AdWords in the mParticle console is very straightforward.
Google Adwords mParticle Configuration
Create a Google Adwords Conversion output configuration:

Select Directory, and click the Google AdWords tile
Click Add Google AdWords Conversion to Setup
Select the Output Event Integration Type and click Add to Setup
Select the Google AdWords Conversion output configuration to specify the configuration settings and click Save

If you are only tracking app install conversions, simply enter the Google AdWords Conversion ID and App Install Conversion Label for each app platform (iOS and/or Android) that you’ll be tracking.




Connect inputs to the Google Adwords Conversion output configuration:

Select Connections
Select the Input for the connection definition
Click Connect Output
Select the Google AdWords Conversion configuration
Enter your connection configuration settings
    
If you are also tracking in app conversions, for each in app conversion select the App Event name from the drop down menu on the left and enter the Google AdWords conversion label on the right that maps to that event.  
In the sample screenshot below, the App Event selected is eCommerce-AddToCart, and the AdWords In-App conversion label that’s been created in AdWords is mapped / entered to the right of the app event name:



Toggle the Status to Sending
Click Save

Configuration Settings



Setting Name
Data Type
Default Value
Description




Conversion ID
string

The conversion ID provided in your AdWords conversion tracking code snippet


App Install Conversion Label
string

The label provided in your AdWords conversion tracking code snippet for app installs.  This setting does not apply to Mobile Web apps



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Labels
Custom Field

All
The mapping of your events to AdWords conversion labels provided in the Google AdWords conversion actions section under the ‘Set up your tracking method’ heading


Custom Parameters
Custom Field

Mobile Web
The mapping of your event attributes to AdWords custom parameters as setup in the the tracking template field under Campaign Advanced Settings. (Max # of Mappings Allowed: 3)


Remarketing Only
bool
False
Mobile Web
If enabled, the integration is set to remarketing only mode which allows you to improve your marketing campaign’s targeting.



Google Analytics
Google Analytics provides comprehensive analytics solutions, including event, demographic, ecommerce, funnel, crash and exception reporting.
mParticle supports Google Analytics Mobile App Analytics through our mobile SDKs and platform forwarding functionality.  Data collection is enabled through SDK instrumentation.  Once your app is properly instrumented, it is ingested into the mParticle platform, which maps inbound data to Google Analytics features and their required formats and then forwards the data to Google Analytics.
Prerequisites
If you are new to setting up Google’s Mobile App Analytics, your best place to start is of course Google itself and the below are must-reads before proceeding:

Mobile App Analytics Setup Overview
Best Practices for Mobile App Analytics Setup

When mParticle sends data server-to-server to Google Analytics, we utilize Google’s Measurement Protocol.  This allows mParticle to implement server side data forwarding and supports our value proposition to customers of not requiring that additional app SDK components be continually added and updated for integrations.  A Measurement Protocol overview can be found on Google’s site here: https://developers.google.com/analytics/devguides/collection/protocol/v1/
You will need a Google Analytics account and a new app property for every logical app that you want to track.  A Google Analytics tracking id is automatically generated for each property and you will need this when configuring Google Analytics integration in the mParticle console.  We are using the term “logical app” here because as a Google Analytics best practice you will want to track different physical platforms of the same app in the same property.  For example, if you have an iOS app and an Android app with the same functionality that represents one logical app, but two physical apps, and as    a result you would want to use the same tracking id for both.  You can then setup new Google Analytics views within the same property for each app platform to have reporting by platform/physical app. If your iOS and Android apps differ significantly in terms of usage and data capture you will want to track in different properties and tracking ids.
In order for mParticle server-to-server data transfer to be enabled you must have Google Universal Analytics enabled for your Google Analytics properties.  The Measurement Protocol API is part of Google Universal Analytics and data from the measurement protocol will only be processed in Universal Analytics enabled properties.
Data Processing Notes
While mParticle forwards all data in real time, Google Analytics has a processing latency of 24-48 hours. See their documentation for more information on latency and hit limits.
Google Analytics has limits around the number of custom dimensions and custom metrics as noted here: https://support.google.com/analytics/answer/2709828#Limits

There are 20 indices available for different custom dimensions and 20 indices for custom metrics in each property. 
Premium accounts have 200 indices available for custom dimensions and 200 for custom metrics.

If AppName is not available, then mParticle will not forward events to Google Analytics - https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#an.
Supported Features
For each supported feature below, a detailed description is provided in the Supported Feature Reference Section that follows.



Google Analytics Feature Name
mParticle Supported?
Comments




App Level Opt Out
No
You can turn off Google Analytics tracking by disabling forwarding to Google Analytics in the mParticle platform


Campaigns / Traffic Sources
No
mParticle campaign attribution uses Google Play integration for Android apps and also supports iOS attribution


Crashes and Exceptions
Yes
Supported


Custom Dimensions
Yes
Supported, 200 custom dimensions are supported


Custom Metrics
Yes
Supported, 200 custom metrics are supported


Custom Reports
N/A
You can set up customized reports within your Google Analytics account


Data Sampling
Yes
The User Sampling feature in the Data Filters section of the Integration Manager can be used to configure sampling


Dispatch
No
Upload interval can be configured in the mParticle SDK and once data is ingested into the mParticle platform there is a slight processing delay (minutes or less) before the data is forwarded to Google Analytics


Dry Run
No
You can disable forwarding in the mParticle console to stop sending data to Google Analytics


eCommerce Tracking
Yes
Supported


Enhanced eCommerce Tracking
Yes
Supported


Event Tracking
Yes
Note that Google Analytics requires that Event Value (ev) be an integer


Goals reporting
No – future release
Planned for future mParticle release by passing $amount attribute as event label and $value as event value


Screen Tracking
Yes
Supported


Session Management
Yes
mParticle forwards session start / end events according to Google’s protocol


Social Interactions
Yes
Set mParticle event type to Social and pass required attributes


User / Event Timing
Yes
Supported



User Identification
Google does not allow any data to be uploaded to Google Analytics that allows for an individual to be personally identifiable.  For example, certain names, social security numbers, email addresses, or any similar data is expressly not allowed per Google Policy.  Likewise, any data that permanently identifies a particular device is not allowed to be uploaded to Google (such as a mobile phone’s unique device identifier if such an identifier cannot be reset - even in hashed form).


Supported Feature Reference
This section provides detailed implementation guidance for each of the supported features.
Crashes and Exceptions
mParticle forwards events with MessageType = CrashReport to Google Analytics with the following logic:



mParticle SDK Method
Google Analytics SDK Method




logErrorEventWithException
createExceptionWithDescription


beginUncaughtExceptionLogging  endUncaughtExceptionLogging
setTrackUncaughtExceptions




If logErrorEventWithException method is implemented in the app to log handled exceptions, they will be forwarded to Google Analytics accordingly.
If beginUncaughtExceptionLogging / endUncaughtExceptionLogging methods are implemented, app crashes will be captured and forwarded to Google Analytics.




Google Analytics Attribute Name
Google Analytics Parameter
Required
Description




Exception Description
exd
No
The exception description is a formatted string derived from the name of the exception (with the package name excluded) and the topmost stack element with the method, class, and line number extracted from it.


isFatal
exf
Yes
Handled exceptions logged by mParticle SDK will have isFatal = 0, and uncaught exceptions logged by mParticle SDK will have isFatal = 1




Additional Crash Handling setup can be configured for your app.
Custom Metrics and Custom Dimensions
mParticle supports 200 Custom Dimensions.  You can use them to collect and analyze data that Google Analytics doesn’t automatically track.  Click here for instructions on how to create custom dimensions in Google Analytics.  
Once you have created the custom metrics/dimensions in Google Analytics, you can map the information in mParticle Connection settings by specifying an event attribute, a user attribute or a product attribute.
While the settings dialogue will group attributes by event, only the attribute name itself is passed to the forwarder. For example, if "custom_event1" and "custom_event2" both have a custom attribute "color", you only need to map "color" once.
eCommerce/Advanced eCommerce Tracking
mParticle supports both Google Analytics eCommerce and Advanced eCommerce features.  In order to use the Advanced eCommerce tracking, you must enable Enhanced ECommerce Settings from the Admin section of the Google Analytics Web Interface.  You must also enable the mParticle “Enable Enhanced Ecommerce” setting.
Refer to the eCommerce sections for additional details.




mParticle SDK Method
Google Analytics SDK Method




logEcommerceTransactionWithProduct
createTransactionWithIdcreateItemWithTransactionId



You can send in-app purchase data or any kind of transaction data to Google Analytics via eCommerce tracking.  To make sure Google Analytics integration functions properly, app developers need to pass necessary information to mParticle so that mParticle can format the transaction data properly and forward it to Google Analytics.
An incoming event can have the following attributes:



Google Analytics Attribute Name
Google Analytics Parameter
Required
Description




TransactionID
ti
No
A unique ID representing the transaction. This ID should not collide with other transaction IDs. If the configuration setting “Enable Enhanced Ecommerce” is NOT enabled and the TransactionID is missing, mParticle will generate a random string when forwarding the event.  If the configuration setting “Enable Enhanced Ecommerce” is enabled, and the TransactionID is missing, all events will be forwarded with no TransactionID, except for ecommerce events with an action type of refund, which require a TransactionID when forwarded to Google Analytics.


TransactionAffiliation
ta
Yes
An entity with which the transaction should be affiliated (e.g. a particular store). If missing, mParticle will use an empty string.


RevenueAmount
tr
Yes
The total revenue of a transaction, including tax and shipping. If missing, mParticle will use 0.


TaxAmount
tt
Yes
The total tax for a transaction. If missing, mParticle will use 0.


ShippingAmount
ts
Yes
The total cost of shipping for a transaction. If missing, mParticle will use 0.


CurrencyCode
cu
No
The local currency of a transaction.  Click here to specify the default currency settings for your Google Analytics account.


ProductName
in
Yes
The name of the product


ProductSKU
ic
Yes
The SKU of a product


ProductCategory
iv
No
A category to which the product belongs


ProductUnitPrice
ip
Yes
The price of a product. If missing, mParticle will use 0.


ProductQuantity
iq
Yes
The quantity of a product. If missing, mParticle will use 0.



Additional eCommerce Tracking Guidance

It is important to ensure that all Google Analytics required attributes are instrumented. If a required attribute is missing, the eCommerce reports in Google Analytics may not be as expected.
One product SKU is possible for each call to logEcommerceTransactionWithProduct.  If your eCommerce transaction has multiple SKUs, you will need to call the method once for each SKU.

Event Tracking
MPEvent *event = [[MPEvent alloc] initWithName:@"Set Category"
                                          type:MPEventTypeUserPreference;

[event addCustomFlag:@"Music"
             withKey:@"Google.Category"];

[[MParticle sharedInstance] logEvent:event];

MPEvent event = new MPEvent.Builder("Set Category", MParticle.EventType.UserPreference)
                .addCustomFlag("Google.Category", "Music")
                .build();
MParticle.getInstance().logEvent(event);

You can associate Google Analytics custom flags with an AppEvent via the Custom Flags APIs provided by the mParticle SDKs. Reference the table below to determine the correct Custom Flag to append to an AppEvent for your desired Google Analytics category, label and value.  The name of the event is passed as the Event Action (Google Analytics ea parameter).



mParticle Custom Flag
Google Analytics Parameter




Google.Category
ec


Google.Label
el


Google.Value
ev



Reference the code samples to the right and the SDK docs for how to set these custom flags with the mParticle iOS and Android SDKs.



mParticle SDK Method
Google Analytics SDK Method




logEvent with EventType set
GAIDictionaryBuilder.createEventWithCategory:action:label:value:



mParticle maps logged events to Google Analytic’s event structure as follows:



mParticle Event
Google Analytics’s Event Field




Google.Category custom flag if present,mParticle SDK $Category attribute if present,otherwise EventType.
Event Category


EventName
Event Action


Google.Label custom flag if present,mParticle SDK label attribute if present,otherwise it is not sent with the event
Event Label


Google.Value custom flag if present,mParticle SDK value attribute if present.If the event value is not an integer then mParticle will disregard and not forward to Google Analytics.
Event Value



Screen Tracking
Screens in Google Analytics represent content users are viewing within an app.



mParticle SDK Method
Google Analytic’s SDK Method
Attribute Name
Description




logScreen
set:kGAIScreenName value:@”Home Screen”
Screen Name
Use the screen name passed to logScreen method. If missing, mParticle will use empty string.



Session Management
mParticle’s session management scheme will be used, which is different from Google Analytics. mParticle will forward session start and end messages to Google Analytics as follows:



mParticle’s SDK Method
Google Analytic’s SDK Method
Parameter
Description




beginSession / endSession
set:kGAISessionControl
sc
Session control parameter.  Set to start for SessionStart, end for SessionEnd



Social Interactions



mParticle SDK Method
Google Analytics SDK Method




logEvent with EventType “Social”
GAIDictionaryBuilder.createSocialWithNetwork:action:target



mParticle will forward any events with EventType = Social to Google Analytics as social events. Below is a list of attributes for social interactions that Google Analytics require and how they are mapped.



mParticle’s Event
Required
Google Analytic Attribute Name
Google Analytic Parameter




Use EventName
Yes
Social Action
sa


Use socialnetwork attribute sent with the event.  If missing, mParticle will pass ‘Other’.
Yes
Social Network
sn


Use socialtarget attribute sent with the event
No
Social Target
st



User / Event Timing
App developers can measure how long an event takes and log it by the logEvent method and passing in “eventLength” parameter.



mParticle’s SDK Method
Google Analytic’s SDK Method




logEvent with eventLength passed in
GAIDictionaryBuilder.createTimingWithCategory:interval:name:label:



On a logged event, if eventLength is > 0, mParticle will forward the event to Google Analytics as both an event (event hit type) and a user timing measurement (timing hit type). When forwarding as a timing hit type, the data is mapped as follows.



mParticle Event
Google Analytics Attribute Name
Google Analytics Parameter




Category attribute whenever present; otherwise EventType
User Timing Category
utc


Set as the value of eventLength
User Timing Time
utt


EventName
User Timing Value
utv


Only set if the label attribute is sent with the event
User Timing Label
utl



Since mParticle sends the data as two different hit types, two URLs are sent. For example, an event called “Update Profile” with eventLength = 1914 ms will trigger the following two URLs being sent to Google Analytics.
Event hit: https://www.google-analytics.com/collect?ec=Navigation&ea=Update+Profile&ht=1390489491362&cid=2d3636353934303434&ul=en-us&sr=1280x736&an=My+Test+App+1&av=1.4&aid=MyBundle&aiid=com.my.installer.demo&tid=UA-1234565-1&t=event&v=1&qt=380&z=9e5b1042-1a4a-49af-a247-da89951878b4
Timing hit: https://www.google-analytics.com/collect?utc=Navigation&utt=1914&utv=Update+Profile&ht=1390489491362&cid=2d3636353934303434&ul=en-us&sr=1280x736&an=My+Test+App+1&av=1.4&aid=MyBundle&aiid=com.my.installer.demo&tid=UA-1234565-1&t=timing&v=1&qt=380&z=9e5b1042-1a4a-49af-a247-da89951878b4
The ‘ec’ for the event hit types matches the ‘utc’ in timing hit type, ‘ea’ will match ‘utv’, and ‘el’ will match ‘utl’.
Campaign User Attribute Mapping
To handle Campaign Parameters, mParticle will forward user attributes to Google Analytics as noted below.



Description
User Attribute
Google Analytics Mapping




Campaign Content
$utm_content
cc


Campaign ID
$campaign_id
ci


Campaign Keyword
$utm_term
ck


Campaign Medium
$utm_medium
cm


Campaign Name
$utm_campaign
cn


Campaign Source
$utm_source
cs


Google AdWords ID
$gclid
gclid



Configuration Settings



Setting Name
Data Type
Default Value
Description




Tracking ID
string

The tracking ID / web property ID. The format is UA-XXXX-Y.


Use Classic Analytics
bool
False
Use this setting if you have not yet upgraded your account to Universal Analytics.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Use Localhost Cookie
bool
False
All
Allows events to be sent when running a site under localhost


Hash Customer ID
bool
False
All
If true, a hashed Customer ID, when available, will be forwarded as User ID


Send User IP Address
bool
False
All
If enabled, the user’s IP address will be forwarded.


Enable Enhanced Ecommerce
bool
False
All
Use this setting if you have enhanced ecommerce enabled in your Google Analytics account


Send Advertising IDs
bool
True
All
Enable this setting if you want mParticle to send Google Ad IDs and IDFAs to Google Analytics.


Late Event Action
string
Send
All
Choose what will happen when an event arrives too late for Google to handle the event.  Send - Send anyways. Drop - Do not send, Transform - Change the event date time to ensure event is accepted.


Custom dimensions
Custom Field

All
Allows you to map your mParticle custom dimensions to the corresponding custom dimensions setup in Google Analytics.


Custom metrics
Custom Field

All
Allows you to map your mParticle custom metrics to the corresponding custom metrics setup in Google Analytics.


Default Application Name
string

All
The application name to forward to Google Analytics if one is not provided by the application or data feed



Google Cloud Storage
Google Cloud Storage provides a file storage web service for developers and enterprises that combines the performance and scalability of Google’s cloud with geo-redundancy, advanced security and sharing capabilities.
Supported Features

Event Forwarding

Prerequisites
To activate your Google Cloud Storage integration, you will need an active Google Service Account. 
Create a Bucket in your account to store your mParticle data and grant Storage Object Creator to mparticle-gcp-clientfacing@gcp-prod-170221.iam.gserviceaccount.com. This allows mParticle to create files in your bucket.
Optionally, you can create a folder in your bucket to store your mParticle data. This is useful if you are storing other data in the same bucket, or if you want to separate dev and production data without creating two buckets. If you want to store your data in a folder, you must provide the name of the folder in the Connection Settings dialog.
Data Processing Notes
Google Cloud Storage accepts data from all platform types. All event types are supported. By default all available data will be forwarded, but you can pick and choose which events and attributes to send in the Connection Settings dialog.
Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Storage Bucket Name.
string

All
The name of the storage bucket to which mParticle will forward event data.


Folder Name
string

All
An optional name of a folder in the storage bucket in which to store event data.


Unique ID
string

All
An optional string identifier for your app that will be forwarded with each event batch.  Standard app identifiers (Apple OS Bundle ID, Android Package Name) will be forwarded regardless of this setting.


Send Lifecycle Events
bool
True
All
If enabled, lifecycle events (application start/stop, session start/end) will be forwarded.


Send Screen Views
bool
True
All
If enabled, screen view events will be forwarded.


Send Crash Events
bool
True
All
If enabled, app crashes will be forwarded.


Send Network Performance Events
bool
True
All
If enabled, network performance events will be forwarded.


Send Custom Events
bool
True
All
If enabled, custom app events will be forwarded.


Send Push Registrations and Receipts
bool
True
All
If enabled, push registration and receipt notifications will be forwarded.


Send as Batch
bool
True
All
If enabled, this setting will cause your app’s events to be sent in (roughly) 10-minute batches per device.  If disabled, mParticle will POST each event to you individually, as its received.  This setting is ignored if “Wait for Complete Batch” is enabled.


Wait for Complete Batch
bool
False
All
If enabled, mParticle will POST events to you in batches only after a user session has ended, so that each event batch you receive will represent a full session of user activity within your app.


Include Location Information
bool
True
All
If enabled, location data will be forwarded with event data whenever possible.


Include User Identities
bool
True
All
If enabled, user identity information will be forwarded with event batches.


Send Profile Change Events
bool
True
All
If enabled, mParticle will forward ID profile events, such as user sign ups, logins logouts, updates, and deletes.


Send Commerce Events
bool
True
All
If enabled, commerce events will be forwarded.


Store Data In Folders By Date
bool
False
All
If enabled, data will be stored in a folder by date.


Use Compression
bool
False
All
If enabled, data will be compressed in gzip format.


Include Metadata
bool
True
All
If enabled, the following metadata - application_info, device_info and source_info will be forwarded.


Include User Attribute Change Events
bool
False
All
If enabled, User Attribute Change Events will be forwarded.


Include User Identity Change Events
bool
False
All
If enabled, User Identity Change Events will be forwarded.



Google DoubleClick
Google DoubleClick allows marketers to perform attribution and connect and target their user data across Google’s suite of ad products.
Supported Features

Attribution

Data Processing Notes
In order for events to be forwarded to Google DoubleClick:

You must set a value for one of the following settings Install Event Mapping or Custom Event Mapping
The following fields must be set:
    
App Package Name
Device ID
        
IDFA for iOS
GAID for Android


User Agent



For eCommerce events, quantity and total amount are forwarded, but attributes of individual products cannot be forwarded, even if you set them as custom variables.
Prerequisites
In order to enable mParticle’s integration with Google DoubleClick, you will need an account with Google DoubleClick Data Manager to obtain your Advertiser ID and Authorization Token for setup.
Below are additional Google DoubleClick/Floodlight setup details:

Set up your DoubleClick account to get your Advertiser ID and Authorization Token
In the DoubleClick Floodlight settings section:
    
Set up the Activities you want to track for attribution purposes (i.e. installs, custom events, screen views, etc.)
Optionally, set up Custom Variables


In the mParticle interface
    
Select Directory, and click the Google DoubleClick tile
Click Add Google DoubleClick to Setup
Select the Google DoubleClick output configuration group to configure an output event configuration
Enter a Configuration Name and your Google DoubleClick configuration settings and click Save



When entering the Floodlight event into the mParticle setting, you must specify the activity group tag string and activity tag string, separated by “;” (i.e. GroupTag;Activity).  The mappings are forwarded to Google DoubleClick using the type and cat variable for the specified mappings GroupTag;Activity.
For example, if you want to track Installs, Log Ins and eCommerce Purchases, in Floodlight, you can set up 3 activities named “install”, “log_in”, and “purchase” respectively in an activity tag group named “conversion_group”. 
You would then define a connection in mParticle as follows:

Select Connections
Select the Input for the connection definition
Click Connect Output
Select the Google DoubleClick configuration
Enter your connection configuration settings
    
Install Event Mapping - enter conversion_group;install
Custom Event Mapping - Select the “Log In” and “eCommerce Purchase” events and enter values conversion_group;log_in and conversion_group;purchase respectively.
Custom Variable Mapping - If you have set up custom variables in Floodlight, select the event attributes and/or user attributes and map to the corresponding Floodlight custom variables in the Custom Variable Mapping setting. 


Toggle the Status to Sending
Click Save

Event Details

Install events forwarded via the ApplicationStateTransition event of type application initialized and isFirstRun set to true.  
mParticle will extract the quantity and revenue from eCommerce purchase events and forward to the DoubleClick qty and cost events.

Configuration Settings



Setting Name
Data Type
Default Value
Description




Advertiser ID
string

Advertiser ID that is the source of the Floodlight activity


Authorization Token
string

An advertiser-specific alphanumeric string in your DDM account



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Install Event Mapping
string

All
The corresponding group tag and activity tag strings set up in Floodlight for install event, separated by ‘;’, e.g., ‘conversion_group;install’


Custom Event Mapping
Custom Field

All
Pick events and enter the corresponding group tag and activity tag strings set up in Floodlight, separated by ‘;’, e.g., you may pick event name ‘Login’, and enter ‘conversion_group;login’


Custom Variable Mapping
Custom Field

All
Allows you to map your mParticle event attributes and user attributes to the corresponding custom variable setup in Floodlight.



Google Pub/Sub
Google Pub/Sub is Google’s enterprise low-latency messaging service that enables communication between independently written applications hosted on the Google Cloud Platform and externally.
Supported Features

Event Forwarding

Prerequisites
To activate your Google Pub/Sub integration, you will need an active Google Service Account, plus the project ID and Topic name of your Pub/Sub project.
You must grant Pub/Sub Publisher access for your topic to mparticle-gcp-clientfacing@gcp-prod-170221.iam.gserviceaccount.com. This allows mParticle to publish messages to your topic.
Data Processing Notes
Google Pub/Sub accepts data from all platform types.
mParticle forwards the following identifiers to Google Pub/Sub, where available:

Android ID
GAID (Google Advertising ID)
IDFA (iOS Advertising ID)
IDFV (iOS Vendor ID)
Customer ID
Email address
Facebook Audience ID
Facebook ID
Google ID
Microsoft ID
mParticle ID
Twitter ID
Yahoo ID
Other

Supported Events
mParticle forwards the following event types to Google Pub/Sub:

App Event
Application State Transition  
Breadcrumb
Commerce Event
Crash Report
First Run
Network Performance
Opt Out
Profile
Push Message
Push Registration
Screen View
Session Start / End
Uninstall
UserAttributeChange
UserIdentityChange

Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Project
string

All
Google Pub/Sub project name


Topic
string

All
Google Pub/Sub topic name


Unique ID
string

All
An optional string identifier for your app that will be forwarded with each event batch.  Standard app identifiers (Apple OS Bundle ID, Android Package Name) will be forwarded regardless of this setting.


Send as Batch
bool
True
All
If enabled, this setting will cause your app’s events to be sent in (roughly) 10-minute batches per device.  If disabled, mParticle will POST each event to you individually, as its received.  This setting is ignored if “Wait for Complete Batch” is enabled.


Wait for Complete Batch
bool
False
All
If enabled, mParticle will POST events to you in batches only after a user session has ended, so that each event batch you receive will represent a full session of user activity within your app.


Send Crash Events
bool
True
All
If enabled, app crashes will be forwarded.


Send Custom Events
bool
True
All
If enabled, custom app events will be forwarded.


Include User Identities
bool
True
All
If enabled, user identity information will be forwarded with event batches.


Send Lifecycle Events
bool
True
All
If enabled, lifecycle events (application start/stop, session start/end) will be forwarded.


Include Location Information
bool
True
All
If enabled, location data will be forwarded with event data whenever possible.


Send Network Performance Events
bool
True
All
If enabled, network performance events will be forwarded.


Send Profile Change Events
bool
True
All
If enabled, mParticle will forward ID profile events, such as user sign ups, logins, logouts, updates, and deletes.


Send Push Registrations and Receipts
bool
True
All
If enabled, push registration and receipt notifications will be forwarded.


Send Screen Views
bool
True
All
If enabled, screen view events will be forwarded.


Send Commerce Events
bool
True
All
If enabled, commerce events will be forwarded.


Include Metadata
bool
True
All
If enabled, the following metadata - application_info, device_info and source_info will be forwarded.


Include User Attribute Change Events
bool
False
All
If enabled, User Attribute Change Events will be forwarded.


Include User Identity Change Events
bool
False
All
If enabled, User Identity Change Events will be forwarded.



HockeyApp
HockeyApp provides application testing solutions including beta distribution, test tracking and crash reports/analytics.
Supported Features

Crash Reporting - unhandled exceptions

Prerequisites
In order to activate mParticle’s integration with HockeyApp, you will need to have your HockeyApp App ID handy.  You can find you App ID on the App Overview page in the HockeyApp dashboard.
Unhandled Exceptions

In order for mParticle to forward crash data to HockeyApp, you will need to enable unhandled exception logging in mParticle’s SDK.  Once enabled, crash data will automatically be captured and forwarded to HockeyApp.  Please review mParticle’s SDK documentation for more information on how to enable unhandled exception logging.
In addition to the SDK methods and configuration settings that control crash handling and network performance monitoring functionality, crash handling and network performance monitoring can also be controlled server-side via the Advanced App Settings in the mParticle platform.  
The identities can be set using the setUserIdentity and setUserAttribute methods.
The value of the “Include User ID” and “Use Customer ID” settings control which user data is forwarded as shown below:




Include User ID
Use Customer ID
User Data Forwarded




No
No/Yes
UserID is set to “UNKNOWN”


Yes
No
The user’s first name, last name, and email address if available.  UserID is set to Android Device ID or IDFA/IDFV


Yes
Yes
The user’s first name, last name, email address if available.  UserID is set to Customer ID if available, otherwise Android Device ID or IDFA/IDFV



Configuration Settings



Setting Name
Data Type
Default Value
Description




App ID
string

Your app’s HockeyApp App ID.  You can find it on the App Overview page in HockeyApp’s dashboard.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Include User ID
bool
True
All
If enabled, mParticle will forward a user ID value with each crash or handled exception.  The user ID will be either the user’s Customer ID or a device ID (IDFA or Android ID), depending on what “Use Customer ID” is set to.


Use Customer ID
bool
False
All
If “Include User ID” is disabled, then this setting has no effect.  If “Include User ID” is enabled and this setting is also enabled, then mParticle will forward user’s Customer ID values to HockeyApp with each crash or handled exception.  If “Include User ID” is enabled but this setting is disabled, then mParticle will forward a device ID instead.



Impact Radius
Impact Radius’ digital marketing platform provides an integrated suite of products for media attribution, performance marketing, tag management and mobile analytics.
Supported Features

User Analytics
Attribution

Event Data Mapping
mParticle’s integration forwards the following event types to Impact Radius:

Application State Transition
Commerce Events
Custom Event

Prerequisites
In order to enable mParticle’s integration with Impact Radius, you will need an Impact Radius account to obtain your configuration settings.  Detail on where you can find these settings are included below:

Account SID and Auth Token can be found by navigating to Account Settings (Gear Icon in the upper right of your screen) > Technical Settings > API Access tab.
Campaign ID - The campaign names and IDs are displayed under your advertiser account name (in the upper right-hand corner). If you have more than one campaign, you can click on the drop-down to see a complete list of all campaigns.
System App ID - The application ID that is generated for your mobile app by Impact Radius. This can be found by navigating to Tracking Settings > Mobile Apps.

Additional details on the mapping of mParticle events to Impact Radius event codes are available once logged into Impact Radius.  From the Impact Radius dashboard click the “?” icon at the top right to access the help system or click here.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Account SID
string
 
Your account SID for REST API access generated by Impact Radius.


Auth Token
string
 
Your auth token for REST API access generated by Impact Radius.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Campaign ID
string
 
All
The unique ID associated with your Impact Radius campaign.


System App ID
string
 
All
The application ID that is generated for your mobile app by Impact Radius.



Indicative
Indicative is a behavioral analytics platform for growth marketers, product managers, and data analysts to optimize customer acquisition, conversion, and retention.
Supported Features

Behavioral Analytics

Prerequisites
In order to enable mParticle’s integration with Indicative, you will need an account with Indicative in order to obtain your API Key.  Once logged into the Indicative Console, you can select Projects to get your API key.

In order for events to be forwarded to Indicative, you must provide a Customer ID User Identity.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
When you sign up with Indicative, you will receive API Keys which correspond to all supported platforms on mParticle.



Inspectlet
Inspectlet lets you record and replay everything visitors do on your site and find out where visitors are really looking.  This integration is only supported for the Web platform.  
Prerequisites
For the integration setup, you will need to have the Inspectlet Website ID (wid) of your website.  This information can be found in your Inspectlet Embed code.
Configuration Settings



Setting Name
Data Type
Default Value
Description




WId
string

Inspectlet wid of your app



Intercom
Intercom is one place for every team in an internet business to communicate with customers, personally, at scale—on your website, inside web and mobile apps, and by email.  
Supported Features

User Identity
User Attributes
Event Tracking

Prerequisites
In order to enable mParticle’s integration with Intercom, you will need an account with Intercom to get the App ID and API Key for mParticle configuration.  Your App ID is required for all platforms. The API Key is only required for iOS, tvOS and Android.  
Click here for instructions on how to create your Intercom Full Access API Key.  Your App ID and API Key settings are available on the API Keys page on Intercom, accessible from your Integration settings.
Data Processing Notes
Intercom has limits around the number of characters and number of attributes as noted below:

5 attributes per event https://developers.intercom.io/docs/event-model
100 user attributes with character restrictions https://developers.intercom.io/docs/create-or-update-user

Configuration Settings



Setting Name
Data Type
Default Value
Description




App ID
string

Your App ID is available on the API Keys page on Intercom, accessible from your Integration settings.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Widget ID
string
#IntercomDefaultWidget
Mobile Web
Enter a Widget ID or class to customize the display of the Intercom Messenger or leave the default value.


API Key
string

iOS, Android, tvOS
Your Api Key is available on the API Keys page on Intercom, accessible from your Integration settings.



ironSource
ironSource.atom Data Flow Management is a reliable data pipeline solution that handles all your data regardless of origin, all while giving you full control over your logs.
Supported Features

User Analytics

Prerequisites
In order to enable mParticle’s integration with ironSource, you will need to work with your ironSource representative to setup your pipeline and obtain your ironSource API Key and Destination for configuration.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Provide the Atom authorization key. To get started using Atom please contact atom@ironsrc.com


Stream
string
 
Provide the Atom stream.



Iterable
Iterable is a multi-channel growth marketing and user engagement platform that powers marketing, transactional, and lifecycle campaigns on email, web and mobile.  Iterable requires your application to be collecting email addresses.  This can be done by calling the setUserIdentity SDK method.
Prerequisites
In order to forward events to Iterable, you must have an account with Iterable.
1. Sign into your Iterable account at https://app.iterable.com/login/
2. Create your Iterable API keys
a. Select Integrations -> API Keys from the left navigation menu.

b. Click the Create New API Key button
c. Select to create a key of type Standard
d. Click Create

d. Save the value in the Key column of the table.  This value is need to configure Iterable in the mParticle Service Integration.

3. Create Push Integrations
If you will be sending push registration events, you will need to provide the Iterable Push Integration names as part of the mParticle configuration.  This can be done from the Iterable platform.  
a. Select Push Integrations -> Mobile Push from the left navigation menu.
b. Click Add Push Integration and enter the push integration name and platform.
c. Depending on the platform selected, you will need to enter additional parameters:

For GCM, you will need to enter your API Key
For APNS and APNS Sandbox, you will need to enter your app certificate.


Iterable Kit Integration
mParticle also supports an Iterable Kit integration, which you can use to access Iterable’s Deep Linking features. To use this integration, you need to include the Iterable kit in your installation of the mParticle SDK. The kit integration handles only Deep Linking. All other data is still sent server-to-server. The source code for each kit is available on Github:

iOS
Android

//Sample Podfile
target '<Your Target>' do
    pod 'mParticle-iterable', '~> 6'
end

//Sample build.gradle
dependencies {
    compile 'com.mparticle:android-iterable-kit:4+'
}

To add the Iterable Kit to your iOS or Android app, see the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
API Key used to connect to the Iterable API - see the Integrations section of your Iterable account.


GCM Push Integration Name
string
 
GCM integration name set up in the Mobile Push section of your Iterable account.


APNS Sandbox Integration Name
string
 
APNS Sandbox integration name set up in the Mobile Push section of your Iterable account.


APNS Production Integration Name
string
 
APNS Production integration name set up in the Mobile Push section of your Iterable account.



Kahuna
Kahuna provides push messaging services that are based on real-time user analytics.  mParticle fully supports Kahuna with a Kahuna-specific embedded software kit.  This allows Kahuna clients to realize the full benefit of Kahuna capabilities and still deploy a single SDK with mParticle.
Overview and Prerequisites
In order to deploy Kahuna the following major steps are required:
1. Kahuna implementation
Go through the standard Kahuna implementation process with your Kahuna customer success representative, including completion of your Kahuna blueprint.  
Kahuna relies heavily on an event - event attribute model.  This will have implications for your instrumentation.  For example, it is common practice for developers to use a logScreen or equivalent screen tracking method when instrumenting page view activity.  Google Analytics is one of the more widely used examples of this.  If you are using Kahuna however, that data would not be passed.  Therefore it is critically important that you leverage logEvent for data collection and forwarding for all Events and Event Attributes specified in your Kahuna blueprint.
2. Configure Kahuna in the mParticle platform
Create a Kahuna output configuration:

Select Directory, and click the Kahuna tile
Click Add Kahuna to Setup
Select the Output Event Integration Type and click Add to Setup
Select the Kahuna output configuration group to configure an output event configuration
Enter a Configuration Name and your Kahuna configuration settings and click Save

Connect inputs to the Kahuna output configuration

Select Connections
Select the Input for the connection definition
Click Connect Output
Select the Kahuna configuration
Enter your connection configuration settings
Toggle the Status to Sending
Click Save

mParticle forwarding will filter any data that is sent to Kahuna based upon what is entered into the Event name list and Event attribute list to ensure that Kahuna is only receiving event data that is part of your Kahuna blueprint.  In other words, if an event or event attribute is detected that is not on the event name list / event attribute list, mParticle will not forward that event data to Kahuna.
3. Test Implementation
You should always validate that your integration setup is working as desired before moving on to additional integration setups and/or the final step of submitting your app to the app store.  mParticle recommends the following quality assurance measures:

Test Inbound: Validate inbound messaging to mParticle using the mParticle Live Stream
Test Outbound: Once inbound messaging is validated, enable integration forwarding in mParticle and validate outbound messaging using the mParticle Live Stream and Kahuna reports.

For inbound messages, in order to confirm that your instrumented app is receiving inbound events, you will need to log into mParticle, choose your workspace, click Connections, Live Stream from the left navigation panel.  Once everything looks fine, enable the Kahuna connection and inspect that outbound messages are flowing as expected.
Kahuna & mParticle Implementation Scenarios
Depending upon when you implement Kahuna in relation to your mParticle implementation, your deployment sequence may be slightly different.  Let’s look at 3 basic implementation scenarios:
A. Implementing Kahuna and mParticle at the same time:
In this scenario you would:

Work with Kahuna to establish your Kahuna Blueprint - this will drive the exact naming of your events and event attributes
Instrument your app using the mParticle SDK, making sure your logEvent names and eventInfo key attributes match exactly your Kahuna Blueprint
Configure Kahuna forwarding per the above instructions

B. Have already instrumented your app using mParticle, and now want to implement Kahuna:
In this scenario you would:

Work with Kahuna to establish your Kahuna Blueprint, but in this case your Kahuna Blueprint event names and event attributes needs to match exactly what you have already instrumented using the mParticle SDK
Configure Kahuna forwarding per the above instructions

C. Already have been working with Kahuna, and now want to implement mParticle:

Similar to scenario “A.” above, instrument our app using the mParticle SDK, making sure your logEvent names and eventInfo key attributes match exactly your Kahuna Blueprint.
Configure Kahuna forwarding per the above instructions.  mParticle recommends starting this to a test Kahuna account so that you can compare data before cutting over.
Once everything looks fine you can cut over to production and remove the Kahuna SDK.

Configuration Settings



Setting Name
Data Type
Default Value
Description




Secret Key
string

Your application’s Secret Key value, found on the Configuration tab of the Kahuna Settings page



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Send transaction data
bool
False
All
If true, transaction events will be forwarded to Kahuna


Event name list
<string> List

All
List of event names that will be forwarded to Kahuna. For example: flight_selected.  Each name in this list must be entered on its own line.  This field is no longer used starting with mParticle IOS SDK 3.5.0, Android SDK 2.4.0.


Event attribute list
<string> List

All
List of event attributes that will be forwarded to Kahuna as user attributes.  Each attribute in this list must be entered on its own line.  This field is no longer used starting with mParticle IOS SDK 3.5.0, Android SDK 2.4.0.



Kissmetrics
Kissmetrics provides event and user analytics including funnel and revenue analysis.
mParticle supports Kissmetrics through our mobile SDKs and platform forwarding functionality.  Data collection is enabled through SDK instrumentation.  Once your app is properly instrumented, data is ingested into the mParticle platform, which maps inbound data to Kissmetrics features and their required formats and then forwards the data to Kissmetrics.
Overview and Prerequisites
Kissmetrics is often used in conjunction with Google Analytics or by itself as a standalone analytics service.  Google Analytics does not provide user level reporting, and Kissmetrics addresses this gap by linking activity to users.  Kissmetrics’ recent tagline is: “Google Analytics tells you what’s happening.  Kissmetrics tells you who’s doing it.”  Of course, Kissmetrics offers additional compelling features and as a result is a popular analytics service.
When mParticle sends data to Kissmetrics, mParticle utilizes Kissmetrics’ native APIs.  This allows mParticle to implement server side data forwarding and supports our value proposition to customers of not requiring that additional app SDK components be continually added and updated for integrations.
You will need a Kissmetrics account and your Kissmetrics API Key, available in your Kissmetrics setting to configure Kissmetrics in mParticle.
Supported Features



Kissmetrics Feature Name
Feature Description
mParticle Supported?
Comments




People & Event Tracking
Track mobile app events and users
Yes
Kissmetrics connects all of the historical data from an anonymous visitor to their customer profile as soon as they become a customer. This is done by aliasing login user name to the user’s previous id.  mParticle doesn’t currently support alias for now although this is possible for a future release.  As a result, it is important that app developers identify users with their respective login as soon as possible.


User Attribution
Where user traffic originates from
No
Kissmetrics currently focuses more on web to web referrer, whereas mParticle focuses on mobile app / web attribution support.


A/B Testing
 
No
 



Supported Feature Reference
User ID and User Attributes

Kissmetrics API Reference: http://support.kissmetrics.com/apis/specifications.html#setting-properties

mParticle SDK Methods:

setUserIdentity
setUserAttribute

If the Use Customer ID setting is enabled, the Customer ID will be used as the User Identifier, otherwise the Device ID will be used.  
The Include All User Attributes setting has a default value of False.  This means that when forwarding user attributes, on each event batch mParticle will only forward user attributes if there are changes to an existing attribute.  Among other benefits this allows the app developer to avoid updating the timestamp of existing user attributes if they have not been otherwise changed.
Events and Event Attributes

Kissmetrics API reference: http://support.kissmetrics.com/apis/specifications.html#recording-an-event

mParticle SDK Methods:

logEvent
logScreen

mParticle will forward both mParticle SDK logEvent and logScreen data to Kissmetrics as Kissmetrics events and event attributes.
Revenue Tracking
In order to enable revenue tracking in Kissmetrics, you must set the Revenue Key setting and also configure revenue mapping in Kissmetrics.
For example, if you establish a “Billing Amount” attribute as the revenue tracking attribute, when forwarding purchase events mParticle will map all of the LTV attribute names in mParticle to the attribute “Billing Amount” and forward the dollar amount.

Kissmetrics revenue reporting reference: http://support.kissmetrics.com/tools/revenue-report.html

Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

API Key



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Include ALL User Attributes
bool
False
All
If enabled, mParticle will forward all user attributes to Kissmetrics


Revenue Key
string
Billing Amount
All
The single Kissmetrics property used to track revenue across all customers and is used in the Kissmetrics Revenue Report.


Use Customer ID
bool
False
All
If enabled, Customer ID will be used as the user identifier, otherwise Device ID will be used as the user identifier.



Kochava
From attribution and analytics to optimization, the Kochava platform provides precise, real-time visualization of campaign and app performance from ad impression through user lifetime value.
Supported Features

Attribution
User Analytics
Deep Linking
Fraud Detection

Data Processing Notes
If the mParticle SDK is used to send data, the minimum acceptable SDK version is 3.0 for iOS and 2.0 for Android. Data sent from earlier SDK versions will not be forwarded to Kochava. 
Due to a known bug in the mParticle iOS SDK prior to version 5.1.4, install events may or may not be forwarded. If install events are missing in Kochava’s platform, please make sure you are using the latest version of the mParticle SDK.
mParticle supports the following modes when forwarding data to Kochava:

Hybrid mode
    
If the Kochava SDK is initialized in the app, it sends install events to Kochava servers. 
Post-install events and any user identities are sent via the mParticle SDK to mParticle servers and forwarded to Kochava S2S.


Server mode
    
If data is sent to mParticle S2S API or Kochava’s SDK is not initialized in the app, mParticle will forward installs, post-install events, and any user identities to Kochava S2S



mParticle will forward Apple Search Ad Attribution values, if provided.
Prerequisites
In order to activate mParticle’s integration with Kochava, you’ll need to have your Kochava App ID handy.  If you’re not sure what this ID is or where to find it, please contact your Kochava account representative for assistance.
Event Data Mapping
//Event tracking using Kochava's SDK
 MyAppDelegate *delegate = (MyAppDelegate *)[[UIApplication sharedApplication] delegate];
 [delegate.kochavaTracker trackEvent:@"SomeEvent"];

//Equivalent using mParticle's SDK
[[MParticle sharedInstance] logEvent:@"SomeEvent"
                           eventType:MPEventTypeTransaction];

//Event tracking using Kochava's SDK (assumes that kTracker is a reference to an instantiated Kochava SDK object)
kTracker.event( "SomeEvent");

//Equivalent using mParticle's SDK
MParticle.getInstance().logEvent("SomeEvent");

mParticle will forward all events generated by mParticle’s logEvent SDK method will be forwarded to Kochava, with the mParticle Event Name as the Kochava Event Title.  See the panel on the right for a sample call using Kochava’s SDK, and the equivalent using mParticle’s.
Screen Views
 MyAppDelegate *delegate = (MyAppDelegate *)[[UIApplication sharedApplication] delegate];
 [delegate.kochavaTracker trackEvent:@”View SomeScreen"];

//Assume that kTracker is a reference to an instantiated Kochava SDK object
kTracker.event( "View SomeScreen");

All screen views tracked by mParticle’s logScreen SDK method will be forwarded to Kochava, with the screen name as the Event Title.  Please see the panel on the right for an analogous event tracking call using Kochava’s SDK.
Additionally, all screen views that are automatically tracked in the Android SDK will be forwarded to Kochava with the Event Title set to the screen’s Activity class name.
LTV Tracking


//This call to mParticle's logTransaction method...
[[MParticle sharedInstance] logTransaction:@"The next book in my reading list"
                               affiliation:@"My favorite retailer"
                                       sku:@"xxx-yyy-zzz"
                                 unitPrice:28.00
                                  quantity:1
                             revenueAmount:30.00
                                 taxAmount:2.00
                            shippingAmount:0
                             transactionId:nil
                           productCategory:@"Books and Magazines"
                              currencyCode:@"USD"];

//...will be forwarded to Kochava as though you had made this call to Kochava's SDK:
MyAppDelegate *delegate = (MyAppDelegate *)[[UIApplication sharedApplication] delegate];
[delegate.kochavaTracker trackEvent:@”Ecommerce":@"30.00"];                       

//This call to mParticle's logTransaction method...
MPProduct product = new MPProduct.Builder("The next book in my reading list", "aaa-bbb-ccc")
    .quantity(1)
    .unitPrice(28.00)
    .taxAmount(2.00)
    .totalRevenue(30.00)
    .productCategory("Books and Magazines")
    .currencyCode("USD")
    .affiliation("My favorite retailer")
    .build();
MParticle.getInstance.logTransaction(product);

//...will be forwarded to Kochava as though you had made this call to Kochava's SDK:
//Assume that kTracker is a reference to an instantiated Kochava SDK object
kTracker.event( "Ecommerce" , "30.00");

All Ecommerce transactions tracked by mParticle’s logTransaction SDK method will be forwarded to Kochava with the the Kochava Event Data set to the revenue amount passed into logTransaction (either directly as a method argument, or via as an attribute of an MPProduct object).  Please see the panel on the right hand side for a sample call using Kochava’s SDK and the equivalent using mParticle’s.
Spatial Events
//Kochava Spatial Event tracking method call
MyAppDelegate *delegate = (MyAppDelegate *)[[UIApplication sharedApplication] delegate];
[delegate.kochavaTracker spatialEvent:@"My Spatial Event":1.0:3.33:-0.5];

//Equivalent using mParticle's SDK
NSDictionary *coords = @{@"SpatialX":@"1.0",
                         @"SpatialY":@"3.33",
                         @"SpatialZ":@"-0.5"};

[[MParticle sharedInstance] logEvent:@"My Spacial Event" eventType:MPEventTypeOther eventInfo:coords];

//Kochava Spatial Event tracking method call
//Assume that kTracker is a reference to an instantiated Kochava SDK object
kTracker.eventSpatial( "My Spatial Event" , 1.0, 3.33, -0.5); 

//Equivalent call using mParticle's SDK
Map<String, String> coords = new HashMap<String, String>();
coords.put("SpatialX", "1.0");
coords.put("SpatialY", "3.33");
coords.put("SpatialZ", "-0.5");
MParticle.getInstance().logEvent("My Spatial Event", MParticle.EventType.Other, coords);

All events with the attributes SpatialX, SpatialY and SpatialZ defined will be forwarded to Kochava as Spatial Events.  Please see the panel to the right for a sample call using Kochava’s SDK, and the equivalent using mParticle’s.
Configuration Settings



Setting Name
Data Type
Default Value
Description




App ID
string

Your app’s Kochava App ID.  If you’re not sure what this ID is or where to find it, please contact your Kochava account representative for assistance.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Currency
string
USD
All
The currency that Kochava should use when tracking and reporting LTV.  The default value is USD.


Enable ‘retrieveAttribution’
bool
True
All
If enabled, mParticle will initialize Kochava’s embedded SDK with ‘retrieveAttribution’ option enabled. Note that you’d have to follow Kochava’s instructions on how to retrieve attribution data in your app.


Enable Console Logging
bool
False
All
If enabled, Kochava-specific debugging information will be outputted to LogCat for Android, or to the XCode debugging console for Apple OS.


Limit ad tracking
bool
False
All
If enabled, mParticle will initialize Kochava’s embedded SDK with ad tracking disabled.



Krux
Krux helps businesses increase revenue by delivering more valuable content, commerce, and marketing experiences.
Supported Features

Screen View
App Event
Commerce Event
Session Start

Prerequisites
In order to enable mParticle’s integration with Krux, you will need to work with your Krux representative to obtain the Publisher ID and Site ID for mParticle configuration.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Publisher ID
string

Your Krux Publisher ID. To obtain this ID, please contact your Krux representative.


Domain
string

Your company’s domain name.


Site
string

The Krux site ID for your app. To obtain this ID, please contact your Krux representative.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Event IDs
Custom Field

All
Allows you to map your mParticle events to the corresponding event IDs provided by Krux


Session Start Event ID
string

All
Allows you to map SessionStart events to the corresponding event ID provided by Krux



Leanplum
Leanplum is a mobile marketing platform providing cross-channel messaging and app optimization in a single solution. Leanplum offers Push, Email, Automation, App Editing, Personalization, A/B Testing, and Analytics.
Supported Features

Marketing Automation
A/B Testing
Analytics

Data Processing Notes
Leanplum has limits around characters and the number of unique event names and attributes their platform can process as noted here: https://www.leanplum.com/docs#/docs/api

Up to 200 distinct user attribute names per app.
Up to 500 event names per app.
Up to 50 user attributes per user.
Up to 50 event attributes per event.
Events and user attributes must be under 140 characters and must not start with a period or hyphen, end with a forward slash, contain commas, vertical pipes, double quotes, tabs, newlines, or return characters and must not be numeric.

Prerequisites


In order to enable mParticle’s integration with Leanplum, you will need an account with Leanplum.  Once logging into your Leanplum account, your App ID and Client Key can be found by clicking App Setting and then Keys and Settings.



If you will be sending development data to Leanplum you will need to uncheck the Use same settings for Production and Development and specify the Production and Development Client Keys respectively.


mParticle Leanplum Implementation Scenarios
Kit Integration
The mParticle SDK allows you to include the Leanplum kit which allows Leanplum interface components (images, layout files, etc.) and as a result supports the entire Leanplum feature set, which includes:

Push Notifications, including locally triggered push notifications
Newsfeed messages
In-App messages

The source code to each kit is available if you would like to learn exactly how the above mappings occur:

iOS
Android

Server Integration
The mParticle S2S API allows you to send data server side (API reference). In this scenario, mParticle forwards data via Leanplum’s REST API which supports a limited set of features:

Updating User information - device and user attributes
Event tracking

If you are using the server side Leanplum integration:

Contact your Leanplum account manager to ensure that your Leanplum account is provisioned for Full Service.  
mParticle will only forward events to Leanplum if a Device ID is available.


Apps within the Leanplum platform can either be set to "development" or "production" mode.  Similarly, mParticle's SDKs and all data are segmented between "development" and "production." mParticle's UI gives you the option to configure two sets of credentials - one for production data, and another for development data. Be sure to line these up to the analogous apps and modes in Leanplum.

General Parameters
The following general parameters are forwarded to Leanplum:



Description
mParticle details
Leanplum field




Application ID
The value of setting App ID
appId


Client Key
The value of setting Client Key
clientKey


The current user ID
The value of setting User ID.  If an email or Customer ID is not available, this field is not forwarded.
userId


A unique ID for the device making the call
The Device ID setting controls what value is passed in the deviceId field per platform as follows:  iOS - by default the IDFV will be used for Production and IDFA for Development or you can specify to always send IDFA or IDFV.  Android - by default the Google Advertising ID will be used and then Android Device ID or you can specify to always send Google Advertising ID or Android ID.
deviceId



Event Data Mapping
The following default mappings exist when forwarding events from mParticle to Leanplum:



mParticle event/property
Leanplum action
Additional details




Application State Transition - Background
pauseSession
 


Application State Transition - Foreground
resumeSession
 


Custom Events
track
The event name is passed in the event argument and the event attributes are passed in the params argument.


Push Registration
setDeviceAttributes
iOS - iosPushToken argument Android - gcmRegistrationId argument


Session Start
start
The following additional parameters are forwarded to Leanplum:  systemName, systemVersion, deviceName, deviceModel, locale, location, versionName, timezoneOffsetSeconds and country.


Session End
stop
 


User Attributes
setUserAttributes
All user attributes are passed in the userAttributes argument.



Configuration Settings



Setting Name
Data Type
Default Value
Description




App ID
string

Your Leanplum’s App ID.


Client Key
string

Your Leanplum’s Client Key, which is named either Production or Development under Keys & Settings in the Dashboard.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




User ID
string
customerId
All
Select which user identity to forward to Leanplum as your customer’s user ID.


Android Device ID
string
gaidThenAndroidId
Android
Select which value to forward to Leanplum as Device ID.  The default is to use Google Advertising identifier and if not available Android ID, but can be modified to always use Google Advertising ID or the Android ID.


IOS Device ID
string
idfvForProdAndIdfaForDev
iOS
Select which value to forward to Leanplum as Device ID.  The default is to use IDFV in Production and the IDFA in Development, but can be modified to always use IDFV or IDFA for both environments.



Liftoff
Liftoff is a full-service mobile app marketing and retargeting platform that uses post-install data to run true CPA-optimized user acquisition and retention campaigns.
Supported Features

User Acquisition
Analytics

Prerequisites
In order to enable mParticle’s integration with Liftoff, you will need to work with your Liftoff account executive to obtain your Liftoff App ID and API Key for mParticle configuration.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Liftoff App ID
string
 
Liftoff-specific ID for your app. Each app has a unique ID. Your Liftoff account executive will provide IDs for each app.


Liftoff API Key
string
 
API key for your Liftoff account. Your Liftoff account executive will provide this key.



Localytics
Localytics provides funnel, attribution, re-targeting, and segmentation solutions.  They also provide push and in-app messaging functionality.
Supported Features

User Analytics

Prerequisites
In order to enable mParticle’s integration with Localytics, you will need your Localytics App Key - one for each app that you would like to setup.  You can find your Localytics App Key by clicking the Settings tab in the Localytics dashboard.

Customer Value Settings
Localytics has an app-level setting called “Customer Value”, which controls whether customer value should be tracked as a monetary value, or as a “Raw Value”, i.e. as a count of the number of high-value in-app actions taken by your app users.
mParticle’s integration with Localytics relies on  the “Track CLV as Raw Value” setting to correctly pass Customer Value information into your Localytics account.  As such, it’s important for you to be aware of the value of this setting for each of your apps in Localytics during the activation process.
Additionally, if you’re planning to track Customer Value as a Raw Value in Localytics, you’ll want to make sure that all of your high-value events have been tagged as Goal Events.  For more information on how to tag Goal Events, please review Measuring Transactions and lifetime value.
You can find your Localytics Customer Value by clicking the Settings tab in the Localytics dashboard.
Customer Value Forwarding
Customer Value will be processed based on the enabled state of the “Track CLV as Raw Value” setting:

If enabled, mParticle will increment Customer Value (i.e. increase by 1) every time a Goal Event is tracked by mParticle.  
If not enabled, mParticle will increase LTV by the amount specified in the $Value attribute of any tagged Goal Event, or by the revenue amount of any call to logTransaction.

User Data Mapping
mParticle will forward user identity information to Localytics as described below:



mParticle User Information
Localytics method




UserIdentity.CustomerId
setCustomerId


UserIdentity.Email
setCustomerEmail


$FirstName
setCustomerFirstName (only for iOS/Android)


$LastName
setCustomerLastName (only for iOS/Android)


$FirstName + $LastName
setCustomerName


Additional identify types
setIdentifier


User attributes which match a Custom Dimension
setCustomDimension


Additional attributes not matching a Custom Dimension
setProfileAttribute



mParticle will forward Customer IDs as follows: using the Customer ID User Identity, if available, and then the Other User Identity if available.
Localytics Special Profile IDs $first_name, $last_name, $full_name and $email are automatically set as Organization Profile Attributes.
Event Data Mapping
//Event attribute dictionary (used by both SDK method calls)
NSDictionary *choicesDictionary = @{@"spice":@"hot",
                                    @"menu":@"weekdays"}; 

//Localytics event-tracking SDK method call
[[LocalyticsSession shared] tagEvent:@"Food Order" 
                          attributes:choicesDictionary];

//Equivalent call using mParticle's SDK
[[MParticle sharedInstance] logEvent:@"Food Order"
                           eventType:MPEventTypeTransaction
                           eventInfo:choicesDictionary];

//Event attribute dictionary (used by both SDK method calls)
Map<String, String> eventInfo = new HashMap<String, String>();
eventInfo.put("spice", "hot");
eventInfo.put("menu", "weekdays");

//Localytics event-tracking SDK method call
localyticsSession.tagEvent("Food Order", eventInfo);

//Equivalent call using mParticle's SDK
MParticle.getInstance().logEvent("Food Order", MParticle.EventType.Transaction, eventInfo);

mParticle forwards events to Localytics as follows:



mParticle Event
Localytics SDK Method
Description




App events
tagEvent
The mParticle EventName is forwarded as the Localytics eventName


eCommerce events
tagEvent
“eCommerce - Product Action” is forwarded as the Localytics eventName


Opt Out events
setOptedOut
The current optout status is forwarded


Push Registration events
setPushRegistrationId
 


Screen Views
tagScreen
All screen views tracked by the mParticle SDK, either via automatic screen tracking in the Android SDK, or manually via the logScreen SDK method are forwarded passing the screenName.  For Web, multiple screen names may be included.



Please see the panel to the right for sample method calls using Localytics SDK, and the equivalent using mParticle’s SDK.
Localytics Custom Flags
You can add Custom Flags to your events for Web, which will be mapped to Localytics as described below.



mParticle Custom Flag
Description




"Localytics.ScreenName"
Allows you to pass a custom screen name to the Localytics tagScreen method



Configuration Settings



Setting Name
Data Type
Default Value
Description




App Key
string

Your app’s Localytics App Key.


Track CLV as Raw Value
bool
False
Disable this if you are tracking customer value as revenue; enabled it otherwise.  A value of true corresponds to ‘tracked as money’; false corresponds to ‘raw value’ under the ‘Customer Value’ setting for your app in Localytics.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




App Version
string

Mobile Web
Your app’s version number


Session Timeout
int
1800
Mobile Web
Time in seconds until Localytics marks the session as closed.


Domain
string

Mobile Web
Changes the domain used for cookies. Use this to track users across subdomains.


Track Page Views
bool
False
Mobile Web
Automatically track page view events.


Custom Dimensions
Custom Field

All
If you use Custom Dimensions in Localytics, you can use “Custom Dimension 0-9” to specify which mParticle user attributes should be forwarded to Localytics as Custom Dimensions


Profile Attributes (Organization)
<string> List

iOS, Android
Enter the list of user attributes that will be forwarded to Localytics scoped at the organization level


Profile Attributes (Application)
<string> List

iOS, Android
Enter the list of user attributes that will be forwarded to Localytics scoped at the application level



Lotame
Lotame serves as a unifying platform to collect, organize, protect, and activate first-, second- and third-party audience data from any source.  mParticle integrates with Lotame in several ways:

Event Integration - send your app’s session and custom events to Lotame via their Crowd Control Data Collection API. This can be activated via [Integration Manager](https://app.mparticle.com/providers”>Integration Manager</a> in the mParticle platform. 
Audience Integration - send audiences created with Audience Manager to Lotame.  This can be activated via Audience Manager.

Both components can be activated and used independently of one another.
Prerequisites

In order to activate either of mParticle’s integration with Lotame, you must have your app’s Crowd Control Client ID handy.
For iOS apps, Lotame requires that user data be associated with an Apple Advertising Identifier ID (IDFA).
For Android apps, it’s suggested but not required that data be associated with the Google Play Advertising ID. Follow our Android SDK’s integration guide for including Google Play Services (specifically the ads library) to enable collection of the Google Play Advertising ID.

Event Integration Details

In order to send custom events to Lotame you need to use the mParticle iOS SDK version 4.4.0, Android SDK version 3.3.0, or later. Prior SDKs only support session-event forwarding.

mParticle will process custom events logged in your app in order to send tags to Lotame’s Crowd Control Data Collection API. Lotame requires that specific Behavior Types and respective custom Behavior Type Values be associated with each of these tags/events. You can associate Lotame Behavior Types and Values with an event via the Custom Flags APIs provided by the mParticle SDKs. Reference the table below to determine the correct Custom Flag to append to an event for your desired Lotame Behavior Types.
MPEvent *event = [[MPEvent alloc] initWithName:@"Set Interest"
                                          type:MPEventTypeUserPreference;

[event addCustomFlag:@"top-40-music"
             withKey:@"Lotame.Interest"];

[[MParticle sharedInstance] logEvent:event];

MPEvent event = new MPEvent.Builder("Set Interest", MParticle.EventType.UserPreference)
                .addCustomFlag("Lotame.Interest", "top-40-music")
                .build();
MParticle.getInstance().logEvent(event);




mParticle Custom Flag
Lotame Behavior Type




"Lotame.Action"
Action


"Lotame.Interest"
Interest


"Lotame.Composite"
Composite


"Lotame.Media"
Media


"Lotame.School"
School


"Lotame.GenericGeo"
GenericGeo


"Lotame.GenericDemographic"
GenericDemographic


"Lotame.GenericProperty"
GenericProperty


"Lotame.EncodedProfileData"
Encoded profile data


"Lotame.SearchTerm"
Search Term


"Lotame.Advertiser"
Advertiser


"Lotame.UserGenerated"
User Generated


"Lotame.NLP"
nlp


"Lotame.ImportBeacon"
Import Beacon


"Lotame.Sitemap"
Sitemap


"Lotame.CustomTaxonomy"
Custom Taxonomy


"Lotame.SurveyTrackers"
Survey Trackers


"Lotame.Domain"
Domain


"Lotame.Click"
Click


"Lotame.TP"
tp


"Lotame.Behavior"
Custom Behaviors



Reference the code samples to the right and the SDK docs for how to set these custom flags with the mParticle iOS and Android SDKs.
Need help? Give us a shout at support@mparticle.com for help determining which Behavior Types you may want to collect in your app.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Client ID
string

Your app’s Crowd Control client ID


Send Messages Securely
bool
True
If enabled, mParticle will forward all data to Lotame using SSL.  In some development and testing situations, in might be beneficial to have this disabled, but you should be sure that this setting is enabled before an app goes live.



MaestroIQ
Mobile app marketers use MaestroQA to orchestrate unified, multi-channel marketing experiences.
mParticle forwards your event data to MaestroQA in an S3 bucket owned by MaestroQA, which they parse and ingest into their platform.  
MailChimp
MailChimp provides an email marketing services platform.  Features include campaign design, tracking, segmentation and list management.
Supported Features

Email Marketing
    
Campaign Design
Campaign Tracking


Audience Forwarding

mParticle supports two “flavors” of integration with MailChimp:

Forwarding of audiences created with mParticle’s Audience Manager to MailChimp, for email marketing purposes.  This integration can be activated from Audience Manager.  For further details, please see the Audience Configurations topic
Forwarding of all your apps’ users to an “all-users” MailChimp list, for further analysis, segmentation, and email campaign targeting in MailChimp.  This functionality is the focus of this section.

Prerequisites
In order to activate mParticle’s integration with MailChimp, you will need a copy of your MailChimp API key from MailChimp’s dashboard.  If you’re not sure what this is, or where to find it, please see MailChimp’s documentation of API keys.
In order to activate mParticle’s “all-users” integration with MailChimp, you must create a MailChimp List that is dedicated to this purpose.  You will also need the List ID of the dedicated list as it is required to setup the configuration.  If you’re not sure where to find your list ID, please follow these instructions:

From the Lists page in your MailChimp dashboard, go to the settings page for the list that you would like to use for the integration: 

Click on List name & defaults 
The List ID can be found on the top right of this page: 


mParticle to MailChimp User Attribute Mapping
The following mParticle user attributes will be mapped to corresponding MailChimp attributes:



mParticle Attribute
MailChimp Tag




$FirstName
FNAME


$LastName
LNAME



If you would like to send other user attributes to the “all-users” list, you can add additional fields to your list by following these MailChimp instructions

From the Lists page in your MailChimp dashboard, go to the settings page for the list that you would like to use for the integration.
Click List fields and MERGE tags
Click Add A Field
Select the Field Type to add
Enter the Field Label
Leave the Required box unchecked
Enter the MailChimp Tag as described below

The following mParticle user attributes will be mapped to corresponding MailChimp Tags:



mParticle Attribute
MailChimp Tag




$Gender
GENDER


$Age
AGE


$Country
COUNTRY


$Zip
ZIP


$City
CITY


$State
STATE


$Address
ADDRESS


$Mobile
MOBILE



All other User Attributes will be mapped using the name of the User Attribute.  For example, if you have a user attribute “Status”, create a MailChimp “Status” field with a tag of “STATUS”.
You can setup User Attribute filters to control which attributes are sent to MailChimp.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

Your MailChimp API Key which can be found at http://kb.mailchimp.com/article/where-can-i-find-my-api-key



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Delete on Unsubscribe
bool
False
All
If enabled, mParticle will automatically delete users from your list when they unsubscribe.


Double Opt-In
bool
True
All
If enabled, newly-added users will receive an email asking them to confirm their subscription to the MailChimp list that corresponds to this segment.  Otherwise, users will be automatically subscribed to this list at the same time that they are added to the segment.


Email Type
string
html
All
This setting defines whether users in this segment will receive plaintext or HTML emails.  The default value is HTML.


List ID
string

All
The MailChimp List ID that we will use to represent this segment in MailChimp.



Mixpanel
Mixpanel provides advanced event and user analytics, including funnel analysis and segmentation. They also provide push notification and survey functionality.
Overview & Prerequisites
If you are new to setting up Mixpanel’s Mobile App Analytics, your best place to start is Mixpanel itself and the below are must-reads before proceeding:

Mobile App Analytics Setup Overview: https://mixpanel.com/help/reference
Best Practices for setting up your events: https://mixpanel.com/help/reference/ios#sending-events

When mParticle sends data to Mixpanel, Mixpanel’s APIs are utilized.  This allows mParticle to implement server side data forwarding and supports our value proposition to customers of not requiring that additional app SDK components be continually added and updated for integrations.
In order to enable mParticle’s integration with Mixpanel, you will need an account with Mixpanel and have your Mixpanel Token for mParticle configuration.  Your Mixpanel Token can be found here.
It is important to ensure that your mParticle data implementation plan captures the correct instrumentation scheme to map to your desired Mixpanel feature sets.  In other words, depending upon what Mixpanel feature set you decide to implement, it may drive some of how you structure your app instrumentation with the mParticle SDK.
Data Processing Notes
mParticle will only forward events to Mixpanel if the data is less than 5 days old - https://mixpanel.com/help/reference/http.
Supported Features
mParticle’s SDK supports nearly all of the MixPanel SDK specific features natively. When you instrument the mParticle SDK, mParticle events will be transformed using Mixpanel compliant naming conventions and activate corresponding features automatically.



Feature Name
mParticle Support
Feature Description




Funnels
Yes
Analyze where users drop off


In-app Notifications
No
Showing your messages when app opens


Notifications
Yes
Send email / push notifications


PeopleAnalytics
Yes
Get to know your users, track their LTV


Retention
Yes
Analyze how many users come back to your apps, break down by cohorts


Segmentation
Yes
Slice and dice data using all available dimensions (by events, event attributes, user attributes, etc.)


Survey
No
Ask users what they think of your apps



User Identification



Mixpanel’s SDK Method
mParticle’s SDK Method




identify
SetUserIdentity with identity type CustomerId


alias
SetUserIdentity with identity type Alias



Mixpanel associates each user with a Distinct ID. If a Customer ID is present, mParticle will forward this as the Distinct ID. If no Customer ID is present, the Device ID will be forwarded as the Distinct ID.
Mixpanel allows an alias to be created to link the anonymous Device ID with a new Customer ID when a user first signs up.
The Alias connects the old identity to the new one, so when a user signs up, you should first create the alias, by using the SetUserIdentity method with type Alias, before you call SetUserIdentity with type CustomerId to start sending the Customer ID to Mixpanel as the new Distinct ID.
Example:
John Smith downloads your app and looks around. John’s Device ID is 1234. We begin forwarding events to Mixpanel using "distinct_id": "1234". John decides to sign up with an ID of johnqsmith84. With the mParticle SDK, you must first call SetUserIdentity with type Alias and a value of johnqsmith84. This event will be forwarded to Mixpanel using 1234 as the Distinct ID and johnqsmith84 as the alias. You can then call SetUserIdentity again, and set John’s Customer ID to johnqsmith84, which will be forwarded to Mixpanel as the Distinct ID from then on.
If you set the Customer ID before the Alias, then mParticle will immediately begin forwarding johnqsmith84 as the Distinct ID, so the alias event would be forwarded to Mixpanel with a Distinct ID of johnqsmith84 and an alias value of johnqsmith84. Not helpful. So when a user signs up, set the alias first.
If you expect to have multiple users on the same device, it is good practice to immediately set a random unique customer ID for a user who is not signed in, rather than falling back on the default behavior of sending Device ID. This way, when the user signs up and creates an id, your identity flow will work, no matter how many customers use a device
Supported Feature Reference
To support each feature in the table above, multiple methods will need to be implemented. The following table shows the mapping between each feature and SDK methods.



Mixpanel SDK Method
Method Description
Related Feature
mParticle SDK Method
Notes




addPushDeviceToken
Register the given device to receive push notifications.
Notifications
set pushNotificationToken
 


alias
Links two IDs as the same user
People Analytics
setUserIdentity with identity type alias
Mixpanel’s alias method supports the following two use cases, and mParticle currently supports the first right now:  1. When a user first signs up, alias method can be used to link the new userId to deviceId used to track the user pre-signup. 2. When a user changes sign-in id, alias method (combined with identify method) can be used to tie the new userId to the previous userId


deleteUser
Delete current user’s record from Mixpanel People
People Analytics
Not Supported
 


identify
Sets the distinct ID of the current user.
People Analytics
SetUserIdentity
By default, device udid is used to identify a user. If the ‘Use Mixpanel People’ setting is enabled, and the ‘Use Customer ID’ setting is enabled, and a Customer Id is available, Customer Id is used


increment
Increment the given numeric properties by the given values
People Analytics
Not Supported
For revenue tracking, use logEvent with attributes and set up LTV tracking


registerSuperProperties
Registers super properties, overwriting ones that have already been set
Segmentation, Funnels, Retention, People Analytics
Not implemented. SetUserAttribute achieves the same effect
Recommendation is to use mParticle’s SetUserAttribute method to set user attributes that could be added to every event if configured


registerSuperPropertiesOnce
Registers super properties without overwriting ones that have already been set.
Segmentation, Funnels, Retention, People Analytics
Not supported
mParticle leaves this type of implementation to the developer.


reset
Clears all stored properties and distinct IDs. Useful if your app’s user logs out.
People Analytics
Not Supported
 


set
Set user properties
Segmentation, People Analytics
SetUserAttribute
If MessageType is AppEvent or ScreenView, user attributes will be sent if the ‘Include User Attributes’ setting is enabled


track
tracks an event with or without properties
Segmentation, Funnels, Retention, People Analytics
logScreen / logEvent / logTransaction
 


trackCharge
Track money spent by the current user for revenue analytics
People Analytics
logEvent or logTransaction. Also, the logged events need to be set up as LTV tracking event in mParticle’s UI
 


union (Android only)
add an array of values to a user attribute key
People Analytics
Not supported
 


unset (Android only)
remove a property of the given name from a user profile
People Analytics
removeUserAttribute
 



Event Tracking
Tracking standard events in the mParticle SDK is fairly straightforward. Events can standalone or include event attributes. mParticle attributes are converted to Mixpanel properties automatically when forwarded.



Mixpanel’s SDK Method
mParticle’s SDK Method




track with properties
logEvent with event attributes or logEcommerceTransactionWithProduct


track with no properties
logScreen or logEvent with no event attributes



Super Property Tracking
In the Mixpanel SDK, Super properties are properties that you want to include with each event you send. Generally, these are things you know about the user rather than about a specific event, for example, the user’s age, gender, or source. These super properties will automatically be included with all tracked events.
mParticle’s SDK does not have a direct equivalent of registerSuperProperties, but all user_attributes on a batch will be forwarded with every event. If there are attributes that you want to include with each event but not include in your Mixpanel People profiles, you can map these attributes as super properties in the connection settings.



Mixpanel’s SDK Method
mParticle’s SDK Method




registerSuperProperties
SetUserAttribute


registerSuperPropertiesOnce
Not supported



Setting User Properties and Attribute Mapping
Both MixPanel and mParticle have the ability to set specific attributes for the user which will persist until overwritten.



Mixpanel’s SDK Method
mParticle’s SDK Method




set
SetUserAttribute



If you have enabled the ‘Include User Attributes’ setting, then any messages with type ScreenView or AppEvent will include the email user identity (if available) and all user attributes.  The SetUserAttribute method can be used to set user attributes. This method will overwrite the values of any existing user attributes.
Device Attributes
mParticle forwards device attributes, including device model, OS version and location, with both Event and People messages. See Mixpanel’s docs for a full list of attributes each message accepts for iOS and Android.
Attribute Mappings
mParticle’s attribute naming conventions closely resemble standard Mixpanel attributes, which a few exceptions:



mParticle attribute
will be changed to




$FirstName
$first_name


$LastName
$last_name


$Mobile
$phone



These mParticle attributes will just have the leading $ removed:



mParticle attribute
will be changed to




$Gender
Gender


$Age
Age


$Country
Country


$Zip
Zip


$City
City


$State
State


$Address
Address



If these attributes are seen, they will be replaced with Mixpanel attributes:



mParticle attribute
will be changed to




created
$created


email
$email


lastSeen
$last_seen


name
$name


username
$username



With available user identity info and user attributes, standard people data being sent includes:

action type: $set for user identification
token: the application’s Mixpanel token
distinct_id: device’s UDID or user’s customerId
ip: the IP address of the request or “0”
time: the message timestamp

Data being sent in the $set section:

user attributes: following the rules in Attribute mappings
email address: if it exists in the user identities

Revenue Tracking and Commerce Events
In order to track revenue using mParticle and Mixpanel, you need to ensure that mParticle is forwarding on relevant data by enabling the Use Mixpanel People setting.  If the mParticle SDK method has been called to log an event, the event and one event attribute have been set up for LTV tracking, and the event is not excluded by an account policy, a transaction message will be sent to Mixpanel.



Mixpanel’s SDK Method
mParticle’s SDK Method




trackCharge
logEvent or logEcommerceTransactionWithProduct. Also, the logged events need to be set up as LTV tracking event in mParticle’s UI



Only specific data will be considered as part of the transactional funnel. Standard message data format is:

action type: $transaction for a TrackCharge message
token: the application’s Mixpanel token
distinct_id: device’s UDID or user’s customerId
ip: the IP address of the request or “0”
time: the message timestamp

Data being sent in the transactions section:

$amount: the LTV value of the event
$time: the message timestamp in the format yyyy-MM-dd’T’HH:mm:ss
event attributes: follows the rules in Attribute mappings

Enabling Push Notification
MixPanel push notifications are handled differently in iOS than in Android.
Android
protected void onCreate(Bundle savedInstanceState) {
    mMixpanel = MixpanelAPI.getInstance(this, YOUR_MIXPANEL_PROJECT_ID_TOKEN);
    MixpanelAPI.People people = mMixpanel.getPeople();
    people.identify(THE_DISTINCT_ID_FOR_THE_USER);
    people.initPushHandling(YOUR_12_DIGIT_GOOGLE_SENDER_ID);
}

Mixpanel’s SDK documentation suggests enabling push as follows:
<resources>
    <string name="mp_key">MPARTICLE KEY</string>
    <string name="mp_secret">MPARTICLE SECRET</string>
    <bool name="mp_enablePush">true</bool>
    <string name="mp_pushSenderId">YOUR_12_DIGIT_GOOGLE_SENDER_ID</string>
</resources>

For mParticle, it’s recommended to handle this using the configuration XML:

After choosing whichever implementation works better for your project, the Mixpanel project ID token (YOUR_MIXPANEL_PROJECT_ID_TOKEN in the Mixpanel code snippet), is configured in the mParticle console.
iOS
If a push notification token has been set using the mParticle SDK, mParticle will forward it to Mixpanel to authorize push notifications.



Mixpanel’s SDK Method
mParticle’s SDK Method




addPushDeviceToken
set pushNotificationToken



If a push notification token has been set using the mParticle SDK, mParticle will forward it to Mixpanel by setting the “$ios_devices” or “$android_devices” parameter accordingly.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Token
string

Project token, which you can find by clicking the gear icon on the lower left of your project.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Forward Session Start/End Messages
bool
True
iOS, Android
If enabled, all session start and session end messages will be forwarded to Mixpanel as separate events.


Session Start Event Name
string
session-start
iOS, Android
The event name that will be forwarded to Mixpanel on a session start message.  Only used if ‘Forward Session Start/End Messages’ is enabled.


Session End Event Name
string
session-end
iOS, Android
The event name that will be forwarded to Mixpanel on a session end message.  Only used if ‘Forward Session Start/End Messages’ is enabled.


Create Profile Only If Logged In
bool
False
iOS, Android
If enabled, Mixpanel will only forward customer profile data if a customer ID is in the list of  user’s identities; if disabled, Mixpanel will always forward customer profile data.


Use Mixpanel People
bool
True
All
Enable this setting if you are using customer profiles in Mixpanel


Include User Attributes
bool
True
All
If enabled, all user attributes will be included when tracking events


Include Attribution Info
bool
False
iOS, Android
If enabled, attribution info (publisher and campaign names) will be included when tracking events.


Include IP Address
bool
True
All
If enabled, IP Address will be sent with the event.


Super Properties
Custom Field

iOS, Android
Mapped user attributes here will always be sent as event properties (regardless of the ‘Include User Attributes’ setting). Note they will also be excluded from people properties.



myTarget
myTarget provides targeted user acquisition from the biggest social networks in Russia and the CIS region, reaching more than 140 million people.
Supported Features

Event Forwarding 

Prerequisites
To set up the myTarget integration, you will need the User Name for your myTarget Account.
Data Processing Notes
myTarget will not accept data more than 24 hours old.
mParticle forwards the following identifiers to myTarget, where available:

Android ID
GAID (Google Advertising ID)
IDFV (iOS Vendor ID)
IDFA (iOS Advertising ID)
Email address

Location and IP data is not forwarded.
Supported Events
mParticle forwards the following event types to myTarget:

Application State Transition  
Attribution  
Commerce Event
Custom Event
Error
Privacy Setting Change
Push Subscription
Screen View
Session Start / End
User Attribute Change
User Identity Change

Configuration Settings



Setting Name
Data Type
Default Value
Description




User Name
string
 
Username for the myTarget account.



Nanigans
Nanigans is a leader among ecommerce, gaming, and other pure-play internet companies, enabling in-house teams to take control of their advertising through sophisticated workflow automation, predictive optimization, deep data integrations, and real-time and lifetime reporting tools.  Nanigans provides a platform that enables performance marketers to easily launch and manage ad campaigns on leading social media platforms, such as Facebook.
Supported Features

All Nanigans features are supported.

Data Processing Notes
mParticle will only forward events to Nanigans if an IDFA is set for iOS and a Google Advertising ID is set for Android.  
Prerequisites
In order to enable mParticle’s integration with Nanigans, you will need to already have an account setup with Nanigans, and will need to obtain your Nanigans App Id.  
Implementation Scenarios
There are two implementation scenarios for Nanigans:

You are not yet sending app data to Nanigans
You are already sending app data to Nanigans using the Nanigans SDK

Implementation Scenario 1: You are not yet sending app data to Nanigans
If you are not sending data yet to Nanigans and don’t have the Nanigans SDK in your app, you can forward data whenever you are ready.  When you configure Nanigans forwarding in Integration Manager, you’ll simply need to enter your Nanigans-assigned App Id, as well as what User Id you’ll want to send to Nanigans.  You may select one of the following for User Id forwarding to Nanigans:

Hashed Customer ID
Hashed E-mail Address
mParticle ID (default)

If either hashed e-mail address or hashed customer ID is selected, and there is no e-mail address or customer ID respectively, events will be forwarded to Nanigans with no User ID.
Implementation Scenario 2: You are already sending app data to Nanigans using the Nanigans SDK
If you are already working with Nanigans and sending data via the Nanigans SDK, your end state here will be to use mParticle to forward your app data to Nanigans server to server and subsequently remove the Nanigans SDK from your app.  
A key consideration if you are already sending data to Nanigans is to ensure that you do not send duplicate data once you start forwarding from mParticle.  For example, you will have some users that have an older version of your app and are therefore still sending data to Nanigans via the Nanigans SDK, and when you enable data forwarding to Nanigans from mParticle you will want to ensure that the same data is not sent twice, e.g., app data for a user is sent to Nanigans via the Nanigans SDK and the same data is forwarded to Nanigans by mParticle. 
In scenarios such as this when you are already working with an integration and will be removing their SDK from your app once you begin forwarding via mParticle, you will use mParticle’s app version filtering capability.
mParticle allows you to specify a minimum version of your app for data forwarding to mParticle.  For example, let’s say your current version that includes the Nanigans SDK is version 1.0.  You next version, which incorporates the mParticle SDK and removes the Nanigans SDK, is version 2.0.  In your mParticle forwarding settings for Nanigans, you will want to specify 2.0 in the Version settings.  After selecting the Nanigans in Integration Manager, the configuration settings will be shown.  For each app platform, select the correct minimum app version from the Minimum App Version Filter dropdown.  This will ensure that older app versions that still have the Nanigans SDK still send data directly to Nanigans, and that newer versions with the mParticle SDK included and the Nanigans SDK removed will forward data to Nanigans via the mParticle-Nanigans server to server integration.
 It is important that you apply the Version filter **before** you toggle on forwarding to an app platform, otherwise you run the risk of sending the same data to Nanigans twice for some users - once via the Nanigans SDK and once via mParticle. 
For App Id you will need to enter your Nanigans-assigned App Id, as well as what User Id you’ll want to send to Nanigans.  You may select one of the following for User Id forwarding to Nanigans:

Hashed E-mail Address
Hashed Customer ID
mParticle ID

If either hashed e-mail address or hashed customer ID is selected, and there is no e-mail address or customer ID respectively, events will be forwarded to Nanigans with no User ID.
mParticle ID is the default User ID setting.
Event Data Mapping
Mappings of mParticle message types to Nanigans:



Message Type
Nanigans Mapping




AppInit message with ‘IsFirstRun’ set to true
type = install, name = main


FirstRun message
type = user, name = reg


AppFore message
type = visit, name = dau


eCommerce transaction message
type = purchase, name = main, value = RevenueAmount (converted based on Forward in Cents setting), sku = ProductSKU, unique = TransactionID.  All other attributes will be forwarded


All other App Event messages
type = user, name = name of the app event.  All attributes will be forwarded



Purchase and refund events will include all products when forwarded, but all other commerce events are expanded and sent as individual events.
Configuration Settings



Setting Name
Data Type
Default Value
Description




App ID
string

A unique ID assigned by Nanigans for your site/application



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




User ID
string
mParticleId
All
Select which user identity will be forwarded to Nanigans as your customer’s user ID


Forward In Cents
bool
True
All
If enabled, all amounts will be forwarded to Nanigans in cents; otherwise all amounts will be forwarded as dollars



Oracle BlueKai
Oracle BlueKai is a data management platform that provides third-party data for use in a company’s intelligent marketing activities.
Supported Features

All BlueKai features are supported

Data Processing Notes
mParticle will only forward events to Oracle BlueKai if:

iOS, tvOS - An IDFA is set
Android - A Google Advertising ID is set

If the User Identity selected is Customer or Other, the phint Key for the identity must be entered for the Product Hint Key for User Identity setting.
Prerequisites
In order to enable mParticle’s integration with BlueKai, you will need a BlueKai account to obtain your Web Service User Key and Web Service Private Key.  After logging into your Bluekai account at partner.bluekai.com, click Tools and Web Service Key Tool to obtain your Web Service User Key and Web Service Private Key.
You also need to create a Site ID by clicking Manage -> Containers -> Create New.   Enter the general Site ID into the mParticle Site ID setting.  You will need to work with your Oracle Bluekai Account Manager to enable the Site ID for the User Data API.
Data will not be visible in Oracle Bluekai until you have setup classification rules for the data coming in from mParticle.
Event Data Mapping
mParticle’s integration forwards the following event types to Oracle BlueKai:

Custom Events
Commerce Events
Screen Views
User Attribute Change Events
User Identity Change Events

Configuration Settings



Setting Name
Data Type
Default Value
Description




Web Service User Key
string

Your Oracle BlueKai Web Service User Key (bkuid), located by clicking Tools, Web Service Key Tool


Web Service Private Key
string

Your Oracle BlueKai Web Service Private Key (bksecretkey), located by clicking Tools, Web Service Key Tool



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Site ID
string

All
Your Oracle BlueKai site ID, located by clicking Manage, Containers under the ID column


Send Device Information
bool
False
All
If enabled, device information will be sent to BlueKai


Send Hashed Email Addresses
bool
False
All
If enabled, hashed emails will be sent to BlueKai. Otherwise, no email is sent.


User Identity
string
None
All
Select which user identity to send to BlueKai


Product Hint Key for User Identity
string

All
Enter the phint Key for the User ID selected in the User ID setting.



Plarin
Plarin is a leading advertising automation platform that allows marketers to easily launch and manage ad campaigns on all major Russian social media platforms, such as VK and myTarget. Plarin can receive data from iOS and Android inputs.
Supported Features

Event Forwarding

Prerequisites
To set up the Plarin integration, you will need a Postback token, provided by your Plarin account manager.
Data Processing Notes
Plarin will not accept data more than 24 hours old.
mParticle forwards the following identifiers to Plarin, where available:

GAID (Google Advertising ID)
IDFA (iOS Advertising ID)
Email address
Customer ID

Supported Events
mParticle forwards the following event types to Plarin:

Application State Transition  
Attribution  
Custom Event
Commerce Event  
Screen View
Session Start

Configuration Settings



Setting Name
Data Type
Default Value
Description




Postback Token
string
 
Token provided by your Plarin account manager.



Primer
Primer - Instantly deploy native screens personalized for every new user.
Supported Features

User Attributes
eCommerce Events
App Events
Session Events

Prerequisites
//XML code for whitelisting Primer's domain

<key>NSAppTransportSecurity</key>
<dict>
    <key>NSExceptionDomains</key>
    <dict>
        <key>goprimer.com</key>
        <dict>
            <key>NSIncludesSubdomains</key>
            <true/>
            <key>NSThirdPartyExceptionAllowsInsecureHTTPLoads</key>
            <true/>
        </dict>
    </dict>
</dict>

In order to enable mParticle’s integration with Primer you will need the SDK Token for your Primer project, and to manually set up and start the Primer SDK.

Sign up for an account with Primer and get your Token from the General tab in the Settings page.
Whitelist Primer’s domain - see instructions to the right.
The Primer integration only supports the iOS platform and you must add the Primer Kit to your app.

SDK Initialization
The Primer SDK must be initialized immediately on the first application launch to promptly present the first-user-experience. Due to this, the integration requires developers to manually initialize the Primer SDK with their SDK token as shown below. The mParticle SDK will still automatically forward session, commerce, and other custom events to the Primer SDK.
//Initialize the Primer Kit
[Primer startWithToken:@"YOUR_SDK_TOKEN"];

//Present the onboarding experience
[Primer presentExperience];


Start the SDK in -application:didFinishLaunchingWithOptions: prior to starting the mParticle SDK
Present an onboarding experience by calling the presentation method in the -viewDidLoad of your first view controller to be presented to the user on app load.

For more information, and additional optional integration features kindly refer to the Primer SDK Documentation
Quantcast
Quantcast Measure provides free cross-platform audience measurement for your mobile app, site, network or platform.
Supported Features

User Analytics

Prerequisites
In order to enable mParticle’s integration with Quantcast, you will need a Quantcast account to obtain your API Key and P-Code.
Event Data Mapping
mParticle’s integration forwards the following event types to Quantcast:



Event Type
Event Mapping




App Event
event=app_event, appevent={appEvent.EventName}


Application State Transition
event=install, event=resume, event=load, or event=pause based on the transition type


Commerce Events
event=commerce_event, app_event_name={commerceEvent.EventName}.  All other event attributes passed to mParticle with the event are passed to Quantcast as attribute=value pairs.


Opt Out
event=appevent, appevent=optout



Quantcast Custom Flags
MPEvent *event = [[MPEvent alloc] initWithName:@"Set Interest"
                                          type:MPEventTypeUserPreference;


NSArray* labels = @[ @"Example Label 1", @"Example Label 2", @"Example Label 3"];
[event addCustomFlag:[labels componentsJoinedByString:@","]
             withKey:@"Quantcast.Labels"];

[[MParticle sharedInstance] logEvent:event];

MPEvent event = new MPEvent.Builder("Set Interest", MParticle.EventType.UserPreference)
                .addCustomFlag("Quantcast.Labels", "Example Label 1" + "," + "Example Label 2")
                .build();
MParticle.getInstance().logEvent(event);

You can add Custom Flags to your events, which will be mapped to Quantcast as described below.



mParticle Custom Flag
Description




"Quantcast.Labels"
Allows you to specify Quantcast label(s) related to an event.  To leverage the hierarchical labels feature, you can set a the label in this form: <ClientID>.<Campaign ID>.<Media ID>.<User Targeting Class>, as the period indicates the different levels of the hierarchy.  Any spaces in the custom flag will be replaced with the underscore “_” character.



Reference the code samples to the right and the SDK docs for how to set these custom flags with the mParticle iOS and Android SDKs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




P-Code
string

The Client Identifier (also called a P-Code) is how you identify yourself to Quantcast, located in your dashboard.


API Key
string

A Quantcast API Key to indicate which app profile within your account the data should be attributed to, located in your dashboard.



Radar
Radar is a full-stack developer toolkit for location context and tracking.
Supported Features

Location Tracking

Prerequisites
In order to enable mParticle’s integration with Radar, you will need an account with Radar to obtain your Publishable API Key, found on the Organization page in the Radar dashboard.
mParticle Radar Implementation
mParticle’s Radar integration requires that you add the Radar kit to your iOS or Android app.  

The mParticle SDK will automatically initialize the Radar SDK using your Publishable API Key.
If the Run Automatically setting is enabled, Radar will automatically track logged in users if location permissions have been granted.
    
On Android, users that have granted location permissions will be tracked once on app open and persistently in the background.
On iOS, users that have granted foreground location permissions will be tracked once on app open. Users that have granted background location permissions will be tracked once on app open and persistently in the background.


If the Run Automatically is disabled, you can call Radar methods directly to track users.
You can also call Radar methods directly to receive Radar geofence entry and exit events.  For more information, see the Radar SDK documentation

The source code for each kit is available if you would like to learn exactly how the method mapping occurs:

iOS
Android

//Sample Podfile
target '<Your Target>' do
    pod 'mParticle-Radar', '~> 6'
end

//Sample build.gradle
dependencies {
    compile ('com.mparticle:android-radar-kit:4.+')
}

Add the Radar Kit to your iOS or Android app. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Publishable API Key
string

Your Radar publishable API key, found on the Organization page


Run Automatically
bool
True
If enabled, Radar will automatically track logged in users if location permissions have been granted



RadiumOne
RadiumOne Mobile Analytics is a complete business intelligence solution for understanding the full user experience of your mobile app–from installation, to activity, to conversion. 
Supported Features

App Analytics
Attribution
Segmentation
Funnel Reports
Conversion tracking
Geo Insights
Retention Analysis

Event Data Mapping
mParticle’s integration forwards the following event types to RadiumOne Mobile Analytics:

First launch
Application state transition
Product Views
Add to Cart Events
Purchase Events
Custom Events

To identify devices and users, mParticle forwards the following information with each forwarded event, if available:

iOS: IDFA
Android: Android Advertising ID

mParticle’s Connect integration supports custom mappings. You can map your events and attributes for RadiumOne Mobile Analytics
Prerequisites
In order to enable mParticle’s integration with RadiumOne Mobile Analytics, you will need an RadiumOne Mobile Analytics account to obtain your Application ID. Once logged into your analytics account, your Application ID is available by clicking Settings.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Application ID
string
 
The Application ID can be retrieved from your RadiumOne Mobile Analytics account in the app’s settings.



Remerge
Remerge is a leading provider of app retargeting and audience management. The Remerge platform offers an efficient and scalable solution by streamlining complex and manual processes with technology - and without needing to integrate an SDK. By activating Remerge, app developers can re-engage users worldwide to increase retention and boost user lifetime value - by driving purchases, orders, bookings, subscriptions and revenues.
Supported Features

Session Start
App Event
Commerce Event

Prerequisites
In order to enable mParticle’s integration with Remerge you will need your Remerge API Key and Customer ID.  Please reach out to your contact at Remerge for more information on obtaining these values.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Remerge API Key
string
 
Secret key to use the Remerge API, provided by your Remerge account manager


Remerge Customer ID
string
 
Remerge internal customer ID, provided by your Remerge account manager



Reveal Mobile
Reveal Mobile helps mobile app publishers use location data, derived from both lat/long and Bluetooth beacons, to generate more advertising revenue and build better products. 
Supported Features

Bluetooth Beacon Proximity Data and Latitude/Longitude Data to Support Geotargeting and Geofencing

Prerequisites
In order to configure Reveal Mobile in the mParticle platform, you will need to perform the following setup steps:

Include the Reveal Mobile Kit with the mParticle SDK in your app
Setup an account with Reveal Mobile at https://www.revealmobile.com in order to obtain your API Key which can be found in the Dashboard.

Reveal Mobile Kit Integration
mParticle’s Reveal Mobile integration requires that you add the Reveal Mobile kit to your iOS or Android app, and the mParticle SDK will initialize and automatically map mParticle method calls directly onto Reveal Mobile method calls. This approach means that every feature of the Reveal Mobile SDKs are supported, as if the app had integrated Reveal Mobile directly. The source code for each kit is available if you would like to learn exactly how the method mapping occurs:

iOS
Android

Add the Reveal Mobile Kit to your iOS or Android app. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.
//Sample Podfile
target '<Your Target>' do
    pod 'mParticle-RevealMobile', '~> 6'
end

//Sample build.gradle
dependencies {
    compile ('com.mparticle:android-revealmobile-kit:4.+')
}

Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

Your app’s API key can be found in your Reveal Dashboard


SDK Endpoint
string
https://sdk.revealmobile.com
Your Reveal Account Manager can supply a custom SDK Endpoint.



RevX
RevX is an app retargeting platform that powers growth for mobile businesses through audience intelligence, programmatic media, personalized ads and ROI optimization. RevX supports the iOS and Android platforms.
Supported Features

Event Forwarding

Prerequisites
To set up the RevX integration, you will need your: 

Advertiser ID - Available from your RevX Account Manager or Account Dashboard.
Pixel ID - Available from your RevX Account Manager or Account Dashboard.
Business Vertical. Available from your RevX Account Manager.

Data Processing Notes
RevX will not accept data more than 2 weeks old.
Device IDs 

GAID (Google Advertising ID)  
IDFA (iOS Advertising ID)  

User IDs 

Customer ID  
Email address  
Facebook ID  
Other  

Supported Events
mParticle forwards the following event types to RevX:

Attribution  
Custom Event
Commerce Event  
Session Start

Configuration Settings



Setting Name
Data Type
Default Value
Description




Advertiser ID
string
 
Advertiser ID shared by RevX Account Manager. You can pick this up from your RevX Dashboard as well.


Pixel ID
string
 
Data Pixel ID shared by RevX Account Manager. You can pick this up from your RevX Dashboard as well.


Business Vertical
string
 
Business Vertical shared by RevX Account Manager.



SFDC Email
Salesforce Marketing Cloud - A platform that enables marketers to provide engaging and personalized customer experiences through automation of timely and relevant messages across e-mail, mobile and social at massive scale.
Supported Features
Email Studio allows you to:

Build and send personalized email from basic newsletters to the most complex campaigns
Deliver promotional, transactional, and triggered messages
Track and optimize to drive performance

Data Processing Notes
Salesforce Marketing Cloud has limits around the lengths of attributes their platform can process:

100 characters in the key of an attribute
4000 characters in the value of an attribute

Additional processing notes:

Licensing - mParticle is sending data to Salesforce Marketing Cloud using their APIs.  Please consider that mobile data is generated at a significant rate, and can vastly outpace standard API calls.  Please be sure that your API licensing limits are significant enough to support the volume of mobile data you will be sending to Salesforce Marketing Cloud, or contact your Salesforce Account Team to increase your API limits.
Attribute Arrays, Product Bags, and the Shopping Cart State are not sent to Salesforce Marketing Cloud.
Tags - If you want tags to be sent to Salesforce Marketing Cloud, you must use the following minimum SDKs which added the details for processing changed attribute/tags.
    
Android 4.8.0
iOS 6.7.2


Subscriber Key

If you specify a user identity for the Subscriber Key configuration setting, which has not been provided, no data is sent to Salesforce Marketing Cloud.
In the examples below, “Subscriber Key” is the name for this field in your data extension tables, however you can specify a different name.


Event Data - If multiple primary keys have been specified in an event data extension, and the mappings for these field cannot be determined, no data is sent to Salesforce Marketing Cloud.
Data Refresh - Once you have entered all configuration settings, mParticle will obtain key information from Salesforce Marketing Cloud for sending data.  You will need to refresh the integration by clicking Save on the Settings tab if you:
    
Modify the primary keys of the data extensions
Add/delete a field of type email to any of the data extensions, you will need to refresh the integration
Change the External Key for the data extension


Web data will only be forwarded if sent to mPartice via the Server API

Prerequisites
In order to enable mParticle’s integration with Salesforce Marketing Cloud, you will need to a Salesforce Marketing Cloud account and an App Center account with Salesforce Marketing Cloud enabled for API Integration, and have created an API Integration Application Type app to obtain your credentials (Client ID, Client Secret) for mParticle configuration.
The mParticle integration with Salesforce Marketing Cloud uses data extensions to store the data.  You will also need to create the following data extensions to support the integration:

Subscriber - to hold user information, attributes, identities
Event(s) - to hold event specific information.  You will need to create one for each event you select in the Event Mappings to External Keys configuration setting. 

Below are references in the Salesforce Marketing Cloud documentation to assist with the creation of an API Integration app and the data extensions:

Creating a Marketing Cloud App
Data Extensions
Creating a New Data Extension
Data Types

Salesforce Marketing Cloud Folder Setup
You can organize your data extensions within your Salesforce Marketing Cloud in any way that works for your organization.  The following information contains a recommendation for the location and naming convention of the required data extensions.  From Salesforce Marketing Cloud, follow these steps:

Select Email Studio → Email
Select Subscribers → Data Extensions
Select the Data Extensions folder
Right mouse on the Data Extension folder and Select New Folder
Enter mParticle as the folder name
Right mouse on the mParticle folder and Select New Folder
Enter Your Application Name as defined in App Center as the folder name

Subscriber Data Extension Setup
Follow these steps to create your subscriber data extension.  mParticle requires that there is only one Primary Key in your subscriber data extension.

Click Create
Select Standard Data Extension
Select Create from New as the Creation Method
Enter mP-Subscriber as the Name
For External Key, you can leave this blank and Salesforce Marketing Cloud will assign a value, of you can enter a value
Enter a Description (optional)
Check the Is Sendable field, as required
Check the Is Testable field, as required
Select a campaign or create one (optional)
Click Next
Select Retention Setting
Add all fields that you wish mParticle to send to the subscriber table to the data extension, setting the appropriate values in each of the fields:
    
Name
Data Type
Length
Primary Key
Nullable
Default Value


Select the Send Relationship field
Click Create

Subscriber Key
The value entered in the Subscribers Data Extension External Key configuration setting, should be used as the field name in the Subscriber data extension, and in all event data extensions.
Subscriber Data Extension Fields
The following table describes the fields which you can add to the subscriber data extension for mParticle to send to Salesforce Marketing Cloud.



Name
Data Type
Length
Primary Key
Nullable
Default Value
Notes




SubscriberKey
Text
 
Yes
No
 
mParticle will send the user identity specified in the Subscriber Key configuration setting to this field.


TimeStamp
Date
 
No
Yes
 
mParticle will send a timestamp with every call to Salesforce Marketing Cloud.


Email
EmailAddress
 
No
Yes
 
If you have provided a value for the Email User Identity, it will be sent to Salesforce Marketing Cloud in this field.


GUID
Text
36
No
Yes
 
If you want mParticle to generate a GUID to be sent, add this field.


Age
Text
 
No
Yes
 
If you want the Age reserved attribute to be sent, add this field.


Gender
Text
 
No
Yes
 
If you want the Gender reserved attribute to be sent, add this field.


FirstName
Text
 
No
Yes
 
If you want the FirstName reserved attribute to be sent, add this field.


LastName
Text
 
No
Yes
 
If you want the LastName reserved attribute to be sent, add this field.


Address
Text
 
No
Yes
 
If you want the Address reserved attributes to be sent, add this field.


City
Text
 
No
Yes
 
If you want the City reserved attribute to be sent, add this field.


State
Text
 
No
Yes
 
If you want the State reserved attribute to be sent, add this field.


Country
Text
 
No
Yes
 
If you want the Country reserved attribute to be sent, add this field.


Zip
Text
 
No
Yes
 
If you want the Zip reserved attribute to be sent, add this field.


Mobile
Phone
 
No
Yes
 
If you want the Mobile reserved attribute to be sent, add this field.


User Attribute Name1-N
Text
 
No
Yes
 
Add fields for any user attributes that you send to mParticle that you want to be sent.


Tag1-TagN
Boolean
 
No
Yes
 
Add fields for any user tags that you send to mParticle that you want to be sent.  Tags are stored as boolean fields, where true indicates the presence of the tag, and false indicates the tag was removed.



Event Data Extension Setup
You will need to create a separate event data extension for each type of event you want to send to Salesforce Marketing Cloud.  Multiple Primary Keys are supported in the event data extensions.
The following event types can be configured to be sent to Salesforce Marketing Cloud:

Commerce Events
    
Product Action
Impression
Promotion Action


Custom Events
Screen Views

A recommended naming convention for these data extensions is to use mP-Event.  Some examples are listed below:

mP-Product Action-Add to Cart
mP-Product Action-Purchase
mP-Impression
mP-Promotion Action
mP-{event name}, where {event name} is the name of your custom event
mP-Screen View-{screen name}, where {screen name} is the name of the screen

Follow the steps noted above in the Subscriber Data Extension Setup section for creating your event data extensions.   mParticle suggests that you set the SubscriberKey and TimeStamp fields as the Primary Keys in your Event Data Extensions.
Every event data extension should contain the following fields:



Name
Data Type
Length
Primary Key
Nullable
Default Value
Notes




SubscriberKey
Text
 
Yes
No
mParticle will send the user identity specified in the Subscriber Key configuration setting to this field.
 


TimeStamp
Date
 
Yes
Yes
 
mParticle will send a timestamp with every call to Salesforce Marketing Cloud.


GUID
Text
36
No
Yes
 
If you want mParticle to generate a GUID to be sent, add this field.


IDFA
Text
 
No
Yes
 
If you want the IDFA device id to be sent, add this field.


IDFV
Text
 
No
Yes
 
If you want the IDFV device id to be sent, add this field.


GAID
Text
 
No
Yes
 
If you want the Google Advertising ID device id to be sent, add this field.


Android ID
Text
 
No
Yes
 
If you want the Android ID device id to be sent, add this field.


Platform
Text
 
No
Yes
 
If you want  Platform to be sent, add this field.


OS Version
Text
 
No
Yes
 
If you want OS Version to be sent, add this field.


Country
Text
 
No
Yes
 
If you want Country to be sent, add this field.


Locale
Text
 
No
Yes
 
If you want Locale to be sent, add this field.


Application Name
Text
 
No
Yes
 
If you want Application Name to be sent, add this field.


Application Version
Text
 
No
Yes
 
If you want Application Version to be sent, add this field.


Event Attribute Name 1-N
Text
 
No
Yes
 
Add fields for any event attributes that you send to mParticle that you want to send to Salesforce Marketing Cloud.



Commerce Events - Product Action
You will need to create a separate data extension for each action that you want to send to Salesforce Marketing Cloud:

Add to Cart
Remove from Cart
Checkout
Checkout Option
Click
View Detail
Purchase
Refund
Add to Wishlist
Remove from Wishlist




Name
Data Type
Length
Primary Key
Nullable
Default Value
Notes




Checkout Step
Text
 
No
Yes
 
 


Checkout Options
Text
 
No
Yes
 
 


Product Action List
Text
 
No
Yes
 
 


Product List Source
Text
 
No
Yes
 
 


Transaction Id
Text
 
No
Yes
 
 


Affiliation
Text
 
No
Yes
 
 


Total Amount
Decimal
 
No
Yes
 
 


Tax Amount
Decimal
 
No
Yes
 
 


Shipping Amount
Decimal
 
No
Yes
 
 


Coupon Code
Text
 
No
Yes
 
 


Product Count
Number
 
No
Yes
 
If you want the Product Count to be sent to Salesforce Marketing Cloud, add this field.  This indicates the number of products in the Product Action event when the action is Purchase or Refund.



Additionally the following fields can be added to track product specific information:



Name
Data Type
Length
Primary Key
Nullable
Default Value
Notes




ID
Text
 
No
Yes
 
 


Name
Text
 
No
Yes
 
 


Brand
Text
 
No
Yes
 
 


Category
Text
 
No
Yes
 
 


Variant
Text
 
No
Yes
 
 


Position
Number
 
No
Yes
 
 


Price
Decimal
 
No
Yes
 
 


Quantity
Decimal
 
No
Yes
 
 


Coupon Code
Text
 
No
Yes
 
 


Add To Cart Timestamp
Date
 
No
Yes
 
 


Total Product Amount
Decimal
 
No
Yes
 
 


Product Attribute Name 1-N
Text
 
No
Yes
 
Add fields for any product attributes that you send to mParticle that you want send to Salesforce Marketing Cloud.



Commerce Events - Impression



Name
Data Type
Length
Primary Key
Nullable
Default Value
Notes




Product Impression List
Text
 
No
Yes
 
 



The Product specific fields are listed above should be added to the Impression data extension.
Commerce Events - Promotion Action



Name
Data Type
Length
Primary Key
Nullable
Default Value
Notes




Action Type
Text
 
No
Yes
 
 


ID
Text
 
No
Yes
 
 


Name
Text
 
No
Yes
 
 


Creative
Text
 
No
Yes
 
 


Position
Text
 
No
Yes
 
 



Custom Events



Name
Data Type
Length
Primary Key
Nullable
Default Value
Notes




Event Name
Text
 
No
Yes
 
 



Screen Views



Name
Data Type
Length
Primary Key
Nullable
Default Value
Notes




Screen Name
Text
 
No
Yes
 
 



Configuration Settings



Setting Name
Data Type
Default Value
Description




Client ID
string

Your Client ID from Salesforce Marketing Cloud App Center


Client Secret
string

Your Client Secret from Salesforce Marketing Cloud App Center



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Subscriber Key
string
customerId
All
Subscriber Key


Subscribers Data Extension External Key
string

All
External Key of the Data Extension used to store Subscribers


Event Mappings to External Keys
Custom Field

All
Define the mapping of mParticle event names to the corresponding Salesforce Marketing Cloud Data Extension External Keys



SFDC MobilePush
Salesforce Marketing Cloud - MobilePush provides businesses with a platform for targeting and delivering push notifications to the right audience. This integration is limited to customers who have been approved by Salesforce.
Supported Features
MobilePush allows you to create and send push messages to mobile application users. You can use MobilePush to accomplish the following tasks:

Create messages
Push messages to selected contacts
Manage push subscriptions for contacts
Review messaging activities

Data Processing Notes
Salesforce Marketing Cloud has limits around the lengths of attributes their platform can process:

128 characters in the key of an attribute
255 characters in the value of an attribute
128 characters for a tag

Prerequisites
In order to enable mParticle’s integration with Salesforce Marketing Cloud, you will need to a Salesforce Marketing Cloud account and an App Center account with Salesforce Marketing Cloud enabled for MobilePush, and have created a MobilePush Application Type app to obtain your credentials (Application ID and Access Token) for mParticle configuration.
Below are references in the Salesforce Marketing Cloud documentation to assist with the creation of a MobilePush application:

Creating a Marketing Cloud App

Any user attributes or tags that your app is sending to mParticle will be forwarded to Salesforce Marketing Cloud.  There is no setup for tags, but in order for attributes to be processed by Salesforce Marketing Cloud, you will need to configure these attributes in Salesforce Marketing Cloud.  
Steps to Configure Attributes

Select Audience Builder -> Contact Builder
Select MobilePush Data Contacts
Click the Edit Properties pencil on the MobilePush Demographics data extension
Click Create Attribute to add any additional attributes to the MobilePush Demographics table, specifying the following fields:
    
Attribute Name - This should match the attribute key of the user attributes passed to mParticle 
Type - select the data type of the attribute
Length - specify the length
Primary Key - leave unchecked
Default Value
Data Source
Required - select Not Required


Click Create to add the user attribute

Repeat steps 4 and 5 to add all user attributes you want to be processed by Salesforce Marketing Cloud.
Reserved Attributes
The following mParticle reserved attributes already exist in the MobilePush Demographics table and therefore do not need to be created.  They will be sent if available:

FirstName
LastName
City
State
ZipCode

If you want any of the other mParticle reserved attributes to be sent, you’ll need to add them as attributes following the steps above using the following Attribute Names:

Age
Gender
Country
Address
Mobile

Configuration Settings



Setting Name
Data Type
Default Value
Description




Application ID
string

This is the unique identifier for an application from the Marketing Cloud App Center. It is one half of the AppId/AccessToken pair. This is always in the form of a v4 UUID.


Access Token
string

An Access Token corresponds to an Application ID. It functions almost as if it were a unique password for the corresponding Application ID



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




GCM Sender ID
string

Android
The GCM Sender ID from the Google Developers Console Project Number configuration.


Subscriber Key
string
customerId
All
Subscriber Key is used to aggregate devices under a single user and to coordinate cross-channel messaging activity.



SimpleReach
SimpleReach helps publishers, agencies and brands measure, intelligently distribute and retarget content across the most efficient channels to drive content ROI at scale.
Supported Features

Screen Views

Prerequisites
In order to enable mParticle’s integration with SimpleReach, you will need to work with your SimpleReach representative to obtain your SimpleReach Publisher ID for configuration.
Event Data Mapping
Only ScreenView events are supported and the event must contain specific flags (Title, Date and URL) in order to be forwarded.  You can add these flags to your Screen View events or set up custom mappings based on your existing event data.  Custom Flags will take priority over custom mappings defined in the mParticle interface. 
MPEvent *event = [[MPEvent alloc] initWithName:@"Set Title"
                                          type:MPEventTypeUserPreference;

[event addCustomFlag:@"Test Title"
             withKey:@"SmartReach.Title"];

[[MParticle sharedInstance] logScreen:event];

MPEvent event = new MPEvent.Builder("Set Title", MParticle.EventType.UserPreference)
                .addCustomFlag("SmartReach.Title", "Test Title")
                .build();
MParticle.getInstance().logScreen(event);




mParticle Custom Flag
Required
Description




"SimpleReach.Title"
Yes
The title of the article.


"SimpleReach.Date"
Yes
The publish date of the in UTC or any ISO8601 date.


"SimpleReach.URL"
Yes
The URL of the article which must include a protocol (http or https).


"SimpleReach.Domain"
 
Only needed if the domain in the URL does not match the mParticle Domain setting.  This should not include a protocol.  This overrides the Domain setting.  Typically this will not be used unless you are using virtual hosting.


"SimpleReach.RefURL"
 
The referring URL of the article which must include a protocol (http or https).


"SimpleReach.Authors"
 
The author(s) of the article.  If using mappings, multiple values must be separated using the | character.


"SimpleReach.Channels"
 
The channel(s) of the article.  If using mappings, multiple values must be separated using the | character.


"SimpleReach.Tags"
 
The tag(s) of the article.  If using mappings, multiple values must be separated using the | character.



All of the required flags must be set in order for the event to be forwarded.  All other flags are optional and will be forwarded if provided.
mParticle’s SimpleReach integration supports custom mappings which allows you to map your events and attributes for SimpleReach. mParticle provides mappings for the following SimpleReach event types:

Article Loaded

Configuration Settings



Setting Name
Data Type
Default Value
Description




Publisher ID
string

This is the SimpleReach-assigned Publisher ID (PID). Your PID is a 24-character alphanumeric string that looks similar to: 4fc608fea782f333ea0000fb.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Domain
string

All
Optional parameter for sites that use many custom domains to serve up content. This should not include the protocol (http).



Singular
Singular has built the only unified marketing intelligence platform that delivers attribution, cost aggregation, creative reporting and workflow automation in one place, giving marketers access to unparalleled data granularity.
Supported Features

User Analytics
Attribution

Event Data Mapping
mParticle’s integration forwards the following event types to Singular 

Session Start
Session End
Custom Events
Screen Views
Errors
User Attribute Change Events
User Identity Change Events
Push Subscription
Application State Transition Events
Commerce Events

Prerequisites
In order to enable mParticle’s integration with Singular you will need a Singular account to obtain your configuration settings.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
API Key used for authentication. Appears on your Singular dashboard under Settings => API => SDK API Key



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Application ID
string
 
All
The identifier of the app on Singular platform as appears in Settings => Apps under the relevant app & platform



Skyhook
Skyhook provides geolocation and context solutions that help our customers locate connected “things”, provide location-relevant content, visualize online and offline customer movements and optimize ad campaigns.
Skyhook Kit Integration
mParticle supports Skyhook for iOS and Android devices. To use this integration, you need to include the Skyhook kit in your installation of the mParticle SDK.
Once the kit is included in your app, you can provide your API Key in the mParticle dashboard and enable the integration to begin sending location data to Skyhook, directly from your app. The source code for each kit is available on Github:

iOS
Android

//Sample Podfile
target '<Your Target>' do
    pod 'mParticle-Skyhook', '~> 6'
end

//Sample build.gradle
dependencies {
    compile 'com.mparticle:android-skyhook-kit:4+'
}

Add the Skyhook Kit to your iOS or Android app. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to read more about kits.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

API key provided from Skyhook through project creation at my.skyhookwireless.com



Slack
Slack is a team communication application. Enable this integration and see your data stream into Slack.
With the mParticle Slack integration, ONLY development events will be forwarded.
Prerequisites
In order to activate mParticle’s integration with Slack, you must have an account in Slack to set up the Incoming Webhook.  

Sign into your Slack account at https://slack.com/signin
Click Apps & Integrations
Search for Incoming WebHooks
Click Add Configuration
Enter the channel where your Incoming Webhook with post messages to and click Add Incoming WebHooks Integration.

Copy the Webhook URL as this is needed to configure the mParticle integration.



You can optionally add a Descriptive Label, and customize the Name and Icon that the integration will use when posting to the Slack channel.  
You can navigate to your configured WebHooks by clicking https://my.slack.com/services

Configuring Slack in mParticle
Create a Slack output configuration:

Select Directory, and click the Slack tile
Click Add Slack to Setup
Select the Output Event Integration Type and click Add to Setup
Select the Slack output configuration group to configure an output event configuration
Enter a Configuration Name and your Slack configuration settings and click Save

Connect inputs to the Slack output configuration

Select Connections
Select the Input for the connection definition
Click Connect Output
Select the Slack configuration
Enter your connection configuration settings
Toggle the Status to Sending
Click Save

Configuration Settings



Setting Name
Data Type
Default Value
Description




POST URL
string

Specify your Slack incoming webhook URL here.  Example: https://hooks.slack.com/services/T18AKIXHA/A12345KEY/D3k1LWC2bFzCk18kDl91hgTb



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Channel Name
string

All
Specify a public channel with “#channel” or a direct message with “@username” to send events to.  Only development events will be forwarded.



Snapchat
Snap is a camera company whose flagship application Snapchat, the Spectacles product, and a variety of publisher tools provide brands a unique platform to reach targeted audience segments with engaging and personalized content.
The Snapchat Event Integration is supported for the iOS and Android platforms.
Prerequisites
To enable the Snapchat Event Integration for iOS you will need your Apple App ID. Although you do not need any Snapchat-specific credentials, you should contact your Snapchat Account Manager to discuss setting up this integration.
Supported Identifiers
Snapchat does not allow raw device IDs to be uploaded. mParticle forwards a unique hash value for each device from the IDFA (iOS) or Google Advertising ID (Android). Data without a device identifier will not be forwarded.
Supported Events

Application State Transition 
Attribution Events 
Commerce Events  
Custom Event  
Screen View  

Event Mappings
mParticle supports standard event mappings for the following Snapchat event types:



Snapchat Event
mParticle Event




APP_INSTALL
Application State Transition with type is_first_run


PURCHASE
Commerce event with purchase or refund action. Refund will generate an event with a negative total_amount.


START_CHECKOUT
Commerce event with checkout action.


ADD_CART
Commerce event with add_to_cart action.


VIEW_CONTENT
Commerce event with view_detail action.


APP_OPEN
Application State Transition with type foreground


PAGE_VIEW
Screen View



Custom Mappings
In addition to the above defaults, you can also create Custom Mappings for the following Snapchat events:

ADD_BILLING
ADD_CART
LEVEL_COMPLETE
PAGE_VIEW
PURCHASE
SAVE
SEARCH
SIGN_UP
START_CHECKOUT
VIEW_CONTENT

Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Apple App Id
string

iOS
Apple App Id



Snowplow
Snowplow’s technology enables powerful custom analytics capabilities by making it easy for app developers to populate a cloud-based data warehouse with their app event data.
Supported Features

Custom Analytics

Prerequisites
In order to activate mParticle’s integration with Snowplow, you’ll need to have completed, at a minimum, steps 1 through 3 in Snowplow’s setup guide.  By the end of that process, you should have access to your Snowplow App ID and Collector Endpoint, which you’ll need to paste into our interface during the activation process.
Event Data Mapping
The sections below describe how Snowplow will map each type of app event data into the resulting table structure in your Amazon Redshift or PostreSQL instance.  Snowplow will also store all forwarded app event data in a raw, JSON format in Amazon S3.
The resulting table names in Redshift or PostrgeSQL will take the following form: SchemaVendor_SchemaName_SchemaVersion, with the SchemaName generally corresponding to the class of events contained within the table.
Screen Views
mParticle will populate your Screen View events in a Redshift or PostgreSQL table with the schema name screen_view.  The name column will contain the scree name.
Social Events
mParticle will populate your Social events in a Redshift or PostreSQL table with the schema name social_event, and with the following columns:

network: This denotes the social network that the social event pertains to.
action: This denotes the social action taken by the user (e.g. “Like”, or “Share”).
target: This denotes the target of the social action.

Purchases
mParticle will populate your purchase event data (created with calls to the logTransaction SDK method) in a Redshift or PostreSQL table with the schema name transaction_event.  The columns in the table correspond to the attributes of the MPProduct object passed to the logTransaction method.  Here’s the mapping:



MPProduct Attribute
Redshift/PostreSQL Column Name




name
name


sku
sku


unitPrice
unit_price


quantity
quantity


revenueAmount
revenue


taxAmount
tax


shippingAmount
shipping


productCategory
category


currencyCode
currency


transactionId
transaction_id



Custom Events
mParticle will populate all other event types not listed above in a table with the schema name app_event, and with the following columns.

name: The event name.
attributes: A JSON dictionary object containing the attribute names and values associated with the event.

Configuration Settings



Setting Name
Data Type
Default Value
Description




App ID
string

A unique ID used to identify your application to Snowplow.  Snowplow uses this value to group events together .


Base64 Encode
bool
True
Set to true to send properties base64 encoded


Endpoint
string

This is the endpoint used to initialize the Snowplow collector.  This will be in the format {{CLOUDFRONT DOMAIN}}.cloudfront.net



Splunk MINT
Splunk MINT provides error reporting and analysis services.
Supported Features

Crash Reporting
Handled Exception Reporting
Breadcrumbs
Event Forwarding

Prerequisites
In order to activate mParticle’s integration with Splunk MINT, you will need to have your Splunk MINT API keys handy - one for each app that you’d like to setup.  Your API Key is located on the Splunk MINT’s dashboard.

Crash Reporting
In order for mParticle to forward crash data to Splunk MINT, you will need to enable unhandled exception logging in mParticle’s SDK.  Once enabled, crash data will be automatically captured and forwarded to Splunk MINT.  Please review mParticle’s SDK documentation for more information on how to enable unhandled exception logging.
Server-Side Override: Advanced App Settings
In addition to the SDK methods and configuration settings that control crash handling and network performance monitoring functionality, crash handling and network performance monitoring can also be controlled server-side via the Advanced App Configuration Settings.  For more information on these settings, please review mParticle’s console documentation.
Handled Exception Reporting
//mParticle SDK method call
@try {      
    [self callNonExistingMethod];
}
@catch (NSException *exception) {
    [[MParticle sharedInstance] logException:exception];
}

//Mapped Splunk MINT SDK method call
@try {
    [self callNonExistingMethod];
} @catch (NSException *exception) {
  [[Mint sharedInstance] logException: withExtraData:];
}

//mParticle SDK method call
try {
    throw new Exception("Exception Reason");
} catch (Exception exception) {
    MParticle.getInstance().logException(exception);
}

//Mapped Splunk MINT SDK method call
try {
    throw new Exception("Exception Reason");
} catch(Exception exception) {
    Mint.logException(exception);
}

Handled exceptions are automatically forwarded to Splunk MINT when using the logException APIs in the mParticle SDKs.  Please see the code samples to the right for example mappings.
Breadcrumbs
//mParticle SDK method call
[[MParticle sharedInstance] leaveBreadcrumb:@"parsing began"];

//Mapped Splunk MINT SDK method call
[[Mint sharedInstance] leaveBreadcrumb:@"parsing began"];

//mParticle SDK method call
MParticle.getInstance().leaveBreadCrumb("parsing began");

//Mapped Splunk MINT SDK method call
Mint.leaveBreadcrumb("SomeEvent");

You can use mParticle’s leaveBreadCrumb SDK method to drop breadcrumbs, which will be forwarded to Splunk MINT in the event of a crash or handled exception.  Please see the code samples to the right for example mappings.
Event Forwarding
The mParticle SDK automatically forwards custom events and screen events to Splunk MINT.
Custom Events
//mParticle SDK method call
[[MParticle sharedInstance] logEvent:@"Example event"
                           eventType:MPEventTypeOther];

//Mapped Splunk MINT SDK method call
[[Mint sharedInstance] logEventWithName:@"Example event"];

//mParticle SDK method call
MParticle.getInstance().logEvent("Example event", EventType.Other);

//Mapped Splunk MINT SDK method call
Mint.logEvent("Example event");

Calls to mParticle’s logEvent SDK methods will map onto Splunk MINTs analogous logEvent APIs.  Please see the code samples to the right for example mappings.
Screen Events
//mParticle SDK method call
[[MParticle sharedInstance] logScreen:@"Example screen"
                            eventInfo:nil];

//Mapped Splunk MINT SDK method call
[[Mint sharedInstance] logEventWithName:@"View Example screen"];

//mParticle SDK method call
MParticle.getInstance().logScreen("Example screen");

//Mapped Splunk MINT SDK method call
Mint.logEvent("View Example screen");

Calls to mParticle’s logScreen SDK methods will map onto Splunk MINTs analogous logEvent APIs, prefixed with "View".  Please see the code samples to the right for example mappings.
If you’re using automatic screen tracking with mParticle’s Android SDK, then events with the relevant Activity class name will be forwarded to Splunk MINT as well.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string

Your app’s Splunk MINT API Key.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Use Customer ID
bool
False
All
If enabled, mParticle will use mParticle Customer IDs to identify users in Splunk MINT, falling back on hashed device IDs if Customer ID is unavailable.  If disabled, mParticle will simply use hashed device IDs.



TapCommerce
TapCommerce is a leader in mobile retargeting, trusted by the most successful mobile brands to deliver customers, revenue, and return on investment across mobile platforms.
Supported Features

Event Tracking
Click Postback
Retargeting

Data Processing Notes
TapCommerce has limits around the number of unique event names and attributes their platform can process as noted here: http://support.tapcommerce.com/kb/third-party-integration/api-integration-guide

10 attributes per event

Prerequisites
In order to enable mParticle’s integration with TapCommerce, you will need your App IDs assigned by your TapCommerce account team.  You will need a unique app ID for each platform (iOS or Android).
Event Data Mapping
mParticle’s integration forwards the following events to TapCommerce:

Screen Views
App Events
Commerce Events

mParticle will forward a maximum of 10 attributes for each App and Commerce events.  You can control which events or attributes are sent to TapCommerce by setting Data Filters.  Click here for details on this setup.
Tapstream
Tapstream is a marketing dashboard for app makers that solves the user acquisition problem for apps.
Supported Features

App Event
App State Transition
Attribution
Commerce Events

All available user attributes and user identities passed with the events are forwarded to Tapstream.
Prerequisites
In order to enable mParticle’s integration with Tapstream, you will need your Account Name and SDK Secret.   These settings can be found by clicking on Account Settings and shown on the Account Configuration screen.

Configuration Settings



Setting Name
Data Type
Default Value
Description




Account Name
string

Your Tapstream Account Name


SDK Secret
string

Your Tapstream SDK secret for this app



Tune
Tune provides a platform that attributes app installs, in-app engagement, and purchases back to marketing sources. 
Supported Features

Attribution
User Analytics

Data Processing Notes
Tune has limits around the number of unique event names and attributes their platform can process as noted here: http://developers.mobileapptracking.com/mobile-sdks-app-events-intro/

100 events

mParticle will only forward events to Tune if a package name is set or the Site ID configuration setting has been specified.  If the package name is not set, you can you specify a package name in the Override Package Name configuration setting.
If the User ID setting is set to Customer ID and your app has not called setUserIdentity with the CustomerId identity type, data will still be forwarded to Tune without a User ID.
mParticle will forward Apple Search Ad Attribution values, if provided.
Prerequisites
In order to enable mParticle’s integration with Tune, you will need an account with Tune in order to obtain your Advertiser Id.  Your Advertiser Id is available on your Mobile Apps details page.  Click here for information on finding your Advertiser ID and Conversion Key and here to find your Site ID.
You will also need your Private Key and Consumer Key to configure the Tune Integration.  You will need to work with your Tune Account Manager to obtain these values for configuration.
General Parameters
The following general settings are forwarded to Tune:



Parameter
mParticle details
Tune field




Advertiser ID
The value of setting Advertiser ID
advertiser_id


Package Name
The value of setting Override Package Name if set, otherwise Package name for Android and Bundle ID for iOS.
package_name


Application Name
App Name
app_name


Application Version
App Version
app_version


Site ID
The value of setting Site ID
site_id


User Agent
User Agent
user_agent



User Attributes
The following user attributes are forwarded to Tune:



User Attribute
mParticle details
Tune field




Age
$Age
age


Gender
$Gender, 1 for female, 0 for male
gender


User Name
$FirstName + ‘ ‘ + $LastName
user_name



User Identities
The following user identities are forwarded to Tune:



User Identity
mParticle Identity Type
Tune field




Email Address
Email
user_email


Facebook ID
Facebook ID
facebook_user_id


Google ID
Google ID
google_user_id


Twitter Handle
Twitter Handle
twiter_user_id


User ID
mParticle will forward User IDs to Tune based on the value of the User ID setting: 1. Hashed mParticle ID (default) 2. Customer ID
user_id



Device Information
The following device properties are forwarded to Tune:



Device Property
mParticle details
Tune field




Android Google Advertiser ID
Google Advertising ID
google_aid


Android Limit Ad Tracking
LimitAdTracking
google_ad_tracking_disabled


Apple OS IDFA
IDFA
ios_ifa


Apple OS IDFV
IDFV
ios_ifv


Apple Limit Ad Tracking
LimitAdTracking
ios_ad_tracking_disabled


Carrier
NetworkCarrier
device_carrier


Country Code
LocaleCountry
country_code


IP Address
ipAddress
device_ip


Language
LocaleLanguage
language


Location-latitude
latitude
latitude


Location-longitude
longitude
longitude


Manufacturer
Manufacturer
device_brand


Model
Model
device_model


OS Version
OsVersion
os_version



Event Data Mapping
mParticle’s Tune integration supports custom mappings which allows you to map your events and attributes for Tune. mParticle provides mappings for the following Tune event types:

Achievement Unlocked
Add to Cart
Add to Wishlist
Added Payment Info
Checkout Initiated
Content View
Custom Event
Invite
Level Achieved
Login
Purchase
Rated
Registration
Reservation
Search
Share
Spent Credits
Tutorial Complete

App Events
[MobileAppTracker measureAction:@"SomeEvent"];

MobileAppTracker.getInstance().measureAction("SomeEvent");

App Events are forwarded to Tune by using action=”conversion” and the event name is mapped to the “site_event_name” attribute.  App Events containing the term “resume” will not be forwarded to Tune.
Commerce Events
The following default mappings exist when forwarding events from mParticle to Tune:
Commerce Events are forwarded to Tune based on the incoming Product Action:



mParticle Product Action
Tune action




AddToCart
add_to_cart


AddToWishlist
add_to_wishlist


Checkout
checkout_initiated


Purchase
purchase


Refund - This is mapped to the Tune action=purchase with a negative revenue amount
purchase


ViewDetail
content_view



The following event details are forwarded to Tune:



mParticle event details
Tune field




RevenueAmount
revenue


CurrencyCode
currency_code



For each item in the event, the following additional fields are forwarded:



mParticle Product details
Tune field




product.Name
name


product.Price
unit_price


product.Quantity
quantity


product.Amount
value


blank - used for product level tax
attribute_sub1


blank - used for shipping amount
attribute_sub2


product.Id
attribute_sub3


affiliation
attribute_sub4


product.Category
attribute_sub5



Screen Views
[MobileAppTracker measureAction:@"View SomeScreen"];

MobileAppTracker.getInstance().measureAction("View SomeScreen");

Screen Views are forwarded to Tune using action=”content_view” and the screen name is mapped to the “content_id” attribute.  If you are using automatic screen tracking in our Android SDK, the automatically-generated screen view events will be forwarded to Tune using the name of the associated Activity class.
Managing Sessions
Session Start events are forwarded to Tune’s session measurement endpoint. Tune then determines whether each session start constitutes an ‘install,’ and ‘update’ or a ‘launch’ in Tune.
Login
All calls to mParticle’s logEvent SDK method with the event name “login” will be forwarded to Tune using action=”login”.  
Registration
//MAT SDK call
[MobileAppTracker measureAction:@"registration"];

//Equivalent mParticle SDK call
[[MParticle sharedInstance] logEvent:@"registration"];

//MAT SDK call
MobileAppTracker.getInstance().measureAction("registration");

//Equivalent mParticle SDK call
mp.logEvent("registration");

All calls to mParticle’s logEvent SDK method with the event name “registration” will be forwarded to Tune using action=”registration”.  See the panel on the right for sample SDK calls and the equivalent call using mParticle’s SDK.
Deep Linking
The mParticle SDKs provide a deeplink API that you can use to query Tune and customize your app experience based on the parameters of deeplinks. Refer to the deeplinking section to learn how to use these APIs. Rather than making direct API calls to the Tune SDK, these APIs let you write integration-agnostic apps that are easier to maintain.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Advertiser ID
string

Your Tune account’s Advertiser ID.


Conversion Key
string

Your Tune application’s Conversion Key.


Site ID
string

Your Tune application’s Site ID, found on the Mobile Apps list page under the ID column.


Private Key
string

They key used to generate a request signature for all messages sent to Tune


Consumer Key
string

The public key included with each request to Tune so the private key can be identified



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




User ID
string
mParticleId
All
Select which user identity will be forwarded to Tune as your customer’s user ID


Override Package Name
string

All
Allows you to override your app’s package name that will be forwarded to Tune



TVSquared
TVSquared is the gold standard for TV measurement and optimization.
Supported Features

Event Forwarding

Prerequisites
To set up the TVSquared integration, you will need the Site ID for your TVSquared account.
Data Processing Notes
TVSquared will not accept data more than 24 hours old.
mParticle forwards the following identifiers to TVSquared, where available:

GAID (Google Advertising ID)  
IDFA (iOS Advertising ID)  
Customer ID  
Google ID  
Facebook ID  
Other

Supported Events

Application State Transition 
Attribution Events 
Commerce Events  
Custom Event  
Error 
Privacy Setting Change
Push Subscription
Screen View  
Session Start  
User Attribute Change
User Identity Change

Configuration Settings



Setting Name
Data Type
Default Value
Description




TVSquared Site ID
string
 
Your TVSquared Site ID. Email support@tvsquared.com if you need assistance.



Twitter
The Twitter integration allows you to track the performance of your Twitter ads using  Conversion Tracking and target users across the Twitter platform using  Twitter’s Tailored Audiences
This integration is only supported for the Web platform.
Supported Features

Conversion Tracking

Prerequisites
In order to enable mParticle’s integration with Twitter, you will need an account with Twitter to create a conversion event.  After creating your conversion event, you can obtain your Pixel ID by:

Click the View Code link next to the event name of your conversion event
Your Pixel ID will be located as shown in the snippet below


Configuration Settings



Setting Name
Data Type
Default Value
Description




Pixel ID
string

Twitter Tracking Conversion Pixel ID



Urban Airship
Urban Airship helps you drive loyalty, engagement, and revenue in your app and beyond. Urban Airship provides push messaging services, including segmentation and targeting capabilities.
There are several ways to leverage Urban Airship depending on your needs and how you send data to mParticle today.  This topic covers the Urban Airship event integration. mParticle also supports an audience integration with Urban Airship
mParticle supports limited event forwarding to Urban SDK via our Server API or via Feeds, but to send native app data to Urban Airship, and to take advantage of the full feature set of Urban Airship, you must install the Urban Airship Kit. mParticle will not forward data from a mobile device unless the Urban Airship kit is present.
Kit Integration
mParticle’s client-side Kit integrations for iOS and Android were built in partnership with Urban Airship and support the full feature-set of the Urban Airship platform. The integration will bundle Urban Airship’s native SDK as an add on to the mParticle core SDKs, and as with all integrations allows for server-side dynamic enable/disable, configuration, and filtering.
The Kit integrations perform the following automatically by mapping mParticle’s APIs onto the analogous Urban Airship APIs:

Initialization of the Urban Airship SDK with your key and secret configured via mParticle
Push registration, display, as well as push-open analytics
User attributes, tags, and identities
eCommerce and in-app events
Google Play Install referrer forwarding (Android only)
Automatic tagging based on events and user attributes (see below)

The source code to each kit is available if you would like to learn exactly how the above mappings occur:

iOS
Android

The features above can be leveraged entirely via mParticle’s APIs. All other features of the Urban Airship SDK, such as the message-center, are still supported by the kit integration by making direct API calls to the Urban Airship SDK.
No features are supported by the standard mParticle SDK, alone. You must install mParticle's Urban Airship Kit to be able to forward data from your app to Urban Airship.

1. Add the Kit to your app
source 'https://github.com/CocoaPods/Specs.git'

# Uncomment the line below if you're using Swift or would like to use dynamic frameworks (recommended but not required)
# use_frameworks!

target '<Your Target>' do
    pod 'mParticle-UrbanAirship', '~> 6'
end

//sample build.gradle
dependencies {
    //add the Urban Airship Kit to your app's dependencies
    compile ('com.mparticle:android-urbanairship-kit:4.+')
}

// Urban Airship is not supported via mParticle's Javascript SDK at this time.

This step will add the mParticle SDK (if not present already), the Urban Airship SDK, along with the Urban Airship kit, which acts as a bridge between the two SDKs. See the Cocoapods and Gradle examples to the right, and reference the Apple SDK and Android SDK GitHub pages to learn more about kits.
2. Enable Urban Airship
In the Urban Airship platform:

Sign in to your Urban Airship account. 

Create a new app if necessary, or use an existing app. 
Note: Part of Urban Airship’s wizard for setting up a new app involves sending a test message to your app. This process assumes you are using the regular Urban Airship SDK instead of mParticle. You will not receive a test message in your app at this stage but, in order to proceed with setting up your app, you need to ‘confirm’ that you received the test push notification, when asked by the setup wizard. 

Navigate to the “APIs & Integrations” page for your app, and record your “App Key,” “App Secret,” and “App Master Key.”

In the mParticle platform, create an Urban Airship output configuration:

Select Directory, and click the Urban Airship tile
Click Add Urban Airship to Setup
Select the Output Event Integration Type and click Add to Setup
Select the Urban Airship output configuration group to configure an output event configuration
Enter a Configuration Name and your Urban Airship configuration settings and click Save

App Key
App Secret
App Master Secret



Connect inputs to the Urban Airship output configuration:

Select Connections -> Connect
Select the Input for the connection definition
Click Connect Output
Select the Urban Airship configuration
Enter the connection specific settings - see Urban Airship User Tags for additional configuration details.
Toggle the Status to Sending
Click Save


Apps within the Urban Airship platform can either be set to "development" or "production" mode.  Similarly, mParticle's SDKs and all data are segmented between "development" and "production." mParticle's UI gives you the option to configure two sets of credentials - one for production data, and another for development data. Be sure to line these up to the analogous apps and modes in Urban Airship.

The steps accomplish the equivalent of Urban Airship’s quickstart guide - after this you’ll be setup to track session, events, and much more!
3. Push Setup
In order to set up push for your app, see the resources below:

mParticle’s Android push guide
mParticle’s iOS push guide
Urban Airship’s Android push guide
Urban Airship’s iOS push guide

iOS 10 Service Extension
In case you’re integrating with Urban Airship and need to implement a Service Extension for user notifications, please refer to this documentation: http://docs.urbanairship.com/platform/ios.html#service-extension
Urban Airship User Tags
Urban Airship tags can be used to easily group your users. Use them to track categories of interest, preferences, user behaviors and more. Each device can have multiple tags, and each tag can represent millions of devices.
mParticle has directly analogous user attribute and tag APIs for iOS and Android, which mParticle’s kit integration maps onto Urban Airship’s tag APIs. If there are some attributes that you would not like to map as tags, you may filter them individually via mParticle’s data filtering.
Mapping Events and Event Attributes to Tags
The mParticle kit integration can automatically set Urban Airship tags when particular events and/or event attributes are detected. When enabling and configuring Urban Airship, you may select the events that you’ve sent to mParticle in the past, and customize exactly which tag(s) those events should trigger. In the screenshot below, when an event named “Map View” is fired, mParticle will set the tag “my tag” within the Urban Airship platform and when an event attributed named “Transaction Id” is seen, mParticle will set the tag “transaction”.

Event Mapping
Mapping of mParticle events to Urban Airship events occurs automatically.  mParticle eCommerce events (i.e. MPCommerceEventActionAddToCart or Product.ADD_TO_CART) are mapped to Urban Airship events as follows:



mParticle Product Action Event
Urban Airship Mapped Name




Purchase
purchased


Add To Cart
added_to_cart


Click
browsed


Add to Wishlist
starred_item



Lifetime value events are forwarded to Urban Airship.
Product Bags are not forwarded to Urban Airship.
Configuration Settings



Setting Name
Data Type
Default Value
Description




App Key
string

Urban Airship generated string identifying the app setup. Used in the application bundle.


App Secret
string

Urban Airship generated string identifying the app setup secret. Used in the application bundle.


App Master Secret
string

Urban Airship generated string used for server to server API access. This should never be shared or placed in an application bundle.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Notification Icon Name
string
Application Icon
Android
Name of the drawable resource to use for the notification icon, e.g., ic_notification.


Named User ID Type
string
none
All
The user identity which will be forwarded to Urban Airship as the named user ID


Notification Accent Color
string
System default
Android
Accent color to be used when constructing the notification, e.g., #ff0000.


Event Names that map to User Tags
Custom Field

All
Define the mapping of mParticle event names to the corresponding UrbanAirship tags.


Event Attributes that map to User Tags
Custom Field

All
Define the mapping of mParticle event attributes to the corresponding UrbanAirship tags.


Enable Tags
bool
True
All
If enabled, tags will be sent to Urban Airship.


Send all user attributes as tags
bool
False
All
If enabled, all user tags and user attributes will be forwarded to Urban Airship as tags.  If not enabled, only user tags will be forwarded to Urban Airship.  This setting is dependent the value of the ‘Enable Tags’ setting.



Webhook
Webhooks are an easy way for mParticle to send you data about your mobile app.  Simply enable the Webhook integration and we will start making HTTP POSTs with your App’s user events to the specified endpoint.
mParticle will forward data to your http endpoint as fast as we receive it. In the event of a timeout or non-fatal error response, mpParticle will attempt a limited number of retries in an exponential backoff pattern.
Supported Features

Event Forwarding

Prerequisites
In order to enable mParticle’s integration with Webhook, you will need to have an endpoint that can capture the event data that will be sent to you, via POSTs from mParticle servers.  
Event Data Format
The JSON documentation describes the format data will be delivered to your endpoint.
Configuration Settings



Setting Name
Data Type
Default Value
Description




POST URL
string

The URL to POST your events to.



Connection Settings



Setting Name
Data Type
Default Value
Platform
Description




Unique ID
string

All
An optional string identifier for your app that will be forwarded with each event batch.  Standard app identifiers (Apple OS Bundle ID, Android Package Name) will be forwarded regardless of this setting.


Send as Batch
bool
True
All
If enabled, this setting will cause your app’s events to be sent in (roughly) 10-minute batches per device.  If disabled, mParticle will POST each event to you individually, as its received.  This setting is ignored if “Wait for Complete Batch” is enabled.


Wait for Complete Batch
bool
False
All
If enabled, mParticle will POST events to you in batches only after a user session has ended, so that each event batch you receive will represent a full session of user activity within your app.


Send Crash Events
bool
True
All
If enabled, app crashes will be forwarded.


Send Custom Events
bool
True
All
If enabled, custom app events will be forwarded.


Include User Identities
bool
True
All
If enabled, user identity information will be forwarded with event batches.


Send Lifecycle Events
bool
True
All
If enabled, lifecycle events (application start/stop, session start/end) will be forwarded.


Include Location Information
bool
True
All
If enabled, location data will be forwarded with event data whenever possible.


Send Network Performance Events
bool
True
All
If enabled, network performance events will be forwarded.


Send Profile Change Events
bool
True
All
If enabled, mParticle will forward ID profile events, such as user sign ups, logins, logouts, updates, and deletes.


Send Push Registrations and Receipts
bool
True
All
If enabled, push registration and receipt notifications will be forwarded.


Send Screen Views
bool
True
All
If enabled, screen view events will be forwarded.


Send Commerce Events
bool
True
All
If enabled, commerce events will be forwarded.


Include Metadata
bool
True
All
If enabled, the following metadata - application_info, device_info and source_info will be forwarded.


Include User Attribute Change Events
bool
False
All
If enabled, User Attribute Change Events will be forwarded.


Include User Identity Change Events
bool
False
All
If enabled, User Identity Change Events will be forwarded.



Webtrends
Webtrends - Discover data-driven solutions and find new ways to reach your customers. We offer website analytics, measurement, testing & more.
Supported Features

User Analytics

Data Processing Notes
mParticle has observed that it may take up to 12 hours for data sent from mParticle to appear in Webtrends.
Prerequisites
In order to enable mParticle’s integration with Webtrends, you will need to login to your Webtrends Analytics 10 account, create a space to get the the DCSID - a unique identifier that associates the data collected from a website or app with a space or profile in Analytics 10.  To obtain the DCSID, click on the space from the Spaces dashboard and then click the info icon in the upper right corner to display the space details.  

If you want to send data to Webtrends Streams, please work with your Webtrends account manager to enabled this feature before enabling the “Send to Webtrends Streams” setting.
Event Data Mapping
You can add Custom Flags to your events, which will be mapped to Webtrends schema as described below.
MPEvent *event = [[MPEvent alloc] initWithName:@"Set Title"
                                          type:MPEventTypeUserPreference;

[event addCustomFlag:@"Test Title"
             withKey:@"Webtrends.EventDescription"];

[[MParticle sharedInstance] logEvent:event];

MPEvent event = new MPEvent.Builder("Set Title", MParticle.EventType.UserPreference)
                .addCustomFlag("Webtrends.EventDescription", "Test Title")
                .build();
MParticle.getInstance().logEvent(event);




mParticle Custom Flag
Description
Default Value (if Custom Flag is not set)
Mapping to Webtrends parameters




"Webtrends.WT.dl"
The kind of event tracked
0
Map to the “WT.dl” parameter.  Only applies to the AppEvent message types (i.e., events logged by logEvent SDK method or “event_type” = “custom_event” if sent to mParticle via S2S API)


"Webtrends.EventPath"
The type of event that occurred within your application
”/” + mParticle Event Name, i.e., “/UserLogIn”
Map to the “dcsuri” parameter


"Webtrends.EventDescription"
The representation of an application view at the time of the event. For example, this parameter can specify the name of a screen
mParticle Event Name
Map to the “WT.ti” and “WT.pi” parameters


"Webtrends.EventType"
The type of event activity on a mobile device
mParticle Event Type
Map to the “WT.ev” parameter


"Webtrends.ContentGroup"
The name of a content group
not set
Map to the “WT.cg_n” parameter


"Webtrends.ConversionName"
The name of a conversion. This should only be set on conversion events you’d like to track in Webtrends.
not set
Map to the “WT.conv” parameter



Configuration Settings



Setting Name
Data Type
Default Value
Description




DCSID
string

The DCSID associated with your data source in Webtrends Administration


Send To Webtrends Streams
bool
False
Send data to Webtrends Streams to see data in real time? Please make sure you have Streams enabled in your Webtrends account before turning this on.



Wootric
Wootric is the platform for boosting customer happiness.  Collect customer feedback inside your web or mobile application using Net Promoter Score℠, track ongoing NPS®, follow up with customers, and quickly surface insights in an easy to use dashboard.  
COLLECT CUSTOMER FEEDBACK INSIDE YOUR WEB AND NATIVE MOBILE APPS
Still doing NPS via email? Wootric’s always-on, customizable surveys run inside your native iOS/Android mobile apps for a real-time, accurate measure of customer sentiment with off-the-charts response rates. 
PROMPT YOUR PROMOTERS TO SPREAD THE WORD.
When a user scores you a 9 or 10, ask them to take action – tweet or review your app.
ALIGN YOUR TEAM AROUND BOOSTING CUSTOMER HAPPINESS
Run A/B happiness tests, segment NPS results, and get a single NPS view across all Web and mobile apps. Trigger customer reach-outs through Salesforce, Slack, Zendesk, Intercom.
CUSTOMER HAPPINESS IS NOW SIMPLE AND TURNKEY
Start winning customers for life in just five minutes. 
Prerequisites
In order to enable mParticle’s integration with Wootric, you will need your Account Token, Client ID and Client Secret from your Wootric account.  These settings can be found on the settings page of the Wootric dashboard.  The View the Wootric Install Guide link displays the Account Token and the API link displays the Client ID and Client Secret.


Configuration Settings



Setting Name
Data Type
Default Value
Description




Account Token
string

You can find your account token in your Wootric Settings under ‘View the Wootric Install Guide”  It should look something like this: NPS-4aeb53c1.


Client ID
string

You can find your Client ID  in your Wootric Settings > API


Client Secret
string

You can find your Client Secret in your Wootric Settings > API



Yozio
Yozio - Organic Growth Platform for Your Apps - No Ads Required
Supported Features

Attribution

Prerequisites
In order to enable mParticle’s integration with Yozio, you will need an account with Yozio in order to obtain your App Key and Secret Key.  Once logged into the Yozio Console, these settings are available by clicking “SDK” on the left sidebar.
Configuration Settings



Setting Name
Data Type
Default Value
Description




App Key
string
 
Login to the Yozio Console, click “SDK” on the left sidebar, and the App Key is available.


Secret Key
string
Login to the Yozio Console, click “SDK” on the left sidebar, and the Secret Key is available.
 



Audience Configurations
Aarki
Aarki is transforming mobile app marketing through unified optimization of creative and media. It delivers superior results using proprietary machine learning technology for performance optimization.
Prerequisites
In order to enable our integration with Aarki, you’ll need to obtain your API Key from your Aarki Account Manager for mParticle configuration.
User Identity Mapping
When forwarding audience data to Aarki, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
API key used to connect to the Aarki API.



ActionX
ActionX offers mobile and cross-screen re-targeting capabilities to brands and mobile app publishers.  mParticle’s integration with ActionX enables you forward in-app event data to ActionX for conversion tracking and campaign optimization as well as send audiences created in Audience Manager to ActionX for use in re-targeting and re-engagement campaigns.
Prerequisites
In order to enable our integration with ActionX, you’ll need to obtain one or more Advertiser Tokens from ActionX - one for each App that you’re planning to forward audiences to.  Please reach out to your contact at ActionX for additional information on how to obtain your Advertising Tokens.
User Identity Mapping
When forwarding audience data to ActionX, mParticle will send the following information - IDFAs for Apple OS, Google Advertising IDs and Android Device IDs for Android, and Facebook IDs, Hashed Emails and if “Use Customer ID” is enabled, Customer ID values.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Advertiser Token
string
 
The ActionX Advertiser Token for your app.


Use Customer ID
bool
True
If enabled, mParticle will forward your Customer ID values to ActionX.



Adobe Audience Manager
Adobe Audience Manager is a Data Management Platform (DMP) that helps you build unique audience profiles based on your users web browsing activity so you can identify your most valuable segments and use them across any digital channel.
Prerequisites
The following topics provide information on preparing your Adobe Audience Manager account for mParticle integration:

Creating Data Sources - Select Device Advertising ID as the ID Type
Creating Traits - Select Onboarded as the Trait Type, and User Trait as the Event Type.
Creating Users
Creating User Groups

mParticle’s Adobe Audience Manager integration maps an Audience created in mParticle to one or more ‘Traits’ in Adobe Audience Manager. In order to enable the integration, you will need:

The user details for mParticle to create and manage audience information to your Adobe Audience Manager account
    
You should create a new user specifically for use by mParticle, and the user should be added to a user group that restricts permissions only to the Data Source being used for mParticle Traits. 


A Data Source ID - available from the AAM dashboard by clicking Manage Data -> Data Sources.
Trait information - this can be provided in one of two ways
    
Trait Folder - The name of an AAM Trait Folder (n.b. not the Folder ID). mParticle will create this folder if it does not exist already. Inside the folder, mParticle will map the audience to a Trait matching the External Audience Name. mParticle will create this trait if it does not exist already.
Customer Defined Traits - A list of existing Adobe Trait IDs. If you use this option, you can map an audience to more than one Trait ID.



Note that you can only use one of these options per mParticle Audience. If you provide both, mParticle will use the 'Customer Defined Traits' and ignore the 'Trait Folder'.
User Identity Mapping
When forwarding audience data to Adobe Audience Manager, mParticle will send IDFAs and Google Advertising IDs. If you have enabled a cookie sync integration with AppNexus, mParticle will also forward Adobe Marketing Cloud Visitor IDs (MCVID) for your Web users where available.
Configuration Settings



Setting Name
Data Type
Default Value
Description




User Name
string
 
User Name for your Adobe Audience Manager account


Password
string
 
Password for your Adobe Audience Manager account


Data Source ID
string
 
The ID of your Adobe Audience Manager Data Source



Connection Settings



Setting Name
Data Type
Default Value
Description




Trait Folder
string
 
Audience Traits folder to store Adobe Trait built from mParticle audience.  If the folder does not exist, it will be created.  Either Trait Folder or Customer Defined Traits must be specified.


Customer Defined Traits
string
 
Customer defined Adobe Traits, separated by commas, that the mParticle audience will be associated with.  Either Trait Folder or Customer Defined Traits must be specified.



AdXcel
Adxcel is a marketing performance solution that uses artificial intelligence to discover impactful patterns in marketing data to deliver optimized experiences for your audience.
Prerequisites
In order to enable mParticle’s integration with AdXcel you will need to obtain your API Key from your AdXcel Account Manager.
User Identity Mapping
mParticle forwards the following identifiesrs, unencoded, to AdXcel:

IDFA
GAID

Configuration Settings



Setting Name
Data Type
Default Value
Description




apikey
string
 
Your Adxcel API Key, provided by your account manager.



Appboy
Appboy is a marketing automation platform for mobile apps, with user analytic, segmentation, push, and email marketing feature sets.
Ampush
Ampush provides direct integrations with the largest sources of in-feed, identity-authenticated inventory, and is a preferred partner of Facebook, Twitter, Instagram and Pinterest.”
Prerequisites
In order to enable mParticle’s integration with Chance you will need an account with Chance and work with your account manager to obtain your API Key.
User Identity Mapping
When forwarding audience data to Ampush, mParticle will send MD5 of IDFAs, IDFVs, Google Advertising IDs, and Android IDs, Emails, Customer IDs, and SHA-1 hash of Facebook IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




apiKey
string
 
Contact your account manager to obtain an API key



Connection Settings



Setting Name
Data Type
Default Value
Description




Mailing List ID
int
 
The Ampush Mailing List to map to the mParticle Audience.



Appboy
Appboy is a marketing automation platform for mobile apps, with user analytic, segmentation, push, and email marketing feature sets.
Prerequisites
In order to activate our Appboy integration, you’re going to need the API key for each app that you’d like to set up, which can be found by logging into your Appboy account and navigating to your app’s settings.
User Identity Mapping
When forwarding audience data to AppBoy, mParticle will send Customer IDs, IDFAs and Android Device IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Your app’s API Key can be found in your Appboy dashboard.


Create One User Attribute per Segment
bool
False
If enabled, mParticle will forward membership information for each audience as a separate user attribute.  For example, if you’re forwarding an audience named “New Users”, mParticle will forward membership information for this audience in a user attribute called “In New Users”, with a value of “true” or “false”.  If disabled, mParticle will forward a single user attribute called “SegmentMembership”, and its value will be a comma-separated list of mParticle audience IDs that the user is a member of, wrapped in single quotes (e.g. “‘123’,’456’,’789’”).


App Group Identifier
string
 
App Group Identifier can be found in the developer console section of the Appboy dashboard.



Applift
AppLift is a data-driven technology company that empowers mobile app advertisers to acquire and re-engage quality users at scale on a performance basis.
Prerequisites
In order to forward an mParticle audience to AppLift you must have an account in AppLift. To configure your Applift Integration you need the Account Email and the AppLift API key.  Please reach out to your Applift Account Manager for more information on how to obtain your API key. You must also create an audience on the Applift side first, and get the Applift Audience ID. This is required for mParticle’s connection settings.
User Identity Mapping
When forwarding audience data to AppLift, mParticle will send  IDFAs and Google Advertising IDs in both raw and SHA-1 hash forms.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Account Email
string
 
AppLift Account Email


API Key
string
 
AppLift API Key which you can obtain from your AppLift Account Manager.



Connection Settings



Setting Name
Data Type
Default Value
Description




Applift Audience ID
integer
 
AppLift Audience ID which you can obtain from your AppLift Account Manager.



AppLovin
AppLovin is a mobile marketing platform that empowers brand advertisers to profitably acquire and re-engage customers through its ability to automate the mobile buying process and attribute revenue for every dollar spent on its platform. Its mobile advertising technology moves beyond targeting and segmenting to use personalized ad creative, data and predictive models to deliver dynamic mobile advertising.
Prerequisites
In order to forward an mParticle audience to AppLovin, you will need your AppLovin Audience API Key.  Please reach out to your AppLovin Account Manager for more information on how to obtain your API key.
User Identity Mapping
When forwarding audience data to AppLovin, mParticle will send IDFAs and Google Advertising IDs.
Audience Configuration
1. Setup the AppLovin Account
In mParticle Audience Manager, create a new account specifying your AppLovin API Audience Key.
2. Setup the Audience Subscription
In mParticle Audience Manager, specify the audience specific parameters for this subscription - AppLovin Audience Type.
Multiple audiences may be created in AppLovin depending on the platforms supported by your application.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Custom Audience Key
string
 
Custom Audience Key for the Audience API



Connection Settings



Setting Name
Data Type
Default Value
Description




Audience Type
string
User Acquisition
The type of AppLovin audience you want to forward this audience - User Acquisition or Re-targeting



AppNexus
AppNexus technology powers the most innovative trading solutions and marketplaces for Internet advertising.
Prerequisites
The only thing you’ll need in order to activate our AppNexus audience integration is your Member ID, which you can obtain from your AppNexus support representative.  As an AppNexus Audience Integration, we utilize our own AppNexus account to synchronize audience data between our platforms, and share the synchronized audiences with your AppNexus account via the Sharing API.
User Identity Mapping
When forwarding audience data to AppNexus, mParticle will send IDFAs, Google Advertising IDs, MD5 and SHA-1 of Android Device IDs. If you have enabled a cookie sync integration with AppNexus, mParticle will also forward AppNexus User IDs for your Web users where available.
Configuration Settings



Setting Name
Data Type
Default Value
Description




AppNexus Member ID
string
 
The Member ID of your AppNexus account, which you can obtain from your AppNexus support representative.



BidMotion
BidMotion provides targeted user acquisition using device and user profile data.
Prerequisites
In order to enable mParticle’s integration with BidMotion you will need your API authentication key.  Please reach out to your BidMotion account manager to obtain your API key.
User Identity Mapping
When forwarding audience data to BidMotion, mParticle will send IDFAs, IDFVs, Google Advertising IDs, and Android Device IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Your BidMotion customer API authentication key



CrossInstall
CrossInstall - A holistic ad solution for mobile app companies combining programmatic bidding with interactive ad experiences.
Prerequisites
In order to enable our integration with CrossInstall, you’ll need to obtain your App Id from your CrossInstall Account Manager for mParticle configuration.
User Identity Mapping
When forwarding audience data to CrossInstall, mParticle will send IDFAs, Android Ids and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




App Id
string
 
Unique Identifier of the app. E.g. com.yourcompanyname.appname



Customer.io
Customer.io provides an email marketing platform.  Features include app-event based segmentation and targeting.
Prerequisites
In order to activate audience forwarding to Customer.io, you will need the Site ID and API Key of your Customer.io account.  Both of these can be found on the “Integration” page of your Customer.io console.
User Identity Mapping
When forwarding audience data to Customer.io, mParticle will send Customer IDs, and if available Emails, First Names and Last Names.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Site ID
string
 
The Site ID of your Customer.io account.  You can find this ID on the “Integration” page of yoru Customer.io console.


API Key
string
 
The API Key of your Customer.io account.  You can it on the “Integration” page of your Customer.io console.


Create one user attribute per audience
bool
False
If enabled, mParticle will forward membership information for each audience as a separate user attribute.  For example, if you’re forwarding an audience named “New Users”, mParticle will forward membership information for this audience in a user attribute called “In New Users”, with a value of “true” or “false”.   If disabled, mParticle will forward a single user attribute called “SegmentMembership”, and its value will be a comma-separated list of mParticle audience IDs that the user is a member of, wrapped in single quotes (e.g. “‘123’,’456’,’789’”).



Dynalyst
Dynalyst provides dynamic retargeting products to leads your game-marketing into the next generation.
Prerequisites
In order to enable mParticle’s integration with Dynalyst you will need your Client Customer ID.  Please reach out to your account manager at Dynalyst to get your Client Customer ID.
User Identity Mapping
When forwarding audience data to Dynalyst, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Client Customer ID
string
 
The Client Customer ID of your Dynalyst account



Facebook Custom Audiences
Facebook Custom Audiences make it easy for advertisers to target their existing customers, or prospective customers with ads on Facebook.  Our integration with Facebook enables you to push user audiences created in Audience Manager into your Facebook Ads Management account.
Prerequisites
In order to enable the mParticle integration with Facebook, you will need the account credentials for a Facebook account that you will be using for Ads Management.  The integration activation process in Audience Manager will prompt you to log into your Facebook account, and once logged in, mParticle will automatically retrieve the credentials that it needs to forward audience data to Facebook.
Activate the Integration

Add the Facebook Audience integration from the Directory, and add a new configuration.
Log into your Facebook Developers account from the popup.
From the Connect tab of your audience, add Facebook. You can choose whether or not to forward Emails, Facebook IDs, IDFAs and Google Advertising IDs. 
Click Add Connection to complete the setup.

User Identity Mapping
Depending on the Configuration Settings that you select (see below), Facebook will use one or more of the following IDs to match users:

Email address
Facebook ID
Device IDs (IDFA for Apple OS, Google Ad ID for Android)

Value-Based Audiences
Facebook allows you to create value-based lookalike audiences, which determine which users in an Audience are most valuable, based on a score you provide.
To create a value-based audience, in the Connection Settings dialog, check Is Value Based Audience and select the user attribute you want to use as the ‘lookalike value’. The lookalike value must be a number - either an integer or a non-negative float. The higher the number, the more valuable the user. For example, if you select a lifetime value attribute, Facebook will prioritize users with a higher lifetime value.
For a value-based audience, users will only be forwarded to Facebook if the attribute representing value for the user is a positive number greater than 0.
Value-based audiences can only be set up when you first create a connection. For existing audiences, the Is Value Based Audience setting will be locked.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Facebook Account ID
string
 
This setting is your Facebook account id. You can located it in the Ads Powertool.


Facebook AccessToken
string
 
The Facebook access token used to make Graph API calls



Connection Settings



Setting Name
Data Type
Default Value
Description




Forward Emails
bool
True
If enabled, and the user’s e-mail address is available, the SHA-256 hash of that e-mail address will be added to the audience “<Audience Name> (email)”


Forward Facebook IDs
bool
True
If enabled, the user’s Facebook ID is available, and the Facebook Application ID property is set, it will be added to the audience “<Audience Name> (fb id)”


Forward IDFAs
bool
True
If enabled, and the user’s IDFA is available, it will be added to the audience “<Audience Name> (IDFA/GAID)”


Forward Google Advertising IDs
bool
True
If enabled, and the user’s Google Advertising ID is available, it will be added to the audience “<Audience name> (IDFA/GAID)”


Facebook Application ID
string
 
The App ID found on your Facebook application’s dashboard.


Is Audience Value Based
bool
False
If enabled, the audiences created in Facebook will be value-based.


User Attribute Representing Value
string
 
The user attribute to be used as the basis for setting value in Facebook. Only non-negative numbers will be forwarded to Facebook. This setting only applies to value-based audiences.



The Facebook Application ID setting is required if you enable the Forward Facebook IDs setting.
Fiksu DSP
Fiksu DSP is a massive, proprietary dataset with powerful segmentation tools to target and retain high-quality mobile audiences.
Prerequisites
In order to enable the mParticle integration with Fiksu DSP, you’ll need to obtain your Application ID from Fiksu for mParticle configuration.
User Identity Mapping
When forwarding audience data to Fiksu DSP, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Application ID
string
 
Application ID provided by Fiksu



Connection Settings



Setting Name
Data Type
Default Value
Description




Audience Type
string
 
Fiksu Audience Type, currently supported values are “preload”



Google DoubleClick Data Platform (DDP)
mParticle’s integration with Google DDP enables app publishers to forward audiences created with mParticle’s Audience Manager to Google DDP, and target them with any of Google’s advertising solutions.
Prerequisites
In order to forward an mParticle audience to Google DDP, mParticle must be “whitelisted” for access to your DoubleClick account.  Your Google Technical Account Manager (TAM) or Account Manager (AM) should be able to walk you through the whitelisting process.  If you do not have a dedicated Google TAM or AM, you can also initiate the process by emailing one of the following email aliases, depending on the product that you’d like the mParticle audience to be forwarded to:

DoubleClick Bid Manager (DBM): bidmanager-support@google.com
DoubleClick for Publishers (DFP): dfp-support@google.com
Ad Exchange Buyer: adxbuyersupport@google.com
AdWords: adwords-support@google.com

Please note that each Google ad product has a separate whitelisting process, so you will need to complete this process separately for each ad product that you’d like mParticle to forward audience data to.  You will also need to create a separate integration account for each product that you’d like to forward your audiences to.
User Identity Mapping
When forwarding audience data to Google DDP, mParticle will send IDFAs and Google Advertising IDs. If you have enabled a cookie sync integration with AppNexus, mParticle will also forward Doubleclick Profile IDs for your Web users where available.
Membership Lifespan
Google Doubleclick lists have a membership lifespan - that is, a maximum amount of time a member stays on the list without requalifying. Default membership lifespan is 30 days but can be set up to 540  days. For example, If you define an audience based on viewing a particular screen, and your membership lifespann is set to 30 days, a new member will only remain in your Doubleclick list for 30 days, unless they view the screen again, at which point the 30 day timer will reset.
Configuration Settings
The table below describes the configuration settings for each Google DDP audience integration account.  You will need to create a separate integration account for each Google ad product that you’d like to forward your audiences to.



Setting Name
Data Type
Default Value
Description




Client Customer ID
string
 
Your DoubleClick Client Customer ID.  Please contact your Google TAM or AM to obtain this value.


Product
string
ADX Buyer
The Google Ad Product you would like to forward audience data to.



Connection Settings



Setting Name
Data Type
Default Value
Description




Membership Lifespan
int
30
The number of days that users remain as part of an audience list after they’re added, if they take no further action that renews their membership.  A minimum of 30 and a maximum of 540 days are accepted.



Indicative
Indicative is a behavioral analytics platform for growth marketers, product managers, and data analysts to optimize customer acquisition, conversion, and retention.
In order to enable mParticle’s integration with Indicative, you will need an account with Indicative in order to obtain your API Key.  Once logged into the Indicative Console, you can select Projects to get your API key.

User Identity Mapping
When forwarding audience data to Indicative, mParticle will send IDFAs, IDFVs, Google Advertising IDs, Android IDs, Emails, and Customer IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
When you sign up with Indicative, you will receive API Keys which correspond to all supported platforms on mParticle.



InMobi
InMobi provides a revolutionary discovery commerce (d-commerce) platform, enabling developers, merchants & brands can engage mobile consumers globally and power acquisition.
Prerequisites
In order to enable our integration with InMobi, you’ll need your Property ID.  Please reach out to your contact at InMobi for additional information on how to obtain your Property ID.
User Identity Mapping
When forwarding audience data to InMobi, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Property ID
string
 
Property ID provided by InMobi



Connection Settings



Setting Name
Data Type
Default Value
Description




Negative Targeting
bool
False
If enabled, this audience is used for negative targeting



iotec
iotec is a leading Intent Marketing Platform dedicated to bringing the transformative power of machine learning to all aspects of digital marketing. By tracking and analyzing customer intent at every touchpoint, iotec enables brands to understand and intelligently act and react in real context, and real time.
Prerequisites
In order to enable our integration with iotec, you’ll need to obtain your API Key from your iotec Account Manager for mParticle configuration.
User Identity Mapping
When forwarding audience data to iotec, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




IO API Key
string
 
IO API Key. This can be obtained through your account manager.



Connection Settings



Setting Name
Data Type
Default Value
Description




IO Audience ID
string
 
Audience ID identifying the audience to IO. This can be obtained through your account manager.



ironSource
Combining programmatic media buy with unique direct supply relationships, ironSource’’s UA solution is designed to find the right user at the most competitive price.
Prerequisites
In order to enable our integration with ironSource, you’ll need to obtain your Advertiser ID and Password from your ironSource Account Manager for mParticle configuration.
User Identity Mapping
When forwarding audience data to ironSource, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Advertiser ID
string
 
This is your Advertiser ID, as provided by your account manager.


Advertiser Password
string
 
This is your Advertiser password, as provided by your account manager.



Iterable
Iterable is a multi-channel growth marketing and user engagement platform that powers marketing, transactional, and lifecycle campaigns on email, web and mobile.  Iterable requires your application to be collecting email addresses.  This can be done by calling the setUserIdentity SDK method.
Prerequisites
In order to forward an mParticle audience to Iterable, you must have an account with Iterable.
1. Sign into your Iterable account at https://app.iterable.com/login/
2. Get the API keys
Select Integrations -> API Keys from the left navigation menu.

Click the Create New API Key button
Select to create a key of type Standard and click Create.

3. Get the API Key
Select the value in the Key column of the Existing API keys table.  This value is need to configure Iterable in the Audience Manager.

4. Create a new List by selecting Users -> Import List from the left navigation menu
Click Import List and enter the List Name and List Type. Select Create a blank list with no users and click next.

5. Get the List ID
From the List View, get the List ID for your List from the table.

User Identity Mapping
When forwarding audience data to Iterable, mParticle will send Emails and if they exist, Customer IDs and any additional user attributes. 
Audience Configuration
1. Setup the Iterable Account
In mParticle Audience Manager, create a new account specifying your Iterable API Key.
2. Setup the Audience Subscription
In mParticle Audience Manager, specify the audience specific parameters for this subscription - Iterable List ID.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Your Iterable API Key



Connection Settings



Setting Name
Data Type
Default Value
Description




List ID
string
 
The Iterable List ID which will be mapped to this audience.



Kahuna
Kahuna provides push messaging services that are based on real-time user analytics.
Prerequisites
In order to activate audience forwarding to Kahuna, you will need to have your Kahuna account’s Secret Key handy.  If you’re not sure where to find your Secret Key, please follow these instructions:
1. From the Kahuna Dashboard, click on the gear icon in the upper right corner:

2. Now click on the Configuration tab:

3. To find your Secret Key, scroll down to the App Settings section of this page:

User Identity Mapping
When forwarding audience data to Kahuna, mParticle will send Customer IDs, Facebook IDs, Emails, and Twitter Handles.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Secret Key
string
 
Your application’s Secret Key value, found on the Configuration tab of the Kahuna Settings page


API Key
string
 
Your application’s API Key value, found on the Configuration tab of the Kahuna Settings page


Create One User Attribute per Segment
bool
True
If enabled, mParticle will forward membership information for each audience as a separate user attribute.  For example, if you’re forwarding an audience named “New Users”, mParticle will forward membership information for this audience in a user attribute called “In New Users”, with a value of “true” or “false”.    If disabled, mParticle will forward a single user attribute called “SegmentMembership”, and its value will be a comma-separated list of mParticle audience IDs that the user is a member of, wrapped in single quotes (e.g. “‘123’,’456’,’789’”).



Leadbolt
Leadbolt is a high performance mobile advertising platform providing user acquisition for advertisers and app monetization for publishers.
Prerequisites
In order to enable our integration with Leadbolt, you’ll need to obtain your API Key from your Leadbolt Account Manager for mParticle configuration.
User Identity Mapping
When forwarding audience data to Leadbolt, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Leadbolt API Key which you can obtain from your Leadbolt Account Manager.



LifeStreet
LifeStreet is a leading global in-app advertising technology company. Its platform delivers breakthrough monetization for publishers and extraordinary volumes of quality users for advertisers.
Prerequisites
In order to enable our integration with LifeStreet, you’ll need to obtain your API Key from your LifeStreet Account Manager for mParticle configuration.
User Identity Mapping
When forwarding audience data to LifeStreet, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Please use the API key provided to you by LifeStreet account manager.



Liftoff
Liftoff is a full-service mobile app marketing and retargeting platform that uses post-install data to run true CPA-optimized user acquisition and retention campaigns.
Prerequisites
In order to enable our integration with Liftoff, you’ll need to work with your Liftoff account executive to obtain your Liftoff App ID and API Key.
User Identity Mapping
When forwarding audience data to Liftoff, mParticle will forward IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Liftoff App ID
string
 
Liftoff-specific ID for your app. Each app has a unique ID. Your Liftoff account executive will provide IDs for each app.


Liftoff API Key
string
 
API key for your Liftoff account. Your Liftoff account executive will provide this key.



LoopMe
LoopMe is the largest mobile video platform, supporting all video and full-screen formats and reaching over 1.25 billion consumers worldwide.
Prerequisites
In order to enable our integration with LoopMe, you’ll need to obtain your API Key from your LoopMe Account which can be found under “Account”, “Settings” for mParticle configuration.
User Identity Mapping
When forwarding audience data to LoopMe, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
This is your LoopMe API Authentication Token which can be found under “Account”, “Settings”.  Please check “Enable API” and enter your token here.



Lotame
Lotame serves as a unifying platform to collect, organize, protect, and activate first-, second- and third-party audience data from any source.  mParticle’s integration enables you to send audiences created with Audience Manger into your Lotame DMP.

Event Integration - send your app’s session and custom events to Lotame via their Crowd Control Data Collection API. This can be activated via Integration Manager in the mParticle platform. 
Audience Integration - send audiences created with Audience Manager to Lotame.  This can be activated via Audience Manager in the mParticle platform.

Both components can be activated and used independently of one another.
Prerequisites
In order to activate mParticle’s audience integration with Lotame, you must have your app’s Crowd Control Client ID handy.
User Identity Mapping
When forwarding audience data to Lotame, mParticle will send IDFAs, Google Advertising IDs and SHA-1 Android Device IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Client ID
string
 
Your app’s Crowd Control Client ID


Send Messages Securely
bool
 
If enabled, mParticle will forward all data to Lotame using SSL.



MailChimp
MailChimp provides an email marketing services platform.  Features include campaign design, tracking, segmentation and list management.

    As of [date] updated our MailChimp integration to use version 3 of MailChimp's API, leading to the following changes:
    
The 'Welcome on Subscribe' configuration option is no longer available.


Prerequisites
In order to activate mParticle’s audience integration with MailChimp, you will need a copy of your MailChimp API key from MailChimp’s dashboard.  If you’re not sure what this is, or where to find it, please see MailChimp’s documentation of API keys.
You must also create a MailChimp List and provide the MaillChimp List ID as part of the configuration process.  If you’re not sure where to find your list ID, please follow these instructions:

From the Lists page in your MailChimp dashboard, go to the settings page for the list that you would like to use for the integration: 

Click on List name & defaults 
The List ID can be found on the top right of this page: 


User Identity Mapping
When forwarding audience data to MailChimp, mParticle will send Emails.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Your MailChimp API Key which can be found at http://kb.mailchimp.com/article/where-can-i-find-my-api-key.


Email Type
string
HTML
This settings defines whether users in this audience will receive text or HTML emails.


Double Opt-in
bool
True
If enabled, newly-added users will receive an email asking them to confirm their subscription to the MailChimp list that corresponds to this audience.  Otherwise, users will be automatically subscribed to this list at the same time that they are added to the audience.


Delete on Subscription End
bool
True
If enabled, users will be deleted from the corresponding list in MailChimp when the mParticle audience subscription expires.



Connection Settings



Setting Name
Data Type
Default Value
Description




List ID
string
 
The MailChimp List ID that we will use to represent this audience in MailChimp.



Manage
Manage connects our clients precisely to the customers they are seeking. As the first and largest provider of data-driven solutions for mobile advertisers and publishers, we are focused on helping our customers optimize ROI by leaving little to luck.
Prerequisites
In order to forward an mParticle audience to Manage you will need to work with your Manage Account Manager to get the Configuration Settings - API Key and Suppressions IDs.
User Identity Mapping
When forwarding audience data to Manage, mParticle will send Android Device IDs, Google Advertising IDs, IDFAs, and IDFVs.
Audience Configuration
1. Setup the Manage Account
In mParticle Audience Manager, create a new account specifying your API Key.
2. Setup the Audience Subscription
In mParticle Audience Manager, specify the audience specific parameters for this subscription - Suppression ID.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Manage API Key



Connection Settings



Setting Name
Data Type
Default Value
Description




Suppression ID
string
 
Campaign ID to be used for a suppression audience



Millennial Media
Millennial Media is an independent mobile marketplace with a unique set of data and technology assets.  From managed services to programmatic tools, Millennial Media’s tech and data platforms empower publishers and advertisers to connect with target audiences at scale while also driving monetization.  You can now create an audience within the mParticle platform based on any combination of available user and app data points. That audience can then be sent to Millennial Media for targeting within the Millennial Media platform.
Once an audience is created in the mParticle platform, customers can simply obtain their audience’s Data Segment Code from Millennial Media and enter it into Audience Manager.  
Prerequisites
In order to forward an mParticle audience to Millennial Media, you will need to work with your Millennial Media Account Manager to get the Configuration Settings.  Your Millennial Media Account Manager should be able to provide your Millennial Media PID and the unique Millennial Media Data Segment Code for each audience you will be forwarding from mParticle to Millennial Media.
User Identity Mapping
When forwarding audience data to Millennial Media, mParticle will send IDFAs and Google Advertising IDs.
Audience Configuration
1. Setup the Millennial Media Account
In mParticle Audience Manager, create a new account specifying your Millennial Media Partner ID (PID).
2. Setup the Audience Subscription
In mParticle Audience Manager, specify the audience specific parameters for this subscription - Millennial Media Data Segment Code.
Configuration Settings



Setting Name
Data Type
Default Value
Description




PID
string
 
Millennial Media Partner ID (PID)



Connection Settings



Setting Name
Data Type
Default Value
Description




Data Segment Code
string
 
Millennial Media Data Segment code.  This is needed for each audience forwarded to Millennial Media.



Mixpanel
Mixpanel provides event and user analytics, including funnel analysis and segmentation.  They also provide push notification and survey functionality.
Our integration will forwards audience information on your users to your Mixpanel account using Mixpanel People Attributes.
Prerequisites
In order to activate audience forwarding to Mixpanel, you must have the Mixpanel API Token for the account that you wish to forward data to.  The token can be found on your Mixpanel dashboard by clicking on the “Account” link at the top of the dashboard, then selecting the “Projects” tab in the account popup.
Mixpanel People

The mParticle audience integration with Mixpanel operates by attaching information to Mixpanel People profiles.  As such, you must subscribe to the Mixpanel People add-on in order for the integration to work.  For additional information about Mixpanel People, please see the following links: Mixpanel People and Mixpanel Pricing

Additionally, you must enable the "Use Mixpanel People" configuration parameter in order for the audience integration to work.


User Identity Mapping
When forwarding audience data to Mixpanel, mParticle will send Android Device IDs, IDFAs, IDFVs, and Customer IDs.
Configuration Settings
mParticle will forward a single Mixpanel People Attribute called “SegmentMembership”, and its value will be a comma-separated list of mParticle audience IDs that the user is a member of, wrapped in single quotes (e.g. “‘123’,’456’,’789’”).



Setting Name
Data Type
Default Value
Description




Token
string
 
Mixpanel API Token.  Project token, which you can find by clicking the gear icon on the lower left of your project


Create One User Attribute Per Audience
bool
False
If enabled, mParticle will forward membership information for each audience as a separate Mixpanel People Attribute. For example, if you’re forwarding an audience named “New Users”, mParticle will forward membership information for this audience in a Mixpanel People Attribute called “In New Users”, with a value of “true” or “false”.


Use Mixpanel People
bool
False
This setting must be set to Yes in order for the audience integration to work.



myTarget
myTarget provides targeted user acquisition from the biggest social networks in Russia and the CIS region, reaching more than 140 million people.
Prerequisites
To set up the myTarget integration, you will need the User Name for your myTarget Account and your myTarget Audience ID.
User Identity Mapping
When forwarding audience data to myTarget, mParticle will send the following identifiers, where available:

Android ID
GAID (Google Advertising ID)
IDFV (iOS Vendor ID)
IDFA (iOS Advertising ID)
Email address

Configuration Settings



Setting Name
Data Type
Default Value
Description




User Name
string
 
Username for the myTarget account.



Opera Mediaworks
Opera Mediaworks - We are passionate about innovative brand experiences that evoke emotion and deliver real outcomes fueled by data, technology and creativity.
Prerequisites
In order to enable our integration with Opera Mediaworks, you’ll need your API key which is available in your Opera Mediaworks Dashboard.
User Identity Mapping
When forwarding audience data to Opera Mediaworks, mParticle will send IDFAs, Android Device IDs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Your API key issued by AdColony by Opera Mediaworks



Oracle Responsys
Oracle’s B2C Cross-Channel Marketing solution, Oracle Responsys provides marketing teams with a centralized canvas to build specific consumer profiles and tailor interactions for consumers across email, mobile, display, and social channels.
Prerequisites
In order to enable mParticle’s integration with Oracle Responsys, you will need an account with Oracle Responsys to obtain your configuration settings.  

The Oracle Responsys integration assumes that you are maintaining the Profile List, meaning users (i.e. email addresses) must already be in the Profile List in order for them to be added to a Profile Extension Table.

The integration uses a folder named “mParticle” which will be the default folder to store your mParticle Audiences / Oracle Responsys Profile Extension Tables.  “mParticle” is the default folder, however if you want to use a different folder, enter it as the “Responsys Folder” setting.
Create the mParticle default folder
Follow these steps to create the mParticle default folder:

Login to your Oracle Responsys account
Select Folders from the main navigation
Click New Folder
Enter mParticle for the new folder name
Click Create

API Endpoint
Your API Endpoint is based on the pod that is hosting your Oracle Reponsys account.  This information is provided by the Oracle support team when your account was created or can be found in the address bar of the browser.  It will be one of the following:

interact2
interact5

User Identity Mapping
When forwarding audience data to Oracle Responsys, mParticle will send Emails and Customer IDs if the “Include Customer ID” setting is enabled.
Campaign Setup
When setting up a campaign using an Oracle Responsys Profile Extension Table (PET) created from your mParticle audience, you will need to setup a filter to only include users who are included in the audience by querying the MPAUDIENCEMEMBERSHIPSTATUS field of the PET for a value of 1.  
The Oracle Responsys Profile Extension Table which maps to an mParticle Audience will be named as follows:  MP{mParticle Audience ID}-{mParticle External Audience Name} (i.e. MP001787-Supression List)
The sections below describe how to create a filter and specify it when configuring your campaign:
Create a Filter
Follow these steps to create a Filter:

Select Data -> Manage Lists from the main navigation
Select the Filters tab
Click Create Filter
Expand the Profile Attributes section
Open the PET table you are using for the campaign
Drag the MPAUDIENCEMEMBERSHIPSTATUS field to Profile Attributes
Enter  1 as the Equal to value
Click Save
Enter a name for the filter
Select the mParticle folder
Click Save


Specify the Filter for your Campaign
Follow these steps to assign the filter to your campaign:

Select the Audience section of the  campaign
Select the Inclusions:  Everyone in any of the selected filters
Click Select
Select the filter created above
Cilck OK

Configuration Settings



Setting Name
Data Type
Default Value
Description




User Name
string
 
User Name for the Oracle Responsys Account


Password
string
 
Password for your Oracle Responsys Account


API Endpoint
string
interact2
Oracle Responsys Endoint


List Name
string
CONTACTS_LIST
Oracle Responsys Profile List



Connection Settings



Setting Name
Data Type
Default Value
Description




Folder
string
mParticle
Oracle Responsys Folder


Include Customer ID
bool
True
If enabled, mParticle will forward Customer IDs



Pinterest
Pinterest - Reach people who are using Pinterest to discover and plan the things they want to do in the future.  Using the Ads API, businesses on Pinterest manage, scale and optimize their Promoted Pins.
Prerequisites
In order to enable mParticle’s integration with Pinterest, you need to have a business account with Pinterest, and the account credentials for the Pinterest account.  The integration activation process in Audience Manager will prompt you to log into your Pinterest account, and once authorized, mParticle will automatically retrieve the credentials that it needs to forward audiences to Pinterest.
If you are not working with a Pinterest Marketing Developer Partner, contact advertiser-data-onboarders@pinterest.com and CC your Pinterest account team requesting access to the Pinterest API.
Data Processing Notes

Timing - An audience named <Audience Name>-EMAIL and <Audience Name>-MAID will be available in Pinterest upon activating a subscription in mParticle, however it may take up to 24 hours before the size of the audience is shown in Pinterest.
Minimum - An audience is selectable for targeting in Pinterest as long as it has a minimum of 100 users.  If an audience is selected while in the processing state, and later is calculated to be less than 100 users, the campaign will not serve.
Maximum - There is a limit of 300 million users in an audience.  This is a count of the raw number of records that mParticle has sent to Pinterest.  If an audience reaches this limit, mParticle will no longer send user updates to Pinterest.
Additional Notes - If an email or device ID is added to an audience, and is not currently a Pinterest user, the user will not be added to the audience even if the user later becomes a Pinterest user.

User Identity Mapping
When forwarding audience data to Pinterest, mParticle will send SHA-1 hash of IDFAs, Google Advertising IDs and Emails based on the values of the Connection Settings.
Connection Settings



Setting Name
Data Type
Default Value
Description




Forward Email
If enabled, and the user’s e-mail address is available, e-mail address will be sent to Pinterest, and if matched to Pinterest users, will be in the audience “<Audience Name>-EMAIL”.
 
 


Forward Device ID
If enabled, device IDs (IDFA for Apple OS, Google Advertising ID for Android) will be sent to Pinterest, and if matched to Pinterest users, will be in the audience “<Audience Name>-MAID”.
 
 



Remerge
Remerge is a leading provider of app retargeting and audience management. The Remerge platform offers an efficient and scalable solution by streamlining complex and manual processes with technology - and without needing to integrate an SDK. By activating Remerge, app developers can re-engage users worldwide to increase retention and boost user lifetime value - by driving purchases, orders, bookings, subscriptions and revenues.
Prerequisites
In order to enable mParticle’s integration with Remerge you will need your Remerge API Key and Customer ID.  Please reach out to your contact at Remerge for more information on obtaining these values.
User Identity Mapping
When forwarding audience data to Remerge, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Remerge API Key
string
 
Secret key to use the Remerge API, provided by your Remerge account manager


Remerge Customer ID
string
 
Remerge internal customer ID, provided by your Remerge account manager



RevX
RevX is an app retargeting platform that powers growth for mobile businesses through audience intelligence, programmatic media, personalized ads and ROI optimization. RevX supports the iOS and Android platforms.
Prerequisites
To set up the RevX integration, you will need your: 

Advertiser ID - Available from your RevX Account Manager or Account Dashboard.
Pixel ID - Available from your RevX Account Manager or Account Dashboard.
Business Vertical. Available from your RevX Account Manager.

User Identity Mapping
When forwarding audience data to RevX, mParticle will send:
Device IDs 

GAID (Google Advertising ID)  
IDFA (iOS Advertising ID)  

User IDs 

Customer ID  
Email address  
Facebook ID  
Other  

Configuration Settings



Setting Name
Data Type
Default Value
Description




Advertiser ID
string
 
Advertiser ID shared by RevX Account Manager. You can pick this up from your RevX Dashboard as well.


Pixel ID
string
 
Data Pixel ID shared by RevX Account Manager. You can pick this up from your RevX Dashboard as well.


Business Vertical
string
 
Business Vertical shared by RevX Account Manager.



Sailthru
Sailthru deliver personalized omnichannel experiences to consumers across email, onsite, mobile, recommendations, social and offline. They are the leading platform for modern marketers, with unparalleled data and technology.
Prerequisites
In order to forward an mParticle audience to Sailthru you will need your Sailthru API Key and Secret.  
Sign into your Sailthru account at https://my.sailthru.com/login.  You can find your API key by going to your Settings page and clicking on the lock next to “API Key / Secret”.
It is also necessary to create the List in your Sailthru account prior to setting up the mParticle audience subscription.
User Identity Mapping
When forwarding audience data to Sailthru, mParticle will send Emails and First Names. If either of these are missing, the user will not be forwarded to Sailthru.
Audience Configuration
1. Setup the Sailthru Account
In mParticle Audience Manager, create a new account specifying your Sailthru API Key and Shared Secret.
2. Setup the Audience Subscription
In mParticle Audience Manager, specify the audience specific parameters for this subscription - Sailthru Private List, Public List and Primary List indicator.   The List Name cannot contain the ‘$’ symbol.  Lists are classified as either Primary or Secondary. Primary means that Sailthru will automatically provide reporting on these lists. Secondary lists will not have any reporting provided.

Be sure you have created the list in Sailthru before completing the subscription.

Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Your Sailthru API key


Shared Secret
string
 
Your Sailthru Shared Secret



Connection Settings



Setting Name
Data Type
Default Value
Description




Private List Name
string
 
The private list name of the audience


Public List Name
string
 
The public list name of the audience


Primary List
bool
False
If enabled, Sailthru will automatically provide reporting on the audience.



SendGrid
SendGrid is a leading provider of cloud-based email services, with both marketing and transactional email automation capabilities.  App marketers can leverage mParticle’s integration with SendGrid to target email marketing efforts to app user audiences created with mParticle’s Audience Manager.
Prerequisites
In order to forward an mParticle audience to SendGrid you will need a Sendgrid API Key.  This can be generated in the Sendgrid Dashboard.
User Identity Mapping
When forwarding audience data to SendGrid, mParticle will send Emails and any user attributes provided by the application.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
Your SendGrid password. This is the same credential used for your SendGrid SMTP settings, and for logging into the SendGrid website.



Configuration Settings



Setting Name
Data Type
Default Value
Description




List Name
string
 
The list name that will appear in your SendGrid account.



Smadex
Smadex is a programmatic video advertising platform for agencies and brands offering global premium scale across all video ad formats.
Prerequisites
In order to enable mParticle’s integration with Smadex you will need your Smadex Partner ID.  Please reach out to your Smadex Account Manager for more information on obtaining this value.
User Identity Mapping
When forwarding audience data to Smadex, mParticle will send IDFAs, IDFVs, Android Device IDs, Google Advertising IDs, and Customer IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Smadex ID
string
 
The Smadex Partner ID - contact your Account Manager to receive your Partner ID.



Snapchat
Snap is a camera company whose flagship application Snapchat, the Spectacles product, and a variety of publisher tools provide brands a unique platform to reach targeted audience segments with engaging and personalized content.
Prerequisites
In order to enable the mParticle integration with Snapchat you will need the account credentials for a Snapchat account.  The integration activation process will prompt you to log into your Snapchat account, and once logged in, mParticle will automatically retrieve the credentials that it needs to forward audience data to Snapchat.
Activate Snapchat

Select Directory, and click the Snapchat tile
Click Add Snapchat to Setup
Select the Output Audience Integration Type and click Add to Setup
Select the Snapchat output configuration group and click Configure
Click Login to Snapchat - A pop-up window will appear allowing you to enter your account credentials to access your Snapchat account

Enter a Configuration Name
Select your Account Credentials and click Save
Click Accept to authorize mParticle to access your Snapchat account

You can now connect your audiences to Snapchat.

Data Processing Notes

Minimum - An audience is selectable for targeting in Snapchat as long as it has a minimum of 1000 users.  

User Identity Mapping
When forwarding audience data to Snapchat, mParticle will send SHA-256 hash of IDFAs, Google Advertising IDs, and Emails based on the the values of the Connection Settings.
Connection Settings



Setting Name
Data Type
Default Value
Description




Forward Email
string
 
If enabled, and the user’s e-mail address is available, the SHA-256 hash of that e-mail address will be added to the audience “<Audience Name> (Email)”


Forward Device ID
string
 
If enabled, mParticle will forward the SHA-256 hash of that users’ device IDs (IDFA for Apple OS, Google Advertising ID) to the audience “<Audience Name> (Device Id)”.



Tapad
Tapad is a marketing technology platform that offers cross-device solutions for omni-channel marketers. By activating Tapad in the mParticle platform, customers can immediately begin to send data directly into Tapad’s media platform to allow for real-time, end-to-end, cross-platform campaign execution.  Using powerful algorithms to determine the highest probable device match, marketers can gain access to the information they need to create a more personalized user experience, deeper engagement, and a higher rate of customer retention.
Prerequisites
In order to forward an mParticle audience to Tapad, you will need to work with your Tapad Account Manager to get the Configuration Settings.  Your Tapad Account Manager should be able to provide your Tapad Partner ID and the unique Tapad Audience IDs for each audience you will be forwarding from mParticle to Tapad.
User Identity Mapping
When forwarding audience data to Tapad, mParticle will send IDFAs, Google Advertising IDs and Android Device IDs.
Audience Configuration
1. Setup the Tapad Account
In mParticle Audience Manager, create a new account specifying your Partner ID and Endpoint.  The Tapad Endpoint can be America for US and CA audiences or EMEA for EU/EEA audiences.  
2. Setup the Audience Subscription
In mParticle Audience Manager, specify the audience specific parameters for this subscription - Tapad Audience ID.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Tapad Partner ID
string
 
Your Partner ID assigned to you by Tapad.


Tapad Endpoint
string
America
The Tapad Endpoint to send your audience - America or EMEA.



Connection Settings



Setting Name
Data Type
Default Value
Description




Tapad Audience ID
string
 
The Tapad Audience ID which maps to this mParticle audience.



Tapjoy
Tapjoy, maximize the value of every user for freemium mobile app publishers.
Prerequisites
In order to enable our integration with Tapjoy, you’ll need to obtain your Tapjoy Partner ID from your Tapjoy Account Manager for mParticle configuration.  You will also need your Android and iOS App IDs for each audience that you will forward from mParticle to Tapjoy.
User Identity Mapping
When forwarding audience data to Tapjoy, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Tapjoy Partner ID
string
 
The Tapjoy Partner ID, which you can obtain from your Tapjoy Account Manager.



Connection Settings



Setting Name
Data Type
Default Value
Description




Audience Type
string
 
Type of audience - Currently only ‘suppression’ is supported.


Android App ID
string
 
Your Tapjoy Android App ID, which you can obtain from your Account Manager.


iOS App ID
string
 
Your Tapjoy iOS App ID, which you can obtain from your Account Manager.



The Trade Desk
The Trade Desk provides a self-service platform that enables ad buyers to manage data-driven digital advertising campaigns across various advertising formats, including display, video, and social, across devices.
Prerequisites
In order to forward an mParticle audience to The Trade Desk you will need to work with your The Trade Desk Account Manager to get the Configuration Settings.  Your Advertiser ID is available from The Trade Desk dashboard and your Account Manager can provide you with your Advertiser Secret Key.  
User Identity Mapping
When forwarding audience data to The Trade Desk, mParticle will send IDFAs and Android Advertising IDs. If you have enabled a cookie sync integration with AppNexus, mParticle will also forward Doubleclick Profile IDs for your Web users where available.
Configuration Settings



Setting Name
Data Type
Default Value
Description




Advertiser ID
string
 
The Advertiser ID available on your The Trade Desk dashboard


Advertiser Secret Key
string
 
The Trade Desk Shared Secret which you can get from your Account Manager


Location
string
North America - East
The Trade Desk Data Center Region Location where audience data will be sent



Twitter Tailored Audiences
mParticle’s Twitter Tailored Audience integration enables app owners to push audiences created in Audience Manager to Twitter.  Once the integration is activated and your audience is pushed to Twitter, you can then target Promoted Tweets to your Tailored Audiences for engagement, cross-promotion, exclusion targeting or monetization use cases.
Prerequisites
In order to enable audience forwarding to Twitter, you will need the account credentials for a Twitter account that is linked to your app’s Twitter Ads account.  The integration activation process in Audience Manager will prompt you to log into your Twitter account, and once authorized, mParticle will automatically retrieve the credentials that it needs to forward audiences to Twitter.
Data Processing Notes

Timing - Real Time Audiences are activated for targeting in near real time, however please note that the true estimate for the audience size may still take up to 60 hours.  It is possible to view audience status in the Ads UI via “Audience Manager” dashboard.

Activate the Integration

Add the Twitter Audience integration to your setup from the Directory.
From Setup > Outputs Add a new Twitter Audience Configuration.
Log into Twitter from the popup, select your advertising account and click Save.
From your audience’s Connect page, add Twitter as an output and select the configuration you created. You can choose whether or not to forward emails, Twitter handles and device IDs to Twitter. Click Add Connection to finalize the connection.

User Identity Mapping
Depending on the Configuration Settings that you select (see below), Twitter will use one or more of the following IDs to match users:

Email address
Twitter handle
Device IDs (IDFA for Apple OS, Google Ad ID for Android)

Configuration Settings



Setting Name
Data Type
Default Value
Description




Account ID
string
 
Your Twitter advertising-enabled account ID



Connection Settings



Setting Name
Data Type
Default Value
Description




Forward Emails
bool
True
If enabled, and the user’s e-mail address is available, the SHA-256 hash of that e-mail address will be added to the audience “<Audience Name> (email)”


Forward Twitter Handles
bool
True
If enabled, mParticle will forward users’ Twitter handles to Twitter for this audience.


Forward Device IDs
bool
True
If enabled, mParticle will forward users’ device IDs (IDFA for Apple OS, Google Ad ID for Android) to Twitter for this audience.



Urban Airship Audience
Urban Airship provides push messaging services, including segmentation and targeting capabilities.
Prerequisites
In order to forward mParticle audiences to Urban Airship, you will need your App Key, Secret and Master Secret - one for each App that you are planning to forward audiences to.
Sign into your Urban Airship account at https://go.urbanairship.com/accounts/login/.  On the left panel, click on Settings -> APIs & Integrations and your Key and App Secrets are available.








You will need to specify a Tag name which maps to the mParticle audience to complete the setup.  The tag is created by mParticle and must be unique for your account.
User Identity Mapping
When forwarding audience data to Urban Airship, mParticle will send the Urban Airship Channel created from a Push Registration Token or auto generated if the token does not exist.
Configuration Settings



Setting Name
Data Type
Default Value
Description




App Key
string
 
Urban Airship generated string identifying the app setup. Used in the application bundle.


App Secret
string
 
Urban Airship generated string identifying the app setup secret. Used in the application bundle.


App Master Secret
string
 
Urban Airship generated string used for server to server API access. This should never be shared or placed in an application bundle.



Connection Settings



Setting Name
Data Type
Default Value
Description




Tag Name
string
 
The Urban Airship tag name which represents this mParticle audience in your account.  This is created by mParticle.



YouAppi
YouAppi is a growth marketing platform for premium mobile brands. YouAppi’s OneRun Platform combines AI powered predictive and cohort technology to analyze over 1.5B users, converting data into profitable users.
Prerequisites
In order to enable our integration with YouAppi, you’ll need to obtain your API Key from your YouAppi Account Manager for mParticle configuration.
User Identity Mapping
When forwarding audience data to YouAppi, mParticle will send IDFAs and Google Advertising IDs.
Configuration Settings



Setting Name
Data Type
Default Value
Description




API Key
string
 
API key issued by YouAppi.



Feed Configurations
Feeds allows brands to configure cloud-based data across marketing, sales and support tools as inputs into the mParticle platform for a more holistic view of the customer. With a single source of truth for customer data, marketers can understand the impact and ROI, across all channels in order to optimize and repeat successful initiatives in real-time. 
Once an input feed has been setup, you can use the feed in the following ways:

View the feed data in the Live Stream (if development data)
View the feed data in the Activity Report
Use the feed data in Audience definitions
Setup a connection from the input feed to an output event service

Below are details for setting up all mParticle Input Feeds.
Adjust Feed
Adjust is a business intelligence platform for mobile app marketers, combining attribution for advertising sources with advanced analytics and store statistics.
Input Data Details
The following types of data can be configured to be sent from Adjust to mParticle

Attribution

Adjust attribution events are mapped as follows:

Event Type = Custom Event
Custom Event Type = attribution
Event Name = attribution

Configuration
Configure the Adjust Input: 

Select Directory, and click the Adjust tile
Click Add Adjust to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the Adjust input configuration group to specify the configuration parameters:
    
Configuration Name
Act as Application


Click Create
Copy the Token
Follow these instructions to configure the postback in Adjust and entering the token copied above.

If you’d like to forward customer IDs as part of the attribution data, you will need to setup Partner Parameters.  You can get details on the Adjust configuration for partner parameters in iOS and Android
AppsFlyer Feed
AppsFlyer is a leading Mobile Attribution & Marketing Analytics platform that allows app marketers to easily measure the performance of all their marketing channels - paid, organic and social - from a single real-time dashboard.
Input Data Details
The following types of data can be configured to be sent from AppsFlyer to mParticle

Attribution

AppsFlyer attribution events are mapped as follows:

Event Type = Custom Event
Custom Event Type = attribution
Event Name = attribution

AppsFlyer Event Mapping
AppsFlyer attribution events are mapped as follows:



Attribution Field
mParticle Mapping
AppsFlyer Macro Used




ios_idfa
IDFA Device ID
(advertiserId)


ios_idfv
IDFV Device ID
(vendorId)


android_id
Android ID Device ID
(android_id)


android_advertising_id
Android Advertising ID Device ID
(advertiserId)


customer_id
Customer ID User Identity
(custom-user-id)


publisher
Publisher custom event attribute
(promoter-id)


campaign
Campaign custom event attribute
(campaign)


ts
Unix time in milliseconds
(install-unix-ts-ms)



Configuration
Configure the AppsFlyer Input: 

Select Directory, and click the AppsFlyer tile
Click Add AppsFlyer to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the AppsFlyer input configuration group to specify the configuration parameters:
    
Configuration Name
Act as Application


Click Create
Copy the Token

Follow these instructions to configure the postback in AppsFlyer.

Select Configuration > Integrated Partners
Search for mParticle
Click Enable
Enter the mParticle Token, copied from above
Click Save & Close

Apsalar Feed
Apsalar is a mobile DSP which provides funnel, attribution and lifetime value analytics solutions.
Input Data Details
The following types of data can be configured to be sent from Apsalar to mParticle

Attribution

Apsalar attribution events are mapped as follows:

Event Type = Custom Event
Custom Event Type = attribution
Event Name = attribution

Configuration
Configure the Apsalar Input: 

Select Directory, and click the Apsalar tile
Click Add Apsalar to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the Apsalar input configuration group to specify the configuration parameters:
    
Configuration Name
Act as Application


Click Create
Copy the Token

In order to configure the postback in Apsalar, you will need to reach out to your Apsalar Account Manager or support@apsalar.com to setup the postback rule, providing them the token copied from above with the associated platform.
Custom Feed
Custom Feeds allow you to stream data into mParticle from any data source using mParticle’s Server to Server API, including, but not limited to: 

Marketing automation  
CRMs  
Data/analytics services  
Custom servers/databases  

When you add the Custom Feed to your app, you will be issued an API Key and Secret. Use these credentials to authenticate with the Server to Server API and send data via the v2/events or v2/bulkevents paths.
When connecting this Feed to an Output, be aware that the features supported in the Output platform will depend on the data you send. Read the documentation for the Output configuration carefully and make sure you incude all required data in the appropriate format.
Iterable Feed
Iterable makes consumer growth marketing and user engagement simple. With Iterable, marketers send the right message, to the right device, at the right time.
Input Data Details
The following types of data can be configured to be sent from Iterable to mParticle. See Iterable’s documentation for more info about these events.



Event
mParticle Event Name




Triggered Send / Blast Sent
emailSend


Email Bounce
emailBounce


Email Click
emailClick


Email Complaint
emailComplaint


Email Open
emailOpen


Email Subscribe
emailSubscribe


Email UnSubscribe
emailUnSubscribe


Push Bounce
pushBounce


Push Uninstall
pushUninstall


Push Send
pushSend


SMS Bounce
smsBounce


SMS Received
smsReceived


SMS Send
smsSend



‘Push Open’ events are not supported
Any events sent from Iterable to mParticle will be processed as follows:

Event Type = Custom Event
Custom Event Type = Other
Event Name = Iterable eventName field

Iterable Event Mapping
Iterable events are mapped as follows:



Iterable Field
mParticle Mapping




eventName
Event Type = Custom Event, Custom Event Type = Other, Event Name = eventName


email
Email User Identity


toPhoneNumber
Reserved User Attribute Mobile


city
Reserved User Attribute City


region
Reserved User Attribute State


applicationName
Application Info - application name


userAgent
Device Information - http_header_user_agent


ip
Batch IP Address


DataFields
All fields in the DataFields property are mapped to custom event attributes in in the form DataFields.XXX, where XXX is the name of the field provided by Iterable



All fields listed above along with any additional fields provided by Iterable with each event are mapped to mParticle custom event attributes.
Configuration
Configure the Iterable Input: 

Select Directory, and click the Iterable tile
Click Add Iterable to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the Iterable input configuration group to specify the configuration parameters:
    
Configuration Name
Environment


Click Create
Copy the Webhook URL
Follow these instructions to configure the Webhook in Iterable

Click the Edit button
Check the Enabled box
Select the events you would like to send to mParticle.  Push Open events should not be selected as the data is already available in mParticle.



Kochava Feed
Kochava provides a platform to help advertisers better manage user acquisition, optimization, and analysis.
Input Data Details
The following types of data can be configured to be sent from Kochava to mParticle

Attribution

Kochava attribution events are mapped as follows:

Event Type = Custom Event
Custom Event Type = attribution
Event Name = attribution

Configuration
Configure the Kochava Input: 

Select Directory, and click the Kochava tile
Click Add Kochava to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the Kochava input configuration group to specify the configuration parameters:
    
Configuration Name
Act as Application 


Click Create
Copy the Token

Follow these instructions to configure the postback in Kochava:

Select App Tools > Partner Configuration
Click Add a Configuration and select mParticle as the Network Partner
Click Install > Postback Tools > Edit and specify the mParticle specific parameters:
    
Enter the mParticle Token, copied from above
For the Postback Version, select V2
For the Delivery Method, select All




MailChimp Feed
Mailchimp provides an email marketing platform. Features include campaign design, tracking, segmentation and list management.
Prerequisites
In order to configure the mParticle Webhook for MailChimp, Manager user level or higher is required.
Input Data Details
The following types of data can be configured to be sent from MailChimp to mParticle:

Subscribes
Unsubscribes
Profile Updates
Cleaned Emails
Email Address Changes
Campaigns Sending Status

MailChimp Event Mapping
MailChimp events are mapped as follows:



MailChimp Field
mParticle Mapping




type
Event Type = Custom Event, Custom Event Type = Other, Event Name = type, where type is subscribe, unsubscribe, profile, cleaned or campaign.  Event Type = User Identity Change Event, when type is upemail


data[email]
Email User Identity


data[old_email]
Email User Identity, used when the type is upemail


data[new_email]
Email User Identity, used when the type is upemail


data[ip_opt]
Client IP Address


data[merges][FNAME]
Reserved User Attribute First Name


data[merges][LNAME]
Reserved User Attribute Last Name


fired_at
Timestamp



All fields listed above along with any additional fields provided by MailChimp with each event are mapped to mParticle custom event attributes.
Configuration
Configure the Mailchimp Input: 

Select Directory, and click the MailChimp tile
Click Add MailChimp to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the Mailchimp input configuration group to specify the configuration parameters:
    
Configuration Name
Environment


Click Create
Copy the Webhook URL.
Follow these instructions to configure the Webhook in MailChimp

Radar Feed
Radar is a platform that helps companies collect, analyze, and act on location data. You can use Radar in your app to increase revenue, increase engagement, or improve operations.
You will need to set up a separate feed for each Platform you want to use Radar data for. For example, if you have iOS and Android platforms, you need to create two feeds. For the first, set the Act as Application field to iOS and for the second, set it to Android. For each feed, you will receive an API Key and Secret. Provide these credentials to your Radar Customer Service Manager to configure the feed.
Input Data Details
Users in the Radar Feed are identified by customer_id. Device info is not included.
The Radar Feed sends custom events, with an event type of ‘location’, that track the movement of a user. It also sends user attributes relating to the user’s last known location.
All events include the following attributes:

event_id 
location 
timestamp_unix_ms 

Radar Events & Custom Attributes

user.entered_geofence

geofence_id
geofence_description
geofence_tag
geofence_external_id
confidence


user.exited_geofence

geofence_id
geofence_description
geofence_tag
geofence_external_id
confidence
duration



The following events are sent only if ‘Insights’ is enabled in Radar:

user.entered_home

confidence


user.exited_home

confidence 


user.entered_office

confidence


user.exited_office

confidence 
duration


user.started_travelling

confidence


user.stopped_travelling

confidence 



The following events are sent only if ‘Places’ is enabled in Radar:

user.entered_place

place_id
place_name
place_chain_name
place_chain_slug
place_facebook_id
place_categories
confidence


user.exited_place

place_id
place_name
place_chain_name
place_chain_slug
place_facebook_id
place_categories
confidence
duration



User Attributes
With each batch, Radar will update the following user attributes according to the user’s last known location

radar_id - the radar ID of the user
radar_location_latitude
radar_location_longitude

The following four user attributes provide details for an array of geofences the user’s last known location was in. All four arrays are in the same order so, for example, radar_geofence_ids[2] and radar_geofence_descriptions[2] refer to the same geofence.

radar_geofence_ids 
radar_geofence_descriptions 
radar_geofence_tags 
radar_geofence_external_ids 

If ‘Insights’ is enabled, the following boolean attributes are sent:

radar_insights_state_home 
radar_insights_state_office 
radar_insights_state_traveling 

If ‘Places’ is enabled the following attributes are sent for any Place associated with the user’s last known location:

radar_place_id 
radar_place_name 
radar_place_chain_name 
radar_place_chain_slug 
radar_place_facebook_id 
radar_place_categories 

SendGrid Feed
SendGrid helps marketers deliver transactional and marketing email through one reliable platform.
Input Data Details
The following types of data can be configured to be sent from SendGrid to mParticle.  See SendGrid’s documentation for more info about these events.

processed
dropped
delivered
deferred
bounce
open
click
spamreport
unsubscribe
group_unsubscribe
group_resubscribe

Any events sent from SendGrid to mParticle will be processed as follows:

Event Type = Custom Event
Custom Event Type = Other
Event Name = SendGrid event field

SendGrid Event Mapping
SendGrid events are mapped as follows:



SendGrid Field
mParticle Mapping




event
event_name


sg_message_id
events.data.custom_attributes


sg_event_id
source_message_id


email
useridentity.email


timestamp
timestamp_unixtime_ms


useragent
device_info.http_header_user_agent


smtp-id
events.data.custom_attributes


ip
events.data.custom_attributes


tls
events.data.custom_attributes


cert_err
events.data.custom_attributes



Any additional fields provided by SendGrid with each event are mapped to mParticle custom event attributes.
Configuration
Configure the SendGrid Input: 

Select Directory, and click the SendGrid tile
Click Add SendGrid to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the SendGrid input configuration group to specify the configuration parameters:
    
Configuration Name
Environment


Click Create
Copy the Webhook URL.
Follow these instructions to configure the Webhook in SendGrid

SFDC - Email Feed
Salesforce Marketing Cloud is a platform that enables marketers to provide engaging and personalized customer experiences through automation of timely and relevant messages across e-mail, mobile and social at massive scale.
Prerequisites
In order to configure the SFDC - Email Feed, the SFTP credentials must be properly setup by following these steps:

mParticle will provide you with the following:
    
Public Key, available here
Username for accessing the SFTP site, format will be customer_%ORGID%


Customer - Internal
    
Create a password. To be accepted, your password must be at least 16 characters in length and contain at least one of each of the following:
        
Uppercase alphabet characters (A–Z)  
Lowercase alphabet characters (a–z)  
Base 10 digits (0 through 9)  
Non alphanumeric characters: ~!@#$%^&*_-+=`&#124;\(){}[]:;"'<>,.?/ 


Create a basic text file containing the Username/Password
Encrypt the file using the mParticle PGP public key provided in step 1


Customer shares the encrypted file with mParticle 
mParticle will provide feedback when the setup is complete

Notes:

The same Username/Password is used across the entire Org, and for all feeds that are setup.
Any password changes must be coordinated with mParticle

Input Data Details
The following Extract Types can be configured to be sent from SFDC - Email to mParticle.  The event mapping from SFDC - Email to mParticle will be processed as follows:

Event Type = Custom Event
Custom Event Type = Other
Event Name = listed below based on the Extract Type




Extract Type
Event Name




Bounces
Email Tracking - Bounces


ClickImpression
Email Tracking - Click Impressions


Clicks
Email Tracking - Clicks


Conversions
Email Tracking - Conversions


NotSent
Email Tracking - Not  Sent


Opens
Email Tracking - Opens


Sent
Email Tracking - Sent


SentImpression
Email Tracking - Sent Impression


StatusChanges
Email Tracking - Subscriber Status Change


Surveys
Email Tracking - Surveys


Unsubs
Email Tracking - Unsubscription




    You MUST NOT send the following extract types to mParticle. If any of these extract types are recieved the import will be aborted.

    
Attributes
ListMembershipChanges
Lists
SendJobImpression
SendJobs
Subscribers


SFDC - Email Event Mapping
SFDC - Email events are mapped as follows:



SFDC - Email Field
mParticle Mapping




SubscriberKey
mParticle will set the user identity specified in the Subscriber Key configuration setting to this field.


EmailAddress
Email User Identity


EventType
Extract Type Custom Event Attribute



All fields listed above along with all additional fields provided by SFDC - Email in the Extract files are mapped to mParticle Custom Event Attributes.
Configuration
Configure the SFDC - Email Input: 

Select Directory, and click the SFDC - Email tile
Click Add SFDC - Email to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the SFDC - Email input configuration group to specify the configuration parameters:
    
Configuration Name
Subscriber Key


Click Create
Copy the SFTP Hostname and Path

Follow these instructions to configure the Data Extract Activity in SFDC - Email:

For File Naming Pattern, the file name needs to be unique, so be sure to append date to file name to ensure uniqueness in the form of %%Year%%, %%Month%%, %%Day%%.
Select Tracking Extract for the Extract Type
Select the Rolling Range option and then specify the number of days for the Extract Range
Enter UTF-8 for Character Encoding
Select [Comma] for Column Delimiter
Check the boxes for 1 or more Extract Types to include.  The list of extract types supported by mParticle is listed above.
Select CSV for Format
Check Quote Text
Select UTC for Timezone
Check unicode Output

Configuration Settings



Setting Name
Data Type
Default Value
Description




Subscriber Key
string
 
The Primary Key in the Data Extension used to store subscriber information which indicates the Subscriber Key



Tune Feed
Tune provides a platform that attributes app installs, in-app engagement, and purchases back to marketing sources. 
Input Data Details
The following types of data can be configured to be sent from Tune to mParticle:

Attribution

Adjust attribution events are mapped as follows:

Event Type = Custom Event
Custom Event Type = attribution
Event Name = attribution

Tune Event Mapping
Tune attribution events are mapped as follows:



Attribution Field
mParticle Mapping
Tune Macro Used




ios_idfa
IDFA Device ID
{ios_ifa}


ios_idfv
IDFV Device ID
{ios_ifv}


android_id
Android ID Device ID
{android_id}


android_advertising_id
Android Advertising ID Device ID
{google_aid}


customer_id
Customer ID User Identity
{user_id}


publisher
Publisher custom event attribute
{publisher_name}


campaign
Campaign custom event attribute
{publisher_sub_campaign}


ts
Unix time in milliseconds
{timestamp}



Publisher name and campaign attributes may not be present for some events, such as organic installs.
Configuration
Configure the Tune Input: 

Select Directory, and click the Tune tile
Click Add Tune to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the Tune input configuration group to specify the configuration parameters:
    
Configuration Name
Act as Application


Click Create
Copy the Token

Follow these instructions to configure the postback in Tune.

Select Partners > Integrated Partners
Search for mParticle
Click Enable
Click Postbacks, Add Postback URL and specify the mParticle specific parameters:
    
For Postback Template, select install
Enter the mParticle Token, copied from above
Be sure to leave the Only send data attributed to mParticle, unchecked
For Event Name, select Install
For the HTTP Method, select GET


Click Save

Urban Airship Feed
Urban Airship provides push messaging services, including segmentation and targeting capabilities.
Input Data Details
The following types of data can be configured to be sent from Urban Airship to mParticle

Control
Rich Delivery
Rich Read
Rich Delete
Uninstall
Region
In-App Message Display
In-App Message Resolution
In-App Message Expiration

Urban Airship Event Mapping
Urban Airship events are mapped as follows:



Urban Airship Field
mParticle Mapping
Description




type
Event Type = Custom Event, Custom Event Type = Other, Event Name = type, where type is CONTROL, RICH_DELIVERY, RICH_READ, RICH_DELETE, REGION, IN_APP_MESSAGE_DISPLAY, IN_APP_MESSAGE_RESOLUTION, IN_APP_MESSAGE_EXPIRATION.  Event Type = Uninstall Event, when type is UNINSTALL
Event Type


occurrred
timestamp_unixtime_ms
Unix timestamp in milliseconds


os_channel for iOSandroid_channel or amazon_channel for Android
Platform
Channel Identifier


named_user_id
Customer ID User Identity
Customer ID


com.urbanairship.idfa
iOS Advertising ID
IDFA


com.urbanairship.vendor
IDFV
IDFV


com.urbanairship.aaid
Android Advertising ID
Android Advertising ID


com.urbanairship.limited_ad_tracking_enabled
LimitAdTracking
Indicates if the user has enabled limit ad tracking


app_package_name
Package Name
A unique identifier for the app name


app_version
Application Version
The version of the application


device_model
Device Model
The device model


device_os
OS Version
The device operating system


carrier
Network Carrier
The carrier of the device



All fields listed above along with any additional fields provided by Urban Airship with each event are mapped to mParticle custom event attributes.
Configuration
Configure the Urban Airship Input: 

Select Directory, and click the Urban Airship tile
Click Add Urban Airship to Setup
Select the Urban Airship input configuration group to specify the configuration parameters:
    
Configuration Name
Act as Application


Click Create
Copy the Token
Follow these instructions to configure the postback in Urban Airship

You will need to work with your Urban Airship Account Manager to setup the Urban Airship to mParticle Feed and provide them with the token copied above.



Zendesk Feed
Zendesk is a customer service platform. It’s designed for companies that want to create customer relationships that are more meaningful, personal, and productive.
Input Data Details
In order to send Zendesk data to mParticle, you will need to perform the following steps in Zendesk:

Setup an HTTP target
Setup one or more triggers or automations to forward data to mParticle.   Zendesk supports a varity of different actions and allows you to build condition statements for sending data to an HTTP Target.

Zendesk Event Mapping
Zenddesk events are mapped as follows:



Zendesk Field
mParticle Mapping




Event Type
Custom Event


Custom Event Type
Other


Event Name
Specify the name of the event using event.name


Event Attributes
Specify event attributes using the syntax event.attribute where attribute can be any event attribute you want to pass using the Zendesk macros.


User Identities
Specify the user’s email using the following syntax and Zendesk macro:  “event.email”:”{{ticket.requester.email}}”


User Attributes
All user attributes can be set using the syntax user.attribute, where attribute can be one of the mParticle reserved user attributes or any other user attribute you want to pass using the Zendesk macros.



When entering the JSON into the trigger or automation definition, be sure to enter the JSON removing all whitespace and newline characters.

You must provide the following fields in the JSON definition of your trigger or automation:  
1. "event.name": "Event Name", where "Event Name" is specific to the trigger or automation definition
2. "user.email": "{{ticket.requester.email}}"

When setting up the trigger or automation, the JSON body is set using a template.   A template along with sample JSON using a few of the Zendesk placeholder fields are shown to the right.  
// Sample JSON Template - The event.name and user.email fields are required in the JSON.
{
"event.name" : "Event Name",
"user.email":"{{ticket.requester.email}}",
"event.attribute 1": "attribute 1 value",
"event.attribute 2": "attribute 2 value",
"event.attribute n": "attribute n value",
"user.$FirstName" : "first name",
"user.$LastName" : "last name"
}

// Sample JSON using Zendesk macros - The event.name and user.email fields are required in the JSON.
{
"event.name" : "New Ticket",
"user.email":"{{ticket.requester.email}}",
"event.Title":"{{ticket.title}}",
"event.Description":"{{ticket.description}}",
"event.Status":"{{ticket.status}}",
"event.Score":"{{ticket.score}}",
"event.Ticket ID":"{{ticket.id}}",
"user.$FirstName":"{{ticket.requester.first_name}}",
"user.$LastName":"{{ticket.requester.last_name}}",
"user.$Mobile":"{{ticket.requester.phone}}"
}

Configuration
Configure the Zendesk Input: 

Select Directory, and click the Zendesk tile
Click Add Zendesk to Setup
Select the Input Feed Integration Type and click Add to Setup
Select the Zendesk input configuration group to specify the configuration parameters
    
Configuration Name
Environment


Click Create
Copy the Webhook URL.
Follow these instructions to configure the HTTP target in Zendesk

For the Method, select POST
For the Content Type, select JSON
To test the target, click Test Target and copy the sample JSON to the right into the JSON body field and click Submit.  You should receive a message showing:  HTTP/1.1 200 OK
After saving the target, setup a trigger or automation to forward data to mParticle



Cookie Sync Configurations
Cookie Sync integrations allow mParticle to to communicate with a partner to link an mParticle ID to the partner ID. The partner ID is then added to the user profile and can be used for Audience integrations.
Since they use web cookies to identify users, Cookie Sync integrations can only be connected to Javascript Web platform inputs.
You can find Cookie Sync integrations in the Directory by selecting Configuration Type: Cookie Sync. Your current Cookie Sync outputs can be viewed at Setup > Outputs on the Cookie Sync Configurations tab.
You can connect your Mobile Web input to a Cookie Sync configuration in the Connections screen, just like an Event configuration. No configuration settings are required.
Cookie Sync integrations are subject to a frequency cap. This means that, rather than performing a sync every time a user logs on, a Cookie Sync will only happen if a sync has not already been performed within a given time frame - usually either 7 or 14 days.
Adobe Marketing Cloud
Connecting your Mobile Web input to the Adobe Marketing Cloud Cookie Sync output allows mParticle to capture Adobe’s Marketing Cloud Visitor ID (MCVID) for your web users, where available.
mParticle will only perform a sync for a given mParticle ID if a sync has not already been performed in the previous 7 days.
AppNexus
Connecting your Mobile Web input to the AppNexus Cookie Sync output allows mParticle to capture the AppNexus User ID for your web users, where available.
mParticle will only perform a sync for a given mParticle ID if a sync has not already been performed in the previous 14 days.
Google Doubleclick
Connecting your Mobile Web input to the Google Doubleclick Cookie Sync output allows mParticle to capture the Doubleclick Profile ID for your web users, where available.
mParticle will only perform a sync for a given mParticle ID if a sync has not already been performed in the previous 14 days.
The Trade Desk
Connecting your Mobile Web input to The Trade Desk Cookie Sync output allows mParticle to capture the Trade Desk User ID (TDID) for your web users, where available.
mParticle will only perform a sync for a given mParticle ID if a sync has not already been performed in the previous 14 days.
Data Warehouse Configurations
mParticle supports loading your data into various data warehouses to query your data on multiple levels.  You can run complex queries across multiple applications in real time to generate event-level, user-level and segment-level insights. 

Amazon Redshift
Google BigQuery

Redshift
How it works
Given that you are already sending data from your mobile app(s) to mParticle, you can work with mParticle customer support to get a Redshift cluster set up and gain access to raw data. Normally data should be available to query in Redshift within 15 min after setup is complete. Now you can either use the SQL Editor UI or your favorite SQL editor tool to run queries.
In general, mParticle backend services will perform the following actions on the Redshift cluster.

Create a schema per Application when data has been received
Within a schema, create a table for each custom app event name as well as each eCommerce event name that has more than 100 events in the last 30 days. All other message types (e.g., session start, session end, screen views, etc.) will be put into a single table called “otherevents”.
Load data into each table accordingly.
Add a column to a table when a new event or user attribute has been received.
Create a view unioning all tables within each schema. Also create a view in PUBLIC schema that unions the views of all schemas. When a new table is created, these views will be updated.
If allowed, mParticle services perform data hygiene jobs on your cluster. Every 24 hours, expired data is purged, and “vacuum” and “analyze” commands are run in the database.

Note that mParticle loads data into Redshift on a going-forward basis by default. But you could work with mParticle customer support team to get historical data loaded too.
Database Schema
Each app’s data is stored under its own schema. The schema name is something like app_123, where 123 is the unique ID of the app in mParticle platform.
By default, each custom app event name and eCommerce event name have their own table in Redshift, and all other event names (e.g., session-start, session-end) are stored in a single “OtherEvents” table. The naming conversion of the table names are as follows.

A custom app event name will have a table named event_[event type]_[event name]. For example, a custom app event of event type Navigation named SignUp will have a table named event_navigation_signup.
An eCommerce event name will have a table named ecomm_[event name].
All other events are stored in a table named otherevents.

mParticle also creates two types views, which can be used to get aggregated views of your app data.
- Under each schema, a view called eventsview that unions all tables under the schema.
- Under the “public” schema, a view called eventsview that unions all eventsview views from all schema’s in the database.
Each physical table has the following common columns.



Column Name
Data Type
Description




AppId
int
mParticle app Id


AppPlatformId
int
mParticle AppPlatformId, e.g., Google Now app has iOS platform and Android platform, and each platform has an unique mParticle AppPlatformId


AppName
varchar(255)
App name


AppVersion
varchar(255)
App version


PackageName
varchar(255)
App package name


AppArchitecture
varchar(255)
App architecture


IsPirated
bool
Is the device pirated?


ApplicationBuildNumber
varchar(255)
Application build number


IsDebugSigning
bool
Is the app debug signing?


UpgradeDate
bigint
App upgrade timestamp


AppEnvironment
varchar(255)
App environment, debug or production


InstallReferrer
varchar(255)
Install referrer


Brand
varchar(255)
Device brand


Product
varchar(255)
Device product


DeviceName
varchar(255)
Device name


DeviceUdid
varchar(255)
Device UDID


Manufacturer
varchar(255)
Device manufacturer


Platform
varchar(255)
Device platform


OSVersion
varchar(255)
Device OS version


DeviceModel
varchar(255)
Device model


LocaleCountry
varchar(255)
Device’s locale country


LocaleLanguage
varchar(255)
Device’s locale language


NetworkCountry
varchar(255)
Network country


NetworkCarrier
varchar(255)
Network carrier name


ScreenHeight
int
Device’s screen height


ScreenWidth
int
Device’s screen width


ScreenDpi
int
Device’s screen dpi


DeviceUtcOffset
int
Device UTC offset


OsVersionInt
int
Android OS version int


Jailbroken
varchar(255)
Device’s jailbroken status


IDFA
varchar(255)
iOS IDFA


GoogleAID
varchar(255)
Android Google Advertising ID


Architecture
varchar(255)
Device architecture


IsTablet
bool
Is the device a tablet?


VendorIdentifier
varchar(255)
iOS vendor identifier


Pushtoken
varchar(255)
Push token


AttributionServiceProvider
varchar(255)
Attribution service provider name


AttributionPublisher
varchar(255)
Attributed publisher name


AttributionCampaign
varchar(255)
Attributed campaign name


mParticleUserId
bigint
UserId assigned by mParticle


CustomerId
varchar(255)
User’s customerID, usually this is the unique userId in your system


FacebookId
varchar(255)
User’s Facebook user Id


TwitterId
varchar(255)
User’s Twitter ID


GoogleUserId
varchar(255)
User’s Google ID


MicrosoftUserId
varchar(255)
User’s Microsoft ID


YahooUserId
varchar(255)
User’s Yahoo ID


Email
varchar(255)
User’s email


OtherUserId
varchar(255)
“Other” type user identity


IsDebug
bool
True for debug environment and false for production environment


BatchId
bigint
A unique ID of the batch


BatchTimestamp
bigint
Batch timestamp


SdkVersion
varchar(255)
mParticle SDK version


ClientIp
varchar(20)
Client IP address


GeoLookupInfo
varchar(1024)
Geo lookup information


entrypointtype
smallint
Type of incoming data, Type of incoming data, 1 means from SDK and 128 means from S2S


CountryCode
varchar(255)
Country code


CityName
varchar(255)
City name


PostalCode
varchar(255)
Postal code


RegionCode
varchar(255)
Geo region code


Latitude
double
Geo latitude


Longitude
double
Geo longitude


Accuracy
double
Geo accuracy


AudienceMembership
varchar(2048)
A array of mParticle segment ID’s the user was a member of at the time of the event


SessionId
bigint
A unique ID of the session


SessionStartTimestamp
bigint
Session start timestamp


EventId
bigint
A unique ID of the event


EventTimestamp
bigint
Event timestamp


MessageTypeId
int
Message Type Id, 1 = Session Start, 	2 = Session End, 	3 = Screen View, 	4 = App Event, 	5 = Crash Report, 	6 = Opt Out, 	7 = First Run, 	8 = PreAttribution, 	9 = Push Registration, 	10 = Application State Transition, 	11 = Push Message, 	12 = Network Performance, 	13 = Breadcrumb, 	14 = Profile, 	15 = Push Reaction, 	16 = Commerce Event, 	17 = UserAttributeChange, 	18 = UserIdentityChange, 	19 = Uninstall


EventStartTimestamp
bigint
Event start timestamp


EventDate
date
Event date. Sort key


EventHour
datetime
Event hour. Sort key


EventName
varchar(255)
Event name


EventTypeId
int
Event type Id


EventLength
bigint
How long did the event take? Represents session length in milliseconds on session end events


EventLtvValue
double
Monetary value extracted from the event


DataConnectionType
varchar(255)
Data connection type


ExceptionHandled
bool
Handled exception or crash


IsFirstRunEvent
bool
Is this a first run event?


FirstSeenTimestamp
bigint
Timestamp of the first event on this user


IsUpgradeEvent
bool
Is this an app upgrade event?


SuccessfullyClosed
bool
Is the last session successfully closed? Will be false if app is forcefully killed


ApplicationTransitionTypeId
smallint
Application Transition TypeId. AppInit = 1, AppExit = 2, AppBackground = 3, AppForeground = 4


eventcustomflags
varchar(2048)
Event custom flags


EventAttributes
varchar(10240)
A JSON string that contains key/value pairs of event attribute names and values


UserAttributes
varchar(10240)
A JSON string that contains key/value pairs of user attribute names and values


ProductActionTypeId
smallint
eCommerce Product Action Type Id, 0 = unknown, 1 = add_to_cart, 2 = remove_from_cart, 3 = checkout, 4 = checkout_option, 5 = click, 6 = view_detail, 7 = purchase, 8 = refund, 9 = add_to_wishlist, 10 = remove_from_wishlist


EcommerceScreenName
varchar(50)
eCommerce screen name


EcommerceIsNonInteractive
bool
Is eCommerce action interactive?


PromotionActionTypeId
smallint
Promotion Action Type Id, 0 = unknown, 1 = view, 2 = click


ProductAction
varchar(5000)
JSON string representing product action details


PromotionAction
varchar(5000)
JSON string representing promotion action details


ProductImpressions
varchar(5000)
JSON string representing product impressions


ShoppingCart
varchar(5000)
JSON string representing shopping cart info



Each of the individual event name table also has one column per event attribute and one column per user attribute. An event attribute column name has a prefix of “ea”, and a user attribute column name has a prefix of “ua”. The benefit of these individual attribute columns is that you don’t have to use JSON parse functions in your query to extract attribute values from either EventAttributes or UserAttributes column, which is very slow.
Cluster Provisioning
Configuration Parameters
The configuration parameters must be provided to mParticle using the following public encryption key:
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v2
mQENBFRKgRIBCACXmtK5WGdBDk/JWqzYdCd8uiKPJrnY0cAqfM6Rv1IhAl38IRKz
9rsfcK1z3bIZYGwfOk1SPBZmSxLERF1DgwhhInrXf+OojxGiRmMRK7QQ1zE/sqvW
RZqPeP+fRquK8BTP37Q+h8aophWBqaVfpejAaJtC+Xqe2xeGvBpnA8wu1c+Z1mLg
UfuKfRcadHQ1Ej99kWpIHyXh0D83yV1HbG0Gh8x0USKYiLK0Nn0ykVyAB9mk0GjF
3RoynGNHrbn3CH3f0J6ib+u7aVcZ9Y+E0E8KSI4h/4WhpIEWwicolMNeA+mTfySy
HKOUGkGy0k6+ltrA1H9ti/nmBkR9brJKP/7pABEBAAG0I05heWRlbiBLb2xldiA8
bmtvbGV2QG1wYXJ0aWNsZS5jb20+iQE5BBMBAgAjBQJUSoESAhsPBwsJCAcDAgEG
FQgCCQoLBBYCAwECHgECF4AACgkQK48THX7ssvDsVQf/XZRuWWme2NvxSa+Ce/hB
E6jIVLu5mw/snVo7PuGYRT0SoCRjEgx4J7tsmVlraRzBWAYYLdNd0pLAdkF+8rrh
9klxbDAIuXE1KlyjXIifVQZH6I9Ujnnx+IZd+Ev/+FBLDBaEpcQSN1fEvI+MIotp
9Q/7N+uts7DFFt1z7W/L9v0ujf4/t/L8DjYKm3AK+1DpbTlMt31YHoAuCs165pi/
ZSy61BJM1N1XKAUPR7bcUw+ahhlMF7b3nyVQppmasqUdVLKTApCICX6yjooj0RDV
0xcCNATCQJw/X7kL30Svi1C9oUro0KbRKa9O2ObODfBLt+XcrIqOxBwOcHzIg0bv
Gw===fzFR
-----END PGP PUBLIC KEY BLOCK-----

mParticle requires the following properties to be set for proper configuration.



 
Property
Description
Example value




1
Cluster Endpoint
Endpoint string shown on Configuration tab on your Redshift Dashboard.
org1234.xxxxxx.us-east-1.redshift.amazonaws.com:5439


2
Database Name
The name of the database where your data is to be stored in.
mparticle


3
Username
The username mParticle services can use to log into your Redshift cluster to load data.
dataloader


4
Password
The password mParticle services can use to log into your Redshift cluster to load data.
Aabcde123!


5
Username (readonly)
A readonly mParticle username. The mParticle interface supports the ability for analysts to run adhoc queries directly from mParticle dashboard and displays the results in tabular form. The mParticle interface uses this user to log into your Redshift cluster to run adhoc queries.
readonlyuser


6
Password (readonly)
The password of the mParticle readonly user.
Abcde123!


7
Data Hygiene Allowed
Do you want mParticle services to manage data hygiene for you? If yes, every 24 hours, mParticle services will purge expired data from all of the tables and run vacuum and analyze on the database. By default, data expires in 90 days, but this can be customized.
True or False


8
Data Expiration Policy
If Data Hygiene Allowed is set to True, specify the number of days of data you would like to store in the cluster. If not specified, the default is 90 days.
90


9
Redshift Schema Name
Specify schema name. If not set, a name “app_[app id]” will be used.
app_1234



Optionally, you may give mParticle permission to perform “Describe-Clusters” and “Describe-Events” actions on your Redshift cluster so that mParticle services can determine whether your cluster is in a planned maintenance when it is unavailable versus actual problems. It also allow mParticle to show your cluster status on the mParticle UI for your colleagues. Please follow the following steps to grant mParticle permissions.
  {
      "Version": "2012-10-17",
      "Statement": [
          {
              "Sid": "Stmt1452877557000",
              "Effect": "Allow",
              "Action": [
                  "redshift:DescribeClusters",
                  "redshift:DescribeEvents"
              ],
              "Resource": "*"
          }
      ]
  }


In IAM create a policy, e.g. “policy-mParticle-Redshift-Access” with the definition shown on the right.
In IAM create a Role named “role-mParticle-Redshift-Access” (the name must be exactly “role-mParticle-Redshift-Access”). Under Select Role Type, choose Role for Cross-Account Access, and then choose Select next to “Allows IAM users from a 3rd party AWS account to access this account”.
Enter mParticle account ID and the external ID shown on mParticle’s Redshift Configuration page. 
Attach the policy you created at step 2.
Enter your AWS account ID on mParticle’s Redshift Configuration page.

Actions
mParticle services will perform the following actions on your hosted Redshift cluster:

Create a schema per Application when data has been received
Within a schema, create a table for each custom app event name as well as each eCommerce event name that have more than 100 events in the last 30 days. All other message types (e.g., session start, session end, screen views, etc.) will be put into a single table called “otherevents”.
Load data into each table accordingly.
Add a column to a table when a new event or user attribute has been received.
Create a view unioning all tables within each schema. Also create a view in PUBLIC schema that unions the views of all schemas. When a new table is created, these views will be updated.
If allowed, mParticle services perform data hygiene jobs on your cluster. Every 24 hours, expired data is purged, and “vacuum” and “analyze” commands are run in the database.

Redshift Cluster Security Setup
For mParticle to access your cluster, the IPs of mParticle servers need to be whitelisted on your cluster. Since we regularly add new IPs as we scale our platform, the easiest approach is to follow the instructions below to set up an AWS Lambda function to automatically sync our IPs. Alternatively, you can get the most up-to-date IP list here.
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "Stmt1463090293000",
                "Effect": "Allow",
                "Action": [
                    "ec2:DescribeInstanceAttribute",
                    "ec2:DescribeInstanceStatus",
                    "ec2:DescribeInstances",
                    "ec2:DescribeNetworkAcls",
                    "ec2:DescribeSecurityGroups"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
                "Sid": "Stmt1463090293001",
                "Effect": "Allow",
                "Action": [
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:RevokeSecurityGroupIngress"
                ],
                "Resource": [
                    "arn:aws:ec2:[aws-region]:[accountid-here]:security-group/[sg-securitygroupid-here]"
                ]
            },
            {
                "Effect": "Allow",
                "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                ],
                "Resource": "arn:aws:logs:*:*:*"
            }
        ]
    }


Create a new VPC security group and note the security group Id and the AWS region. Leave the inbound rules empty as they will be managed by the Lambda function.
Create a new AWS Lambda function. 
    
You don’t need to pick any template. 
Download a zip file that contains the Python code for the Lambda function from here. The source code is available on GitHub at https://github.com/mParticle/redshift-ip-whitelist.
Set the runtime of the Lambda function to Python, upload the zip file, and set the Lambda function handler to client.lambda_handler.
Create a new role for the Lambda function.
Set the timeout value to 1 min to give enough time for the function to run. 


Create a new AWS policy, paste in the json shown on the right, and attach it to the new role. Make sure you replace the [aws-region], [accountid-here] and [sg-securitygroupid-here] with your AWS account Id and the security group Id from step 1.
Finally, we need to configure a trigger to call the Lambda function on a regular basis. Go to CloudWatch and create a new rule (under Events > Rules section accessible from the left panel). We suggest that you use a schedule of a fixed rate of 12 hours as the event selector for the rule. The target of the rule should be the Lambda function created above. In the configure input section, pick “Constant (JSON text)”, and put in the following JSON with proper values populated. The “security_group_id” is the security group Id created in step 1, the “redshift_port” is that redshift port of your cluster, and the “is_vpc” represents if your cluster is in VPC or not.


    {
        "security_group_id": "security group id created in step 1", 
        "redshift_port": 5439, 
        "is_vpc": true,
        "aws_region": "aws region noted in step 1"
    }
 
Redshift Database Setup
1. Create groups to manage permissions
create group readwritegroup; 
create group readonlygroup;

2.  Grant access
grant all on database mparticle to group readwritegroup;

3. Create the dataloader user
create user dataloader in group readwritegroup password 'Aabcde123!';

Please make sure the username and password match item 3 and 4 in the Configuration table above
4. Create the read-only user
create user readonlyuser in group readonlygroup password 'Abcde123!';

Please make sure the username and password match item 5 and 6 in the Configuration table above
Please run the commands to the right on your Redshift cluster.
mParticle needs the following permissions:

SELECT
INSERT: to run the COPY command to load data
UPDATE: to add columns to a table when an new event or user attribute is observed
DELETE: to purge expired data (if allowed)

Best Practices
There are a few best practices tips that we’d like to mention.

Query a specific table whenever possible, instead of querying the view “eventsview” (either under an app schema or public schema). The whole point of storing data in separate tables, one per event name, is so that you can query a specific table and not having to scan a big table for a specific event name.
To avoid having to specify schema name in front of every table name, you can run this query, “SET search_path = app_123;”,  to tell Redshift to only look for tables under a certain schema (app_123 in this example).
Always include a date range or hour range in your query. All tables created by mParticle services will have two sort keys, eventDate and eventHour, specified. Having a date or hour range in your query could make it run much faster.
Avoid queries like “select * from …”. Redshift is a columnar database, and thus explicitly listing out the column names you are interested in can significantly reduce the amount of data Redshift has to retrieve to get query results.
mParticle’s Redshift dashboard shows cluster status and CPU usage. If you see high CPU usage already, it probably means that your colleagues are running some heavy load queries, and that you may want to wait a bit to run yours.
Counting distinct items could be expensive. Redshift provides approximate count distinct to get results much faster. 
Use sampling to speed up your queries. A straightforward way is to use the “mParticleUserId” column to perform user sampling. E.g., by adding something like “mParticleUserId % 10 = 0” to the WHERE clause of your queries, you limit your query to 10% of the data. “mParticleUserId” is a persistent, randomly generated LONG value on each user. How the ID is generated depends on a few factors (e.g., if device identifiers are available, if any user identities are provided, etc.) and is out of the scope of this doc. 

BI Platform Integrations
Looker
mParticle has integrated with Looker and provides Looker Blocks that you can directly use to get a holistic picture of how your apps are doing. You just need to copy the lookml files into your Looker account and off you go. If there are any issues, we are here to help.
mParticle has implemented Looker Blocks and provided four dashboard templates. You can access mParticle’s Looker Blocks implementation by reaching out to your assigned Looker analyst or request a Looker trial. Also, if you have any questions on data in Redshift or need suggestions on how to query some specific piece of data, we are always here to help!

App Activity Dashboard. This dashboard gives you an overview of most common app activities, including active user count, new user count, session count, average session length, revenue data, custom funnel analytics, and user retention analysis.



Audience Dashboard. This dashboard reports how effective an given audience is, comparing users in the audience to other app users. When looking at this dashboard, please make sure you provide a valid audience ID wrapped in quotes in the audience membership filter, e.g., “1234”. You can get the audience ID from mParticle UI.



eCommerce Dashboard. This dashboard offers insights on revenue generated from your apps, e.g., which user acquisition channels gives you the most valuable users, how does total revenue and average revenue per user change over time, how do users’ purchase behaviors change over the course of a day, and where do users drop off in the purchase funnel.



App Version Dashboard. This dashboard tells you how much a new app version has changed your app performance, e.g., has a new app version improved user retention, or increased revenue per user, or increased average session length, etc.


On all four dashboards, you can filter by date range and app platform. Note that in order for user retention chart to be meaningful, please make sure the event date filter and install date filter have the same date range.
Following the Looker data models and design patterns in the prebuild Looker Blocks, you can build any Looker report you want that better suits your analytics needs. 
BigQuery
How it works
Given that you are already sending data from your app(s) to mParticle, you can enable BigQuery in your project in Google Cloud Platform, and complete BigQuery configuration on the mParticle UI. Then your app data will be continuously streamed into BigQuery.
In general, mParticle backend services will perform the following actions in your BigQuery dataset.

Store each app’s data in a separate set of tables.
Create a table for each custom app event name as well as each eCommerce event name that has more than 100 events in the last 30 days. All other message types (e.g., session start, session end, screen views, etc.) will be put into a single table called [app name]_“otherevents”.
Stream data into each table accordingly. Loaded data should be available for analysis within a few seconds of streaming insertion into a table. 
Set expiration time on each table according to the data retention policy configured on the mParticle UI.

Note that mParticle loads data into BigQuery on a going-forward basis by default. But you could work with mParticle customer support team to get historical data loaded too.
BigQuery Schema
All of your data is stored in one single BigQuery dataset. 
Each app has its own set of tables. Each table name has [app name]_ as a prefix.
By default, each custom app event name and eCommerce event name have their own table in BigQuery dataset, and all other event names (e.g., session-start, session-end) are stored in a single table. The naming conversion of the table names are as follows.

A custom app event name will have a table named [app name]_event_[event type]_[event name]. For example, a Navigation type event named SignUp from an app named “my cool app” will have a table named mycoolapp_event_navigation_signup.
An eCommerce event name will have a table named [app name]_ecomm_[event name].
All other events are stored in a table named [app name]_otherevents.

On top of what’s mentioned above, data is stored by week and thus each table name has a date value as an appendix. The date value is the date of the Sunday of a week. For example, you’ll see table names like mycoolapp_event_navigation_signup20160424, mycoolapp_event_navigation_signup20160417, mycoolapp_event_navigation_signup20160410, etc.
Each table has the following fields.



Field Name
Data Type
Data Mode
Description




appid
INTEGER
NULLABLE
mParticle app Id


appplatformid
INTEGER
NULLABLE
mParticle AppPlatformId, e.g., Google Now app has iOS platform and Android platform, and each platform has an unique mParticle AppPlatformId


appname
STRING
NULLABLE
App name


appversion
STRING
NULLABLE
App version


packagename
STRING
NULLABLE
App package name


apparchitecture
STRING
NULLABLE
App architecture


ispirated
BOOLEAN
NULLABLE
Is the device pirated?


applicationbuildnumber
STRING
NULLABLE
Application build number


isdebugsigning
BOOLEAN
NULLABLE
Is the app debug signing?


upgradedate
TIMESTAMP
NULLABLE
App upgrade timestamp


appenvironment
STRING
NULLABLE
App environment, debug or production


installreferrer
STRING
NULLABLE
Install referrer


brand
STRING
NULLABLE
Device brand


product
STRING
NULLABLE
Device product


devicename
STRING
NULLABLE
Device name


deviceudid
STRING
NULLABLE
Device UDID


manufacturer
STRING
NULLABLE
Device manufacturer


platform
STRING
NULLABLE
Device platform


osversion
STRING
NULLABLE
Device OS version


devicemodel
STRING
NULLABLE
Device model


localecountry
STRING
NULLABLE
Device’s locale country


localelanguage
STRING
NULLABLE
Device’s locale language


networkcountry
STRING
NULLABLE
Network country


networkcarrier
STRING
NULLABLE
Network carrier name


screenheight
INTEGER
NULLABLE
Device’s screen height


screenwidth
INTEGER
NULLABLE
Device’s screen width


screendpi
INTEGER
NULLABLE
Device’s screen dpi


deviceutcoffset
INTEGER
NULLABLE
Device UTC offset


osversionint
INTEGER
NULLABLE
Android OS version int


idfa
STRING
NULLABLE
iOS IDFA


googleaid
STRING
NULLABLE
Android Google Advertising ID


architecture
STRING
NULLABLE
Device architecture


istablet
BOOLEAN
NULLABLE
Is the device a tablet?


vendoridentifier
STRING
NULLABLE
iOS vendor identifier


pushtoken
STRING
NULLABLE
Push token


attributionserviceprovider
STRING
NULLABLE
Attribution service provider name


attributionpublisher
STRING
NULLABLE
Attributed publisher name


attributioncampaign
STRING
NULLABLE
Attributed campaign name


mparticleuserid
INTEGER
NULLABLE
UserId assigned by mParticle


customerid
STRING
NULLABLE
User’s customerID, usually this is the unique userId in your system


facebookid
STRING
NULLABLE
User’s Facebook user Id


twitterid
STRING
NULLABLE
User’s Twitter ID


googleuserid
STRING
NULLABLE
User’s Google ID


microsoftuserid
STRING
NULLABLE
User’s Microsoft ID


yahoouserid
STRING
NULLABLE
User’s Yahoo ID


email
STRING
NULLABLE
User’s email


otheruserid
STRING
NULLABLE
“Other” type user identity


isdebug
BOOLEAN
NULLABLE
True for debug environment and false for production environment


batchid
INTEGER
NULLABLE
A unique ID of the batch


batchtimestamp
TIMESTAMP
NULLABLE
Batch timestamp


sdkversion
STRING
NULLABLE
mParticle SDK version


clientip
STRING
NULLABLE
Client IP address


accumulatedltvvalue
FLOAT
NULLABLE
Accumulated LTV value of a user


entrypointtype
INTEGER
NULLABLE
Type of incoming data, 1 means from SDK and 128 means from S2S


countrycode
STRING
NULLABLE
Country code


cityname
STRING
NULLABLE
City name


postalcode
STRING
NULLABLE
Postal code


regioncode
STRING
NULLABLE
Geo region code


latitude
FLOAT
NULLABLE
Geo latitude


longitude
FLOAT
NULLABLE
Geo longitude


accuracy
FLOAT
NULLABLE
Geo accuracy


sessionid
INTEGER
NULLABLE
A unique ID of the session


sessionstarttimestamp
TIMESTAMP
NULLABLE
Session start timestamp


eventid
INTEGER
NULLABLE
A unique ID of the event


eventtimestamp
TIMESTAMP
NULLABLE
Event timestamp


messagetypeid
INTEGER
NULLABLE
Message Type Id


eventstarttimestamp
TIMESTAMP
NULLABLE
Event start timestamp


eventname
STRING
NULLABLE
Event name


eventtypeid
INTEGER
NULLABLE
Event type Id


eventlength
INTEGER
NULLABLE
How long did the event take? Represents session length in milliseonds on session end events


eventltvvalue
FLOAT
NULLABLE
Monetary value extracted from the event


dataconnectiontype
STRING
NULLABLE
Data connection type


exceptionhandled
BOOLEAN
NULLABLE
Handled exception or crash


firstseentimestamp
TIMESTAMP
NULLABLE
Timestamp of the first event on this user


isfirstrunevent
BOOLEAN
NULLABLE
Is this a first run event?


isupgradeevent
BOOLEAN
NULLABLE
Is this an app upgrade event?


successfullyclosed
BOOLEAN
NULLABLE
Is the last session successfully closed? Will be false if app is forcefully killed


applicationtransitiontypeid
INTEGER
NULLABLE
Applicaiton Transition TypeId


samplingpercentage
INTEGER
NULLABLE
Not used


ecommercescreenname
STRING
NULLABLE
eCommerce screen name


ecommerceisnoninteractive
BOOLEAN
NULLABLE
Is eCommerce action interactive?


productactiontypeid
INTEGER
NULLABLE
eCommerce Product Action Type Id, 0 = unknown, 1 = add_to_cart, 2 = remove_from_cart, 3 = checkout, 4 = checkout_option, 5 = click, 6 = view_detail, 7 = purchase, 8 = refund, 9 = add_to_wishlist, 10 = remove_from_wishlist


promotionactiontypeid
INTEGER
NULLABLE
Promotion Action Type Id, 0 = unknown, 1 = view, 2 = click


eventattributes
RECORD
REPEATED
A repeated field containing a list of event attribute key value pairs


eventattributes.attributename
STRING
NULLABLE
Event attribute name


eventattributes.attributevalue
STRING
NULLABLE
Event attribute value


userattributes
RECORD
REPEATED
A repeated field containing a list of user attribute key value pairs


userattributes.attributename
STRING
NULLABLE
User attribute name


userattributes.attributevalue
STRING
NULLABLE
User attribute value


jailbroken
RECORD
REPEATED
Device’s jailbroken status


jailbroken.attributename
STRING
NULLABLE
Jailbroken attribute name


jailbroken.attributevalue
STRING
NULLABLE
Jailbroken attribute value


eventcustomflags
RECORD
REPEATED
Event custom flags


eventcustomflags.attributename
STRING
NULLABLE
Custom flag attribute name


eventcustomflags.attributevalue
STRING
NULLABLE
Custom flag attribute value


audiencemembership
RECORD
REPEATED
A repeated field containing mParticle segment ID’s the user was a member of at the time of the event


audiencemembership.audienceid
INTEGER
NULLABLE
mParticle segment ID


productimpressions
RECORD
REPEATED
A repeated field containing a list of product impressions


productimpressions.productimpressionlist
STRING
NULLABLE
Product impression list name


productimpressions.product_id
STRING
NULLABLE
Product Id


productimpressions.product_name
STRING
NULLABLE
Product name


productimpressions.product_brand
STRING
NULLABLE
Product brand


productimpressions.product_category
STRING
NULLABLE
Product category


productimpressions.product_variant
STRING
NULLABLE
Product variant


productimpressions.product_position
INTEGER
NULLABLE
Product position


productimpressions.product_price
FLOAT
NULLABLE
Product price


productimpressions.product_quantity
FLOAT
NULLABLE
Prodict quantity


productimpressions.product_couponcode
STRING
NULLABLE
Product coupon code


productimpressions.product_attributes
STRING
NULLABLE
JSON string of all product attributes


productimpressions.product_addedtocarttimestamp
TIMESTAMP
NULLABLE
Added to cart timestamp


productimpressions.product_totalproductamount
FLOAT
NULLABLE
Total product amount


productaction
RECORD
NULLABLE
Product action information


productaction.actiontype
INTEGER
NULLABLE
eCommerce Product Action Type Id, 0 = unknown, 1 = add_to_cart, 2 = remove_from_cart, 3 = checkout, 4 = checkout_option, 5 = click, 6 = view_detail, 7 = purchase, 8 = refund, 9 = add_to_wishlist, 10 = remove_from_wishlist


productaction.checkoutstep
INTEGER
NULLABLE
Checkout step


productaction.checkoutoptions
STRING
NULLABLE
Checkout options


productaction.productactionlist
STRING
NULLABLE
Product action list


productaction.productlistsource
STRING
NULLABLE
Product list source


productaction.transactionid
STRING
NULLABLE
Transaction id


productaction.affiliation
STRING
NULLABLE
Transaction affiliation


productaction.totalamount
FLOAT
NULLABLE
Transaction total amount


productaction.taxamount
FLOAT
NULLABLE
Transaction tax amount


productaction.shippingamount
FLOAT
NULLABLE
Transaction shipping amount


productaction.couponcode
STRING
NULLABLE
Transaction coupon code


productactionproducts
RECORD
REPEATED
A repeated field containing a list of products associate with a product action


productactionproducts.product_id
STRING
NULLABLE
Product Id


productactionproducts.product_name
STRING
NULLABLE
Product name


productactionproducts.product_brand
STRING
NULLABLE
Product brand


productactionproducts.product_category
STRING
NULLABLE
Product category


productactionproducts.product_variant
STRING
NULLABLE
Product variant


productactionproducts.product_position
INTEGER
NULLABLE
Product position


productactionproducts.product_price
FLOAT
NULLABLE
Product price


productactionproducts.product_quantity
FLOAT
NULLABLE
Prodict quantity


productactionproducts.product_couponcode
STRING
NULLABLE
Product coupon code


productactionproducts.product_attributes
STRING
NULLABLE
JSON string of all product attributes


productactionproducts.product_addedtocarttimestamp
TIMESTAMP
NULLABLE
Added to cart timestamp


productactionproducts.product_totalproductamount
FLOAT
NULLABLE
Total product amount


promotionaction
RECORD
REPEATED
A repeated field containing a list of eCommerce product promotions


promotionaction.promotion_action_type
INTEGER
NULLABLE
eCommerce Promotion Action Type Id, 0 = unknown, 1 = view, 2 = click


promotionaction.promotion_id
STRING
NULLABLE
Promotion Id


promotionaction.promotion_name
STRING
NULLABLE
Promotion name


promotionaction.promotion_creative
STRING
NULLABLE
Promotion creative


promotionaction.promotion_position
STRING
NULLABLE
Promotion position


shoppingcart
RECORD
REPEATED
A repeated field containing a list of products in a shopping cart


shoppingcart.product_id
STRING
NULLABLE
Product Id


shoppingcart.product_name
STRING
NULLABLE
Product name


shoppingcart.product_brand
STRING
NULLABLE
Product brand


shoppingcart.product_category
STRING
NULLABLE
Product category


shoppingcart.product_variant
STRING
NULLABLE
Product variant


shoppingcart.product_position
INTEGER
NULLABLE
Product position


shoppingcart.product_price
FLOAT
NULLABLE
Product price


shoppingcart.product_quantity
FLOAT
NULLABLE
Prodict quantity


shoppingcart.product_couponcode
STRING
NULLABLE
Product coupon code


shoppingcart.product_attributes
STRING
NULLABLE
JSON string of all product attributes


shoppingcart.product_addedtocarttimestamp
TIMESTAMP
NULLABLE
Added to cart timestamp


shoppingcart.product_totalproductamount
FLOAT
NULLABLE
Total product amount



BigQuery Configuration
Please work with your mParticle customer support manager to enable BigQuery access on the mParticle UI. To get data loading going, please complete the following steps.

Enable BigQuery in your project in Google Cloud Platform.
On your Google developer console, go to the Permissions page under your project, and add mParticle service account email as a viewer for the project.
In your BigQuery project
    
Create a dataset where your app data will be loaded into
Click on “Share dataset” on the dataset and add mParticle service account email with “Can edit” permission.


Log into mParticle platform, and navigate to BigQuery page. 
    
Enter your BigQuery projectId (note that it may be different from your project name) and the datasetId of the dataset created in step 3. 
Enter your BigQuery table prefix
Optionally, you may configure data retention policy too. 
After successfully saving the configurations, data loading should start within a few minutes, and you can view the data load status on the mParticle BigQuery page.



Best Practices
There are a few best practices tips that we’d like to mention.

Query a specific table whenever possible. Doing this lowers your BigQuery bill since BigQuery charges by how much data is queried.
For the same reason as above, only include the fields you really want in a query whenever possible.
When counting number of distinct elements, BigQuery use estimation by Hyperloglog by default. To get an exact count, use “count(distinct fieldName, n)”, which tells BigQuery to use estimation only if there are more than n number of unique elements.
When dealing with more than one repeated field, use FLATTEN operator. When using FLATTEN operator and table wildcard functions together, reference the statement to the right for an example.

-- calculate daily signups from facebook US users
SELECT
  DATE(EventTimestamp),
  COUNT(*)
FROM
  FLATTEN((
    SELECT
      *
    FROM
      TABLE_QUERY([myproject:mydataset], 'table_id contains "mycoolapp"')), eventattributes)
WHERE
  EventName = 'SignUp'
  AND EventAttributes.attributename = 'Sign Up Method'
  AND EventAttributes.attributevalue = 'Facebook'
  AND UserAttributes.attributename = 'Country'
  AND UserAttributes.attributevalue = 'US'
GROUP BY 1
ORDER BY 1

Mobile SDKs
Overview
An mParticle API key and secret is needed for every mobile platform. If you haven’t already, register with mParticle and create a new application for iOS, tvOS, Android, or Mobile Web. Follow the getting started guide as you register your new app, and then return here for a detailed guide of every SDK feature. 
This first section contains platform-specific guides for how to add the mParticle SDK to your existing iOS, tvOS, Android, or JavaScript app. Subsequent sections apply to all platforms unless otherwise noted. For those sections, leverage the platform selector to view the code samples for your platform.
If you have other third party SDKs in your app, please refer to the Kits section
Apple OS (iOS and tvOS)
The mParticle Apple SDKs are available via CocoaPods and Carthage, see GitHub for more details.
The SDK reference in Appledocs/html can be accessed here.
The following integrations are currently supported on the tvOS platform.

Abakus Inc.
Agilone
Alooma
Amazon Kinesis
Amazon S3
Amazon SNS
Amazon SQS
Amplitude
Apsalar
Datadog
Facebook
Google Analytics
Indicative
Intercom
Kissmetrics
Mixpanel
mParticle Device Match
Oracle BlueKai
SFDC - Email
Slack
Tune
Webhook

Android
The Android SDK is composed of the Core library and a series of kit libraries that depend on Core. Though most of mParticle’s integrations are on the server-side, some of these services need to be integrated on the client side - and that’s where kits come in. The Core SDK takes care initializing the kits depending on what you’ve configured in your app’s dashboard, so you just have to decide which kits you may use prior to submission to Google Play. You can easily include all of the kits, none of the kits, or individual kits - the choice is yours.
The mParticle Android SDK is available via Maven Central and manual download, see GitHub for more details.
The Android Javadocs can be accessed here
Unity
mParticle supports Unity-based applications for iOS and Android by providing an easy-to-use C# library class bundled with our native SDKs for iOS and Android. With the mParticle Unity SDK, developers can leverage mParticle’s wide range of supported integrations that are otherwise unsupported by Unity. Additionally, with mParticle’s server-based architecture, your Unity game will perform better with our single lightweight SDK than it would incorporating a series of other SDKs.		
We’ve bundled the C# source code, required libraries, and other helper files as a single Unity package file to allow for easy import into an existing or new Unity project. Our library uses Unity’s platform dependent compilation to determine which SDK it should incorporate into your application. Go to the Unity SDK Github page for instructions on setting up the SDK in your project.
mParticle Singleton
The mParticle Unity package contains a class file named MParticle.cs, which is a Unity Monobehavior and implements the singleton pattern.  This is the class you will use throughout your application to interact with the mParticle API.  The package also contains the classes MParticleiOS and MParticleAndroid. These classes are used by the mParticle singleton to interact with the native iOS and Android libraries. You should never access those classes directly from your code.	
Unity on iOS
During the build process, Unity looks for a script named PostprocessBuildPlayer in your Project’s Assets/Editor folder.  If Unity finds this script, it is invoked when the Unity Player finishes building.  We’ve built a PostprocessBuildPlayer that automates several Xcode project configuration steps that are required to successfully build your application for the iOS platform. You can find the script in the directory where you expanded mParticleUnity.zip.  		
If you choose to use our PostprocessBuildPlayer script, just copy it to the Assets/Editor folder in your Unity project and after building your app from Unity go to step #5 of the manual instructions below. The script will copy mParticle.framework to your Xcode project root directory.		
If you choose to configure Xcode manually, here are the configuration instructions:  		

Copy mParticle.framework from Assets/Plugins/iOS to your Xcode project directory		
Add Accounts.framework, CoreTelephony.framework, Social.framework, and AdSupport.framework to your Xcode project (AdSupport.framework is optional and only for projects targeting iOS 6 and above)		
Add libsqlite3.dylib and libz.dylib to your Xcode project  		
Add the -ObjC linker flag in Other Linker Flags (Your Xcode Project > Build Settings > Linking)		
Add mParticle.framework to your Xcode project		
Import the mParticle header in UnityAppController.mm 
See the Initialize the SDK section for how to start the iOS SDK, which applies equally to Unity and native iOS apps.		

    #import <mParticle/mParticle.h>		

Unity on Android
After the mParticle Unity Package has been imported into your project, there are only a few more steps to get going with Android!		
1. Setting the mParticle API Credentials
<?xml version="1.0" encoding="utf-8" ?>		
<resources>		
    <string name="mp_key">APP KEY</string>		
    <string name="mp_secret">APP SECRET</string>		
</resources>		

The mParticle SDK communicates securely over HTTPS with the mParticle platform and requires an application key and secret for authentication. The mParticle Unity Package includes an mparticle.xml configuration file that you can use to fill in these credentials. After setting up your Unity Android application in the Unity console, copy your app key and app secret into mparticle.xml, which will be located in your Unity project’s Plugins/Android/res/values directory.		
2. AndroidManifest.xml
Every Android application, Unity or not, requires an AndroidManifest.xml file. Many optional features of the mParticle SDK require special permissions, additions, and modification of the AndroidManifest.xml file. If you are already using a customized AndroidManifest.xml file, you can skip the following: 
When Unity compiles and packages your application it places a number of temporary files, including your AndroidManifest.xml in the directory PROJECT_DIR/Temp/StagingArea. Build your current project and then copy this file from the StagingArea directory to your project’s Assets/Plugins/Android directory. You now have an AndroidManifest.xml that you can safely customize moving forward.		
3. Adding required permissions
See the Getting Started with Android section above to add required and optional permissions to your AndroidManifest.xml file.		
4. Using the MPUnityNativeActivity
The com.mparticle.activity.MPUnityNativeActivity class provides a default implementation that simply starts the SDK and does the minimum to ensure that session management and screen view tracking is working correctly. There are two ways to leverage this class:  		

If you have already customized the Activitys that your Unity application uses, simply have all of your Activitys extend com.mparticle.activity.MPUnityNativeActivity. 		
With default Unity Project settings, the launch Activity of your application will be set to the class com.unity3d.player.UnityPlayerNativeActivity. Change this to com.mparticle.activity.MPUnityNativeActivity in the AndroidManifest.xml that you copied into Assets/Plugins/Android.		

Manual Initialization
In cases where extending/subclassing MPUnityNativeActivity or customizing the AndroidManifest.xml file is not an option, you may also manually instrument the SDK. See the Initialize the SDK section meant native Android apps for an extended description.		
From within an Activity you have full access to all the mParticle native Android SDK's Java APIs.
JavaScript
The mParticle JavaScript SDK supports standalone web applications as well as hybrid iOS and Android apps that instrument iOS’s UIWebView or Android’s WebView classes. The JavaScript SDK is able to detect and communicate with the native mParticle iOS and Android SDKs when appropriate. This allows developers to share the identical JavaScript tracking code regardless of where their mobile web app is loaded (in a browser, or within a WebView of a mobile app). In the case of a mobile app, the JavaScript SDK will bind with and take advantage of the advanced offline and data-collection capabilities of the native SDKs.
The JavaScript SDK GitHub repository can be accessed here
Choose your snippet
Web Browser + WebView and Web Browser only
<!--Web Browser + `WebView` and Web Browser only -->
<script type="text/javascript">
 (function (apiKey) {
    window.mParticle = window.mParticle || {};
    window.mParticle.config = window.mParticle.config || {};
    window.mParticle.config.rq = [];
    window.mParticle.ready = function (f) {
        window.mParticle.config.rq.push(f);
    };
    var mp = document.createElement('script');
    mp.type = 'text/javascript';
    mp.async = true;
    mp.src = ('https:' == document.location.protocol ? 'https://jssdkcdns' : 'http://jssdkcdn') + '.mparticle.com/js/v1/' + apiKey + '/mparticle.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(mp, s);
})('YOUR_API_KEY');
</script>

If your same web app/javascript will potentially be loaded in a mobile web browser and a native app’s WebView or if your web app will only be loaded in a mobile web browser, set up an HTML5 platform for your app in the mParticle console to acquire the mParticle API key, and then add the code to the right with your API key, within the <head> tag of your app.

Replace 'YOUR_API_KEY' with the mParticle API key for the HTML5 platform for your app set up in the mParticle platform
When your web app/javascript is loaded in a mobile web browser, mParticle will associate event data with your HTML5 API key. 
When your web app/javascript is loaded in your native app’s WebView(s), mParticle will associate event data with the respective iOS or Android app’s API key.
If you’re not instrumenting a native iOS or Android app, no further setup is required.  Continue on to learn how to start logging events with the JavaScript SDK.

WebView-only
<!-- WebView only-->
<script type="text/javascript">
 (function () {
     window.mParticle = window.mParticle || {};
     window.mParticle.config = window.mParticle.config || {};
     window.mParticle.config.rq = [];
     window.mParticle.ready = function (f) {
         window.mParticle.config.rq.push(f);
     };
     var mp = document.createElement('script');
     mp.type = 'text/javascript';
     mp.async = true;
     mp.src = 'https://jssdkcdns.mparticle.com/js/v1/mparticle.js';
     var s = document.getElementsByTagName('script')[0];
     s.parentNode.insertBefore(mp, s);
 });
 </script>

If your web app/javascript will only ever be loaded in native app WebViews, there’s no need to create an HTML5 platform for your app.  Simply include the JavaScript at the right without an API key.

If you are instrumenting a Webview in a native iOS or Android app, you should additionally follow the Getting Started and Initialization steps for either platform, if you haven’t already. 
Follow the instructions below to bind the respective native SDK to your WebView. 

Bind the JavaScript SDK to the respective mobile SDK
This is required if you’re hosting the JavaScript snippet in a webview.
Bind the JavaScript SDK to the iOS SDK

//Step 1: Enable the JavaScript SDK to pass requests from the webview through the iOS SDK
[[MParticle sharedInstance] initializeWebView:myWebView];

//Step 2: Use a UIWebViewDelegate to pass all applicable URL requests to mParticle
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
    if([[MParticle sharedInstance] isMParticleWebViewSdkUrl:[request URL]]) {
        [[MParticle sharedInstance] processWebViewLogEvent:[request URL]];
        return  NO;
    } else {
        return YES;
    }
} 


In order to use the JavaScript SDK in an iOS App webview, you must register every UIWebView with mParticle, with the initializeWebView method, as well as pass all applicable UIWebView URL requests through mParticle.
Bind the JavaScript SDK to the Android SDK
WebView wv = (WebView) findViewById(R.id.webview);
MParticle.getInstance().registerWebView(wv);

For every WebView in your Android application, add the mParticle JavaScript interface to its scope.
AMP
Accelerated Mobile Pages (AMP) is a way to build web pages for static content that render fast. AMP includes an amp-analytics element that allows you to track user interactions with AMP pages.  To learn more about analytics for AMP pages see the amp-analytics reference. For general information about AMP see What Is AMP? on the Accelerated Mobile Pages (AMP) Project site.
Supported user interactions
<script async custom-element="amp-analytics"
  src="https://cdn.ampproject.org/v0/amp-analytics-0.1.js"></script>

<amp-analytics type="mparticle" id="analytics1">
   ...
</amp-analytics>

amp-analytics is an extended component and must be explicitly included into the document as a custom element to use it. To add AMP analytics functionality to your page:

Include the script to the right in the <head>, before the AMP JS library:
Add the amp-analytics element to the body of your page and set the type attribute of the amp-analytics element to mparticle. 
It is recommended to include an id attribute so that you can easily identify each amp-analytics element (e.g. debugging).

The following trigger request values are supported for the mParticle configuration:

pageview for page tracking
app events for event tracking

AMP Page tracking
Page tracking allows you to measure the number of views you had for a particular page on your website.  Pageview hits can be sent by setting the trigger request value to pageview.
<amp-analytics type="mparticle" id="analytics1">
<script type="application/json">
{
  "vars": {
    "apiKey": "Your mParticle API Key"
  },
  "triggers": {
    "trackPageview": {
      "on": "visible",
      "request": "pageview"
    }
  }
}
</script>
</amp-analytics>

The property apiKey `Your mParticle API Key` should be replaced with the API Key of your app as configured in mParticle App Settings in the code snippet and the rest of the examples.  The Mobile Web API Key should be used.
You can set key-value pairs for the following pageview fields in the vars attribute of the trigger.



Value
Default Value
Required
Description




title
Defaults to title
no
The title of the page.


ampdocUrl
Defaults to ampdocUrl
no
URL of the page being tracked.



The following example overrides the default pageview values for title and ampdocUrl:
<amp-analytics type="mparticle" id="analytics2">
<script type="application/json">
{
  "vars": {
    "apiKey": "Your mParticle API Key"
  },
  "triggers": {
    "trackPageviewWithAmpdocUrl": {
      "on": "visible",
      "request": "pageview",
      "vars": {
        "title": "Custom Title",
        "ampdocUrl": "http://www.example.com"
      }
    }
  }
}
</script>
</amp-analytics>

AMP Event tracking
Events are user interactions with content that can be tracked independently from a web page or a screen load.  Event hits can be sent by setting the trigger request value to event and providing additional event properties.  
The following example uses the selector attribute of the trigger to send an event when a particular element is clicked.
<amp-analytics type="mparticle" id="analytics3">
<script type="application/json">
  {
    "vars": {
      "apiKey": "AppKey"
    },
    "triggers": {
      "trackAppEvent": {
        "on": "click",
        "selector": "#test1",
        "request": "event",
        "vars": {
          "eventName": "AMP Test 1 button clicked",
          "eventType": "Unknown",
          "eventAttributes_Keys": ["test key1","test key2"],
          "eventAttributes_Values": ["test value1","test value2"],
          "userAttributes_Keys": ["test user attr key1","test user attr key2"],
          "userAttributes_Values": ["test user attr value1","test user attr value2"],
          "userIdentities_Types" : ["facebook", "twitter"],
          "userIdentities_Values" : ["example@facebook.com", "@example"],
          "debug": "true",
          "location": [26.4619396, -80.0691996],
          "customFlags_Keys": ["custom flag1", "custom flag2"],
          "customFlags_Values": ["[100, 200]", "[test val1, test val2]"],
          "appVersion": "1.0"
        }
      }
    }
  }
</script>
</amp-analytics>

You can set key-value pairs for the following event fields in the vars attribute of the trigger.



Value
Default Value
Required
Description




eventName
 
no
The name of the event.


eventType
“Unknown”
no
The type of event.  The supported event types are listed here.


eventAttributes_Keys
 
no
An array of event attribute keys.


eventAttributes_Values
 
no
An array of event attribute values, corresponding to the eventAttributes_Keys.


userAttributes_Keys
 
no
An array of user attribute keys.


userAttributes_Values
 
no
An array of user attribute values, corresponding to the userAttributes_Keys.


userIdentities_Types
 
no
An array of user identities.


userAttributes_Values
 
no
An array of user identity values, corresponding to the userIdentities_Types.


debug
“false”
no
Set the debug flag to “true” to indicate development data or to “false” to indicate production data.


location
 
no
The location where the event occurred represented as [lat,long]


customFlags_Keys
 
no
An array of custom flags.


customFlags_Values
 
no
An array of custom flag values, corresponding to the customFlags_Keys.


appVersion
 
no
Your application version.



Roku
Instrument with the Roku SDK to track users and events in your Roku channel. Both legacy and Scene Graph channels are supported. See Github for installation and setup instructions.
Initialize the SDK
// Import the mParticle header file in your Application Delegate
#import <mParticle/mParticle.h>  

// Initialize the SDK with your key and secret when the application finishes launching
- (BOOL)application:(UIApplication *)application
        didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    [[MParticle sharedInstance] startWithKey:@"<<<App Key Here>>>"
                                      secret:@"<<<App Secret Here>>>"];

    return YES;
}

The Android SDK is configured via XML resources. Grab your mParticle key and secret from your app’s dashboard and add them as string resources in your app:
<!-- ex. src/main/res/values/mparticle.xml -->
<?xml version="1.0" encoding="utf-8" ?>
<resources>
    <string name="mp_key">APP KEY</string>
    <string name="mp_secret">APP SECRET</string>
</resources>

Call start from the onCreate method of your app’s Application class. If you don’t already have an Application class, create it and then specify its fully-qualified name in the <application> tag of your app’s AndroidManifest.xml.
package com.example.myapp;

import android.app.Application;
import com.mparticle.MParticle;

public class MyApplication extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        MParticle.start(this);
    }
}

Note: It’s not advisable to log events in your Application.onCreate(). Android may instantiate your Application class for a lot of reasons, in the background, while the user isn’t even using their device.
The Unity SDK is initialized in much the same way that the native SDKs are initialized for iOS or Android. See the Unity Getting Started section for iOS or Android above for more info.		
See the JavaScript Getting Started section above for how to initialize the JavaScript SDK depending on your usage and platform. No further action is needed to initialize after you have included and bound the appropriate JavaScript code.
The mParticle SDKs must be initialized with your application key and secret prior to use. The correct placement of this initialization code is crucial to ensuring proper session management.  
Select the language tab to the right that corresponds to your platform.
If your application supports a minimum SDK lower than 14 (4.0 Ice Cream Sandwich), every Activity of the application must also include the following code, or must subclass the mParticle MPActivity or MPListActivity classes:
@Override
protected void onStart() {
    super.onStart();
    MParticle.getInstance().activityStarted(this);
    //the rest of your onStart code...
}
@Override
protected void onStop() {
    super.onStop();
    MParticle.getInstance().activityStopped(this);
    //the rest of your onStop code...
}

Development and Production Environments
The iOS and Android SDKs will detect whether your app is running in a development environment or a production environment, or can be set to an environment manually. In development mode the SDK will print informative log messages and will upload data at a much higher rate to mParticle servers to allow for easier debugging.
In order to see the stream of events sent from your app to mParticle servers, log into the mParticle platform, navigate to Live Stream, select your app, and filter on the appropriate devices.
You can set the environment in the start() method of the SDK. Note that trying to set the environment to development after the SDK has detected it to be production will result in no action - this is to avoid the situation of setting the SDK environment to development after the app has been deployed to the App Store or Google Play Store.
//insert prior to the initialization/download snippet
window.mParticle = {
    config: {
        isSandbox: true
    }
};

//The iOS SDK will detect Development mode if the app is connected to the Xcode debugger
//or has an Adhoc or Development provisioning profile
typedef NS_ENUM(NSUInteger, MPEnvironment) {
    MPEnvironmentAutoDetect = 0,
    MPEnvironmentDevelopment,
    MPEnvironmentProduction
};

[[MParticle sharedInstance] startWithKey:@"<<<App Key Here>>>"
                                  secret:@"<<<App Secret Here>>>"
                        installationType:MPInstallationTypeAutodetect
                             environment:MPEnvironmentProduction];

//the Android SDK automatically detects the Environment based on the DEBUGGABLE flag of your application. The DEBUGGABLE
//flag of your application will be TRUE when signing with a debug certificate during development, or if you have explicitly
//set your application to debug within your AndroidManifest.xml.
public enum Environment {
    AutoDetect,
    Development,
    Production;
}


@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    MParticle.start(MainActivity.this, MParticle.InstallType.AutoDetect, MParticle.Environment.Production);
}




Environment
Description




Auto-Detect
Default. The SDK will detect environment automatically. (iOS/Android only)


Development
The running environment of the SDK is development


Production
The running environment of the SDK is production



Console Logging
//insert prior to the initialization/download snippet
window.mParticle = {
    config: {
        isDebug: true
    }
};

[MParticle sharedInstance].consoleLogging = NO;

MParticle.getInstance().setLogLevel(MParticle.LogLevel.DEBUG);

It may be the case where you are in the development environment, but still you don’t want to see development logs being output to the console. By default console logging is enabled when the running environment is development. When the running environment is detected to be production, there will be no console output.
iOS and tvOS
[mParticle sharedInstance].logLevel = MPILogLevelDebug;




Log Level
Description




MPILogLevelNone
No log messages are send to the console


MPILogLevelError
Only error log messages are sent to the console


MPILogLevelWarning
Only warning and error log messages are sent to the console


MPILogLevelDebug
Debug, warning, and error log messages are sent to the console.


MPILogLevelVerbose
Verbose, debug, warning, and error log messages are sent to the console. This is the most verbose setting



During development, set the logLevel property to control the verbosity of the mParticle SDK’s console output. For App Store-provisioned builds, this property will be ignored, and MPILogLevelNone will be used.
AppDelegate Proxy (iOS and tvOS)
// iOS and tvOS
- (BOOL)application:(UIApplication *)application
        didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    [[MParticle sharedInstance] startWithKey:@"<<<App Key Here>>>"
                                      secret:@"<<<App Secret Here>>>"
                            installationType:MPInstallationTypeAutodetect
                                 environment:MPEnvironmentAutoDetect
                            proxyAppDelegate:NO];

    return YES;
}

By default the mParticle SDK uses NSProxy to seamlessly integrate with the application’s app delegate in order to facilitate and simplify the handling of remote notifications, local notifications, interactions with notification actions, and application launching. This feature allows for a lot of needed work to be done automatically on your behalf, and does not interfere in any way, shape, or form with the way the app works.

If you choose to disable this feature, you can by passing NO to proxyAppDelegate: in the start method of the SDK. However, by doing so you will need to code yourself the calls to the mParticle SDK when the app is launched, a remote or local notification is received, and the user interactcs with a notification action.

- (void)application:(UIApplication *)application
        didReceiveLocalNotification:(UILocalNotification *)notification
{
    [[MParticle sharedInstance] didReceiveLocalNotification:notification];
}

- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
{
    [[MParticle sharedInstance] didReceiveRemoteNotification:userInfo];
}

- (void)application:(UIApplication *)application
        didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    [[MParticle sharedInstance] didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}

- (void)application:(UIApplication *)application
        didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
    [[MParticle sharedInstance] didFailToRegisterForRemoteNotificationsWithError:error];
}

- (void)application:(UIApplication *)application
        handleActionWithIdentifier:(NSString *)identifier
        forLocalNotification:(UILocalNotification *)notification
        completionHandler:(void (^)())completionHandler
{
    [[MParticle sharedInstance] handleActionWithIdentifier:identifier
                                      forLocalNotification:notification];
}

- (void)application:(UIApplication *)application
        handleActionWithIdentifier:(NSString *)identifier
        forRemoteNotification:(NSDictionary *)userInfo
        completionHandler:(void (^)())completionHandler
{
    [[MParticle sharedInstance] handleActionWithIdentifier:identifier
                                     forRemoteNotification:userInfo];
}

// iOS and tvOS
- (BOOL)application:(UIApplication *)application
        openURL:(NSURL *)url
        sourceApplication:(NSString *)sourceApplication
        annotation:(id)annotation
{
    [[MParticle sharedInstance] openURL:url
                      sourceApplication:sourceApplication
                             annotation:annotation];
}

The following is a list of all calls that would need to be made to the mParticle SDK from your app delegate:
Knowing When the SDK has Finished Initializing (iOS and tvOS)
- (void)registerFormParticleInitialization {
    NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];

    [notificationCenter addObserver:self
                           selector:@selector(handlemParticleDidFinishInitializing:)
                               name:mParticleDidFinishInitializing
                             object:nil];
}

- (void)handlemParticleDidFinishInitializing:(NSNotification *)notification {
    // Your code goes here.
}

When the SDK finishes initializing it broadcasts a notification via the notification center, making listeners aware of the fact.
[MParticle sharedInstance].initialized;

In addition, the initialized property is a boolean indicating whether the SDK has been initialized or not. You can use KVO to know when this property changes.
Event Tracking
[[MParticle sharedInstance] logEvent:@"Food order"
                           eventType:MPEventTypeTransaction];

MParticle.getInstance().logEvent("Food Order", EventType.Transaction);

MParticle.Instance.LogEvent ("Food order", MParticle.EventType.Transaction);	

$('#PlayButton').click(function(){
      mParticle.logEvent('Play Movie Tapped', 
                         mParticle.EventType.Navigation,
                         {'movie_length':'127 minutes','rating':'PG'});
});

long timeChoosingFood = 100; // in seconds		
  		  
Dictionary<string, string> choicesDictionary = new Dictionary<string, string> ();		
choicesDictionary.Add ("spice", "hot");		
choicesDictionary.Add ("menu", "weekdays");		
		
MParticle.Instance.LogEvent ("Food order", MParticle.EventType.Transaction, choicesDictionary, timeChoosingFood, "Delivery");		

User event tracking is a basic yet powerful feature of the SDK. Events can represent any generic activity in your application that you think might be worth tracking. Examples could be tapping a button, finishing a game level - really any user interaction that you may want to track and analyze. Later on in this guide specializations of events of covered, such as screen views, eCommerce transactions, and errors.
Events are logged using the logEvent method and/or one of its overloaded variants. Reference the code samples to the right for some examples.
Check the planning best practices topic for important information on naming your events and attributes.
MPEvent
MPEvent is coming soon to this platform.
MPEvent *event = [[MPEvent alloc] initWithName:@"Food Order"
                                          type:MPEventTypeTransaction];

event.info = @{@"spice":@"hot",
               @"menu":@"weekdays"}; // optional

event.duration = @(100); // in seconds (optional)
event.category = @"Delivery"; // optional

[[MParticle sharedInstance] logEvent:event];

Map<String, String> eventInfo = new HashMap<String, String>(2);
eventInfo.put("spice", "hot");
eventInfo.put("menu", "weekdays");

MPEvent event = new MPEvent.Builder("Food Order", EventType.Transaction)
                .duration(100)
                .info(eventInfo)
                .category("Delivery")
                .build();

MParticle.getInstance().logEvent(event);

MPEvent describes an event and all of its properties. It is a powerful and convenient way to represent complex events and log them in a clean way. It also gives you the ability to keep a reference to an event whose lifespan is longer than the execution of the current block of code. You use MPEvent in conjunction with the logEvent method. Create an instance of MPEvent, populate it with all the data you want to log for a particular event, then pass it as a parameter to logEvent.  All properties are optional with the exception of a name and an event type. 
Timed Events
Timed events are coming soon to this platform.
- (void)downloadButtonTapped:(id)sender {
    MPEvent *event = [[MPEvent alloc] initWithName:@"Downloading resource"
                                              type:MPEventTypeOther];

    event.info = @{@"resource_type":@"image", 
                   @"resource_name":"outer_space_bg.png"};

    [[MParticle sharedInstance] beginTimedEvent:event];

    // ... execute asynchronous code
}

- (void)resourceDidFinishDownloading {
    MParticle *mParticle = [MParticle sharedInstance];

    MPEvent *event = [mParticle eventWithName:@"Downloading resource"];
    [mParticle endTimedEvent:event];
}

MPEvent.Builder eventBuilder = null;

private void levelStarted() {
   eventBuilder = new MPEvent.Builder("level_completed", EventType.Other).startTime();
   //you can also store MPEvent.Builder objects in persistence, to retrieve them across sessions and app-restarts:
   sharedPreferenes("level_completed_event", eventBuilder.toString());
}

private void levelCompleted(){
  //if the app has been restarted, and you've persisted the event builder
  if (eventBuilder == null){
     eventBuilder = MPEvent.Builder.parseString(sharedPreferences.getString("level_completed_event"));
  }
  eventBuilder.endTime();
  MParticle.getInstance().logEvent(eventBuilder.build());
}

You can additionally use the MParticle SDK to track the duration of an event. The APIs vary slightly by platform - be sure that your platform is selected at the top right of this page to learn more.
iOS and tvOS timed events
To make things easier, iOS and tvOS mParticle SDK will maintain timed events for you. Start by creating an instance of MPEvent and pass it as an argument to beginTimedEvent. You don’t need to keep a reference to the MPEvent object, the mParticle SDK keeps the object referenced for you. When you need to retrieve a reference to that object just use the eventWithName method. Once you have the reference to the MPEvent object you can call either endTimedEvent or logEvent to end timing the event and effectively log the event.
Android timed events
In order to start timing an event with the Android SDK, create an MPEvent.Builder object and call startTime() on it. Later, call endTime() and then log the event as you would normally with logEvent. 
Event Type
The SDK provides an enumeration that represents the possible event types. See below for a description of this categorization. Reference the right pane for the enumeration that corresponds to your platform.
typedef NS_ENUM(NSUInteger, MPEventType) {
    MPEventTypeNavigation = 1,  
    MPEventTypeLocation,      
    MPEventTypeSearch,       
    MPEventTypeTransaction,    
    MPEventTypeUserContent,      
    MPEventTypeUserPreference,  
    MPEventTypeSocial,          
    MPEventTypeOther            
};

public enum EventType {
        Unknown, 
        Navigation, 
        Location, 
        Search, 
        Transaction, 
        UserContent, 
        UserPreference, 
        Social, 
        Other;
}

EventType = {
    Navigation: 1,
    Location: 2,
    Search: 3,
    Transaction: 4,
    UserContent: 5,
    UserPreference: 6,
    Social: 7,
    Other: 8
}

public enum EventType 		
{		
    Unknown = 0, 
    Navigation, 
    Location, 
    Search, 
    Transaction, 
    UserContent, 
    UserPreference, 
    Social, 
    Other
};		




Event Type
Description




Navigation
Events that indicate a user click sequence or content consumption. Examples might include interface navigation, music listening, video view, menu or tab selection, or when the back button is pressed.


Location
Events that indicate where a user is located or interacting physically. Examples might include a check-in, geo fence, or GPS navigation.


Search
Any event where users input criteria to find content/answers. Examples might include a keyword search, voice search, or a QR code scan.


Transaction
Any events that are part of a transaction workflow. Examples might include selecting a product, subscribe, upgrade, or bid.


User content
Events where users are creating content. Examples might include create task, compose, record, scan, or save.


User preference
Any event that creates personalization for the user. This includes registration, saving/labeling content items, creating profiles, setting application preferences or permissions.


Social
Any action where users share content with others. Examples might include post, rate, tweet, share, attach, email.


Other
Use this event type to create an event that falls into no clear category.



Custom Flags
MPEvent *event = [[MPEvent alloc] initWithName:@"Set Interest"
                                          type:MPEventTypeUserPreference;

[event addCustomFlag:@"top-40-music"
             withKey:@"Lotame.Interest"];

[[MParticle sharedInstance] logEvent:event];

MPEvent event = new MPEvent.Builder("Set Interest", MParticle.EventType.UserPreference)
                .addCustomFlag("Lotame.Interest", "top-40-music")
                .build();
MParticle.getInstance().logEvent(event);

Custom flags are used to trigger specific behavior and send specific data-points to particular providers. By design, custom flags are sent only to the specific provider for which they are required. This differs from generic, custom event attributes, which mParticle will send to all of your configured services which support generic key/value event data.  Custom Flags cannot be used within an audience definition.
The following providers support the use of custom flags: 

Bing Ads
Google Analytics
Localytics
Lotame
Quantcast
SimpleReach
Webtrends

Screen Tracking
In addition to general purpose event logging, the mParticle SDK implements and offers specializations. Let’s see how screen tracking works.
The mParticle SDKs allow you to track user navigation through your app. Developers can leverage this feature for engagement and funnel optimization, or generically to associate a dictionary or map of attributes to a given screen. Due to the variation in app design, it’s not necessarily clear what should constitute a screen view and as such, the mParticle SDKs provide features to automatically track screen views based on common platform patterns, and developers may additionally choose to manually log screen events.
Manual Screen Tracking
NSDictionary *screenInfo = @{@"modal":@"false",
                             @"color":@"green"};

[[MParticle sharedInstance] logScreen:@"Awesome Screen"
                            eventInfo:screenInfo];

Map<String, String> screenInfo = new HashMap<String, String>();
screenInfo.put("modal", "false");
screenInfo.put("color", "green");

MParticle.getInstance().logScreen("Awesome Screen", screenInfo);

Dictionary<string, string> screenInfo = new Dictionary<string, string> ();		
screenInfo.Add ("modal", "false");		
screenInfo.Add ("color", "green");		
  		  
MParticle.Instance.LogScreen ("Awesome Screen", screenInfo);		

//log the current path with default attributes
mParticle.logPageView();

//log the page view with details
mParticle.logPageView("Search", {modal: "false", background: "green"}, {"Google.Label": "search"});


Logging a screen view is done by invoking one of the logScreen methods. Reference the right pane for some examples.
The JavaScript SDK’s logScreen method takes three arguments:
* Screen Name (string)
* Attributes (object)
* Custom Flags (object)
If you do not include any arguments, the SDK will use the value of window.location.pathname as the screen name and will include the page title and hostname as attributes.
Automatic Screen Tracking
Add the following bool resource to your application’s res/values/mparticle.xml resource file:
<bool name="mp_enableAutoTracking">true</bool>

With automatic screen tracking enabled, the Android SDK will track Activity views. 
Enable Android automatic screen tracking by adding a boolean resource mp_enableAutoTracking to the XML configuration file.
Error and Exception Tracking
You can log errors and exceptions in your app with the mParticle SDK. Errors can be categorized as those that cause an application to crash (unhandled exceptions), or errors and unexpected conditions handled by the code and do not lead to a crash (handled exceptions.) As with other logging commands, a dictionary containing further information can be associated and sent with a logError or logException command.
Errors
[[MParticle sharedInstance] logError:@"Login failed" 
                           eventInfo:@{@"reason":@"Invalid username"}];

Map<String, String> errorInfo = new HashMap<String, String>();
errorInfo.put("reason", "Invalid username");

MParticle.getInstance().logError("Login failed", errorInfo);

Dictionary<string, string> errorInfo = new Dictionary<string, string> ();		
errorInfo.Add ("reason", "Invalid username");		
		
MParticle.Instance.LogError ("Login failed", errorInfo);		

mParticle.logError('Login failed');

Errors can be something as simple as an incorrect username/password or an invalid user interaction with the interface, such as trying to add a text to a number field.
Handled Exceptions
@try {      
    [self callNonExistingMethod];
}
@catch (NSException *ex) {
    [[MParticle sharedInstance] logException:ex];
}
 
// An exception reporting the topmost context at the moment of the exception
@try {      
    dictionary[@"key"] = nil;
}
@catch (NSException *ex) {        
    [[MParticle sharedInstance] logException:ex topmostContext:self];
}

try {
    someDangerousMethod();
} catch (NullPointerException npe) {
    MParticle.getInstance().logException(npe);
}

try		
{		
    SomeDangerousMethod ();		
}		
catch (NullReferenceException e)		
{		
    MParticle.Instance.LogException (e);		
}		

try {
    someDangerousMethod();
}
catch(err) {
    mParticle.logError(err.message);
}

Exceptions are signaling mechanisms used by languages and APIs to indicate that an unexpected or impossible action was attempted. If an exception is wrapped within a try/catch block, the app will be able to recover, and you can log that exception using the mParticle SDK.
Exception objects in most languages (such as Objective-C and Java) contain useful state information. This information as well as a stack trace at the moment of the exception is sent together with the logException command.
Unhandled Exceptions
The Unity engine often will catch and log Exceptions that occur within managed C# and JavaScript code. The mParticle Unity SDK is coded to listen for these log messages and track them as handled Exceptions - see MParticle.cs for how this is implemented.		
// Begins handling uncaught exceptions
[[MParticle sharedInstance] beginUncaughtExceptionLogging];

// Ends handling uncaught exceptions
[[MParticle sharedInstance] endUncaughtExceptionLogging];

// Begins handling uncaught exceptions		
MParticle.Instance.BeginUncaughtExceptionLogging ();		
		
// Ends handling uncaught exceptions		
MParticle.Instance.EndUncaughtExceptionLogging ();		

Enable this feature in the Android SDK via XML configuration:
<bool name="mp_reportUncaughtExceptions">true</bool>

You can also enable it programmatically:
//enable
MParticle.getInstance().enableUncaughtExceptionLogging();

//disable
MParticle.getInstance().disableUncaughtExceptionLogging();

It’s possible to intercept calls to the JavaScript error console in some browsers (Chrome and Firefox), and pass information on to mParticle:
(function () {
  var log = console.log;
  console.log = function () {
    var args = Array.prototype.slice.call(arguments);
    mParticle.logError(args.toString())
    log.apply(this, Array.prototype.slice.call(arguments));
  };
}());

In cases where exceptions are not handled in a try/catch block they can potentially crash the app. When it happens, you probably want to capture the crash log and stack trace to help you debug the app, and fix the code that was causing the crash. The mParticle SDK will do all that for you. Collect the crash log, stack trace, crash session, etc., and send it all to our servers the next time the app is launched.
In addition to enabling and disabling unhandled exceptions programmatically, you can also do it server side, in the console, without any need for client side code change!
Unhandled Exceptions are not currently supported for tvOS.
Breadcrumbs
// Leaving breadcrumbs along the way of parsing an object that could throw an exception
- (void)parseResource:(Resource *)resource {
    MParticle *mParticle = [MParticle sharedInstance];

    @try {
        [mParticle leaveBreadcrumb:@"parsing began"];

        [mParticle leaveBreadcrumb:@"parsing title"];
        [resource parseTitle];

        [mParticle leaveBreadcrumb:@"parsing body"];
        [resource parseBody];

        [mParticle leaveBreadcrumb:@"parsing footer"];
        [resource parseFooter];

        [mParticle leaveBreadcrumb:@"parsing finished!"];
    }
    @catch (NSException *ex) {
        [mParticle logException:ex topmostContext:self];
    }
}

//fictional method that parses some object
private void parseResource(Resource someResource) {
    MParticle mp = MParticle.getInstance();

    try {
        mp.leaveBreadcrumb("parsing began");
 
        mp.leaveBreadcrumb("parsing title");
        parseResourceTitle(someResource);
 
        mp.leaveBreadcrumb("parsing body");
        parseResourceBody(someResource);
 
        mp.leaveBreadcrumb("parsing footer");
        parseResourceFooter(someResource);

        mp.leaveBreadcrumb("parsing finished!");
    } catch (Exception ex) {
        mp.logException(ex);
    }
}

//fictional method that parses some object		
private void ParseResource (Resource someResource)		
{		
    try		
    {		
        MParticle.Instance.LeaveBreadcrumb ("Parsing began");		
 		
        MParticle.Instance.LeaveBreadcrumb ("parsing title");		
        ParseResourceTitle (someResource);		
 		
        MParticle.Instance.LeaveBreadcrumb ("parsing body");		
        ParseResourceBody (someResource);		
 		
        MParticle.Instance.LeaveBreadcrumb ("parsing footer");		
        ParseResourceFooter (someResource);		
  		  
        MParticle.Instance.LeaveBreadcrumb ("parsing finished!");		
    }		
    catch (Exception ex)		
    {		
        MParticle.Instance.LogException (ex);		
    }		
}		

Support for breadcrumbs in the JavaScript SDK is coming soon.
While debugging a scenario that may lead or is currently leading to crashes and/or exceptions, it is often helpful to leave breadcrumbs along the way to better understand the context leading to the problem. Things like which interactions a user had with the app, or to identify step-by-step what led to a particular line of code being executed.
The mParticle SDK lets you leave breadcrumbs with the leaveBreadcrumb method. You can also include a dictionary containing further information as parameter. Note however that breadcrumbs are only sent if and when a handled or unhandled exception occurs, and only the previous 50 breadcrumbs are kept by the SDK.
eCommerce
The following sections provide an overview for how you can measure commerce-related activity in your apps. mParticle Integrations have varying levels of support for commerce data, some providing no commerce-specific support, while others support very granular measurement of user-product, promotion, and impression interactions. The mParticle platform is designed to be flexible - use the APIs described below to measure the datapoints that you need and mParticle will make sure your data is represented faithfully across all of the integrations that you enable.
API Reference
For a deep dive into all of the specific members, variations, and usage of these APIs, reference the Javadocs or Appledocs included with the SDK, or at the links below:

See our Javadocs for a complete reference of the Android SDK.
See our Appledocs for a complete reference of the Apple SDK.

eCommerce - Basic
It’s sufficient for many apps to only track a purchase, rather than all of the granular steps before and after. Use a product-based Commerce Event or the Commerce helper-apis to track a simple purchase transaction. 
Measuring Transactions
Create the Product(s)
MPProduct *product = [[MPProduct alloc] initWithName:@"Foo name"
                                                 sku:@"Foo sku"
                                            quantity:@4
                                               price:@100.00];

Product product = new Product.Builder("Foo name", "Foo sku", 100.00)
        .quantity(4)
        .build();

var product = mParticle.eCommerce.createProduct('Foo name', 'Foo sku', 100.00, 4);

Product[] products = new Product[2];
products[0] = new Product("foo name", "foo sku", 42, 2);
products[0].Brand = "foo brand";
products[0].Category = "foo category";
products[0].CouponCode = "foo coupon";

products[1] = new Product("foo name 2", "foo sku 2", 100, 3);
products[1].Brand = "foo brand 2";
products[1].Category = "foo category 2";
products[1].CouponCode = "foo coupon 2";

The Product (Android, Web, Unity) and MPProduct (Apple OS) classes should be used to represent a physical or virtual good or service. At minimum all products are required to have a name, an ID (or SKU), and a price. Reference the code samples to the right for how to create a simple product.
Summarize the Transaction
MPTransactionAttributes *attributes = [[MPTransactionAttributes alloc] init];
attributes.transactionId = @"foo-transaction-id";
attributes.revenue = @450.00;
attributes.tax = @30.00;
attributes.shipping = @30;

//transaction ID required for PURCHASE and REFUND events
TransactionAttributes attributes = new TransactionAttributes("foo-transaction-id")
    .setRevenue(450.00)
    .setTax(30.00)
    .setShipping(20.00);

var transactionAttributes = mParticle.eCommerce.createTransactionAttributes('foo-transaction-id');

TransactionAttributes transactionAttributes = new TransactionAttributes("foo transaction id");
transactionAttributes.Revenue = 180;
transactionAttributes.Shipping = 10;
transactionAttributes.Tax = 15;
transactionAttributes.Affiliation = "foo affiliation";
transactionAttributes.CouponCode = "foo coupon code";  

All purchase events are required to specify at least a transaction ID. Create a TransactionAttributes (Android, Web Unity) or MPTransactionAttributes (Apple OS) object to specify the ID and other transaction-level properties such as tax and shipping.
Log the Transaction
MPCommerceEventAction action = MPCommerceEventActionPurchase;
MPCommerceEvent *event = [[MPCommerceEvent alloc] initWithAction:action
                                                         product:product];
event.transactionAttributes = attributes;
[[MParticle sharedInstance] logCommerceEvent:event];

MParticle mp = MParticle.getInstance();
CommerceEvent event = new CommerceEvent.Builder(Product.PURCHASE, product)
  .transactionAttributes(attributes)
  .build();
mp.logEvent(event);

mParticle.eCommerce.logPurchase(transactionAttributes, product);

CommerceEvent eCommEvent = new CommerceEvent (
    ProductAction.Purchase, 
    products, 
    transactionAttributes
);
MParticle.Instance.LogCommerceEvent(eCommEvent);   

Tracking purchases and transactions is similar to other product events with the exception that an addition TransactionAttributes (Android, Web, Unity) or MPTransactionAttributes (Apple OS) object is required in order to provide the SDK several key dimensions of the transaction. Just as with the actions described above, you can use the Commerce helper APIs, or manually construct a CommerceEvent.
Lifetime Value
[[MParticle sharedInstance] logLTVIncrease:40.23
                                 eventName:nil
                                 eventInfo:nil];

// BigDecimal is used to ensure precision when increasing a user's LTV value, 
// this method takes an optional event name to associate with the increase, as well as an optional Map.
MParticle.getInstance().logLtvIncrease(new BigDecimal("40.23"), null, null);

Dictionary<string, string> eventInfo = new Dictionary<string, string> ();		
eventInfo.Add ("Level", "Gold");		
		
// Decimal is used to ensure precision when increasing a user's LTV value, 		
// this method takes an optional event name to associate with the increase, as well as an optional Dictionary.		
MParticle.Instance.LogLtvIncrease (40.23, "name", eventInfo);		

mParticle.logLTVIncrease(40.23, 'Bought Something');

Use the logLtvIncrease method if your app has no notion of products and you just want to associate a monetery value with a user.  logLtvIncrease will appears as an app event, with the LTV increase amount as an attribute.
The mParticle platform will automatically increment this value for you based on the CommerceEvents that you track as well.
Product Bags
Access the Product Bag APIs
//the mParticle singleton exposes an instance of the API
ProductBagApi bagApi = MParticle.getInstance().ProductBags();

MPBags *bags = [MParticle sharedInstance].bags;

mParticle supports the notion of user-associated Product Bags, which consist of a name and a list of Products. You can use the APIs described here to associate one or more Product Bags with your users. Product Bags are persisted across application sessions and restarts.
Product Bags are not forwarded as user attributes or otherwise to integrations. Use Audience Manager to target your users based on the state of their bag(s).
Creating and Adding to a Bag
//The SDK will create a product bag named "favorites" if it does not already exist
//otherwise, it will append the product onto the existing bag
MParticle.getInstance()
    .ProductBags()
    .addProduct("favorites", product);

//The SDK will create a product bag named "favorites" if it does not already exist
//otherwise, it will append the product onto the existing bag
[[MParticle sharedInstance].bags addProduct:product 
                                      toBag:@"favorites"];

//The SDK will create a product bag named "favorites" if it does not already exist
//otherwise, it will append the product onto the existing bag
mParticle.eCommerce.ProductBags.add('favorites', product);

See the code samples to the right for how to create a new bag and/or add a new Product to an existing bag, and reference the Basic eCommerce section above to learn how to create a new product instance.
Removing a Product from a Bag
boolean success = MParticle.getInstance()
                    .ProductBags()
                    .removeProduct("favorites", product);

[[MParticle sharedInstance].bags removeProduct:product
                                       fromBag:@"favorites"];

mParticle.eCommerce.ProductBags.remove('favorites', product);

See the code samples to the right for how to remove a product from an existing bag. If the SDKs are unable to find a matching bag and/or a matching product, no operation will be performed.
Clearing or Removing a Bag
//the mParticle Audience Manager will now
//recognize the "favorites" bag as empty
MParticle.getInstance()
    .ProductBags()
    .clearProductBag("favorites");

//you can also remove a bag if you wish to completely
//dissociate the user with it
MParticle.getInstance()
    .ProductBags()
    .removeProductBag("favorites");

//remove a bag if you wish to completely
//dissociate the user with it
[MParticle sharedInstance].bags removeProductBag:@"favorites"];

//remove all bags associated with the user
[[MParticle sharedInstance].bags removeAllProductBags];

mParticle.eCommerce.ProductBags.clear('favorites');

See the code samples to the right for how to clear out or completely remove a product bag. 
eCommerce - Advanced
The mParticle platform lets you measure every granular step and interaction users can have with eCommerce products and services.
Class Overview
Commerce Event
The CommerceEvent (Android) and MPCommerceEvent (Apple OS) classes are central to mParticle’s eCommerce measurement. Commerce Events can contain many data points but it’s important to understand that there are 3 core variations:

Product-based: Used to measure measured datapoints associated with one or more products
Promotion-base: Used to measure datapoints associated with internal promotions or campaigns
Impression-based: Used to measure interactions with impressions of products and product-listings

Shopping Cart
//access the shopping cart singleton
MPCart *cart = [MPCart sharedInstance];

//access the shopping cart singleton
MParticle.getInstance().Commerce().cart()

Several of mParticle integration partners support the notion of a shopping cart and require that a shopping cart state be maintained. To make your life easier, the mParticle SDKs automatically maintain a shopping cart for you. The shopping cart will maintain its state across application launches, products can be manually added and removed from it, and you can even use it to log CommerceEvents. See the examples below for a more in depth description.
Commerce Helper APIs
The mParticle SDK provides a Commerce API class that surfaces the cart as well as providing methods dedicated to certain product actions. This class is aware of how to generate and log simple Commerce Events so you can reduce the “boiler-plate” code in your apps. The methods supported by this class, such as checkout() and purchase() will automatically include the products objects currently contained in the Cart.
Product Events
Product-based Commerce Events can be used to measure all of the steps and actions that a user might perform on their way to making a purchase within an eCommerce-enabled app, such as:

tapping and viewing products
adding and removing products from a cart or wishlist
multistep checkout
purchases and refunds

Create the Product(s)
MPProduct *product = [[MPProduct alloc] initWithName:@"Foo name"
                                                 sku:@"Foo sku"
                                            quantity:@4
                                               price:@100.00];

Product product = new Product.Builder("Foo name", "Foo sku", 100.00)
        .quantity(4)
        .build();

var product = mParticle.eCommerce.createProduct('Foo name', 'Foo sku', 100.00, 4);

The Product (Android, MobileWeb) and MPProduct (Apple OS) classes should be used to represent a physical or virtual good or service. A single Commerce Event can be associated with multiple products. At minimum all products are required to have a name, an ID (or SKU), and a price. Reference the code samples to the right for how to create a simple product.
Add to Cart Events
Option 1: Use the Cart API
[[MPCart sharedInstance] addProduct:product];

MParticle mp = MParticle.getInstance();
mp.Commerce().cart().add(product, true);

Option 2: Manually log a CommerceEvent
Option 2: Manually log an MPCommerceEvent
MPCommerceEventAction action = MPCommerceEventActionAddToCart;
MPCommerceEvent *event = [[MPCommerceEvent alloc] initWithAction:action
                                                         product:product];
[[MParticle sharedInstance] logCommerceEvent:event];

MParticle mp = MParticle.getInstance();
mp.logEvent(
    new CommerceEvent.Builder(Product.ADD_TO_CART, product).build();
);

mParticle.eCommerce.Cart.add(product, true);

Tracking when a user adds a product to their virtual cart can be very valuable - for example to target and message users if they abandon their cart without purchasing. You can use the Cart API to log these events, or manually create a CommerceEvent with the add-to-cart action.

Whether logging a Commerce Event with the add-to-cart action or using the cart API, the product reference will be added and saved to the singleton cart instance so that it can be reused for future events. You can query and clear the cart at any time.

Checkout Events
Option 1: Use the Commerce API
[[[MParticle sharedInstance] commerce] checkoutWithOptions:@"Mastercard"
                                                      step:1];

//this will log a CommerceEvent with all of the products currently in the cart
mp.Commerce().checkout(1, "Mastercard");

Option 2: Manually log a CommerceEvent
Option 2: Manually log an MPCommerceEvent
MPCommerceEventAction action = MPCommerceEventActionCheckout;
MPCommerceEvent *event = [[MPCommerceEvent alloc] initWithAction:action
                                                         product:product];
event.checkoutStep = 1;
event.checkoutOptions = @"Mastercard";
[[MParticle sharedInstance] logCommerceEvent:event];

CommerceEvent event = new CommerceEvent.Builder(Product.CHECKOUT, product)
                        .checkoutStep(1)
                        .checkoutOptions("Mastercard")
                        .build();
MParticle.getInstance().logEvent(event);

mParticle.eCommerce.logCheckout(1, 'Mastercard');

The mParticle SDK provides several APIs to measure the steps of the checkout process. Some integration partners such as Google Analytics allow you to configure the steps of your checkout process for in-depth analysis.

By using the Commerce API methods you don't have to even have to include the products that are in the users' cart - the products that are in the cart will automatically be added to the generated Commerce Event.

Purchase Events
Create the TransactionAttributes object
Create the MPTransactionAttributes object
MPTransactionAttributes *attributes = [[MPTransactionAttributes alloc] init];
attributes.transactionId = @"foo-transaction-id";
attributes.revenue = @450.00;
attributes.tax = @30.00;
attributes.shipping = @30;

//transaction ID required for PURCHASE and REFUND events
TransactionAttributes attributes = new TransactionAttributes("foo-transaction-id")
    .setRevenue(450.00)
    .setTax(30.00)
    .setShipping(20.00);

Option 1: Use the Commerce API
MPCommerce *commerce = [[MParticle sharedInstance] commerce];
[commerce purchaseWithTransactionAttributes:attributes
                                  clearCart:YES];

//this will log a CommerceEvent with all of the products currently in the cart
MParticle mp = MParticle.getInstance();
mp.Commerce().purchase(attributes);

Option 2: Manually log a CommerceEvent
Option 2: Manually log an MPCommerceEvent
MPCommerceEventAction action = MPCommerceEventActionPurchase;
MPCommerceEvent *event = [[MPCommerceEvent alloc] initWithAction:action
                                                         product:product];
event.transactionAttributes = attributes;
[[MParticle sharedInstance] logCommerceEvent:event];

MParticle mp = MParticle.getInstance();
CommerceEvent event = new CommerceEvent.Builder(Product.PURCHASE, product)
  .transactionAttributes(attributes)
  .build();
mp.logEvent(event);

Tracking purchases and transactions is similar to other product events with the exception that an addition TransactionAttributes (Android) or MPTransactionAttributes (Apple OS) object is required in order to provide the SDK several key dimensions of the transaction. Just as with the actions described above, you can use the Commerce helper APIs, or manually construct a CommerceEvent.
Promotion Events
MPPromotion *promotion = [[MPPromotion alloc] init];
promotion.promotionId = @"my_promo_1";
promotion.creative = @"sale_banner_1";
promotion.name = @"App-wide 50% off sale";
promotion.position = @"dashboard_bottom";

MPPromotionContainer *container = 
    [[MPPromotionContainer alloc] initWithAction:MPPromotionActionView
                                       promotion:promotion];

MPCommerceEvent *event = 
    [[MPCommerceEvent alloc] initWithPromotionContainer:container];

[[MParticle sharedInstance] logCommerceEvent:event];

Promotion promo = new Promotion()
  .setId("my_promo_1")
  .setCreative("sale_banner_1")
  .setName("App-wide 50% off sale")
  .setPosition("dashboard_bottom");
MParticle.getInstance().logEvent(
  new CommerceEvent.Builder(Promotion.VIEW, promo).build()
);

var promotion = mParticle.eCommerce.createPromotion('my_promo_1', 'sale_banner_1', 'App-wide 50% off sale', 1);
mParticle.eCommerce.logPromotion(mParticle.PromotionType.PromotionClick, promotion);

The Promotion (Android, MobileWeb) or MPPromotion (Apple OS) class should be used to represent internal offers - such as sales that might be displayed in a banner advertisement. Promotion events are created by specifying a promotion action string, and one or more promotions. When constructing a promotion it’s recommended to specify at least an ID or a name.
Impression Events
MPCommerceEvent *event = 
    [[MPCommerceEvent alloc] initWithImpressionName:@"suggest products list"
                                            product:product];
[[MParticle sharedInstance] logCommerceEvent:event];

Impression impression = new Impression("suggested products list", product);
MParticle.getInstance().logEvent(
  new CommerceEvent.Builder(impression).build()
);

var impression = mParticle.eCommerce.createImpression('suggested products list', product);
mParticle.eCommerce.logImpression(impression);

Use impressions to represent any time one or more products are displayed on the screen, and optionally specify a name for the location or list in which the products appeared.
eCommerce - Deprecated
The eCommerce APIs described below are deprecated as of the iOS SDK version 4.0 and Android SDK version 3.0. All apps should transition to the new Commerce Event APIs described above.
If your app has a shopping cart, in-app purchases, or similar monetization features, the mParticle SDK can help you track the sequential stages leading to a transaction. A fully instrumented app may track when a user views a product, adds or removes a product to a wish list, adds or removes an item to a shopping cart, and finally when a user commits to a purchase, including in-depth details of the product such as: name, SKU, price, and quantity.
MPProduct
With the JavaScript SDK, there is no MPProduct - simply use the logEcommerceTransaction method:
mParticle.logEcommerceTransaction(productName, 
                                  productSKU, 
                                  productUnitPrice, 
                                  productQuantity, 
                                  productCategory, 
                                  revenueAmount, 
                                  taxAmount, 
                                  shippingAmount, 
                                  currencyCode, 
                                  affiliation, 
                                  transactionId);

Creating an MPProduct
MPProduct implements the java.util.Map interface, and has been designed to facilitate the description of a product or service that an app might make available. This object can be passed to many of the mParticle functions.
An MPProduct object must be created with it’s builder, the MPProduct.Builder class:
MPProduct implements Cocoa Literals/Object Subscripting to behave as an NSMutableDictionary.
MPProduct *product = [[MPProduct alloc] initWithName:@"The next book in my reading list"
                                            category:@"Books and Magazines"
                                            quantity:1
                                         totalAmount:30.00];

product.unitPrice = 28.00;
product.affiliation = @"My favorite retailer";
product.sku = @"xxx-yyy-zzz";
product.taxAmount = 2.00;

product[@"cover"] = @"Paperback"; // Custom key/value pair

MPProduct product = new MPProduct.Builder("The next book in my reading list", "aaa-bbb-ccc")
    .quantity(1)
    .unitPrice(28.00)
    .taxAmount(2.00)
    .totalRevenue(30.00)
    .productCategory("Books and Magazines")
    .currencyCode("USD")
    .affiliation("My favorite retailer")
    .build(); // This is the final step, and returns the created MPProduct
 
// After the MPProduct is built, you may optionally add additional parameters, just as you would to a regular Map.
product.put("cover", "Paperback");

MPProduct product = new MPProduct ("The next book in my reading list", "aaa-bbb-ccc");		
product.Quantity = 1;		
product.UnitPrice = 28.00;		
product.TaxAmount = 2.00;		
product.TotalRevenue = 30.00;		
product.ProductCategory = "Books and Magazines";		
product.CurrencyCode = "USD";		
product.Affiliation = "My favorite retailer";		
 		
//You may optionally add additional parameters, just as you would to a regular Dictionary.		
product.Add ("cover", "Paperback");		

As you track your users’ interactions with your products through common constructs such a wish lists and shopping carts, it is more convenient to have an object representing this product and just pass a reference to it around your code. This avoids having to repeatedly create new product instances and descriptions. MPProduct is a class the mParticle SDK provides to you to facilitate the execution of eCommerce transactions.
MPProduct behaves as a dictionary (or Java Map), storing key/value pairs. It has convenience instance variables and helper methods to get and set all the information pertinent to a product such as name, price, quantity, revenue amount, etc. In addition, it lets you add your own custom key/value pairs to it, as you could regularly do with a dictionary or map.
Wish Lists and Shopping Carts
Using an MPProduct
typedef NS_ENUM(NSInteger, MPProductEvent) {
    MPProductEventView = 0,
    MPProductEventAddedToWishList,
    MPProductEventRemovedFromWishList,
    MPProductEventAddedToCart,
    MPProductEventRemovedFromCart
};

Using an instance of MPProduct with a wish list and shopping cart
MParticle *mParticle = [MParticle sharedInstance];

[mParticle logProductEvent:MPProductEventView product:product];

[mParticle logProductEvent:MPProductEventAddedToWishList product:product];

[mParticle logProductEvent:MPProductEventRemovedFromWishList product:product];

[mParticle logProductEvent:MPProductEventAddedToCart product:product];

And since MPProduct behaves as an NSDictionary, any mParticle SDK method that accepts an NSDictionary, will also accept an MPProduct.
[[MParticle sharedInstance] logEvent:@"Button Tapped"
                           eventType:MPEventTypeOther
                           eventInfo:product];

//Defined within the MPProduct class
public static enum Event {
    VIEW,
    ADD_TO_WISHLIST,
    REMOVE_FROM_WISHLIST,
    ADD_TO_CART,
    REMOVE_FROM_CART;   
}

Using an instance of MPProduct with a wish list and shopping cart
MParticle mp = MParticle.getInstance();

mp.logProductEvent(MPProduct.Event.VIEW, product);

mp.logProductEvent(MPProduct.Event.ADD_TO_WISHLIST, product);

mp.logProductEvent(MPProduct.Event.REMOVE_FROM_WISHLIST, product);

mp.logProductEvent(MPProduct.Event.ADD_TO_CART, product);

And since MPProduct is a Map, any mParticle SDK method that accepts a Map, will also accept an MPProduct.
// Associate this product with any event
MParticle.getInstance().logEvent("Button Tapped", EventType.Other, product);

// It's easy to pass around MPProduct objects, here's how you'd pass the object to a different screen on navigation.
Intent intent = new Intent(this, PostTransactionActivity.class);
intent.putExtra("product", product);
startActivity(intent);

The Unity SDK does not yet support product events via the logProductEvent method. But you can use MPProduct to log eCommerce transactions and/or as a parameter to other SDK methods, to associate a product with other types of events.		
MPProduct is implemented as a Dictionary, any mParticle SDK method that accepts a Dictionary, will also accept an MPProduct.		
// Associate this product with any event		
MParticle.Instance.LogEvent("Button Tapped", EventType.Other, product);		
 		
// Associate this product with a screen view		
MParticle.Instance.LogScreen("Product summary screen", product);		

You should use the logProductEvent to log a product view, or when a product is added and/or removed from a wish list or shopping cart. logProductEvent takes an enumeration indicating the event and an instance of MPProduct.
eCommerce Transactions
// Passing an instance of MPProduct
[[MParticle sharedInstance] logTransaction:product];

or

// Passing each individual parameter
[[MParticle sharedInstance] logTransaction:@"The next book in my reading list"
                               affiliation:@"My favorite retailer"
                                       sku:@"xxx-yyy-zzz"
                                 unitPrice:28.00
                                  quantity:1
                             revenueAmount:30.00
                                 taxAmount:2.00
                            shippingAmount:0
                             transactionId:nil
                           productCategory:@"Books and Magazines"
                              currencyCode:@"USD"];


On Android you can only log eCommerce transactions passing an instance of MPProduct to the logTransaction method.
// Passing an instance of MPProduct
mp.logTransaction(product);

On Unity you can only log eCommerce transactions passing an instance of MPProduct to the logTransaction method.		
MParticle.Instance.LogTransaction (product);		

When it is time to track the purchase of a product, log the transaction using one of the variants of the logTransaction method. You can log a transaction passing an instance of MPProduct or by calling a variant of logTransaction that takes the many characteristics of a product and the transaction as parameters.
User Identity
typedef NS_ENUM(NSUInteger, MPUserIdentity) {
    MPUserIdentityOther = 0,  
    MPUserIdentityCustomerId,
    MPUserIdentityFacebook,     
    MPUserIdentityTwitter,    
    MPUserIdentityGoogle,    
    MPUserIdentityMicrosoft,   
    MPUserIdentityYahoo,     
    MPUserIdentityEmail,    
    MPUserIdentityAlias,
    MPUserIdentityFacebookCustomAudienceId
};

// Associate an internal customer ID with this user/device
[[MParticle sharedInstance] setUserIdentity:@"0123456"
                               identityType:MPUserIdentityCustomerId];

// Retrieving Facebook's App User Id
[FBRequestConnection startForCustomAudienceThirdPartyID:nil
      completionHandler:^(FBRequestConnection *connection, id result, NSError *error) {
          NSString *appUserId = error ? nil : [result objectForKey:@"custom_audience_third_party_id"];
          [[MParticle sharedInstance] setUserIdentity:appUserId
                    identityType:MPUserIdentityFacebookCustomAudienceId];
      }];


public enum IdentityType {
    Other,
    CustomerId,
    Facebook,
    Twitter,
    Google,
    Microsoft,
    Yahoo,
    Email,
    Alias,
    FacebookCustomAudienceId;
}

// Associate an internal customer ID with this user/device
MParticle.getInstance().setUserIdentity("0123456", IdentityType.CustomerId);

IdentityType: {
    Other: 0,
    CustomerId: 1,
    Facebook: 2,
    Twitter: 3,
    Google: 4,
    Microsoft: 5,
    Yahoo: 6,
    Email: 7,
    Alias: 8,
    FacebookCustomAudienceId: 9
}

// Associate an internal customer ID with this user/device
mParticle.setUserIdentity("0123456",
                          mParticle.IdentityType.CustomerId);

public enum UserIdentity		
{		
    Other,		
    CustomerId,		
    Facebook,		
    Twitter,		
    Google,		
    Microsoft,		
    Yahoo,		
    Email,		
    Alias		
};		
		
// Associate an internal customer ID with this user/app		
MParticle.Instance.SetUserIdentity ("0123456", UserIdentity.CustomerId);		

It is often useful to add additional metadata to a user in order to accomplish segmentation and targeting needs. By setting user attributes, tags, and identities, all future events from the given app will be associated with those identifiers, allowing you to categorize, segment, and target your data more accurately.
The mParticle SDKs allows you to manually associate IDs from common third party services with the current user via an enumeration and easy API:



IdentityType
Description




Customer ID
If you have an internal ID for your customer


Email
The user’s email address


Facebook
The user’s Facebook ID


Facebook Custom Audience ID
The user’s Facebook App User ID that can be retrieved through the Facebook SDK


Google
The user’s Google ID


Twitter
The user’s Twitter ID


Microsoft
The user’s Microsoft ID


Yahoo
The user’s Yahoo ID


Alias(*)
Used to associate a known user to a device ID captured pre-signup


Other
Any other identifier that can contribute to user identification



The user identity type Alias has a special meaning and usage. It should be used when a user first signs up. This identity type is used to link a new user ID to a device ID used to track the user pre-signup. It is very important to remember when using Alias that you should only set it once - when a new user signs up. Moreover, if a user changes their signup ID, the Alias user identity can be used to tie the new user ID to the previous one.
User Tags and Attributes
// Associate a simple tag with a user
[[MParticle sharedInstance] setUserTag:@"any string"];

// Associate a key/value pair with a user
[[MParticle sharedInstance] setUserAttribute:@"LOYALTY_LEVEL"
                                       value:@"GOLD"];

// Associate a key/array pair with a user
[[MParticle sharedInstance] setUserAttribute:@"Favorite Fruits"
                                      values:@[@"Apple", @"Orange", @"Peach"]];

// Get all user attributes
NSDictionary<NSString *, id> *userAttributes = [MParticle sharedInstance].userAttributes;

User attribute values can be of the following data types: NSString or NSNumber.
[[MParticle sharedInstance] incrementUserAttribute:@"badge"
                                           byValue:@1];

MParticle mp = MParticle.getInstance();

//associate a simple tag with a user
mp.setUserTag("any string");

//associate a key/value pair with a user
mp.setUserAttribute("membership type", "premium");

//increment a user attribute by an integer value
mp.incrementUserAttribute("badge", 1);

//associate a list of values with an attribute key
List<String> attributeList = new ArrayList<>();
attributeList.add("Apple");
attributeList.add("Orange");
attributeList.add("Peach");
mp.setUserAttributeList("Favorite Fruits", attributeList);

//if called on main thread, this method is asynchronous while querying the database
mp.getAllUserAttributes(new UserAttributeListener() {
    @Override
    public void onUserAttributesReceived(Map<String, String> userAttributes, Map<String, List<String>> userAttributeLists) {

    }
});

//the following methods will all *synchronously* query the database

//Get any non-list attributes
Map<String, String> regularAttributes = mp.getUserAttributes();

//Get all attributes: Object could be a String or a List<String>
Map<String, Object> allAttributes = mp.getAllUserAttributes();

//Get list attributes
Map<String, List<String>> listAttributes = mp.getUserAttributeLists();

//associate a simple tag with a user		
MParticle.Instance.SetUserTag ("any string");		
		
//associate a key/value pair with a user		
MParticle.Instance.SetUserAttribute ("membership type", "premium");		

//associate a simple tag with a user
mParticle.setUserTag("any string");

//associate a key/value pair with a user
mParticle.setUserAttribute("membership type", "premium");

//user attribute lists
mParticle.setUserAttributeList('favorite colors', ['red', 'green', 'blue']);

var attributeLists = mParticle.getUserAttributesLists();

mParticle and various integrations allow for user targeting and segmentation via user attributes or tagging, which is made easy by the mParticle SDK through the use of tags, attributes and attribute lists.  
Planning best practices contains details on naming your events and attributes.
The Apple and Android SDKs also support incrementing numeric user attributes by a certain amount. For example, if a user earned a new badge playing a game, you may choose to increment the badge count by 1.  
If you are passing a comma separated set of values as an attribute value, you can modify your app code to use user attribute lists.  
Reference the code samples to the right for some examples.  
Below is a list of mParticle reserved user attributes that can be set:

Age
First Name
Last Name
Gender
Mobile Number
Address
City
State
Zip Code
Country

Reference the following Android and Apple documents for setting these reserved user attributes.
Location Tracking
It’s common that developer share the same code between a Unity app for iOS and a Unity app for Android. To best support this, the Unity SDK provides an abstraction layer to allow you to use the same Unity c-sharp code. The LocationRange enumeration will be translated to it’s closest meaning, depending on the run-time platform.		
//On Android, GPS, Network, and Passive correlate 1-1		
//with the native Android location provider types,		
//which are themselves a proxy for accuracy.		
		
		
//On iOS, the values of this enumeration correlate to		
//the minimum accuracy in meters required of an acceptable location.		
		
public enum LocationRange {		
    GPS = 1,		
    Network = 500,		
    Passive = 3000		
};		

//On Android, minimum distance correlates to the minimum		
//distance required between individual location updates.		
		
//On iOS, minimumDistance is not used.		
MParticle.Instance.BeginLocationTracking (LocationRange.Network,		
                                          minimumTime,		
                                          minimumDistance);		
		
//Ends tracking location		
MParticle.Instance.EndLocationTracking ();		

// Begins tracking location
[[MParticle sharedInstance] beginLocationTracking:kCLLocationAccuracyThreeKilometers
                                      minDistance:1000];

// Ends tracking location
[[MParticle sharedInstance] endLocationTracking];

Setting the location property directly
- (void)updateLocation:(CLLocation *)newLocation {        
    [MParticle sharedInstance].location = newLocation;    
}

Specify a provider and minimum time (milliseconds) and minimum distance (meters) between location updates.

MParticle.getInstance().enableLocationTracking(LocationManager.NETWORK_PROVIDER, 30*1000, 100);

//alternatively, an application can manage it's own location updates
//and manually set an android.location.Location object
MParticle.getInstance().setLocation(someLocation);

See the link below for more info on available providers and the permissions that are required for those providers.
http://developer.android.com/reference/android/location/LocationManager.html
This will initialize the HTML 5 Location tracking. User will be prompted to allow access to location. The mParticle SDK will then start listening to the location events. Thereafter, the location will be appended to events are sent to the mParticle servers.
mParticle.startTrackingLocation();

Stop collection of location.
mParticle.stopTrackingLocation();

Use this function to manually set the coordinates that were retrieved from another source.
mParticle.setPosition(40.71, 74.00);

In many cases it’s important to log the location of a user and associate that location with other events. The mParticle SDK allows you to include detailed location information with all of your events.
There are two ways to approach location tracking:
1. You can call the beginLocationTracking method and let the mParticle SDK collect and update location information for you. Remember to call endLocationTracking when you no longer need to track location
2. Set the location property directly. In this case you are responsible for maintaining location updated and setting it to nil/null when no longer needed
iOS
[MParticle sharedInstance].backgroundLocationTracking = NO;

Starting with iOS 8 not only a user has to give permission to an app to use their location, they also need to give permission when location tracking is active after the app has gone to the background (iOS 8 will prompt the user with a new location permission dialog.) The backgroundLocationTracking property enables or disables the inclusion of location information to events when your app is running on the background. The default value is YES. Setting it to NO will cause the SDK to stop including location information when your app is running in the background and resumes the inclusion of location information when the app comes back to the foreground.
This way you can fine tune the location tracking behavior and which permission dialogs are displayed by the O.S., since even apps compiled with iOS versions prior to 8 would trigger this new dialog to be displayed to a user of your app.
tvOS
Location tracking is not supported for tvOS.
Segments
[[MParticle sharedInstance] userSegments:0.5
                              endpointId:@"1234567890"
                       completionHandler:^(MPUserSegments *userSegments, NSError *error) {
                           NSMutableString *userSegmentsDescription = [[NSMutableString alloc] init];
                           if (userSegments) {
                               [userSegmentsDescription appendString:@"user segments: "];
                               [userSegmentsDescription appendString:[userSegments commaSeparatedSegments]];
                           } else {
                               [userSegmentsDescription appendString:@"No User Segments Available."];
                           }
                             
                           [[[UIAlertView alloc] initWithTitle:@"User Segments"
                                                       message:userSegmentsDescription
                                                      delegate:nil
                                             cancelButtonTitle:@"Ok"
                                             otherButtonTitles:nil]
                            show];
                      }];

long timeout = 500; //500 millisecond timeout
MParticle.getInstance().getUserSegments(timeout, "1234567890", new SegmentListener() {
    @Override
    public void onSegmentsRetrieved(SegmentMembership segmentMembership) {
        //retrieve a list of the individual segments and inspect them individually
        ArrayList<Segment> segments = segmentMembership.getSegments();
        
        //SegmentMembership overrides toString() to provide a convenient comma-separated list of IDs
        String ids = segmentMembership.toString();
    }
});

Support for segments in the JavaScript SDK is coming soon.
If segments could not be retrieved or if your company is configured not to allow segments, the callback handler will return an NSError with a reason for the failure.
Your company may use segments to target groups of users in sending push notifications, email campaigns, or advertising campaign. Segments define your target audience to be reached. If your organization has segments enabled (default), you may fetch user segments configured for your app using the SDK. The result returned by the SDK is an array of segment IDs, optionally filtered by given endpoint ID.
User segment requests are done asynchronously and allow a timeout to be specified. When your app makes a user segment request, if for any reason (slow network speed, lack of network coverage, etc) the SDK does not receive a response back within the timeout period specified, the SDK will invoke the completion method with a cached version of the user segment, or with an empty user segment (if the local cache is expired or non-existent). In all cases, once a response containing user segments arrives, it will update the local cache for future requests.
The example shows a request to retrieve segments with the endpoint id “1234567890” and with a timeout of 0.5 seconds (500 milliseconds).
Advertisement Providers
Google Mobile Ads
- (void)createRequestWithCompletionHandler:(void(^)(GADRequest *request))completionHandler {
    [[MParticle sharedInstance] userSegments:0.1
                                  endpointId:@"%reference_key%"
                           completionHandler:^(MPUserSegments *userSegments, NSError *error) {
                               if (error == nil) {
                                   GADRequest *request = [GADRequest request];
                                   DFPExtras *extras = [[DFPExtras alloc] init];
                                   extras.additionalParameters = @{@"Age": @"25",
                                                                   @"Color":@"Blue,Green,Red",
                                                                   @"MP-Segments":[userSegments commaSeparatedSegments]};
                                   [request registerAdNetworkExtras:extras];
                                   completionHandler(request);
                               } else {
                                   NSString *message = error.userInfo[@"message"];
                                   NSLog(@"Error with message: %@", message);
                               }
                           }];
}

public class BannerExample extends Activity implements SegmentListener {
    private PublisherAdView adView;
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
 
        // Create the adView
        adView = new PublisherAdView(this);
     
        long timeout = 500;
        String endpoint = "null";
        MParticle.getInstance().getUserSegments(timeout, endpoint, this);
    }
 
    @Override
    public void onSegmentsRetrieved(SegmentMembership segmentMembership) {
        //Generate the PublisherAdRequest with the SegmentMembership
        Bundle bundle = new Bundle();
        bundle.putString("MP-Segment", segmentMembership.toString());
        PublisherAdRequest request = new PublisherAdRequest.Builder()
                .addNetworkExtras(new AdMobExtras(bundle))
                .build();
 
        //Load the Ad with the PublisherAdRequest
        adView.loadAd(request);
    }
}

MoPub
- (void)loadAdView {
    [[MParticle sharedInstance] userSegments:0.1
                                  endpointId:@"%reference_key%"
                           completionHandler:^(MPUserSegments *userSegments, NSError *error) {
                               if (error == nil) {
                                   NSMutableString *keyValueKeywords = [[NSMutableString alloc] init];
                                   
                                   // Creates the key:value pairs
                                   for (NSString *segmentId in userSegments.segmentsIds) {
                                       [keyValueKeywords appendString:@"MP-Segment:"];
                                       [keyValueKeywords appendString:segmentId];
                                       [keyValueKeywords appendString:@","];
                                   }
                                   [keyValueKeywords deleteCharactersInRange:NSMakeRange([keyValueKeywords length] - 1, 1)]; // Removes the trailing comma
                                   
                                   self.moPubAdView.keywords = keyValueKeywords;
                                   [self.moPubAdView loadAd];
                               } else {
                                   NSString *message = error.userInfo[@"message"];
                                   NSLog(@"Error with message: %@", message);
                               }
                           }];
}

import com.mparticle.MParticle;
import com.mparticle.segmentation.*;
 
public class BannerExample extends Activity implements SegmentListener {
    private MoPubView moPubView;
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main); //contains a <com.mopub.mobileads.MoPubView/> definition
 
        // Retrieve a reference to the MoPubView
        moPubView = (MoPubView) findViewById(R.id.adview);
        moPubView.setAdUnitId("xxxxxxxxxxx"); // Enter your Ad Unit ID from www.mopub.com
     
        long timeout = 500;
        String endpoint = "%reference_key%"; 
        MParticle.getInstance().getUserSegments(timeout, endpoint, this);
    }
 
    @Override
    public void onSegmentsRetrieved(SegmentMembership segmentMembership) {
        //Add mParticle SegmentMembership as comma-separated keywords
        StringBuilder keywords = new StringBuilder();
        for (Segment segment : segmentMembership.getSegments()) {
            keywords.append("MP-Segment:");
            keywords.append(segment.getId());
            keywords.append(",");
        }
        keywords.deleteCharAt(keywords.length()-1); //delete the trailing comma
        
        moPubView.setKeywords(keywords.toString());
        moPubView.loadAd();
    }
}

The SDKs provide convenience methods to concatenate all retrieved segments into a comma-separated string. This is particularly useful to add segments as tags to advertisement banners. For example, if you are using Google Mobile Ads or MoPub you could use one of the following sample codes to tag ads.
Push Notifications
Both the iOS and Android SDKs support the delivery, presentation, and logging of push notification messages. Each platform has unique requirements in terms of setup either in Apple’s Dev Center or Google’s API console.
iOS
For example, let’s say you want to register your app to receive remote notifications that change the app’s badges, play a sound, and display an alert.
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [[MParticle sharedInstance] startWithKey:@"Your Key"
                                      secret:@"Your Secret"];

    if ([[UIDevice currentDevice].systemVersion floatValue] >= 8.0) {
        UIUserNotificationSettings *settings;
        settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeBadge |
                                                                UIUserNotificationTypeSound |
                                                                UIUserNotificationTypeAlert
                                                     categories:nil];

        [application registerUserNotificationSettings:settings];
        [application registerForRemoteNotifications];
    } else {
        [application registerForRemoteNotificationTypes:UIRemoteNotificationTypeBadge |
                                                        UIRemoteNotificationTypeSound |
                                                        UIRemoteNotificationTypeAlert];
    }

    return YES;
}

If you offer push notifications in your application, the mParticle platform allows you to integrate with remote notification integrations enabling you to target segments of users and measure the effectiviness of your messaging campaigns. Register to receive remote notifications by calling UIApplication’s registerForRemoteNotificationTypes: method. The mParticle SDK handles the device token and the receiving of notifications automatically.
iOS 10
Apple has introduced a new way to handle push notifications in iOS 10. A new protocol UNUserNotificationCenterDelegate, which contains two optional methods. The mParticle SDK has also published two new public methods with signature very similar to Apple’s own.
- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler {
    [[MParticle sharedInstance] userNotificationCenter:center willPresentNotification:notification];
}

- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler {
    [[MParticle sharedInstance] userNotificationCenter:center didReceiveNotificationResponse:response];
}

If you implement one or two of those new delegate methods, you will need to call the equivalent method in the mParticle SDK as shown in the sample code.
tvOS
Push notifications are not currently supported for tvOS.
Android
Setup a Google Console Project
The mParticle SDK can be configured to receive, show, and track the results of push notifications (sent via Google’s Cloud Messaging framework) from various integrations such as Urban Airship and Mixpanel. These integrations communicate with the GCM framework using credentials acquired from the Google Cloud console. The two important pieces of information to acquire are the sender ID associated with a Google Console project, and a public key.

To get started, navigate to https://cloud.google.com/console/project and sign in using a Google account associated with your organization.
Either select a current project or create a new project.
Under the project’s overview, copy the “Project Number” - this is the sender ID which will be needed to properly configure the mParticle SDK. This number is also visible in the project’s URL.
Navigate to the “APIs & auth” -> “APIs” section of the console project, scroll down to “Google Cloud Messaging for Android” and turn it ON:

Navigate to the “Credentials” section of the project and select “CREATE NEW KEY” under the “Public API access” section, then select “Server key” in the subsequent dialog.
Leave the server IP addresses blank to allow requests from all providers/servers GCM client servers and then select “Create”.
You should now have a new public API access key, copy the value of the “API key” - this value is needed to configure Urban Airship, Mixpanel, or other integrations.

Enable push in your Android SDK configuration
Android: Push is disabled by default, enable it in an application’s configuration with the mp_enablePush and mp_pushSenderId options:
<bool name="mp_enablePush">true</bool>
<!--Copy/paste your Google Cloud console project number -->
<string name="mp_pushSenderId">YOUR SENDER ID</string>

Alternatively, enable or disable GCM notifications programmatically:
//enable push
mp.Messaging().enablePushNotifications("YOUR SENDER ID");

//disable push
mp.Messaging().disablePushNotifications();

View the code sample to see how to use either XML or Java to enable push.
Add the mParticle Service and BroadcastReceiver
Sample AndroidManifest.xml
<receiver
    android:name="com.mparticle.MPReceiver"
    android:permission="com.google.android.c2dm.permission.SEND">
    <intent-filter>
        <action android:name="com.google.android.c2dm.intent.RECEIVE" />

        <!-- Use your package name as the category -->
        <category android:name="YOURPACKAGENAME" />
    </intent-filter>
</receiver>
<!-- This is the service that does the heavy lifting in parsing, showing, and tracking GCM notifications. -->
<service android:name="com.mparticle.MPService" />

View the XML sample for how to adjust the <application> section of the application’s AndroidManifest.xml file.
(Optional) Create your own receiver to listen for notification actions
First create a class that extends the Android SDK’s PushAnalyticsReceiver BroadcastReceiver class:
public class MyReceiver extends PushAnalyticsReceiver {

    @Override
    protected boolean onNotificationReceived(AbstractCloudMessage message) {
        return super.onNotificationReceived(message);
    }

    @Override
    protected boolean onNotificationTapped(AbstractCloudMessage message, CloudAction action) {
        return super.onNotificationTapped(message, action);
    }
}

Then, add the receiver  to the <application> section of your application’s AndroidManifest.xml, be sure to replace YOURPACKAGENAME:
 <!-- Change the name to the fully qualified package and class name of your new BroadcastReceiver -->
<receiver android:name="com.some.package.MyReceiver" android:exported="true">
    <intent-filter>
        <action android:name="com.mparticle.push.RECEIVE" />
        <action android:name="com.mparticle.push.TAP" />
        <category android:name="YOURPACKAGENAME"/>
    </intent-filter>
</receiver>

Although the Android mParticle SDK will handle showing and tracking push notifications, an app can additionally listen for when a notification is received or tapped. mParticle broadcasts these actions securely so that only applications specifying special permissions can receive them.
The mParticle SDK is able to parse notifications from varios integrations such as Urban Airship and Mixpanel. It provides the parsed message via an instance in the `AbstractCloudMessage` object. This allows an organization to switch GCM service providers, or use different service providers by user segment, without having to alter an application's code!
Session Management
The mParticle platform leverages the concept of a user session, which is meant to represent a common pattern whereby a given user opens an app and interacts with it for a period of time, and then eventually moves on to another app or stops using their device. Different integrations use sessions for the similar purpose of grouping user interactions and deriving insights from these groupings. The mParticle platform translates the sessions it detects into each integrations equivalent.
Although the mParticle SDKs ship with sensible default parameters by which sessions are derived, the SDKs also provide APIs to allow developers custom session control. The first customization lever that developers have is known as the session timeout.
Session Timeout
//Set the session timeout in seconds up to a max of 120
[MParticle sharedInstance].sessionTimeout = 60;
 
//or
 
[[MParticle sharedInstance] setSessionTimeout:60];

MParticle.Instance.SessionTimeout = 60;		
  		  
//or 		
		
MParticle.Instance.SetSessionTimeout(60);		

Programmatically in Java:
//set the session production timeout in seconds
MParticle.getInstance().setSessionTimout(60);

Alternatively via XML configuration:
<integer name="mp_sessionTimeout">60</integer>

When a user launches your app, the mParticle SDK will begin a new session. The same session is maintained for as long as your app is in the foreground and all events logged during this time will be associated with the same session. If a user navigates away, or sends your app to the background, the SDK starts a timer to expire the current session. If, however, the user brings your app back to the foreground before the session times out, the same session is continued. Otherwise the session will expire and the next time the app is used a new session will be created. By default the session timeout is 60 seconds for both iOS and Android, but can be customized.
See the examples for details of how to customize the session timeout for your platform.
In iOS, if an application is allowed to continue running in the background for long periods of time, such as media playing or recording, and map based applications, the current session will not expire for as long as the media or maps operations are active. Once those activities are paused or stopped, the session timeout will start ticking and the session will expire after it times out. If, however, the activity resumes before the session times out, the session will also be resumed. For iOS, the maximum allowed session timeout is 120 seconds.
We've observed a common pattern whereby users launch an app, do whatever they need to do, and forcibly terminate the app. The mParticle SDK handles this situation gracefully. When an app is terminated before a session had the chance to end itself, the SDK will end that session and start a new one the next time the app is launched. 

The SDK logs when an app is launched, sent to the background, resumed to the foreground, and/or terminated. Those state transitions are not only sent to the server, but also they help to identify user sessions.

Session Attributes
[[MParticle sharedInstance] setSessionAttribute:@"level_achieved"
                                          value:@11];

Session attribute values can be of the following data types: NSString or NSNumber.
MParticle.getInstance().setSessionAttribute("level_achieved", "11");

//increment a session attribute by an integer value
MParticle.getInstance().incrementSessionAttribute("level_achieved", 1);

MParticle.Instance.SetSessionAttribute("level_achieved", "11");		

mParticle.setSessionAttribute("level_achieved", "11");

You can associate attributes with a session. When the user’s session times out (when they navigate away from your app for a period of time), these attributes will be reset.
[[MParticle sharedInstance] incrementSessionAttribute:@"song_count"
                                              byValue:@1];

You can also increment numeric session attributes by a certain amount. For example, if a user is listening to music on her device, you may choose to increment the song count by 1 every time a new song starts playing.
Opt-Out
Enable opt-out either via your app’s configuration in the mParticle console, or by calling the following API method:
MParticle.getInstance().setOptOut(true);

MParticle.Instance.OptOut = true;		

[MParticle sharedInstance].optOut = YES;

mParticle.setOptOut(true);

The mParticle SDKs support the ability to selectively opt-out users from all tracking features. When opt-out is enabled, no event data will be communicated from the SDKs.

Session Lifetime Notifications (iOS and tvOS)
- (void)registerForSessionNotifications {
    NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];

    [notificationCenter addObserver:self
                           selector:@selector(handleSessionDidBegin:)
                               name:mParticleSessionDidBeginNotification
                             object:nil];

    [notificationCenter addObserver:self
                           selector:@selector(handleSessionDidEnd:)
                               name:mParticleSessionDidEndNotification
                             object:nil];
}

- (void)handleSessionDidBegin:(NSNotification *)notification {
    NSDictionary *userInfo = [notification userInfo];
    NSLog(@"New session has begun. Id: %@", userInfo[mParticleSessionId]);
}

- (void)handleSessionDidEnd:(NSNotification *)notification {
    NSDictionary *userInfo = [notification userInfo];
    NSLog(@"Session id %@ will end.", userInfo[mParticleSessionId]);
}

You can register to receive notifications from the mParticle SDK when a new session begins or when the current session is about to end. The registration is done in the NSNotificationCenter using the mParticleSessionDidBeginNotification and mParticleSessionDidEndNotification name constants.  The notifications contain a userInfo dictionary containing the session id in question. You can access its value by using the mParticleSessionId key constant.
Surveys
NSString *surveyURL = [[MParticle sharedInstance] surveyURL:MPSurveyProviderForesee];

Uri surveyUrl = MParticle.getInstance().getSurveyUrl(MParticle.ServiceProviders.FORESEE_ID);

Support for Unity coming soon.		

Support for the JavaScript SDK coming soon.

You can use the mParticle SDK to integrate with an in-app user survey integration. After having configured the supported integration, you can retrieve a URL to be shown within a WebView. The mParticle SDK will automatically build the URL to include the required parameters of the desired integration. 
Some survey providers such as ForeSee support adding additional user parameters to their respective survey URLs. The mParticle SDK will automatically include any user attributes or tags you may have previously specified for the given user, without any additional work. 
Where appropriate for your app’s user experience, call the method to obtain a survey URL, specifying the desired integration, and load the URL into a WebView to retrieve the user’s feedback.
Currently supported survey providers:

ForeSee
Wootric

Network Performance Measurement
Enable this feature in the Android SDK via XML configuration:
<bool name="mp_enableNetworkPerformanceMeasurement">true</bool>

Begin measuring network performance programmatically:
// Begins measuring network performance
[[MParticle sharedInstance] beginMeasuringNetworkPerformance];

// Ends measuring network performance
[[MParticle sharedInstance] endMeasuringNetworkPerformance];

// Begins measuring network performance
MParticle.getInstance().beginMeasuringNetworkPerformance();

// Ends measuring network performance
MParticle.getInstance().endMeasuringNetworkPerformance();

// Begins measuring network performance		
MParticle.Instance.BeginMeasuringNetworkPerformance ();		
  		  
// Ends measuring network performance		
MParticle.Instance.EndMeasuringNetworkPerformance ();		

In cases where some URLs should not have network performance measured, you can inform the mParticle SDK to ignore them.
// You may call this method multiple times, passing one URL at a time.
NSURL *url = [NSURL URLWithString:@"http://www.example.com"];

[[MParticle sharedInstance] excludeURLFromNetworkPerformanceMeasuring:url];

// You may call this method multiple times, passing one URL string at a time.
MParticle.getInstance().excludeUrlFromNetworkPerformanceMeasurement("example.com");

// You may call this method multiple times, passing one URL string at a time.		
MParticle.Instance.ExcludeUrlFromNetworkPerformanceMeasurement ("example.com");	

By defaults, the mParticle SDK strips query strings from URLs for privacy purposes, however you may want to specifically include some query strings in messages sent to the server, specify a filter informing which query strings should be included:
// This method can be called repeatedly for different query filters
// in this example, the app will include the full URL query string 
// for any URL containing the given substring
[[MParticle sharedInstance] preserveQueryMeasuringNetworkPerformance:@"age="];

// It's also possible to remove all of the previously excluded URLs and query filters
[[MParticle sharedInstance] resetNetworkPerformanceExclusionsAndFilters];

//this method can be called repeatedly for different query filters
//in this example, the app will include the full URL query string 
//for any URL containing the given substring
MParticle.getInstance().addNetworkPerformanceQueryOnlyFilter("age=");
 
//it's also possible to remove all of the previously excluded URLs and query filters
MParticle.getInstance().resetNetworkPerformanceExclusionsAndFilters();

Unity Manual Measurement
string url = "http://www.example.com";		
long startTime = 12345678;       // start time of the request in milliseconds since the epoch		
string httpMethod = "GET";		
long length = 123;               // the time taken by this request in milliseconds		
long bytesSent = 123;            // how many total bytes were sent		
long bytesReceived = 123;        // how many total bytes were received		
MParticle.Instance.LogNetworkPerformance (url, startTime, httpMethod, length, bytesSent, bytesReceived);		

Efficiency of network communication can be an important factor in determining the performance of your app. Measuring the number of bytes sent and received, response time, response code, etc., will help you better understand the circumstances under which your app is being used, and allow you to optimize your app for the best possible performance. The contents of network requests are never inspected - only the high-level details of the HTTP traffic is collected.
Android
The Android SDK is able to measure performance generated by java.net.HttpURLConnection, org.apache.http.impl.client.DefaultHttpClient, and android.net.http.AndroidHttpClient.
iOS
The iOS SDK is able to measure an app’s network performance generated by NSURLConnection, and a select number of methods from NSURLSession returning a subclass of the NSURLSessionTask class (i.e.,  NSURLSessionDataTask, NSURLSessionUploadTask, and NSURLSessionDownloadTask.) 
This is the list of methods from NSURLSession where network performance measurement is supported:
– dataTaskWithURL:completionHandler: 
– dataTaskWithRequest:completionHandler: 
– downloadTaskWithURL:completionHandler: 
– downloadTaskWithRequest:completionHandler: 
– uploadTaskWithRequest:fromData:completionHandler: 
– uploadTaskWithRequest:fromFile:completionHandler:
tvOS
Network Performance Measurement is not currently supported for tvOS.
Android on Unity
On Android only, the Unity SDK can automatically measure an app’s network performance generated by the Unity WWW class.		
Social Networks
The mParticle SDK requests access to a user’s social network provider purely to gather a user’s ID with the given social network, and associate that ID with the user’s mParticle identity. No other action is taken. Only the most basic access level is requested. If your app needs to interact with a user’s social network in any other way, you should do so using the social network respective SDK or the frameworks provided by your O.S. platform.
iOS and tvOS
MPSocialNetworks socialNetworks = MPSocialNetworksFacebook | MPSocialNetworksTwitter;

[[MParticle sharedInstance] askForAccessToSocialNetworks:socialNetworks
           completionHandler:^(MPSocialNetworks socialNetwork, BOOL granted, NSError *error) {
               NSString *socialNetworkName;
               switch (socialNetwork) {
                   case MPSocialNetworksFacebook:
                       socialNetworkName = @"Facebook";
                       break;
                       
                   case MPSocialNetworksTwitter:
                       socialNetworkName = @"Twitter";
                       break;
               }

               NSString *message = granted ? @"Access Granted" : [error description];
               
               [[[UIAlertView alloc] initWithTitle:socialNetworkName
                                           message:message
                                          delegate:nil
                                 cancelButtonTitle:@"Ok"
                                 otherButtonTitles:nil]
                show];
           }];

Your app requests access to a user’s social network by calling the askForAccessToSocialNetworks:completionHandler: method. Pass one or more social networks you want to request access to, and the method will call the completion handler block once per social network with the respective result. Facebook and Twitter are supported in the latest version of the Apple SDK.
The request can be made to one or multiple social networks at once. To request more than one social network, pass the list of social networks as a bit mask (using the bitwise or “|” operator). The completion handler will be invoked once per social network requested. In the case of our example, the completion handler block will be invoked once for Facebook and once for Twitter.
Android
Social network support coming soon to Android.
Web View Integration
See the JavaScript SDK Getting Started section for how to properly leverage the mParticle SDKs within an iOS UIWebView or Android WebView.
Although it's recommended that Android developers leverage the JavaScript SDK within WebViews, Android's WebView APIs allow arbitrary java objects to be added to a WebView's scope, such as the mParticle singleton.
﻿

Kits
Although the majority of mParticle event integrations are entirely server-side, the mParticle SDK does do some client-side data forwarding. The mParticle SDK works with latest versions of these kits, but just as with other integrations, you are not required to write any client-side code to leverage them. As with other integrations, you should enable and configure the kits listed below on the Services page for your application.
Refer to the iOS and Android SDK GitHub repositories for configuring these kits with the mParticle SDK into your app.
Here is the List of All Currently Supported Kits

Adjust
Appboy
AppsFlyer
Apptentive
Apptimize
Apteligent
Branch Metrics
Button
comScore
Foresee
Flurry
Iterable
Kahuna
Kochava
Leanplum
Localytics
Primer
Radar
Reveal Mobile
Skyhook
Tune
Urban Airship
Wootric


  Although you may use the classes and methods of these kits directly, be careful not to log the same event, for example, via the mParticle SDK and a kit - the mParticle SDK will automatically call the appropriate method in any enabled kit for you. Also remember that the more service-specific code you maintain on the client side, the less flexible your application will be with respect to adding and/or removing services without a client-side code change.

Kits are not currently available for tvOS.
Making direct calls to Kits
If you need to access or use a kit method or functionality not covered by the mParticle SDK, you can obtain the respective internal instance by calling the kitInstance method, passing an enum with the instance you are interested. The method will return the instance in question, or nil/null if the kit is not active.
For the cases where a kit is implemented with class methods, you can call those class methods directly.
#import <AppboyKit.h>

- (void)refreshFeed {
    Appboy *appboy = [[MParticle sharedInstance] kitInstance:MPKitInstanceAppboy];
    if (appboy) {
        [appboy requestFeedRefresh];
    }
}

Since most providers have several classes/objects that expose their APIs, the Android SDK provides a simple check that you can rely on to ensure that a provider is active. If a provider is active, you can reliably call its APIs directly.
private void refreshFeed {
    if (MParticle.getInstance().isKitActive(ServiceProviders.APPBOY)) {
        Appboy.getInstance(this).requestFeedRefresh();
    }
}

The mParticle SDK only instantiates kits that are configured for your app. Since services can be turned on and off dynamically, if you need to access a kit API directly, you must make sure that the given services is currently active.












You can also verify at any given moment if a kit is active and enabled to be used in your app.
if ([[MParticle sharedInstance] isKitActive:MPKitInstanceAppboy]) {
    // Do something
}

Kit Availability and Unavailability Notifications
- (void)awakeFromNib {
    [super awakeFromNib];

    NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
    [notificationCenter addObserver:self
                           selector:@selector(handleKitDidBecomeActive:)
                               name:mParticleKitDidBecomeActiveNotification
                             object:nil];

    [notificationCenter addObserver:self
                           selector:@selector(handleKitDidBecomeInactive:)
                               name:mParticleKitDidBecomeInactiveNotification
                             object:nil];
}

- (void)dealloc {
    NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
    [notificationCenter removeObserver:self
                                  name:mParticleKitDidBecomeActiveNotification
                                object:nil];

    [notificationCenter removeObserver:self
                                  name:mParticleKitDidBecomeInactiveNotification
                                object:nil];
}

- (void)handleKitDidBecomeActive:(NSNotification *)notification {
    NSDictionary *userInfo = [notification userInfo];
    NSNumber *kitNumber = userInfo[mParticleKitInstanceKey];
    MPKitInstance kitInstance = (MPKitInstance)[kitNumber integerValue];

    if (kitInstance == MPKitInstanceAppboy) {
        NSLog(@"Appboy is available for use.");
    }
}

- (void)handleKitDidBecomeInactive:(NSNotification *)notification {
    NSDictionary *userInfo = [notification userInfo];
    NSNumber *kitNumber = userInfo[mParticleKitInstanceKey];
    MPKitInstance kitInstance = (MPKitInstance)[kitNumber integerValue];

    if (kitInstance == MPKitInstanceAppboy) {
        NSLog(@"Appboy is unavailable for use.");
    }
}


//Use the BROADCAST_ACTIVE and BROADCAST_DISABLED actions, concatenated with the provider ID
IntentFilter filter = new IntentFilter(MParticle.ServiceProviders.BROADCAST_ACTIVE + MParticle.ServiceProviders.APPBOY);
filter.addAction(MParticle.ServiceProviders.BROADCAST_DISABLED + MParticle.ServiceProviders.APPBOY);
this.registerReceiver(new BroadcastReceiver() {
  @Override
  public void onReceive(Context context, Intent intent) {

     if (intent.getAction().startsWith(MParticle.ServiceProviders.BROADCAST_ACTIVE)){
       //make a direct Appboy API call, or set a boolean field that you can check elsewhere
     }else{
       //the provider has been deactivated, avoid future calls to it
     }
  }
}, filter);

The mParticle SDK also allows you to listen for notifications asynchronously, avoiding the need to repeatedly check if a kit is active or inactive.
In iOS this is done via system notifications, and similarly on Android broadcasts are used.
Deep Linking
[[MParticle sharedInstance] checkForDeferredDeepLinkWithCompletionHandler:^(NSDictionary<NSString *, NSString *> * _Nullable linkInfo, NSError * _Nullable error) {
    if (error) {
        NSLog(@"%@", error);
    } else {
      //a deep link may also contain a set of keys/values, depending on the integration
      if (linkInfo && [linkInfo[@"my_custom_key"] isEqualToString:@"custom value"]) {
          //send user to intended path
      }
    }
}];

//Add a variation of this code in your launch Activity
MParticle.getInstance().checkForDeepLink(new DeepLinkListener() {
  @Override
  public void onResult(DeepLinkResult result) {
      //a deep link could contain the link itself that can be parsed and reacted to.
      if (result.getLink().contains("/example/path")) {
          //send user to intended path
      }
      //a deep link may also contain a set of keys/values, depending on the integration
      if (result.getParameters().get("my_custom_key").equals("custom value")) {
          //send user to intended path
      }
  }

  @Override
  public void onError(DeepLinkError error) {
      //if an integration has an error, it will be surfaced via a DeepLinkError.
      Log.d("my log tag", error.toString());
  }
});

Several integrations support the creation and attribution of deep links to install and open an app. A deep link will typically contain some additional information to be used when the user ultimately opens your application, so that you can properly route the user to the appropriate content, or otherwise customize their experience.
The mParticle SDKs offer an integration-agnostic API that lets you query your integrations at runtime to determine if the given user arrived by way of a deep link.
The following integrations support deep linking:

Branch Metrics
Button
Iterable
Tune

Debug Mode
[MParticle sharedInstance].debugMode = YES;

Via XML configuration:
<bool name="mp_enableDebugMode">true</bool>

Via the Java API:
MParticle.getInstance().setDebugMode(true);

MParticle.Instance.DebugMode = True;		

When the JavaScript SDK is wrapped and bound by either the iOS or Android native SDKs within a WebView, developers should enable debug via the native iOS or Android methods. Otherwise, for a pure mobile-web app, debug mode is enabled with the isSandbox property.
mParticle.isSandbox = true;

To enable debug messages in the browser console, use the isDebug property.
mParticle.isDebug = true;

Although listed among its properties and methods, debug mode has no direct effect in the mParticle SDK itself. It is used to forward setting/resetting debug mode in embedded third party SDKs.
The internal SDK debug mode state is determined by the environment the SDK is running on: development or production. When in debug mode (development environment) the SDK changes its default behavior to help you during development and debugging. The SDK will:

Shorten the upload interval between messages sent to the server
Print debug messages. On iOS these logs are visible through the console in Xcode, and for Android these logs are accessible via the logcat utility.

It's important that debug mode is reset (false) prior to submission to Apple's App Store or Google Play.
API Reference
Android
Javadocs
See our Javadocs for a complete reference of the Android SDK.
XML Configuration
The Android SDK can be configured either through Java APIs or Android framework resources. It’s recommended that developers organize mParticle-specific resource values into a single file such as res/values/mparticle.xml. See the table below for a reference of all the possible configuration resources.
<?xml version="1.0" encoding="utf-8" ?>
<!-- Sample xml with a subset of configuration options -->
<resources>
    <string name="mp_key">APP_KEY</string>

    <string name="mp_secret">APP_SECRET</string>

    <bool name="mp_enableSandboxMode">true</bool>

    <bool name="mp_enableDebugMode">true</bool>

    <integer name="mp_debugUploadInterval">10</integer>

    <integer name="mp_productionUploadInterval">600</integer>

    <bool name="mp_reportUncaughtExceptions">true</bool>

    <integer name="mp_sessionTimeout">30</integer>

    <bool name="mp_enablePush">true</bool>

    <string name="mp_pushSenderId">123456789</string>

    <bool name="mp_enableAutoTracking">true</bool>

    <bool name="mp_enableNetworkPerformanceMeasurement">true</bool>
</resources>




Resource Name
Type
Default Value
Description




mp_key
string
n/a
This is the key used to authenticate with the mParticle SDK server API


mp_secret
string
n/a
This is the secret used to authenticate with the mParticle SDK server API


mp_enablePush
bool
false
Enable push registration, notifications, and analytics.


mp_pushSenderId
string
n/a
GCM Sender ID  required for push notifications


mp_enableLicenseCheck
bool
false
By enabling license check, mParticle will automatically validate that the app was downloaded and/or bought via Google Play, or if it was “pirated” or “side-loaded”.


mp_appLicenseKey
string
n/a
The public key used by your app to verify the user’s license with Google Play.


mp_enableAutoScreenTracking
bool
false
Enable automatic screen view events.


mp_productionUploadInterval
integer
600
The length of time in seconds to send batches of messages to mParticle. Setting this too low could have an adverse effect on the device battery.


mp_reportUncaughtExceptions
bool
false
By enabling this, the mParticle SDK will automatically log and report any uncaught exceptions, including stack traces.


mp_sessionTimeout
integer
60
The length of time (in seconds) that a user session will remain valid while application has been paused and put into the background.


mp_enableDebugMode
bool
false
Enabling this will provide additional logcat messages to debug your implementation and usage of the mParticle SDK.


mp_debugUploadInterval
integer
10
The upload interval (see above) while in debug mode.


mp_enableSandboxMode
bool
false
Enabling this will mark events as sandbox messages for debugging and isolation in the mParticle web application.


mp_enableNetworkPerformanceMeasurement
bool
false
Enabling this will allow the mParticle SDK to measure network requests made with Apache’s ttpClient as well as UrlConnection.



AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<!-- This is a sample AndroidManifest.xml file with nearly every SDK feature enabled. -->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="YOURPACKAGENAME"
    android:versionCode="1"
    android:versionName="1">
    <uses-sdk
        android:minSdkVersion="9"
        android:targetSdkVersion="21" />
    <!-- Required for the mParticle SDK -->
    <uses-permission android:name="android.permission.INTERNET" />
    <!-- Required for the mParticle SDK to modulate it's behavior based on radio state, and to report more detailed radio analytics -->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <!-- For detailed user-location tracking, required to access approximate location derived from cell towers and/or WiFi. -->
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <!-- For detailed user-location tracking, required to access precise location derived from GPS, cell towers, and WiFi. -->
    <!-- Only use the FINE permission if an exact location is required -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <!-- Required to verify that an application was purchases/downloaded legally from Google Play -->
    <uses-permission android:name="com.android.vending.CHECK_LICENSE" />
    <!-- BEGIN REQUIRED PERMISSIONS FOR PUSH -->
    <!-- Required for push notification registration -->
    <permission
        android:name="YOURPACKAGENAME.permission.C2D_MESSAGE"
        android:protectionLevel="signature" />
    <uses-permission android:name="YOURPACKAGENAME.permission.C2D_MESSAGE" />
    <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
    <!-- Prevent the application from sleeping while a GCM notification is being processed -->
    <uses-permission android:name="android.permission.WAKE_LOCK" />
    <!-- END REQUIRED PERMISSIONS FOR PUSH -->

    <application>
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <!-- REQUIRED FOR PUSH -->
        <receiver
            android:name="com.mparticle.MPReceiver" android:exported="true"
            android:permission="com.google.android.c2dm.permission.SEND">
            <intent-filter>
                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
                <!-- Use your package name as the category -->
                <category android:name="YOURPACKAGENAME" />
            </intent-filter>
        </receiver>

        <!-- REQUIRED FOR AUTOMATIC INSTALL REFERRER TRACKING -->
        <receiver android:name="com.mparticle.ReferrerReceiver" android:exported="true">
            <intent-filter>
                <action android:name="com.android.vending.INSTALL_REFERRER"/>
            </intent-filter>
        </receiver>

        <!-- REQUIRED FOR PUSH. This is the service that does the heavy lifting in parsing, showing, and tracking GCM notifications. -->
        <service android:name="com.mparticle.MPService" />

        <!-- OPTIONAL FOR PUSH: Change the name to the fully qualified package and class name of the new BroadcastReceiver -->
        <receiver android:name="com.some.package.MyReceiver" android:exported="true">
            <intent-filter>
                <action android:name="com.mparticle.push.RECEIVE" />
                <action android:name="com.mparticle.push.TAP" />
                <category android:name="YOURPACKAGENAME"/>
            </intent-filter>
        </receiver>
    </application>
</manifest>

Here’s an example manifest with every mParticle feature implemented, including an advanced push notification configuration.
Apple
Appledocs
See our Appledocs for a complete reference of the iOS SDK.
MParticleConfig.plist
You can not only configure the iOS SDK programmatically, but also, and optionally, via a plist file named MParticleConfig.plist. This may be a convenient way to centralize certain aspects of the mParticle SDK configuration for your app.
If you decide to use a configuration plist file, it must be included in the main bundle of your application.
The following table lists the possible keys and their respective descriptions:



Key
Type
Description




api_key
String
Your app’s API Key.


api_secret
String
Your app’s Secret.


enable_crash_reporting
Boolean
Flag indicating whether the SDK should report crashes.


enable_location_tracking
Boolean
Flag indicating whether the SDK should include location information with messages sent to the server (requires user approval).


location_tracking_accuracy
Number
Location tracking accuracy, in meters.


location_tracking_distance_filter
Number
Minimum distance a device has to move to trigger a location update (in meters).


register_for_silent_notifications
Boolean
Flag indicating whether to automatically register for silent notifications or not. The default is YES.


session_timeout
Number
The amount of inactive time, in seconds, for a session to timeout. The default value is 120 seconds.


upload_interval
Number
The periodic rate at which data is sent to mParticle’s servers. The default value is 600 seconds.



*All keys/fields are optional.

Here is an example of an MParticleConfig.plist file:


[[MParticle sharedInstance] start];

Assuming you have an MParticleConfig.plist file in your project and added your API Key and Secret to the plist. You can then call the start method of the SDK, rather than startWithKey:secret:
Server API
Overview
mParticle provides an HTTP-based Server API than can be used to power mParticle’s Audience platform as well as to supplement data collected via our mobile SDKs.  
Python SDK
The Python SDK provides models and an API client to help you get going with the Server API.  Please refer to the Wiki for more details:

Model Overview
API Client

Node SDK
The Node SDK provides models and an API client to help you get going with the Server API.  Please refer to the Wiki for more details:

Model Overview
API Client

Endpoint
Our HTTP endpoint is:  https://s2s.mparticle.com
Paths
/v2/events
https://s2s.mparticle.com/v2/events
This path accepts a JSON event batch.  See our JSON documentation for additional information.
{
    "events" : 
    [
        {
            "data" : {},
            "event_type" : "custom_event"
        }
    ],
    "device_info" : {},
    "user_attributes" : {},
    "deleted_user_attributes" : [],
    "user_identities" : {},
    "application_info" : {},
    "schema_version": 2,
    "environment": "production"
}


/v2/bulkevents
https://s2s.mparticle.com/v2/bulkevents
This path accepts a JSON array of event batches.  See our JSON documentation for additional information.
You may not send more than 100 EVENT DATA items per request.
If some event batches succeed and some event batches fail, you will still get an “Accepted” response.
[
    {
        "events" : 
        [
            {
                "data" : {},
                "event_type" : "custom_event"
            }
        ],
        "device_info" : {},
        "user_attributes" : {},
        "deleted_user_attributes" : [],
        "user_identities" : {},
        "application_info" : {},
        "schema_version": 2,
        "environment": "production"
    },
    {
        "events" : 
        [
            {
                "data" : {},
                "event_type" : "custom_event"
            }
        ],
        "device_info" : {},
        "user_attributes" : {},
        "deleted_user_attributes" : [],
        "user_identities" : {},
        "application_info" : {},
        "schema_version": 2,
        "environment": "production"
    }
]


Authentication
The HTTP APIs are secured via basic authentication. Many HTTP clients support basic authentication out of the box (ex. use your api key for the “username”, api secret for “password”), or you can manually set the basic authentication header:

Concatenate your application key and secret together with a colon (:) separating the two:

example-api-key:example-api-secret

Base64 with UTF-8 encode the result:

ZXhhbXBsZS1hcGkta2V5OmV4YW1wbGUtYXBpLXNlY3JldA== 

Prefix the encoded string with the authorization method, including a space:

Basic ZXhhbXBsZS1hcGkta2V5OmV4YW1wbGUtYXBpLXNlY3JldA==

Set resulting string as the Authorization header in your HTTP requests:

Authorization: Basic ZXhhbXBsZS1hcGkta2V5OmV4YW1wbGUtYXBpLXNlY3JldA==
Data Format
You must POST a JSON Document to the endpoint.  Reference the JSON documentation for details.
Response
You should inspect the status code of the response to determine if the POST has been accepted or if an error occurred.



Status Code
Status
Notes




202
Accepted
The POST was accepted.


400
Bad Request
The request JSON was malformed JSON or had missing fields.


401
Unauthorized
The authentication header is missing.


403
Forbidden
The authentication header is present, but invalid.


429
Too Many Requests
You have exceeded your provisioned limit.


503
Service Unavailable
Try again at the time indicated in the Retry-After header. If this header is not present, try again in 2 hours.


5xx
Server Error
A server-side error has occured, please try your request again.



Response Body
In some cases, the server can provide additional information the error that occurred in the response body.
The response body is optionally sent from the server and will not be included if additional details on the error are not known.
{
    "errors" :
    [
        {
            "code" : "BAD_REQUEST",
            "message" : "Required event field \"event_type\" is missing or empty."
        }
    ]
}

SQS Integration
It is possible to set up an Amazon SQS endpoint to receive bulk events, instead of using the HTTPS endpoint. Contact your mParticle Success Manager to discuss setting up an SQS endpoint.
Delete User
Message Headers

'message-type': {
    'StringValue': 'delete_user',
    'DataType': 'String'
},
'message-format': {
    'StringValue': 'json/text',
    'DataType': 'String'
},
'message-version': {
    'StringValue': '2',
    'DataType': 'String'
}

JSON Example

{
    "api_key": "abc",
    "request_type": "delete_user",
    "data": {
        "user_identities": {
            "customer_id": "JohnSmith355"
        }
    }
}

Customers sending events via SQS can also send messages to ‘delete’ a user. When mParticle receives a delete message for a user, we delete the user from any mParticle Audiences, and also delete any data relating to the user that mParticle is holding in our databases. Delete messages can be sent as a single object, or as an array to delete multiple users, but delete messages should not be included within an array of event messages. An example of the required message headers and JSON format is to the right.
JSON Reference
This document details the mParticle JSON Events format.  This format is used to post events to mParticle via the HTTP API, receive events via webhook, and parse files uploaded to your Amazon S3 bucket.
Overall Structure
{
    "events" : 
    [
        {
            "data" : {},
            "event_type" : "custom_event"
        }
    ],
    "device_info" : {},
    "user_attributes" : {},
    "deleted_user_attributes" : [],
    "user_identities" : {},
    "application_info" : {},
    "schema_version": 2,
    "environment" : "production",
    "ip" : "127.0.0.1"
}





Property
Data Type
Description
Input/Output
Required




events
An array of events
An array of JSON objects, each representing an app event. The event object consists of two nodes: data, and type.  The type indicates the entity structure of the data node.
Both
required


schema_version
Int32
Indicates the current schema version that this message batch conforms to.  mParticle  is currently on version 2.
Output
optional


device_info
JSON device_info
A JSON object containing information about the device pertaining to this message batch.
Both
optional


application_info
JSON application_info
A JSON object of information about your app.
Both
optional


user_attributes
JSON object of string key value pairs
A JSON object of demographic information about the user that generated the app events.
Both
optional


deleted_user_attributes
JSON object of string key value pairs
An array of JSON strings describing previously provided user attributes which should be forgotten.
Both
optional


user_identities
JSON object of string key value pairs
A JSON object of user ID information, such as email address and social IDs.
Both
optional


environment
string / enum
“production” or “development”
Both
required


ip
string
The IPv4 address of the consumer device
Input
optional



events
The event object consists of two nodes: data, and event_type.  
{
    "data" : {},
    "event_type" : ""
}


The following event_type are allowed.  These values are specified in the type fields within the events node.



event_type
Description




custom_event
A Custom event with a name and optional attributes.


commerce_event
A Commerce event.


session_start
Session Start event.


session_end
Session End event.


screen_view
Screen View.


crash_report
Crash Report.


opt_out
User Opt-Out.


push_registration
Registration of the device push token.


application_state_transition
An event fired when the application starts, exits, comes into foreground, or enters background.


push_message
A push message is received.


network_performance
An event containing network performance details on external http calls made from the application.


breadcrumb
Breadcrumbs are used for crash reporting to understand which events lead up to a crash.



The type indicates the entity structure of the data node in the event.  There are also some common elements to all data nodes.
Common event data node properties

{
	"data" : 
	{
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : ""
}




Property
Data Type
Description
Required




event_id
Int64
Unique Id of event.
Read only


source_message_id
string
Unique Id of source event.
suggested


session_id
Int64
Unique Id of session.
Read only


session_uuid
string
An optional universally unique identifier for the session.  The session_id will be derived from a hash of this value.
suggested


timestamp_unixtime_ms
Int64
Timestamp of event.  The current server time will be used if not specified.
suggested


location
location JSON
The location the event occurred in.
optional


device_current_state
device_current_state JSON
An object with a number of properties describing the state the device was in at the time the event was logged.  See below for further details.
optional



The details on location and device_current_state will be detailed after additional information on the event_type and the corresponding data nodes.
custom_event

{
	"data" : 
	{
		"event_name" : "click",
		"custom_event_type" : "navigation",
		"custom_attributes": 
		{
			"button_name":  "home",
			"other_attribute":  "xyz"
		},
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "custom_event"
}




Property
Data Type
Description
Required




event_name
string
The name of the event
required


custom_event_type
string / enum
The type of custom event reference the custom_event_type descriptions below
required


custom_attributes
JSON key value pairs
A dictionary of custom attributes
optional



The allowed values of “custom_event_type” are:



custom_event_type
Description




attribution
Attribution events are set of user actions (“events” or “touchpoints”) that contribute in some manner to a desired outcome.


location
Events that indicate where a user is located or interacting physically. Examples might include a check-in, geo fence, or GPS navigation.


navigation
Events that indicate a user click sequence or content consumption. Examples might include interface navigation, music listening, video view, menu or tab Selection, or when the back button is pressed.


search
Any event where users input criteria to find content/answers. Examples might include a keyword search, voice search, or a QR code scan.


social
Any action where users share content with others. Examples might include post, rate, tweet, share, attach, email.


transaction
Any events that are part of a transaction workflow. Examples might include selecting a product, subscribe, upgrade, or bid.


user_content
Events where users are creating content. Examples might include create task, compose, record, scan, or save.


user_preference
Any event that creates personalization for the user. This includes registration, saving/labeling content items, creating profiles, setting application preferences or permissions.


other
Use this event type to create an event that falls into no clear category.



Attribution Custom Events
If you are sending attribution custom events, you should specify the custom event as listed below.  You should also include campaign and publisher custom attributes representing the campaign and publisher which triggered the attribution event.  The attribution event should include as many device and user identifiers that you have - android_advertising_id, ios_advertising_id, ios_idfv, and customer_id.



Property
Value




event_type
custom_event


event_name
attribution


custom_event_type
attribution



commerce_event

{
	"data" : 
	{
		"product_action" : {},
		"promotion_action" : {},
		"product_impressions" : [{}],
		"shopping_cart" : {},
		"currency_code" : "USD",
		"screen_name" : "",
		"is_non_interactive" : false,
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "commerce_event"
}

There are 3 core variations of the commerce_event.  


Product-based - Used to measure measured datapoints associated with one or more products.
These have a product_action and do NOT have a promotion_action or a product_impressions


Promotion-based - Used to measure datapoints associated with internal promotions or campaigns.
These have a promotion_action and do NOT have a product_action or a product_impressions


Impression-based - Used to measure interactions with impressions of products and product-listings.
These have a product_impressions and do NOT have a product_action or promotion_action





Property
Data Type
Description
Required




product_action
product_action JSON
Used to measure measured datapoints associated with one or more products
required or disallowed (see above)


promotion_action
promotion_action JSON
Used to measure datapoints associated with internal promotions or campaigns
required or disallowed (see above)


product_impressions
An array of JSON product_impressions
Product impressions
required or disallowed (see above)


shopping_cart
shopping_cart JSON
current shopping cart state
optional


currency_code
string
code representing the currency the transaction is conducted in
optional


screen_name
string
screen name
optional


is_non_interactive
Boolean
is non interactive
optional



product_action

{
	"action" : "add_to_cart",
	"checkout_step" : 3,
	"checkout_options" : "",
	"product_action_list" : "",
	"product_list_source" : "",
	"transaction_id" : "",
	"affiliation" : "",
	"total_amount" : "",
	"tax_amount" : "",
	"shipping_amount" : "",
	"coupon_code" : "",
	"products" : [{}],
}




Property
Data Type
Description
Required




action
string / enum
The type of action the descriptions are below
required


checkout_step
Int32
The step of the checkout process
optional


checkout_options
string
checkout options
optional


product_action_list
string
product action list
optional


transaction_id
string
transaction id
optional


affiliation
string
affiliation
optional


total_amount
decimal
total amount
optional


tax_amount
decimal
tax amount
optional


shipping_amount
decimal
shipping amount
optional


coupon_code
string
coupon code
optional


products
An array of JSON Product
products
optional



The allowed values of “action” are:



action




add_to_cart


remove_from_cart


checkout


checkout_option


click


view_detail


purchase


refund


add_to_wishlist


remove_from_wish_list



promotion_action

{
	"action" : "add_to_cart",
	"promotions" : [{}]
}




Property
Data Type
Description
Required




action
string / enum
The type of action the descriptions are below
required


promotions
An array of JSON Promotion
promotions
optional



The allowed values of “action” are:



action




view


click



product_impressions

{
	"product_impression_list" : "",
	"promotions" : [{}]
}




Property
Data Type
Description
Required




product_impression_list
string
product impression list
optional


promotions
An array of JSON Promotion
promotions
optional



shopping_cart

{	
	"products" : [{}]
}




Property
Data Type
Description
Required




products
An array of JSON Product
products
optional



Product

{
	"id" : "",
	"name" : "",
	"brand" : "",
	"category" : "",
	"variant" : "",
	"position" : "",
	"price" : "",
	"quantity" : "",
	"coupon_code" : "",
	"added_to_cart_time_ms" : "",
	"total_product_amount" : "",
	"custom_attributes" : "",
}




Property
Data Type
Description
Required




id
string
id
optional


name
string
name
optional


brand
string
brand
optional


category
string
category
optional


variant
string
variant
optional


position
Int32
position
optional


price
decimal
price
optional


quantity
decimal
quantity
optional


coupon_code
string
coupon code
optional


added_to_cart_time_ms
Int64
Added to card milliseconds since epoch
optional


total_product_amount
decimal
total product amount
optional


custom_attributes
JSON key value pairs
A dictionary of custom attributes
optional



Promotion

{
	"id" : "",
	"name" : "",
	"creative" : "",
	"position" : ""	
}




Property
Data Type
Description
Required




id
string
id
optional


name
string
name
optional


creative
string
creative
optional


position
string
position
optional



session_start

{
	"data" : 
	{			
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "session_start"
}

No additional fields are allowed in the data node.
session_end

{
	"data" : 
	{			
		"session_duration_ms" : 6000,
		"custom_attributes": 
		{
			"button_name":  "home",
			"other_attribute":  "xyz"
		},
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "session_end"
}




Property
Data Type
Description
Required




session_duration_ms
Int64
The length of the session in milliseconds
optional


custom_attributes
JSON key value pairs
A dictionary of custom attributes
optional



screen_view

{
	"data" : 
	{			
		"screen_name" : "Home",
		"activity_type" : "activity_started",		
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "screen_view"
}




Property
Data Type
Description
Required




screen_name
string
The name of the screen
optional


activity_type
string / enum
Android only - either ‘activity_started’ or ‘activity_stopped’
optional



crash_report

{
	"data" : 
	{
		"class_name" : "NSInvalidArgumentException",
		"breadcrumbs" : [{}],
		"severity" : "fatal",
		"message" : "-[MPCViewController crash]: unrecognized selector sent to instance 0x125e0d3d0",
		"stack_trace" : "Example Stack Trace here",
		"exception_handled" : false,
		"topmost_context" : "MPCViewController",
		"pl_crash_report_file_base64" : "base64 string here",
		"ios_image_base_address" : 4295507968,
		"ios_image_size" : 535216,
		"session_number" : 25,
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "crash_report"
}




Property
Data Type
Description
Required




class_name
string
Exception class name
optional


breadcrumbs
An array of breadcrumb events
An array of breadcrumb events
optional


severity
string
severity
optional


message
string
Error message
optional


stack_trace
string
Exception stack trace
optional


exception_handled
bool
Determines if the exception was handled
optional


topmost_context
string
Topmost context of the exception
optional


pl_crash_report_file_base64
string
Plausible Labs Crash Report file, as Base-64 string
optional


ios_image_base_address
unsigned Int64
iOS or tvOS image base address
optional


ios_image_size
unsigned Int64
iOS or tvOS image size
optional


session_number
int32
Session number that the crash occurred on
optional



opt_out

{
	"data" : 
	{
		"is_opted_out" : true,		
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "opt_out"
}




Property
Data Type
Description
Required




is_opted_out
bool
is the user opted out
suggested, false by default



push_registration

{
	"data" : 
	{
		"register" : true,
		"registration_token" : "x",
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "push_registration"
}




Property
Data Type
Description
Required




register
bool
Add/remove registration flag
required


registration_token
string
Registration Token
required



application_state_transition

{
	"data" : 
	{
		"is_first_run" : false,
		"is_upgrade" : false,
		"successfully_closed" : true,
		"push_notification_payload" : "{}",
		"application_transition_type" : "application_initialized",
		"register" : true,
		"registration_token" : "x",
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "application_state_transition"
}




Property
Data Type
Description
Required




is_first_run
bool
Set to true if this is on an install
suggested, false is assumed


is_upgrade
bool
Set to true if this is on an upgrade
suggested, false is assumed


successfully_closed
bool
Set to true if the previous session successfully closed
suggested, false is assumed


push_notification_payload
string
Push notification message data in JSON format
optional


application_transition_type
string / enum
“application_initialized”, “application_exit”, “application_background”, or “application_foreground”
required



push_message

{
	"data" : 
	{
		"push_message_token" : "x",
		"push_message_type" : "action",
		"message" : "Message Text to consumer",
		"network" : "apn",
		"push_notification_payload" : "{}",
		"application_state" : "foreground",
		"action_identifier" : "action",
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "push_message"
}




Property
Data Type
Description
Required




push_message_token
string
Push Message Token
optional


push_message_type
string / enum
“sent”, “received”, “action”
required


message
string
The text displayed in push message
optional


network
string / enum
“apn” for apple push notifications, “gcm” for google cloud messaging
suggested


push_notification_payload
string
push notification message data in JSON format
optional


application_state
string / enum
“not_running”, “background”, or “foreground”
optional


action_identifier
string
action identifier, 100 character limit
optional



network_performance

{
	"data" : 
	{
		"http_verb" : "GET",
		"url" : "http://sample.url",
		"time_elapsed" : 450,
		"bytes_in" : 2048,
		"bytes_out" : 2048,
		"response_code" : "200",
		"data" : "",
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "network_performance"
}




Property
Data Type
Description
Required




http_verb
string
HTTP Verb
optional


url
string
URL
optional


time_elapsed
Int32
time elapsed during network call
optional


bytes_in
Int32
Bytes in
optional


bytes_out
Int32
Bytes out
optional


response_code
string
Http response code
optional


data
string
Base64 string
optional



breadcrumb

{
	"data" : 
	{
		"session_number" : 45,
		"label" : "label",
		"event_id" : "6004677780660780000",
		"source_message_id" : "e8335d31-2031-4bff-afec-17ffc1784697",
		"session_id" : "4957918240501247982",
		"session_uuid" : "91b86d0c-86cb-4124-a8b2-edee107de454",
		"timestamp_unixtime_ms" : "1402521613976",
		"location" : {},
		"device_current_state" : {}
	},
	"event_type" : "breadcrumb"
}




Property
Data Type
Description
Required




session_number
Int32
Session number
optional


label
string
Label
required



location
{
	"location" : 
	{
		"latitude" : 40.7142,
		"longitude" : 74.0064,
		"accuracy" : 195.0165104914573,
		"country_code" : "US",
		"country_name" : "United States",
		"region_code" : "CA",
		"region_name" : "California",
		"city_name" : "San Francisco",
		"postal_code" : "12345",
		"dma_code" : 548,
		"area_code" : 508,
		"metro_code" : 548
	}	
}




Property
Data Type
Description
Required




latitude
double
Latitude
optional


longitude
double
Longitude
optional


accuracy
double
Accuracy
optional


country_code
string
Two letter country code
optional


country_name
string
Full country name
optional


region_code
string
RegionCode
optional


region_name
string
RegionName
optional


city_name
string
City name
optional


postal_code
string
Postal Code
optional


dma_code
int
DmaCode
optional


area_code
int
Phone area code
optional


metro_code
int
Metro code
optional



device_current_state
{

	"device_current_state": 
	{
		"cpu": "4",
		"system_memory_available_Bytes": 536903680.0,
		"system_memory_low":  false, 
		"system_memory_threshold_bytes": 56590336,
		"application_memory_available_bytes": 6995328,
		"application_memory_max_bytes": 67108864,
		"application_memory_total_bytes": 17604608.0,
		"device_orientation": "undefined",
		"status_bar_orientation":  "undefined", 
		"time_since_start_ms":  5515182,
		"battery_level": 0.95,
		"data_connection_type":  "wifi", 
		"data_connection_type_detail":  "hdspa",
		"gps_state": true,
		"total_system_memory_usage_bytes": 2980528128,
		"disk_space_free_bytes": 29716148224,
		"external_disk_space_free_bytes":  10121 
	}
}




Property
Data Type
Description
Required




cpu
string
CPU utilization in integer form
optional


system_memory_available_bytes
double
Total bytes of system memory available
optional


system_memory_low
bool
Boolean to indicate whether system memory is low
optional


system_memory_threshold_bytes
double
Android only
optional


application_memory_available_bytes
double
Total bytes of application memory available
optional


application_memory_max_bytes
double
Maximum bytes of application memory used
optional


application_memory_total_bytes
double
Total bytes of memory application is currently using
optional


device_orientation
string / enum
“portrait”, “landscape”, or “square”
optional


status_bar_orientation
string
iOS only
optional


time_since_start_ms
Int64
Time in milliseconds since application was loaded
optional


battery_level
double
Integer representation of battery percentage remaining
optional


data_connection_type
string / enum
“offline”, “wifi”, or “mobile”
optional


data_connection_type_detail
string
data connection type details
optional


gps_state
string / enum
String value indicating whether GPS is enabled - Values: “unknown”, “true”, or “false”
optional


total_system_memory_usage_bytes
Int64
 
optional


disk_space_free_bytes
Int64
Total number of bytes of disk space available
optional


external_disk_space_free_bytes
Int64
Android only
optional



device_info
"device_info":
{
        "brand":  "iPhone6,1",
        "product":  "iPhone6,1",
        "device":  "John's iPhone 5s",
        "android_uuid":  "",
        "device_manufacturer":  "Apple",
        "platform": "iOS",
        "os_version":  "7.1.1",
        "device_model":  "iPhone6,1",
        "screen_height": 1136,                                
        "screen_width": 640,                               
        "screen_dpi":160,
        "device_country": "USA",                           
        "locale_language": "en",                         
        "locale_country": "US",                          
        "network_country": "us",                           
        "network_carrier": "AT&T",                     
        "network_code": "410",                              
        "network_mobile_country_code": "310",                                       
        "timezone_offset":-4,                                
        "build_identifier": "M4-rc20",
        "http_header_user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 7_1 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D167 mParticle/2.5.0",
        "ios_advertising_id": "613ff528-afd1-4c1b-9628-e6ed25ece9c0",   
        "push_token": "<e481f135 9629f0c3 fb634be0 82ca18b1 73ea45a2 b0b96a6e 2a00c829 bc9ff6eb>",
        "cpu_architecture": "arm64",
        "is_tablet": false,
        "push_notification_sound_enabled":  true, 
        "push_notification_vibrate_enabled": false, 
        "radio_access_technology":  "LTE",
        "supports_telephony": "",                   
        "has_nfc": false,                              
        "bluetooth_enabled": true,                      
        "bluetooth_version": ""                        
        "ios_idfv": "8c61383f-2216-4713-8c1c-1cb0a5d7a4cc",                                 
        "android_advertising_id": "",
        "limit_ad_tracking": false,
        "is_dst": false
}

A sample device_info JSON object is on the right hand panel.  The table below describes a number of these properties in greater detail.



Property
Data Type
Description
Required




brand
string
Device Brand, e.g. Google
optional


product
string
Product
optional


device
string
Device Name
optional


android_uuid
string
legacy Android ID
optional


device_manufacturer
string
Device Manufacturer
optional


platform
string / enum
“iOS” or “tvOS” or “Android”
optional


os_version
string / Version
Major.Minor.Revision of OS, e.g. 7.1.1
optional


device_model
string
Name of Device Model, e.g. iPhone6,1
optional


screen_height
Int32
Screen height in pixels
optional


screen_width
Int32
Screen width in pixels
optional


screen_dpi
Int32
Android only
optional


device_country
string
Android only
optional


locale_language
string
Current language device is set to
optional


locale_country
string
Current locale device is set to
optional


network_country
string
Country name data/cellular network bound to
optional


network_carrier
string
network carrier
optional


network_code
string
This is the mobile network code
optional


network_mobile_country_code
string
Standardized country code of network bound to
optional


timezone_offset
Int32
This is the device’s timezone offset setting, in hours relative to UTC
optional


build_identifier
string
Build UUID
optional


http_header_user_agent
string
HTTP User Agent
optional


ios_advertising_id
GUID
iOS and tvOS
optional


push_token
string
Push messaging registration token
optional


cpu_architecture
string
iOS and tvOS - CPU Architecture of device
optional


is_tablet
nullable bool
True/False or null whether device is a tablet
optional


push_notification_sound_enabled
nullable bool
Android only
optional


push_notification_vibrate_enabled
nullable bool
Android only
optional


radio_access_technology
string
radio access technology
optional


supports_telephony
nullable bool
Android only
optional


has_nfc
nullable bool
Android only
optional


bluetooth_enabled
nullable bool
Android only
optional


bluetooth_version
string
Android only
optional


ios_idfv
GUID
iOS and tvOS
optional


android_advertising_id
GUID
Android Only
optional


limit_ad_tracking
nullable bool
Limit Ad Tracking
optional


is_dst
nullable bool
Is Daylight Savings Time
optional



application_info
"application_info": 
{
    "application_name":  "App Name",
    "application_version": "1.0.1",
    "install_referrer":  "utm_campaign=my_campaign&utm_source=google&utm_medium=cpc&utm_term=my_keyword&utm_content=ad_variation1",
    "package": "com.mparticle.test",
    "Version3.1":
    {
       "iad-lineitem-id":"1234567890",
       "iad-org-name":"OrgName",
       "iad-creative-name":"CreativeName",
       "iad-click-date":"2016-05-26T12:14:32Z",
       "iad-campaign-id":"1234567890",
       "iad-attribution":"true",
       "iad-lineitem-name":"LineName",
       "iad-attribution-creative-id":"1234567890",
       "iad-campaign-name":"CampaignName",
       "iad-conversion-date":"2016-05-26T12:14:32Z"
    }
}

A sample application_info JSON object is on the right hand panel.  



Property
Data Type
Description
Required




application_name
string
Name of application
optional


application_version
string
Version of application
optional


install_referrer
string
Android Only - Provided by Google Play Store
optional


package
string
Package name
optional


apple_search_ads_attributes
dictionary
Apple App Store Search Ads attribution arguments
optional



user_attributes
"user_attributes":
{
    "$age": "18",
    "$gender": "M",
    "$country": "USA",
    "$zip": "10016",
    "$city": "New York",
    "$state": "NY",
    "$address": "381 Park Avenue S",
    "$firstname": "John",
    "$lastname": "Doe",    
    "$mobile": "123-456-7890",
    "a_custom_attribute": "some_value",
    "a_custom_list": ["value1", "value2", "valueN"]
}

A sample user_attributes JSON object is on the right hand panel.  The properties with the prefix “$” are reserved attributes that drive specific behaviors in our platform.  This object can also contain any number of custom user attributes that you can define from within your app.  Custom attributes also allow for lists of values instead of scalar values, but in general a given attribute should not change between a scalar and a list in subsequent calls.
user_identities
"user_identities": 
{
   "customerid": "1234",
   "email" : "helpers@mparticle.com",
   "facebook" : "helpers@mparticle.com",
   "twitter" : "helpers@mparticle.com",
   "google" : "helpers@mparticle.com",
   "microsoft" : "helpers@mparticle.com",
   "alias" : "helpers@mparticle.com",
   "other" : "helpers@mparticle.com"
}


The complete list of user identities supported are included in the example to the right.
Master Sample
{
  "schema_version": 2,
  "environment": "production",
  "device_info": {
    "brand": "iPhone6,1",
    "product": "iPhone6,1",
    "device": "John's iPhone 5s",
    "android_uuid": "",
    "device_manufacturer": "Apple",
    "platform": "iOS",
    "os_version": "7.1.1",
    "device_model": "iPhone6,1",
    "screen_height": 1136,
    "screen_width": 640,
    "screen_dpi": 160,
    "device_country": "USA",
    "locale_language": "en",
    "locale_country": "US",
    "network_country": "us",
    "network_carrier": "AT&T",
    "network_code": "410",
    "network_mobile_country_code": "310",
    "timezone_offset": -4,
    "build_identifier": "M4-rc20",
    "http_header_user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 7_1 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D167 mParticle/2.5.0",
    "ios_advertising_id": "613ff528-afd1-4c1b-9628-e6ed25ece9c0",
    "push_token": "<e481f135 9629f0c3 fb634be0 82ca18b1 73ea45a2 b0b96a6e 2a00c829 bc9ff6eb>",
    "cpu_architecture": "arm64",
    "is_tablet": false,
    "push_notification_sound_enabled": true,
    "push_notification_vibrate_enabled": false,
    "radio_access_technology": "LTE",
    "supports_telephony": "",
    "has_nfc": false,
    "bluetooth_enabled": true,
    "bluetooth_version": "",
    "ios_idfv": "8c61383f-2216-4713-8c1c-1cb0a5d7a4cc",
    "android_advertising_id": "",
    "limit_ad_tracking": false,
    "is_dst": false
  },
  "application_info": {
    "application_name": "App Name",
    "application_version": "1.0.1",
    "install_referrer": "utm_campaign=my_campaign&utm_source=google&utm_medium=cpc&utm_term=my_keyword&utm_content=ad_variation1",
    "package": "com.newco.myapp"
  },
  "user_attributes": {
    "$age": "18",
    "$gender": "M",
    "$country": "USA",
    "$zip": "10016",
    "$city": "New York",
    "$state": "NY",
    "$address": "381 Park Avenue S",
    "$firstname": "John",
    "$lastname": "Doe",
    "$mobile": "123-456-7890",
    "a_custom_attribute": "some_value",
    "a_custom_list": [
      "value1",
      "value2",
      "valueN"
    ]
  },
  "deleted_user_attributes": [
    "an_old_attribute_name",
    "another_old_attribute"
  ],
  "user_identities": {
    "customerid": "1234",
    "email": "helpers@mparticle.com",
    "facebook": "helpers@mparticle.com",
    "twitter": "helpers@mparticle.com",
    "google": "helpers@mparticle.com",
    "microsoft": "helpers@mparticle.com",
    "alias": "helpers@mparticle.com",
    "other": "helpers@mparticle.com"
  },
  "events": [
    {
      "data": {
        "timestamp_unixtime_ms": 1432825980486,
        "source_message_id": "4e34bef3-d2f9-4f07-8298-4646cce292fa",
        "session_uuid": "DDFBEA89-9A54-41C3-97F3-334FDD3B98BC"
      },
      "event_type": "session_start"
    },
    {
      "data": {
        "application_transition_type": "application_background",
        "event_id": -1586912177303106600,
        "session_uuid": "DDFBEA89-9A54-41C3-97F3-334FDD3B98BC",
        "timestamp_unixtime_ms": 1402578873533,
        "location": {
          "country_code": "US",
          "country_name": "United States",
          "region_code": "FL",
          "region_name": "Florida",
          "city_name": "West Palm Beach",
          "postal_code": "33403",
          "dma_code": 548,
          "area_code": 561,
          "metro_code": 548
        },
        "device_current_state": {
          "time_since_start_ms": 713485,
          "battery_level": -1,
          "data_connection_type": "wifi",
          "gps_state": true,
          "total_system_memory_usage_bytes": 2981494784,
          "disk_space_free_bytes": 29655015424,
          "cpu": "0",
          "system_memory_available_bytes": 182730752,
          "application_memory_total_bytes": 17813504,
          "device_orientation": 6,
          "status_bar_orientation": 1
        }        
      },
	  "event_type": "application_state_transition"
    },
    {
      "data": {
        "class_name": "NSInvalidArgumentException",
        "severity": "fatal",
        "message": "-[MPCViewController crash]: unrecognized selector sent to instance 0x125e0d3d0",
        "stack_trace": "Example Stack Trace here",
        "topmost_context": "MPCViewController",
        "pl_crash_report_file_base64": "base64 string here",
        "ios_image_base_address": 4295507968,
        "ios_image_size": 535216,
        "event_id": 1558493756361828400,
        "timestamp_unixtime_ms": 1402579716192,
        "location": {
          "country_code": "US",
          "country_name": "United States",
          "region_code": "FL",
          "region_name": "Florida",
          "city_name": "West Palm Beach",
          "postal_code": "33403",
          "dma_code": 548,
          "area_code": 561,
          "metro_code": 548
        },
        "device_current_state": {
          "time_since_start_ms": 106554,
          "battery_level": -1,
          "data_connection_type": "wifi",
          "gps_state": true,
          "total_system_memory_usage_bytes": 2995585024,
          "disk_space_free_bytes": 29653184512,
          "cpu": "0",
          "system_memory_available_bytes": 300056576,
          "application_memory_total_bytes": 18108416,
          "device_orientation": 6,
          "status_bar_orientation": 1
        }        
      },
	  "event_type": "crash_report"
    },
    {
      "data": {
        "timestamp_unixtime_ms": 1432825994215,
        "session_duration_ms": 60000,
        "source_message_id": "93862b36-adf3-43e6-87d2-2fcbf3f6d903",
        "session_uuid": "DDFBEA89-9A54-41C3-97F3-334FDD3B98BC",
        "custom_attributes": {
          "key23": "value2"
        }        
      },
	  "event_type": "session_end"
    }
  ]
}

Please see the JSON sample on the right hand panel for a fully-elaborated example of a message batch.
Platform API
The mParticle platform API allows you to RESTfully create and update a number of
entities such as Apps, App Platforms, as well as configure services to
forward data to.
Endpoint
The platform API is located at https://api.mparticle.com.
API Authentication
To access the API, you will need to create a dedicated API user, with a valid email address, under your mParticle Organization. The user must have access to only one Organization. Contact your Account Manager or email support@mparticle.com to arrange API access for that user. You can then use the username and password of that user to access the Platform or User Profile API.
Curl Syntax
$ curl -X POST -H "Authorization: Basic MTJjamY0KzhjMWwwMmp6ZG1zajhAc2hhcmtsYXNlcnMuY29tOlBhc3N3b3JkMjAxNCE=" -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=client_credentials" https://api.mparticle.com/oauth2/token


Sample Raw HTTP Request
POST https://api.mparticle.com/oauth2/token HTTP/1.1
Host: api.mparticle.com
Authorization: Basic MTJjamY0KzhjMWwwMmp6ZG1zajhAc2hhcmtsYXNlcnMuY29tOlBhc3N3b3JkMjAxNCE=
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials

Once your API user is set up, you can authenticate by issuing a POST request to https://api.mparticle.com/oauth2/token with the Authorization header set.
The Authorization header follows the standard http basic access authentication technique.
Your username and password should be combined into a string separated by a colon ‘:’
“username:password”
The resulting string should then be Base64 encoded, and added to the Authorization header:
Authorization: Basic MTJjamY0KzhjMWmmAmp6ZG1zajhAc2hhcmtsYGNlcnMuY14tOlBhc3Q3b3JkMjAxNCE=
Using your Bearer Token
A successful POST request to /oauth2/token will result in a JSON response as follows:
{"token_type":"bearer","access_token":"YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-"}
Subsequent requests to the API can now be authorized by setting the Authorization header as follows:
Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-
Tokens do not expire, but can be revoked.
Authentication Errors
The following are errors that can be thrown when attempting to authenticate:



Name
Description




Missing (or too large) bearer token
 


Authorization header is wrong type
Authorization header must start with “Bearer”.


Bearer token failed validation
The Bearer token provided is not valid.


Could not retrieve user access rights
Contact mParticle support.


Requesting user does not have access to any data
Contact mParticle support.


Invalid setup.  API user can only have access to one org.
Contact mParticle support.


Unsupported grant type
grant_type must be set to client_credentials.


Missing (or too large) basic credentials header
 


Authorization header is malformed
Ensure that header is username:password.



Revoke a token
$ curl -X POST -H "Authorization: Basic MTJjamY0KzhjMWwwMmp6ZG1zajhAc2hhcmtsYXNlcnMuY29tOlBhc3N3b3JkMjAxNCE=" -H "Content-Type: application/json" -d '{"access_token":"YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-"}' https://api.mparticle.com/oauth2/invalidate_token

To revoke a token, send a POST request to https://api.mparticle.com/oauth2/invalidate_token with the same Basic Authorization header as the token request, and a JSON body of {"access_token": "<token>"}.
Versioning
Once you have authenticated, the API resources can be accessed at https://api.mparticle.com/v1/.
Subsequent updates to the API that are breaking changes will be published with a new version number in the URL.
API Usage
Specifying your Account ID
All API calls require you to pass AccountId as a querystring parameter when making
the request, with the exception of a GET /accounts which lists all accounts. Forgetting
to add the AccountId parameter when required will result in a 401 Unauthorized response.
If you are unsure what your Account ID is, you can make a GET request to https://api.mparticle.com/v1/accounts .  This will return a list of Accounts within your Organization, and from there you can choose an Account ID to work with.  All subsequent entities that you work with will
be within the scope of the chosen Account ID.  Attempting to access or modify entities outside of the specified Account ID scope will return 404 - Not Found.
Please note that all subsequent examples include ?accountId=1. This accountId will not work for you and must be changed.
Sending Data
All POST/PUT requests should send JSON as the Request Payload, with
Content-Type set to application/json .
Return Data
If an API request returns data, it will be wrapped in a common JSON structure,
an example of which is to the right.
{
  "data": [],
  "dataType": "app",
  "errors": [
    {
        "code": "VALIDATION_ERROR",
        "message": "Error message here"
    }
  ]
}

One or more entities will be returned as an array in the data property. If errors
were encountered, they will be available as an array of error objects.
Status Codes
The following table lists the status codes that are returned by API requests:



Code
Description
Method
Notes




200
OK
GET
 


201
Created
POST
 


202
Accepted
PUT
 


204
No Content
DELETE
 


400
Bad Request
All
JSON Syntax is invalid


401
Unauthorized
All
User failed authentication


403
Forbidden
All
Identity is not authorized to invoke specified method


404
Not Found
GET
Resource does not exist or user does not have access


405
Method Not Allowed
All
Specified HTTP method not supported


422
Unprocessable Entity
PUT/POST/DELETE
Request failed business logic rules


500
Internal Server Error
All
Contact mParticle support to resolve this error



Cross Origin Resource Sharing
The mParticle REST API supports Cross Origin Resource Sharing (CORS) for AJAX requests from any origin.
REST Resources
Accounts
Get a Single Account
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi341GHhnDnjsdKAJQxNjdjYuOJABbg6HdI.8V6HhxW-" -X GET "https://api.mparticle.com/v1/accounts/1?accountId=1"

Get Single Account Example Response
{
  "data": [
    {
      "name": "My Account",
      "last_modified_on": "2014-11-14T22:46:38.673",
      "data_type": "account",
      "id": 1,
      "created_on": "2013-07-23T18:49:38.547"
    }
  ],
  "dataType": "account",
  "errors": null
}

GET /accounts/1?accountId=1
Get All Accounts
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi341GHhnDnjsdKAJQxNjdjYuOJABbg6HdI.8V6HhxW-" -X GET "https://api.mparticle.com/v1/accounts?accountId=1"

Get All Accounts Sample Response
{
  "data": [
    {
      "name": "My Account",
      "last_modified_on": "2014-11-14T22:46:38.673",
      "data_type": "account",
      "id": 1,
      "created_on": "2013-07-23T18:49:38.547"
    }
  ],
  "dataType": "account",
  "errors": null
}

GET /accounts
Update an account
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X PUT -d "{\"name\": \"Updated Name\"}" https://api.mparticle.com/v1/accounts/1?accountId=1

Example Update Account Request
{
  "name": "Updated Account Name"
}

PUT /accounts/1?accountId=1
Parameters



Name
Type
Description




name
string
The display name of the account



Errors



Name




Account name is not unique.



Create an account
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X POST -d "{\"name\": \"New Account\"}" https://api.mparticle.com/v1/accounts

Example Create Account Request
{
  "name": "New Account"
}

POST /accounts
Parameters



Name
Type
Description




name
string
The display name of the account



Delete an account
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X DELETE https://api.mparticle.com/v1/accounts?accountId=1

DELETE /accounts
Errors



Name




All applications must be deleted before deleting account.



Apps
Get a single app
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/apps/1?accountId=1

Get Single App Example Response 
{
  "data": [
    {
      "name": "Test App",
      "platforms": [
        {
          "application_id": 1,
          "os": "Android",
          "access_keys": [
            {
              "key": "AccessKey",
              "secret": null,
              "data_type": "token"
            }
          ],
          "crash_handling": "AppDefined",
          "network_performance": "AppDefined",
          "social_mode": "AppDefined",
          "profile_merging": false,
          "push_attribution_timer": 30,
          "last_modified_on": "2014-11-05T20:09:46.577",
          "data_type": "platform",
          "created_on": "2014-06-11T19:43:48.697"
        }
      ],
      "last_modified_on": "2014-06-11T19:43:45.617",
      "data_type": "application",
      "id": 1,
      "created_on": "2014-06-11T19:43:45.617"
    }
  ],
  "dataType": "application",
  "errors": null
}

GET /apps/1?accountId=1
Get all apps
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/apps?accountId=1

Get All Apps Example Response
{
  "data": [
    {
      "name": "Test App",
      "platforms": [
        {
          "application_id": 1,
          "os": "Android",
          "access_keys": [
            {
              "key": "AccessKey",
              "secret": null,
              "data_type": "token"
            }
          ],
          "crash_handling": "AppDefined",
          "network_performance": "AppDefined",
          "social_mode": "AppDefined",
          "profile_merging": false,
          "push_attribution_timer": 30,
          "last_modified_on": "2014-11-05T20:09:46.577",
          "data_type": "platform",
          "created_on": "2014-06-11T19:43:48.697"
        }
      ],
      "last_modified_on": "2014-06-11T19:43:45.617",
      "data_type": "application",
      "id": 1,
      "created_on": "2014-06-11T19:43:45.617"
    }
  ],
  "dataType": "application",
  "errors": null
}

GET /apps?accountId=1
Update an app
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X PUT -d "{\"name\": \"Updated Name\"}" https://api.mparticle.com/v1/apps/1?accountId=1

Update App Request Example
{
  "name": "Test App New Name"
}

PUT /apps/1?accountId=1
Parameters



Name
Type
Description




name
string
The name of the app



Errors



Name




App name must be specified.



Create an app
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X POST -d "{\"name\": \"Updated Name\", \"platforms\":[{\"os\": \"iOS\"},{\"os\": \"Android\"}]}" https://api.mparticle.com/v1/apps/1?accountId=1

Create App Example Request
{
  "name": "Test App",
  "platforms": [
    {
      "os": "iOS"
    },
    {
      "os": "Android"
    }
  ]
}   

Example Create App Response

{
  "data": [
    {
      "name": "Test App",
      "platforms": [
        {
          "application_id": 1,
          "os": "iOS",
          "access_keys": [
            {
              "key": "AccessKey",
              "secret": "AccessSecret",
              "data_type": "token"
            }
          ],
          "crash_handling": null,
          "network_performance": null,
          "social_mode": null,
          "profile_merging": true,
          "push_attribution_timer": 30,
          "last_modified_on": "2015-03-11T12:07:08.077",
          "data_type": "platform",
          "created_on": "2015-03-11T12:07:08.077"
        }
      ],
      "last_modified_on": "2015-03-11T12:07:07.877",
      "data_type": "application",
      "id": 1,
      "created_on": "2015-03-11T12:07:07.877"
    }
  ],
  "dataType": "application",
  "errors": null
}

POST /apps?accountId=1
Parameters



Name
Type
Description




name
string
The name of the app


platforms
array
Array of platforms to create for the app in the format of {"os": "iOS"}. Valid values for the “os” field include “iOS”, “tvOS”, “Android”, “MobileWeb”, “Roku”, “Alexa”, “SmartTV”, “FireTV”, and “Xbox”



Errors



Name




Exceeded app limit.


App name already exists.


App must have at least one platform selected.


App name not specified.


Invalid os specified.



Notes
Creating a new app or app platform will generate a new Access Key and Secret for that app platform, which can be accessed through the “access_keys”.  Note that this is the only time the Secret is transmitted - subsequent GET requests will only return the Access Key.
Delete an app
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X DELETE https://api.mparticle.com/v1/apps/1?accountId=1

DELETE /apps/1?accountId=1
Errors



Name




Deleting an app that has active platforms is not allowed.



App Platforms
Get a single app platform
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/apps/1/platforms/android?accountId=1

Example Get Single App Platform Response

{
  "data": [
    {
      "application_id": 1,
      "os": "Android",
      "access_keys": [
        {
          "key": "AccessKey",
          "secret": null,
          "data_type": "token"
        }
      ],
      "crash_handling": "AppDefined",
      "network_performance": "AppDefined",
      "social_mode": "AppDefined",
      "profile_merging": false,
      "push_attribution_timer": 30,
      "last_modified_on": "2014-11-05T20:09:46.577",
      "data_type": "platform",
      "created_on": "2014-06-11T19:43:48.697"
    }
  ],
  "dataType": "platform",
  "errors": null
}


GET /apps/1/platforms/android?accountId=1
Get all app platforms
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/apps/1/platforms?accountId=1

Example Get All App Platforms Response

{
  "data": [
    {
      "application_id": 1,
      "os": "Android",
      "access_keys": [
        {
          "key": "AccessKey",
          "secret": null,
          "data_type": "token"
        }
      ],
      "crash_handling": "AppDefined",
      "network_performance": "AppDefined",
      "social_mode": "AppDefined",
      "profile_merging": false,
      "push_attribution_timer": 30,
      "last_modified_on": "2014-11-05T20:09:46.577",
      "data_type": "platform",
      "created_on": "2014-06-11T19:43:48.697"
    }
  ],
  "dataType": "platform",
  "errors": null
}


GET /apps/1/platforms?accountId=1
Update an app platform
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X PUT -d "{\"profile_merging\": true,\"push_attribution_timer\": 30,\"crash_handling\": \"ForceCatch\",\"network_performance\": \"ForceTrue\",\"social_mode\": \"FacebookAndTwitter\"}" https://api.mparticle.com/v1/apps/1/platforms/ios?accountId=1

Example Update App Platform Request

{
  "profile_merging": true,
  "push_attribution_timer": 30,
  "crash_handling": "ForceCatch",
  "network_performance": "ForceTrue",
  "social_mode": "FacebookAndTwitter"
}


PUT /apps/1/platforms/ios?accountId=1
Parameters



Name
Type
Description




profile_merging
bool
Enable or disable profile merging


push_attribution_timer
int
Push attribution timer in minutes


crash_handling
string
“AppDefined” or “ForceCatch” or “ForceIgnore”


network_performance
string
“AppDefined” or “ForceTrue” or “ForceFalse”


social_mode
string
“AppDefined” or “Facebook” or “Twitter” or “FacebookAndTwitter”



Create an app platform
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X POST -d "{\"os\": \"android\",\"profile_merging\": true,\"push_attribution_timer\": 30,\"crash_handling\": \"ForceCatch\",\"network_performance\": \"ForceTrue\",\"social_mode\": \"FacebookAndTwitter\"}" https://api.mparticle.com/v1/apps/1?accountId=1

Example Create App Platform Request

{
  "os": "android",
  "profile_merging": true,
  "push_attribution_timer": 30,
  "crash_handling": "ForceCatch",
  "network_performance": "ForceTrue",
  "social_mode": "FacebookAndTwitter"
}


Example Create App Platform Response

{
  "data": [
    {
      "application_id": 1,
      "os": "Android",
      "access_keys": [
        {
          "key": "AccessKey",
          "secret": "AccessSecret",
          "data_type": "token"
        }
      ],
      "crash_handling": "AppDefined",
      "network_performance": "AppDefined",
      "social_mode": "AppDefined",
      "profile_merging": false,
      "push_attribution_timer": 30,
      "last_modified_on": "2014-11-05T20:09:46.577",
      "data_type": "platform",
      "created_on": "2014-06-11T19:43:48.697"
    }
  ],
  "dataType": "platform",
  "errors": null
}


POST /apps/1?accountId=1
Parameters



Name
Type
Description




os
string
Valid values for the “os” field include “iOS”, “tvOS”, “Android”, “MobileWeb”, “Roku”, “Alexa”, “SmartTV”, “FireTV”, and “Xbox”


profile_merging
bool
Enable or disable profile merging


push_attribution_timer
int
Push attribution timer in minutes


crash_handling
string
“AppDefined” or “ForceCatch” or “ForceIgnore”


network_performance
string
“AppDefined” or “ForceTrue” or “ForceFalse”


social_mode
string
“AppDefined” or “Facebook” or “Twitter” or “FacebookAndTwitter”



Errors



Name




Could not create platform: App does not exist or you do not have access.


Invalid os specified.


Platform already exists for the specified App.



Notes
Creating a new app or app platform will generate a new Access Key and Secret for that app platform, which can be accessed through the “access_keys”.  Note that this is the only time the Secret is transmitted - subsequent GET requests will only return the Access Key.
Delete an app platform
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X DELETE https://api.mparticle.com/v1/apps/1/platforms/ios?accountId=1

DELETE /apps/1/platforms/ios?accountId=1
App Platform Services
Get all services for an app platform
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/apps/1/platforms/ios/services?accountId=1`

Example Get App Platform Services Response

{
  "data": [
    {
      "account": "Default Account",
      "name": "GoogleAnalyticsEventForwarder",
      "isActive": true,
      "isVisible": true,
      "settings": [
        {
          "name": "apiKey",
          "value": "*********** Key",
          "isConfidential": true
        }
      ],
      "data_type": "service"
    }
  ],
  "dataType": "service",
  "errors": null
}


GET /apps/1/platforms/ios/services?accountId=1
Configure a service for an app platform
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X PUT -d "{\"account\": \"Default Account\", \"name\":\"GoogleAnalyticsEventForwarder\",\"isActive\":true,\"isVisible\": true,\"settings\":[{\"name\":\"apiKey\",\"value\":\"My Test App Key\"}]}" https://api.mparticle.com/v1/apps/1/platforms/ios/services?accountId=1

Example Configure Service Request

{
  "account": "Default Account",
  "name":"GoogleAnalyticsEventForwarder",
  "isActive":true,
  "isVisible": true,
  "settings":[
    {
      "name":"apiKey",
      "value":"My Test App Key"
    }
  ]
}


PUT /apps/1/platforms/ios/services?accountId=1
Parameters



Name
Type
Description




account
string
The name of the account you wish to configure.


name
string
The name of the service you wish to configure


isActive
bool
Controls whether data is actually pushed to the service


isVisible
bool
Whether the service is visible in the UI


settings
array
Array of setting objects



Errors



Name




Specified service not found.


Service does not support app platform.


Invalid settings entered while updating the service.


Provided setting not found.


Required setting not provided.


Setting value is required.



Notes
To discover what settings are available for each service, you can call https://api.mparticle.com/v1/services?accountId=1 to discover all services and supported settings.
The “account” parameter allows you to forward data to more than one account per service. It is internal to mParticle, and can be set to any name of your choosing.
If omitted or set to null, the account name will be set to “Default Account”.
The “isVisible” flag allows you to create services that forward data in the background, but are not visible in the mParticle UI. This allows you to have two active forwarders per combination of app platform and service. This field is not required and will default to true if omitted.
Audiences
Get All Audiences for an Account
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/audiences?accountId=1

Example Response
[
    {
        "name": "Abandoned Cart",
        "external_name": "Abandoned Cart",
        "size": 342,
        "created_by": "jsmith",
        "last_modified_by": "mmann",
        "last_modified_on": "2017-01-12T17:27:34.387",
        "is_calculated": false,
        "added_last_24_hours": 10,
        "dropped_last_24_hours": 7,
        "status": "active",
        "connected_outputs": [
            {
                "provider_name": "Mixpanel",
                "configurations": [
                {
                    "name": "Prod"
                }
                ],
                "data_type": "audience_output"
            },
            {
                "provider_name": "ActionX",
                "configurations": [
                {
                    "name": "Dev"
                }
                ],
                "data_type": "audience_output"
            }
        ],
        "data_type": "audience",
        "id": 7622
    }
]

GET /audiences?accountId=1
This request returns an array containing all active single and multiple workspace audiences for an account. Details for each audience include:

name / external_name - The names for the audience shown within the mParticle dashboard and to external platforms.
id - the unique mParticle identifier for the audience.
is_calculated - true if boolean logic is used to build the audience.
connected_outputs - A list of each output platform the audience is currently connected to.

Users
Get all users
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/users?accountId=1

Example Get All Users Response
{
  "data": [
    {
      "first_name": "Test",
      "last_name": "User",
      "email": "testuser@mparticle.com",
      "data_type": "user"
    }
  ],
  "dataType": "user",
  "errors": null
}

GET /users?accountId=1
Get a specific user
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/users/test%40mparticle%2Ecom?accountId=1

Example Get Specific User Response
{
  "data": [
    {
      "first_name": "Test",
      "last_name": "User",
      "email": "test@mparticle.com",
      "data_type": "user"
    }
  ],
  "dataType": "user",
  "errors": null
}

GET /users/test%40mparticle%2Ecom?accountId=1
Create User
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X POST -d "{\"first_name\": \"Test\",\"last_name\": \"User\",\"email\": \"testuser@mparticle.com\"}" https://api.mparticle.com/v1/users?accountId=1

Example Create User Request 
{
  "first_name": "Test",
  "last_name": "User",
  "email": "testuser@mparticle.com"
}

POST /users?accountId=1
Parameters



Name
Type
Description




first_name
string
First name of the user to add


last_name
string
Last name of the user to add


email
string
Email address of the user to add



Errors



Name




First name or last name required.


Email is required.


Email must be a valid email format.



Delete User
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X DELETE https://api.mparticle.com/v1/users?accountId=1

DELETE /users/test%40mparticle%2Ecom?accountId=1
Services
When getting service information, both configuration and connection settings are returned.  Refer to the Custom Service Settings for specifying these settings.
Get all services available for an account
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/services?accountId=1

Example Get All Services Response
{
  "data": [
    {
      "name": "ActionX",
      "settings": [
        {
          "is_required": true,
          "name": "advertiserToken",
          "description": "The ActionX Advertiser Token for your app.",
          "type": "String"
        },
        {
          "is_required": false,
          "name": "useCustomerId",
          "description": "If enabled, mParticle will forward your Customer ID values to ActionX.",
          "type": "Bool"
        }
      ],
      "data_type": "service"
    }
  ],
  "dataType": "service",
  "errors": null
}

GET /services?accountId=1
Get a specific service with settings
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/services/Amplitude?accountId=1

Example Get Specific Services Response
{
  "data": [
    {
      "name": "Amplitude",
      "settings": [
        {
          "is_required": true,
          "name": "apiKey",
          "description": "Your app's Amplitude API Key.  You can find this on the \"My Account\" page of Amplitude's dashboard.",
          "type": "String"
        },
        {
          "is_required": true,
          "name": "userIdentification",
          "description": "To identify users, choose \"Customer ID\" to send Customer ID if provided or or \"Email\" to send Email addresses if provided.",
          "type": "String"
        },
        {
          "is_required": false,
          "name": "includeEmailAsUserProperty",
          "description": "If true, a hashed Customer ID, when available, will be forwarded as User ID",
          "type": "Bool"
        }
      ],
      "data_type": "service"
    }
  ],
  "dataType": "service",
  "errors": null
}

GET /services/Amplitude?accountId=1
DataPoints
A DataPoint represents a unique data item that has been detected by our system. A DataPoint can be created by calling methods on our SDK such as logEvent, or they can be created using the Server API.  Examples of DataPoints are Screen Views, Purchase Events, Navigation Events and Search events among others. All DataPoints are specific to a particular App.
Get DataPoints for an App
Retrieves a list of DataPoints that exist for an App.
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/apps/1/datapoints?accountId=1

Example Get Specific Services Response
{
  "data": [
    {
      "name": "my event",
      "attribute_name": null,
      "type": "Event",
      "event_type": "navigation",
      "data_type": "datapoint",
      "created_on": "2015-06-04T18:11:06.027"
    },
    {
      "name": "my event",
      "attribute_name": "my event attribute",
      "type": "EventAttribute",
      "event_type": "navigation",
      "data_type": "datapoint",
      "created_on": "2015-06-04T18:53:23.25"
    },
    {
      "name": "my screen view",
      "attribute_name": null,
      "type": "ScreenView",
      "event_type": null,
      "data_type": "datapoint",
      "created_on": "2015-06-04T18:53:23.25"
    },
    {
      "name": "my screen view",
      "attribute_name": "my screen view attribute",
      "type": "ScreenViewAttribute",
      "event_type": null,
      "data_type": "datapoint",
      "created_on": "2015-06-04T18:53:23.25"
    }
  ],
  "dataType": "datapoint",
  "errors": null
}

GET /apps/1/datapoints
Supported DataPoint Types



Name
Description




Event
A standard app event


EventAttribute
An attribute of an app event


UserAttribute
A user attribute


ScreenView
A screen view


ScreenViewAttribute
An attribute of a screen view


Identity
A user identity type


Commerce
A commerce event


CommerceAttribute
An attribute of a commerce event



Supported DataPoint Event Types
If a DataPoint is of type “Event” or “EventAttribute”, then the EventType field will be populated
with one of the following values:



Name
Description




unknown
Unknown Event


navigation
Navigation Event


location
Location Event


search
Search Event


transaction
Transaction Event


user_content
User Content Event


user_preference
User Preference Event


social
Social Event


other
Other Event


media
Media Event



If a DataPoint is of type “Commerce” or “CommerceAttribute”, then the EventType field will be populated
with one of the following values:



Name
Description




product_add_to_cart
Add to Cart Event


product_remove_from_cart
Remove from Cart Event


product_checkout
Checkout Event


product_checkout_option
Checkout Option Event


product_click
Click Event


product_view_detail
View Detail Event


product_purchase
Purchase Event


product_refund
Refund Event


promotion_view
Promotion View Event


promotion_click
Promotion Click Event



Add DataPoint
Adds a new DataPoint for an App.
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X PUT -d "{\"name\":\"my event\",\"type\":"event",\"event_type\": "navigation"}" https://api.mparticle.com/v1/apps/1/datapoints?accountId=1

Example Insert New DataPoint

[
  {
    "name": "my event",
    "type": "event",
    "event_type": "navigation"
  }
]


PUT /apps/1/datapoints
Parameters
Accepts an array of DataPoint objects, which have the following properties:



Name
Type
Description




name
string
The name of the DataPoint


attribute_name
string
An attribute name (optional)


type
enum
The type of DataPoint


event_type
enum
Can only be set if DataPoint type is “Event”, “EventAttribute”, “Commerce” or “CommerceAttribute”



Supported DataPoint Types
The “type” field can be set to one of the following values:



Name
Description




Event
A standard app event


EventAttribute
An attribute of an app event


UserAttribute
A user attribute


ScreenView
A screen view


ScreenViewAttribute
An attribute of a screen view


Identity
A user identity type


Commerce
A commerce event


CommerceAttribute
An attribute of a commerce event



Supported Event Types
The “event_type” field can be set to one of the following values. This field is only required when the “type” is set to “Event” or “EventAttribute”.



Name
Description




unknown
Unknown Event


navigation
Navigation Event


location
Location Event


search
Search Event


transaction
Transaction Event


user_content
User Content Event


user_preference
User Preference Event


social
Social Event


other
Other Event


media
Media Event



Notes
You can add new DataPoints for an App using the API. DataPoints are automatically detected when data is received from your App, however it may be more convenient to insert this data using the API in advance, rather than waiting until your App is fully instrumented using the mParticle SDK. This will allow you to configure features such as Data Filtering without having to wait for App instrumentation to be completed.
DataPoint Filters
Get Service Filtering
Get default filtering behavior for a service.
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/apps/1/GoogleAnalyticsEventForwarder?accountId=1

Example Get Service Filtering Response
{
  "data": [
    {
      "name": "GoogleAnalyticsEventForwarder",
      "sendNewDataPointsByDefault": true
    }
  ],
  "dataType": "datapoint",
  "errors": null
}

GET /apps/1/GoogleAnalyticsEventForwarder?accountId=1
Notes
This call shows any filtering configuration that exists at the Service level. Currently, this is just one property, “sendNewDataPointsByDefault”, which controls whether newly detected DataPoints are sent to this Service by default.
Update Service Filtering
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X PUT -d "{\"sendNewDataPointsByDefault\":false}" https://api.mparticle.com/v1/apps/1/GoogleAnalyticsEventForwarder/datapoints?accountId=1

Example Update DataPoint Filter

{
  "sendNewDataPointsByDefault": false
}


PUT /apps/1/GoogleAnalyticsEventForwarder?accountId=1
Parameters



Name
Type
Description




sendNewDataPointsByDefault
bool
Controls whether newly detected DataPoints are sent to this service by default.



Notes
Setting “sendNewDataPointsByDefault” to false will prevent newly detected DataPoints from being sent to the specified Service. Any existing DataPoints will not be affected, and will continue to be sent or filtered based on the existing configuration.
Get DataPoint Filters
Retrieve a list of DataPoint filters for a specific App and Service.
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/apps/1/GoogleAnalyticsEventForwarder/datapoints?accountId=1

Example Get Specific Services Response
{
  "data": [
    {
      "name": "my event",
      "attribute_name": null,
      "type": "Event",
      "event_type": "navigation",
      "enabled": true,
      "data_type": "datapoint",
      "created_on": "2015-06-04T18:11:06.027"
    },
    {
      "name": "my event",
      "attribute_name": "my event attribute",
      "type": "EventAttribute",
      "enabled": false,
      "event_type": "navigation",
      "data_type": "datapoint",
      "created_on": "2015-06-04T18:53:23.25"
    }
  ],
  "dataType": "datapoint",
  "errors": null
}

GET /apps/1/GoogleAnalyticsEventForwarder/datapoints?accountId=1
Notes
Note that this list of DataPoints are filtered by types that are supported by the service.  If the service does not support the ScreenView DataPoint for example, then this DataPoint will not appear in the list.
The DataPoint types “EventAttribute”, “ScreenViewAttribute”, and “CommerceAttribute” are child DataPoints that have a parent DataPoint. In these cases, “attribute_name” will contain the name of the attribute, and “name” will contain the name of the parent.
Update DataPoint Filters
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -H "Content-Type: application/json" -X PUT -d "[{\"name\":\"my event\", \"type\":\"event\", \"event_type\": \"navigation\", \"enabled\": true},{\"name\": \"my event\",\"attribute_name\": \"my event attribute\",\"event_type\": \"navigation\",\"type\": \"eventattribute\",\"enabled\": false}]" https://api.mparticle.com/v1/apps/1/GoogleAnalyticsEventForwarder/datapoints?accountId=1

Example Update DataPoint Filter

[
  {
    "name": "my event",
    "type": "Event",
    "event_type": "navigation",
    "enabled": true
  },
  {
    "name": "my event",
    "attribute_name": "my event attribute",
    "type": "EventAttribute",
    "event_type": "navigation",
    "enabled": false
  }
]


PUT /apps/1/GoogleAnalyticsEventForwarder/datapoints?accountId=1
Parameters
Accepts an array of DataPoint Filter objects, which have the following properties:



Name
Type
Description




name
string
The name of the DataPoint


attribute_name
string
An attribute name (optional)


type
enum
The type of DataPoint


event_type
enum
Can only be set if DataPoint type is “Event”, “EventAttribute”, “Commerce” or “CommerceAttribute”


enabled
bool
Set to false to prevent this DataPoint from being sent to this service



Supported DataPoint Filter Types
The “type” field can be set to one of the following values:



Name
Description




Event
A standard app event


EventAttribute
An attribute of an app event


UserAttribute
A user attribute


EventType
Filter all app events of a particular type


ScreenView
A screen view


ScreenViewAttribute
An attribute of a screen view


UserIdentity
A user identity type


Commerce
A commerce event


CommerceAttribute
An attribute of a commerce event



Supported User Identity Types
If the “type” is set to “UserIdentity”, then the “name” field should be set to one of the following allowed values:



Name
Description




CustomerId
Customer Id


Facebook
Facebook Id


Twitter
Twitter Handle


Google
Google Id


Microsoft
Microsoft Id


Yahoo
Yahoo Id


Email
Email Address


Other
Other



Supported Event Types
If the “type” is set to “Event” or “EventAttribute”, the “event_type” field can be set to one of the following values. If “type” is set to “EventType”, then the “name” field should be set to one of the values below:



Name
Description




unknown
Unknown Event


navigation
Navigation Event


location
Location Event


search
Search Event


transaction
Transaction Event


user_content
User Content Event


user_preference
User Preference Event


social
Social Event


other
Other Event


media
Media Event



If the “type” is set to “Commerce” or “CommerceAttribute”, the “event_type” field can be set to one of the following values:



Name
Description




product_add_to_cart
Add to Cart Event


product_remove_from_cart
Remove from Cart Event


product_checkout
Checkout Event


product_checkout_option
Checkout Option Event


product_click
Click Event


product_view_detail
View Detail Event


product_purchase
Purchase Event


product_refund
Refund Event


promotion_view
Promotion View Event


promotion_click
Promotion Click Event



Notes
When configuring DataPoints of type “EventAttribute” or “ScreenViewAttribute” or “CommerceAttribute”, you must include the name of the attribute in “attribute_name”, and the name of the parent DataPoint in “name”.
When configuring DataPoints of type “Event” or “EventAttribute”, you must set the “event_type” field. Failure to do so will cause an error to occur. The “event_type” field is ignored for other types of DataPoints other than “Event” and “EventAttribute”.
If the DataPoint specified does not exist, it will be created automatically. Please note that to avoid creating duplicate DataPoints unintentionally, “type”, “name”, “attribute_name” and “event_type” should all be set correctly.
Due to the hierarchical nature of DataPoints, disabling some types of DataPoints will cause child DataPoints to also become disabled automatically. For example, turning off EventType “Navigation” will cause all Events and EventAttributes of that Event Type to become disabled. Turning off an Event will cause all child Event Attributes to become disabled.
Custom Service Settings
Google Analytics Settings
Google Analytics has a few configuration settings which require additional details to be set.  These settings are listed below are are noted with a type of Custom in the services call.:

customDimensions
customMetrics

Example Google Analytics configure Service Request using Custom Dimensions

{
  "account": "Default Account",
  "name":"GoogleAnalyticsEventForwarder",
  "isActive":true,
  "isVisible": true,
  "settings":[
    {
      "name":"apiKey",
      "value":"My Test App Key"
    }
    {
      "name":"customDimensions",
      "value":"[{\"maptype\":\"EventAttributeClass.Name\",\"map\":\"Bitcoins\",\"value\":\"Dimension 3\"}]"
    }
  ]
}


Check Google Analytics for additional details on these settings and the limits on the supported custom dimensions and metrics.  The value for these settings is a json array containing objects with maptype, map and value.  You need to indicate if you are using an Event Attribute or a User Attribute, and then specify the mapping to the Custom Dimension or Custom Metric.



Field
Description
Notes - examples




maptype
This indicates if you are passing an event or user attribute into the map
EventAttributeClass.Name or UserAttributeClass.Name or ProductAttributeClass.Name


map
The name of the event attribute, user attribute or product attribute.  The attribute name must match exactly or it will not map correctly.
For example, Bitcoins


value
The custom dimension or custom metric for the mapping
For example, Dimension 3 or Metric 1



Workspace and User Insights
Get list of workspaces for an account
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/workspace?accountId=1`

Example Response
{
  "data": [
    {
      "id": "4302",
      "name": "mP Traveller",
      "data_type": "workspace",
      "created_on": "2017-02-02T11:20:23"
    }
  ],
  "dataType": "workspace",
  "errors": null
}

GET /workspace?accountId=1
Returns a list of all workspaces for an account. Workspace IDs can be used to request the User Insights report.
Get a list of partner feeds for a workspace
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/workspace/1/partnerfeeds?accountId=1`

Example Response

{
  "data": [
    {
      "id": "4302",
      "name": "mP Traveller",
      "data_type": "partner_feed",
      "created_on": "2017-04-05T10:40:23"
    }
  ],
  "dataType": "partner_feed",
  "errors": null
}


GET /workspace/1/partnerfeeds?accountId=1
Returns a list of partner feeds set up for a workspace. Feed IDs can be used in requesting User Insights reports.
Get User Insights for a Workspace
Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi883GHBBDnjsdKAJQxNjdjYUUJABbg6hdI.8V6HhxW-" -X GET https://api.mparticle.com/v1/workspace/1/userinsights?accountId=1&applicationid=1`

Example Response

{
    "data": [
        {
            "data_type": "user_insights",
            "report_calculation_time": "2017-03-03T15:47:48Z",
            "application_id": null,
            "app_unique_user_count": "66035",
            "app_session_count": "0",
            "app_median_session_length": null,
            "app_revenue": 0,
            "app_event_count": "",
            "report_rows": [
                {
                    "fact_name": "Seasonal&gt;Fall Seasonal&gt;Fall Fashionistas",
                    "fact_provider": null,
                    "fact_category": null,
                    "overlap_size": "936",
                    "session_count": "966",
                    "median_session_length": 372.111801242236,
                    "revenue": 9466800,
                    "event_count": "",
                    "overlap_percentage": 0.014174301506776709,
                    "session_count_lift": {
                        "lift": 0.018552369503018751,
                        "performance_indicator": "Average"
                    },
                    "session_length_lift": {
                        "lift": 0.00030054097375264988,
                        "performance_indicator": "Average"
                    },
                    "revenue_lift": {
                        "lift": 0.019499602849964992,
                        "performance_indicator": "Average"
                    },
                    "event_uul_lift": [
                        {
                            "lift": 0.31939538109423271,
                            "performance_indicator": "Average"
                        }
                    ],
                    "goal_lift": [
                        {
                            "lift": 0.31939538109423271,
                            "performance_indicator": "Average"
                        }
                    ],
                    "revenue_lift_amount": 0.019499602849964992,
                    "revenue_lift_performance_indicator": "Average",
                    "session_length_lift_amount": 0.00030054097375264988,
                    "session_count_lift_amount": 0.018552369503018751,
                    "session_count_lift_performance_indicator": "Average"
                },
                {
                    "fact_name": "CPG&gt;Household supplies buyers&gt;Food Storage",
                    "fact_provider": null,
                    "fact_category": null,
                    "overlap_size": "952",
                    "session_count": "996",
                    "median_session_length": 371.11646586345381,
                    "revenue": 9760800,
                    "event_count": "",
                    "overlap_percentage": 0.014416597259029303,
                    "session_count_lift": {
                        "lift": 0.029082137393966034,
                        "performance_indicator": "Average"
                    },
                    "session_length_lift": {
                        "lift": -0.0023750917649091319,
                        "performance_indicator": "Bad"
                    },
                    "revenue_lift": {
                        "lift": 0.030046600503051524,
                        "performance_indicator": "Average"
                    },
                    "event_uul_lift": [
                        {
                            "lift": -0.26524700153326963,
                            "performance_indicator": "Average"
                        }
                    ],
                    "goal_lift": [
                        {
                            "lift": -0.26524700153326963,
                            "performance_indicator": "Average"
                        }
                    ],
                    "revenue_lift_amount": 0.030046600503051524,
                    "revenue_lift_performance_indicator": "Average",
                    "session_length_lift_amount": -0.0023750917649091319,
                    "session_count_lift_amount": 0.029082137393966034,
                    "session_count_lift_performance_indicator": "Average"
                }
            ]
        }
    ]
}


GET /workspace/1/userinsights?accountId=1
Returns a JSON version of the mParticle Dashboard’s User Insights report.
Query string Parameters
To return a valid report you must include your accountID, and either a feedid or applicationid



Name
Type
Required
Description




accountId
int
Required
ID of your mParticle account as used for all platform API requests


feedid
int
Optional
Sets a feed for the User Insights report


applicationid
int
Optional
Sets an application for the User Insights report



User Profile API
The mParticle profile API allows you to RESTfully get information about a specific user profile such as:

Profile Information
Device Identities
User Identities
User Attributes
Audience Memberships

Endpoint
Follow the instructions at API Authentication to access the API.
Once you have authenticated, the API resources can be accessed at https://api.mparticle.com/v1/.
Subsequent updates to the API that are breaking changes will be published with a new version number in the URL.
API Usage
Sending Data
All POST/PUT requests should send JSON as the Request Payload, with Content-Type set to application/json.
Return Data
If an API request returns data, it will be wrapped in a common JSON structure, an example of which is to the right.
Get Profile Example Response
{
  "consumer_profiles": [
    {
      "id": 7196104703087826000,
      "created_timestamp_ms": 1474606149094,
      "last_stored_timestamp_ms": 1474646754882,
      "is_opted_out": false,
      "limit_ad_tracking": null,
      "device_identities": [
        {
          "type": "android_id",
          "encoding": "none",
          "value": "829f31ba-8b90-4ca8-914f-2dcf2675c504"
        },
        {
          "type": "ios_advertising_id",
          "encoding": "none",
          "value": "829F31BA-8B90-4CA8-914F-2DCF2675C504"
        }
      ],
      "user_identities": [
        {
          "type": "customer_id",
          "encoding": "none",
          "value": "333899"
        },
        {
          "type": "email",
          "encoding": "none",
          "value": "9370061@gmail.com"
        },
        {
          "type": "yahoo_id",
          "encoding": "none",
          "value": "5598766@yahoo.com"
        }
      ],
      "user_attributes": {
        "$Gender": "male",
        "$Zip": "14648",
        "status": "gold",
        "liveInNewYork": "true",
        "$Age": "15",
        "another new user attribute": "24"
      },
      "audience_memberships": [
      {
          "audience_id": "1234",
          "audience_name": "Active Users",
          "expiration_timestamp_ms": "1474646754882"
        }
      ]
    }
  ]
}


One or more entities will be returned as an array in the data property. If errors were encountered, they will be available as an array of error objects.
Error Response
{
  "data": [],
  "dataType": "app",
  "errors": [
    {
        "code": "VALIDATION_ERROR",
        "message": "Error message here"
    }
  ]
}

Status Codes
The following table lists the status codes that are returned by API requests:



Code
Description
Method
Notes




200
OK
GET
 


201
Created
POST
 


202
Accepted
PUT
 


204
No Content
DELETE
 


400
Bad Request
All
JSON Syntax is invalid


401
Unauthorized
All
User failed authentication


403
Forbidden
All
Identity is not authorized to invoke specified method


404
Not Found
GET
Resource does not exist or user does not have access


405
Method Not Allowed
All
Specified HTTP method not supported


422
Unprocessable Entity
PUT/POST/DELETE
Request failed business logic rules


500
Internal Server Error
All
Contact mParticle support to resolve this error



Cross Origin Resource Sharing
The mParticle Profile REST API supports Cross Origin Resource Sharing (CORS) for AJAX requests from any origin.
REST Resources
User Search
Payload Details
{
   "identity":
      {"type":"email",
       "encoding":"none",
       "value":"9370061@gmail.com"}
}

Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi341GHhnDnjsdKAJQxNjdjYuOJABbg6HdI.8V6HhxW-" -H "Content-Type: application/json" -X POST "https://api.mparticle.com/v1/app/{workspaceid}/consumerprofile/search"

POST /v1/app/{workspaceid}/consumerprofile/search
Parameters
The User Profile API supports the following parameters:



Name
Type
Description




type
string
The type of identity provided in the value parameter


encoding
string
The encoding of the identity provided in the value parameter


value
string
The identity value for the specified type and encoding



Supported Identity/Encoding Combinations
The following table lists the different identity types and encoding combinations which are supported:



Identity  Type/Encoding
lower_md5
lower_sha1
none
upper_md5
upper_sha1
upper_sha256




amp_id
 
 
Yes
 
 
 


android_id
Yes
Yes
Yes
Yes
Yes
 


customer_id
 
 
Yes
 
 
 


email
 
 
Yes
 
 
 


facebook_custom_audience_id
 
 
Yes
 
 
 


facebook_id
 
 
Yes
 
 
 


google_advertising_id
Yes
Yes
Yes
Yes
Yes
 


google_id
 
 
Yes
 
 
 


ios_advertising_id
Yes
Yes
Yes
Yes
Yes
Yes


ios_vendor_id
 
 
Yes
 
 
 


microsoft_id
 
 
Yes
 
 
 


other
 
 
Yes
 
 
 


push_notification_token
 
 
Yes
 
 
 


twitter_id
 
 
Yes
 
 
 


unknown
 
 
Yes
 
 
 


yahoo_id
 
 
Yes
 
 
 



User Event History
Payload Details
{
	"user_id": 7196104703087826000, // int64 MPID, required
	"from": "2017-03-24T00:00:00-04:00", //optional
	"to": "2017-04-01T00:00:00-04:00", // optional
	"max_record_count": 100 // optional, defaults to 50
}

Curl Syntax
curl -H "Authorization: Bearer YWIxMjdi341GHhnDnjsdKAJQxNjdjYuOJABbg6HdI.8V6HhxW-" -H "Content-Type: application/json" -X POST "https://api.mparticle.com/v1/app/{workspaceid}/events/search"

POST /v1/app/{workspaceid}/events/search
The User Event History API returns an array of event batches for a user in reverse chronological order.
The user_id field in the JSON payload is the unique mParticle id for the user. This can be retrieved from the user search API as the id field of a consumer_profile.
All other fields are optional. If no options are set, mParticle will return the most recent 50 event batches for the user. You can define a date range in YYYY-MM-DD HH:MM:SS format and set the max_record_count to a desired value.
Partner Guide
mParticle aims to allow our customers to access all of their data and send it to wherever they need it, so we need to integrate with many partners across the app ecosystem. To help new partners get up and running, we provide a simple toolset for partners to access the mParticle Firehose API, and to stream data to mParticle via our Server to Server API.
Once an integration is complete, we will work together on a release plan which includes:

High resolution partner logo with transparent background in vector format (svg) to be displayed on:
    
mParticle Integration page
mParticle platform for mutual customers to select and configure the integration


Add section for your integration under Event, Audience and/or Feed Configurations on the mParticle documentation site

Outbound Integrations
An Outbound Integration with mParticle can be set up via AWS Lambda or an HTTP endpoint, and you can integrate as an event and/or audience partner, depending on the features and functionality of your service. 
Below is a high level overview of the integration process:

Develop and test
    
Download and review the mParticle SDK & sample code
Implement handlers for module registration and data processing
Test locally using sample JSON


Build and deploy
    
For Lambda integrations, publish to your AWS Lambda account, provide mParticle your complete ARN, and grant mParticle execution access to your function
For HTTP integrations, provide mParticle with your endpoints for registration, event and/or audience


Register and verification
    
mParticle registers your endpoint to get registration metadata
mParticle sets up event and/or audience configurations to your endpoint for testing
mParticle and partner verify the configuration and mParticle deploys the new integration for general customer use



The following resources provide a starting point for developing a Firehose S2S integration with mParticle, using our Firehose Java SDK.

mParticle Java SDK is a Java library for building and deploying third-party extensions for mParticle over Amazon’s Lambda platform or using an HTTP server. This Github repository provides a brief architectural overview, steps, and samples.
mParticle Firehose wiki describes the process of building your integration, from module registration, event processing, audience processing, testing and deployment.

It is not necessary to use the Java SDK to build either a Lambda or HTTP integration, as long as you can respond to the following requests in the required format:

ModuleRegistrationRequest
EventProcessingRequest (Event integrations only)
AudienceSubscriptionRequest (Audience integrations only)
AudienceMembershipChangeRequest (Audience integrations only)

See the mParticle Firehose wiki for more information on these requests, and the JSON samples in the SDK repository for formatting.
AWS Lambda Integrations
Leveraging Amazon AWS’s Lambda platform, mParticle will send your “lambda function” data as it comes into our system so that your function can then forward it along to your own API.
Two sample projects are available on Github to help you get started with your Lambda integration:

Sample Project can be cloned to get started on building your Lambda integration.
Iterable Extension is a real world event and audience integration built using the mParticle Java SDK.  This can be used as a reference to see a full working example.
Javadocs contains the Javadocs for the different classes and methods available in the mParticle Java SDK.

Don’t forget to provide a high-resolution logo to mParticle in .svg format with a transparent background.
Performance
Tuning Tips

Machine size - AWS uses the memory that you allocate to your function as a proxy for CPU allocation. A function with 128MB of memory will be allocated 2x more CPU than a function with 64MB of memory, a function with 256MB will be allocated 2x CPU of a 128MB function, etc. Most of the Lambda functions that we see actually use less than 100MB of memory, but we provision them with 1024MB of memory just to get that CPU and reduce execution time. 
HTTP requests - Make only a single HTTP request for each function invocation, if possible. 
Blocking I/O - mParticle will invoke your AWS function from the AWS US East availability region - so your lambda function should be deployed in same US East region. Try to only make blocking I/O requests to other APIs physically nearby (rather than to the West Coast, for example).
Memory - Keep expensive objects in memory.  When mParticle invokes your Lambda function for the first time, AWS will immediately provision a machine for it. When repeated invocations are made over the span of minutes/seconds, that same machine/memory space will be used. This means that you should keep every object in memory that you can. A simple example of this is shown in our sample Firehose function. We allocate the MessageSerializer object as a member of the RequestStreamHandler instance. On subsequent invocations, the handleRequest function will be called on the same RequestStreamHandler instance, and therefore not waste time creating another MessageSerializer object.
    
The above point is particularly useful if you’re using an HTTP client or other I/O library that can reuse connections. Keep that client in memory as a member of your RequestStreamHandler instance, if possible.


Asynchronous I/O - AWS Lambda will allow you to create new threads, use thread pools, etc. If the above pointers still don’t help, you could always make your I/O requests completely asynchronous. Particularly for AudienceMembershipChangeRequests, you can queue your API request and return an empty AudienceMembershipChangeResponse to mParticle.  There are several HTTP client libraries such as Retrofit/OkHttp which make this really easy.

Lambda Throttling
mParticle servers will stream data to your function at the same rate at which it is received.   If your Lambda function cannot process the data as fast as mParticle is sending, mParticle will be throttled and will receive a 429 Too Many Requests error code. 
The default Lambda limits are:

The requests per second limit is 1000, which is account wide. 
The concurrent requests limit is 100, which is account wide.

Before publishing an integration, the concurrent requests limit must be increased to a minimal value of 1000 to prevent throttling.  Once the request has been submitted to AWS, mParticle can assist in escalating the ticket for completion.  The following parameters are suggested values which can be used in the request:

Expected Average Requests Per Second - 2,000
Expected Peak Requests Per Second - 10,000
Expected Function Duration in Seconds - 1
Function Memory Size - increase to a minimum of 256
Invocation Type - Request-Response
Event Source - HTTP API
Use Case Description - High volume function

Refer to the AWS documentation for additional details on AWS Lambda Limits and Scalability and Availability 
You can also check your current usage on the CloudWatch console by selecting Lambda below Metrics in the left pane. In the right pane, select Throttles as Metric Name and you should see anything you’re being throttled on within Lambda.  A good guide would be to take the highest number, and request 50% more than that.  You can request a higher limit by opening a case with AWS Support.
Keep this in mind as you’re developing your Lambda function as it may determine how it should process and to which of your APIs you should send data. Data rate and volume will depend on:

The size of the customer that has enabled your integration.
The amount of/types of data for which you register
If you have registered to receive Audience data, the volatility and size of a given customer’s audiences.

Latency Requirements
mParticle requires an average response time of under 200ms for 99% of all calls to your Lambda function.  

Testing - If during testing and review, the integration partner is unable to meet latency requirements, the integration will not be approved and made available in the mParticle Platform.  
Released - If the integration has been released and available to customers and latency drops below expected requirements, mParticle will within our best effort notify you immediately.  If integration partner is unable to remedy latency concerns within a reasonable time-frame, mParticle may disable the integration until latency requirements are met.  

HTTP Integrations
The HTTP integration method will make HTTP calls over TLS 1.1+ using the same protocol and integration methodology that AWS Lambda integrations use, except that it calls a nominated HTTP endpoint directly.
Endpoint Requirements:

The endpoint must be HTTPS.
The endpoint must be located in the East Coast United States.
Response latency must be under 100ms in order to ensure necessary throughput can be maintained.  We suggest requests are accepted and queued for asynchronous processing.
mParticle will send calls with an Authorization header.  You can choose whether to authenticate mParticle as the caller with this header.  The format will be “Authorization : Token [token]”.   This token value will be provided to you by email, encoded with a PGP encryption key you provide. To generate a token, mParticle needs to be able to import the ModuleRegistrationResponse, so this response should not require authentication.
Responses
    
mParticle expects to receive a 200 (OK) or a 202 (Accepted) response for all requests.
Retries will occur only if a 429 (Too Many Requests) response is received. A given message will retry 5 times before being dropped.
All 5XX errors will not be retried.



The endpoint must accept the same JSON format as the Lambda API.   Samples of the JSON requests can be found here.  The following methods should be supported:

Registration
    
ModuleRegistrationRequest - POST URL returning the JSON module registration response. 


Event 
    
EventProcessingRequest - POST URL returning an EventProcessingResponse


Audience
    
AudienceSubscriptionRequest - POST URL returning an AudienceSubscriptionResponse
AudienceMembershipChangeRequest - POST URL returning an AudienceMembershipChangeResponse



Don’t forget to provide a high-resolution logo to mParticle in .svg format with a transparent background.
Embedded Kit Integrations
In a mobile environment, most of mParticle’s integrations involve collecting data using the mParticle SDK, transforming it into a format accepted by the partner and forwarding it to the partner, server-to-server. Occasionally, there are features of a partner platform, using their own SDK, which are not currently supported using mParticle’s SDK and S2S forwarding.
In these cases, it may be possible to create an embedded kit integration. In this scenario, the partner develops a version of their SDK, delivering key functionality, that can be wrapped by the mParticle SDK, allowing direct communication between client mobile app  and the partner.
Typically, mParticle will only commit to supporting an embedded kit integration when an mParticle customer has indicated that it is a requirement and commited to incorporating the kit into their app.
The following resources are available for developing embedded kit integration:

Android

Example Kit 
Development Guide 


iOS

Example Kit 
Development Guide



As with other integration types, you will need to provide a high resolution logo for your company in SVG format, for our integration directory. mParticle will work with you to collect other information required and to test and deploy your integration.
Inbound Integrations
Partners can also send client data to mParticle as a Feed, so that mutual customers can forward their data on to other services. To make a customer’s data available as a Feed, you need to send it to mParticle’s Server to Server API in mParticle’s batch format.
mParticle will provide you with a template to complete with information about your company and the data your feed will provide. We will also work with you to document your feed and test that it performs as expected.
To build a Feed integration, you need to:

Create a function or service to convert the data you want to forward into mParticle’s batch format.
Create a secure way for your clients to be able to provide you with the API Key and Secret necessary to send their data to mParticle’s Server to Server API. You can either build this into your Platform UI or communicate directly with each client wanting to access your Feed in mParticle.
Using the credentials provided by each client, forward data either to our HTTPS API or an Amazon SQS endpoint. See our Server to Server API documentation for more information.

Don’t forget to provide a high-resolution logo to mParticle in .svg format with a transparent background.
FAQ
What happens to my data if I cancel my subscription?
Your data can be exported or will be deleted within 30 days.
Who owns the data?
We take data ownership very seriously which means your data is your data and yours alone. You decide what you want to do with it. We do not combine data across clients for our own marketing purposes or co-mingle client data in any way.
How long does it take to integrate?
Implementing mParticle can range based upon your objectives. Depending on if you’re solving for speed and simplicity or if you’re going for total control, mParticle can be implemented in as little as 5 minutes.
How long do you keep my data active for?
It varies by plan, and each plan can be customized further depending on how long you want your data to be readily available.
Do you compete with any of the services you’re integrated into?
No! mParticle is a data and integration layer that makes it easier for you to use the great services without further code changes.  You still have to establish a direct relationship with each of the integrations you want to use. 
What platforms do you support?
Currently, we support:  

iOS  
tvOS  
Android  
Alexa  
Roku  
FireTV  
Xbox  
SmartTV 
Mobile Web   

How can I be assured that no data will be lost and what happens if one of the integrations goes down?
Not to worry! We store your data on Amazon S3 and then again on Amazon Glacier for long term storage. Amazon S3 has never had an outage resulting in data loss and is designed to provide 99.999999999% durability of objects over a given year.  If an integration goes down, we queue up all pending messages and send them on their way once the integration is restored.
If I can’t find what I’m looking for in the docs or I have other questions, where can I go for help?
You can always reach us at support@mparticle.com - we love questions and feedback!




iOS
Android
Javascript
Unity





    © 2016 mParticle, Inc. All rights reserved.
    



