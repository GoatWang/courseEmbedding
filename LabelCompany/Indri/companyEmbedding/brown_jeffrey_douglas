


Jeffrey Douglas Brown - Sacramento, CA | Intelius



























Sign In



We found Jeffrey Douglas Brown in Sacramento, CA


Jeffrey Douglas Brown

                                                                           Intelius found that Jeffrey Douglas Brown  is  a male between 40 and 50 years old from Sacramento, CA.  We have connected them to
                8 addresses,
                4 phones,
                and 4 relatives or associates.
         





Also Known As

Jeff  Brown


Get Report Now

Age

Jeffrey Douglas Brown is in his 40s

Jeffrey Has Lived In

Sacramento, CA
Concord, CA
El Macero, CA

Jeffrey's Relatives

Mary Brown
Lorraine Brown
Hollie Brown
Christina Brown







Jeffrey Douglas Brown



Zodiac SignSagittarius



GenderMale



Get Report Now










Want to know more about Jeffrey? Get a comprehensive background report, find full phone numbers, and other contact information when available, all from billions of available public records.
            Continue below for more details about Jeffrey, or use our people search engine to find others.
Get Background Check on Jeffrey Douglas Brown
Get a Criminal Check on Jeffrey Douglas Brown
Get a Public Record Report on Jeffrey Douglas Brown
Get a People Search Report on Jeffrey Douglas Brown


Jeffrey Douglas Brown's Contact Information
Known Cities Lived In
Find out where Jeffrey Douglas Brown has lived as well as Jeffrey Douglas Brown's phone numbers and email addresses.




Jeffrey Douglas Brown Has Lived in 1 States
California Address for Jeffrey Douglas Brown


2723 1*** S* 

Sacramento, CA


Has Lived In

Sacramento, CA
Concord, CA


Get Full Address Report










Phone Numbers Associated with Jeffrey Douglas Brown

(916) ***-**** - Sacramento, CA 
(530) ***-**** - Woodland, CA 
(916) ***-**** - Sacramento, CA 


Get Full Phone Report



Email Addresses Associated with Jeffrey Douglas Brown

j**********n@***.net


Get Email Report




Jeffrey Douglas Brown's Social Network and Potential Email Matches
Find out potential social network profiles and potential email usernamed for Jeffrey Douglas Brown


Jeffrey Douglas Brown's known Social Networks And Potential Email Matches

Find all of Jeffrey Douglas Brown's Social Network Profiles

Get Full Report

Search Social Networks
Including Facebook, LinkedIn, MySpace, Google, Twitter, Yahoo, Jigsaw, ZoomInfo and more



Potential Email Matches
Jeffrey Brown
Username Matches

                  JeffreyBrown
                  BrownJeffrey
                  Jeffrey.Brown
                  Brown.Jeffrey
                  Jeffrey_Brown
                  Brown_Jeffrey
                  Jeffrey-Brown
                  Brown-Jeffrey
                  JBrown
               


Popular Email Services

@gmail.com
@aol.com
@yahoo.com
@comcast.net
@hotmail.com
@msn.com
@rocketmail.com
@att.net
@sbcglobal.net
@ymail.com
@facebook.com
@mail.com
@bellsouth.net
@live.com
@earthlink.net
@cox.net
@prodigy.net
@me.com
@peoplepc.com
@juno.com
@rediffmail.com
@mindspring.com
@comcast.com
@charter.net
@outlook.com




All trademarks, product names, company names or logos on this page are the property of their respective owners.
Related People Searches
J Brown







         Intelius is a leading provider of public data about people and their connections to others. Intelius does not provide consumer reports and is not a consumer reporting agency as defined by the Fair Credit Reporting Act (FCRA). This site should not be used to determine an individual’s eligibility for credit, insurance, employment, housing or any other purpose covered by the FCRA. For employment or tenant screening services, please visit our partner Talentwise.
      

About Us
Site Map
About Our Reports
Blog
Help
Contact Us

© 2003 – 2017 PeopleConnect, Inc. d/b/a Intelius. All Rights Reserved.
         Privacy Policy - UPDATED
Terms of Service - UPDATED






What is the FCRA?
The Fair Credit Reporting Act ("FCRA") is a federal law that promotes the accuracy, fairness and privacy of information in the files of consumer reporting agencies.
Intelius does not provide consumer reports and is not a consumer reporting agency as defined by the FCRA. Intelius reports cannot be used for background checks related to consumer credit, insurance, employment, housing or any other purpose
                  prohibited under the FCRA.
You may not use any information obtained from Intelius for any purpose covered by the FCRA.
Find out more about the FCRA here.














Jeffrey Douglas Brown - Brownsboro, AL | Intelius



























Sign In



We found Jeffrey Douglas Brown in Brownsboro, AL


Jeffrey Douglas Brown

                                                                           Intelius found that Jeffrey Douglas Brown  is  a male between 40 and 50 years old from Brownsboro, AL.  We have connected them to
                11 addresses,
                6 phones,
                and 3 relatives or associates.
         





Also Known As

Jeff Douglas Brown
Jeff A Brown
Jeffrey A Brown


Get Report Now

Age

Jeffrey Douglas Brown is in his 40s

Jeffrey Has Lived In

Brownsboro, AL
Auburn, AL
Huntsville, AL

Jeffrey's Relatives

Natala Brown
Denise Brown
Natalie Brown







Jeffrey Douglas Brown



Zodiac SignCapricorn



GenderMale



Get Report Now










Want to know more about Jeffrey? Get a comprehensive background report, find full phone numbers, and other contact information when available, all from billions of available public records.
            Continue below for more details about Jeffrey, or use our people search engine to find others.
Get Background Check on Jeffrey Douglas Brown
Get a Criminal Check on Jeffrey Douglas Brown
Get a Public Record Report on Jeffrey Douglas Brown
Get a People Search Report on Jeffrey Douglas Brown


Jeffrey Douglas Brown's Contact Information
Known Cities Lived In
Find out where Jeffrey Douglas Brown has lived as well as Jeffrey Douglas Brown's phone numbers and email addresses.




Jeffrey Douglas Brown Has Lived in 2 States
Alabama Address for Jeffrey Douglas Brown


1001 H****** F*** B*** 

Brownsboro, AL


Has Lived In

Brownsboro, AL
Auburn, AL


Get Full Address Report










Phone Numbers Associated with Jeffrey Douglas Brown

(256) ***-**** - Huntsville, AL 
(334) ***-**** - Brownsboro, AL 
(334) ***-**** - Dothan, AL 


Get Full Phone Report



Email Addresses Associated with Jeffrey Douglas Brown



Get Email Report




Jeffrey Douglas Brown's Social Network and Potential Email Matches
Find out potential social network profiles and potential email usernamed for Jeffrey Douglas Brown


Jeffrey Douglas Brown's known Social Networks And Potential Email Matches

Find all of Jeffrey Douglas Brown's Social Network Profiles

Get Full Report

Search Social Networks
Including Facebook, LinkedIn, MySpace, Google, Twitter, Yahoo, Jigsaw, ZoomInfo and more



Potential Email Matches
Jeffrey Brown
Username Matches

                  JeffreyBrown
                  BrownJeffrey
                  Jeffrey.Brown
                  Brown.Jeffrey
                  Jeffrey_Brown
                  Brown_Jeffrey
                  Jeffrey-Brown
                  Brown-Jeffrey
                  JBrown
               


Popular Email Services

@gmail.com
@aol.com
@yahoo.com
@comcast.net
@hotmail.com
@msn.com
@rocketmail.com
@att.net
@sbcglobal.net
@ymail.com
@facebook.com
@mail.com
@bellsouth.net
@live.com
@earthlink.net
@cox.net
@prodigy.net
@me.com
@peoplepc.com
@juno.com
@rediffmail.com
@mindspring.com
@comcast.com
@charter.net
@outlook.com




All trademarks, product names, company names or logos on this page are the property of their respective owners.
Related People Searches
J Brown







         Intelius is a leading provider of public data about people and their connections to others. Intelius does not provide consumer reports and is not a consumer reporting agency as defined by the Fair Credit Reporting Act (FCRA). This site should not be used to determine an individual’s eligibility for credit, insurance, employment, housing or any other purpose covered by the FCRA. For employment or tenant screening services, please visit our partner Talentwise.
      

About Us
Site Map
About Our Reports
Blog
Help
Contact Us

© 2003 – 2017 PeopleConnect, Inc. d/b/a Intelius. All Rights Reserved.
         Privacy Policy - UPDATED
Terms of Service - UPDATED






What is the FCRA?
The Fair Credit Reporting Act ("FCRA") is a federal law that promotes the accuracy, fairness and privacy of information in the files of consumer reporting agencies.
Intelius does not provide consumer reports and is not a consumer reporting agency as defined by the FCRA. Intelius reports cannot be used for background checks related to consumer credit, insurance, employment, housing or any other purpose
                  prohibited under the FCRA.
You may not use any information obtained from Intelius for any purpose covered by the FCRA.
Find out more about the FCRA here.













Jeffrey Brown, Beacon Capital Partners Inc: Profile & Biography - Bloomberg


































































  
























Feedback





Jeffrey Brown

Senior Managing Director,
Beacon Capital Partners Inc






Career History




Managing Director
Beacon Capital Partners LLC, PRESENT


Senior Managing Director
Beacon Capital Partners Inc, PRESENT


Consultant
E&Y Kenneth Leventhal Grp, 1994-1996



Beacon Capital Partners LLC, 1/1998-UNKNOWN


Financial Analyst
Beacon Properties Corp, 1996-UNKNOWN



Beacon Capital Partners Inc, 1996-UNKNOWN


Managing Director
Beacon Capital Partners Inc, FORMER


Show More









Website:
www.beaconcapital.com






Corporate Information
Address:

1 Federal Street
Boston, MA 02110
United States


Phone:
1-617-457-0400


Fax:
1-617-457-0499


Web url:
www.beaconcapital.com











From The Web












Personal Information



Education



Cornell University
Bachelor's Degree








Awards & Publications



Certificates




Chartered Financial Analyst (CFA)









Sponsored Financial Commentaries







More From The Web


















Home


News


Top Headlines
Most Popular
Exclusive
Law
Entrepreneurs
Leaders
Economy
Environment
Science
Sports
Markets Magazine
Pursuits Magazine
Bloomberg Visual Data
Bloomberg Best (and Worst)
For comments or complaints about news coverage click here


Regions
U.S.
China
Europe
Asia
U.K. & Ireland
Australia & New Zealand
Canada
India & Pakistan
Japan
Africa
Eastern Europe
Latin America
Middle East
Markets
Commodities
Currencies
Bonds
Stocks
Energy Markets
Municipal Bonds
Emerging Markets
Funds
Islamic Finance
Industries
Energy
Technology
Real Estate
Finance
Health Care
Transportation
Insurance
Retail
Media
Manufacturing




Quick


Market Data


Stocks
Stock Futures
World Indexes
Americas
Europe, Middle East, & Africa
Asia-Pacific
Gainers & Losers
Earnings Calendar
Industry Leaders
Currencies
Americas
Europe, Middle East, & Africa
Asia-Pacific
Foreign Exchange Cross Rates
FX Fixings
Currency Converter
Forex Trading Videos
Commodities
Energy Prices
Metals Prices
Agricultural Prices


Rates & Bonds
US Treasuries
UK Gilts
Germany Bunds
Japan Bonds
Australia Bonds
Bloomberg Bond Indexes
Corporate Bonds
Consumer Rates
Economic Calendar
Watchlist
European Debt Crisis
Symbol Search
The Market Now




Personal Finance


Top Headlines
Saving & Investing
Real Estate
Retirement Planning
Financial Advisers
Taxes
Blog: Ventured & Gained
Real Cost Of
Money Gallery
Calculators
Watchlist (Portfolio Tracker)




Tech


Top Headlines
Social Media
Mobile & Wireless
Web
Enterprise Tech
TV, Games & Movies
Apple
Tech Deals
Global Tech
Slideshows
Videos




U.S. Politics


Sustainability


Top Headlines
Energy
Corporate Sustainability
Policy
Natural Resources
Health & Population
Slideshows
Videos
Blog: The Grid




Luxury


Top Headlines
Autos
Billionaires
Living
Property
Travel
Well Spent
Loot Blog
Pursuits Magazine
Videos




TV


Live TV
Channel Finder
Personalities
Apple TV
iPad App
Schedule
U.S.
Asia
Europe


Shows
Surveillance
Market Makers
Lunch Money
Street Smart
Bloomberg West
Game Changers




Video


Must See
Latest
Live TV
Shows
Playlist




Radio


Live Radio
Shows
Schedule
Personalities
Podcasts
Bloomberg Brief
Featured Podcasts and New Shows
Bloomberg View
Masters in Business
First Word
Surveillance
Bloomberg Advantage
In the Loop
Bloomberg Law
Taking Stock
Bloomberg Best
More Podcasts




Blogs


Global Tech
The Grid
Loot
The Market Now
Political Capital
Tech Deals
Ventured and Gained




Opinion




My Saved



Registration



Sign In



Bloomberg.com



Businessweek.com



Company



About
Blog
Careers
Diversity & Inclusion
News Mission
Philanthropy & Engagement
Press Room
Procurement
Sustainability




Products



Financial Products
Bloomberg Professional Service
Bloomberg Anywhere
Bloomberg Tradebook
Bloomberg Briefs
Bloomberg Indexes
Bloomberg SEF
Service Center
Customer Support
Enterprise Products
Enterprise Solutions
Trading Solutions
Industry Products
Bloomberg BNA
Bloomberg Government
Bloomberg Law
Bloomberg Link
Bloomberg New Energy Finance
Bloomberg Sports
Content Licensing




Bloomberg Anywhere



Mobile Apps



Bloomberg Visual Data


































Jeffrey Douglas Brown, Inventor, Rochester, MN





















































Patent Buddy

Sign In     |     Join Today





















Free



Premium



Professional



Enterprise








Patent Searching

 

 

 



Technology Searching






Owner and Inventor Searching






Patent Analytics






Owner Analytics






Attorney Analytics






Inventor Analytics






Technology Analytics






Mobile Searching






Tagging






Advanced Patent Analytics

 

 

 



Advanced Owner Analytics






Mobile Portfolio/Analytics






Detailed Attorney Information






Prosecution analytics






Pre-publication Data






Monthly PAIR Information and Watches







						Number of patents in all portfolios
						
100 (maximum)
1000 (maximum)
2000 (maximum)
Unlimited


Follows
							in all categories (Watch)

						10 (maximum)
						
50 (maximum)
500 (maximum)
Unlimited


Maximum number of portfolios
5 (maximum)
10 (maximum)
100 (maximum)
Unlimited


Maximum number of comparisons
1 (maximum)
 
5 (maximum)
 
20 (maximum)
 
Unlimited










FREE

 

$9.95/mo

 

$39.95/mo

 

$99.95/mo



 
 
 
 
 
 



PAIR
									Watch Weekly Update
$2.75/mo/patent
$2.65/mo/patent


PAIR
									Watch Daily Update
$5.75/mo/patent
$5.55/mo/patent


Upgrade Now

 
Upgrade Now

 
Upgrade Now

 
Upgrade Now










Welcome to PatentBuddy 2.0!  Please enjoy the 30+ day free trial of our  level membership.  If you wish to continue with a paid membership, please select a membership plan before the year end expiration date.  Otherwise, all portfolios and followings will be reset to our free membership plan after the expiration date.






Free



Premium



Professional



Enterprise








Patent Searching

 

 

 



Technology Searching






Owner and Inventor Searching






Patent Analytics






Owner Analytics






Attorney Analytics






Inventor Analytics






Technology Analytics






Mobile Searching






Tagging






Advanced Patent Analytics

 

 

 



Advanced Owner Analytics






Mobile Portfolio/Analytics






Detailed Attorney Information






Prosecution analytics






Pre-publication Data






Monthly PAIR Information and Watches







						Number of patents in all portfolios
						
100 (maximum)
1000 (maximum)
2000 (maximum)
Unlimited


Follows
							in all categories (Watch)

						10 (maximum)
						
50 (maximum)
500 (maximum)
Unlimited


Maximum number of portfolios
5 (maximum)
10 (maximum)
100 (maximum)
Unlimited


Maximum number of comparisons
1 (maximum)
 
5 (maximum)
 
20 (maximum)
 
Unlimited










FREE

 

$9.95/mo

 

$39.95/mo

 

$99.95/mo



 
 
 
 
 
 



PAIR
									Watch Weekly Update
$2.75/mo/patent
$2.65/mo/patent


PAIR
									Watch Daily Update
$5.75/mo/patent
$5.55/mo/patent


Upgrade Now

 
Upgrade Now

 
Upgrade Now

 
Upgrade Now









Please Confirm Your Upgraded Plan Purchase By Selecting Upgrade Button

  Yearly (Get 12 months for the price of 11!)  MonthlyUPGRADECANCEL












Free



Premium



Professional



Enterprise








Patent Searching

 

 

 



Technology Searching






Owner and Inventor Searching






Patent Analytics






Owner Analytics






Attorney Analytics






Inventor Analytics






Technology Analytics






Mobile Searching






Tagging






Advanced Patent Analytics

 

 

 



Advanced Owner Analytics






Mobile Portfolio/Analytics






Detailed Attorney Information






Prosecution analytics






Pre-publication Data






Monthly PAIR Information and Watches







						Number of patents in all portfolios
						
100 (maximum)
1000 (maximum)
2000 (maximum)
Unlimited


Follows
							in all categories (Watch)

						10 (maximum)
						
50 (maximum)
500 (maximum)
Unlimited


Maximum number of portfolios
5 (maximum)
10 (maximum)
100 (maximum)
Unlimited


Maximum number of comparisons
1 (maximum)
 
5 (maximum)
 
20 (maximum)
 
Unlimited










FREE

 

$9.95/mo

 

$39.95/mo

 

$99.95/mo



 
 
 
 
 
 



PAIR
									Watch Weekly Update
$2.75/mo/patent
$2.65/mo/patent


PAIR
									Watch Daily Update
$5.75/mo/patent
$5.55/mo/patent


Upgrade Now

 
Upgrade Now

 
Upgrade Now

 
Upgrade Now










Please Confirm Your Upgraded Plan Purchase By Selecting Upgrade Button

  Yearly (Get 12 months for the price of 11!)  MonthlyUPGRADECANCEL




















Jeffrey Douglas Brown
Inventor







Add to Portfolio

0
			Status Updates
			
				


Stats

27  US
						patents issued
30
				 US Applications filed

							Feb 4, 2008
						  most recent filing
This is official USPTO record data




Details

27  US Patents Issued
30
				 US Applications Filed
568  Total Citation
					Count


Feb 4, 2008  Most Recent
					Filing
Oct 10, 1995  Earliest
					Filing




Work History
Patent OwnerApplications FiledYearINTERNATIONAL BUSINESS MACHINES CORPORATION1
									
								2
									
								8
									
								9
									
								2
									
								3
									
								9
									
								10
									
								1
									
1995
									
								1996
									
								2002
									
								2003
									
								2004
									
								2005
									
								2006
									
								2007
									
								2008
									
TOSHIBA AMERICA ELECTRONIC COMPONENTS, INC.2
									
2003
									
SONY COMPUTER ENTERTAINMENT INC.3
									
								1
									
								1
									
2003
									
								2005
									
								2006
									
SONY INTERACTIVE ENTERTAINMENT INC.2
									
								2
									
2003
									
								2005
									
ACTIVISION PUBLISHING, INC.2
									
								4
									
2006
									
								2007
									
INTEL CORPORATION2
									
2003
									
ENTERTAINMENT INC., SONY COMPUTER2
									
2003
									
KABUSHIKI KAISHA TOSHIBA2
									
2003
									




Inventor Addresses
AddressDurationRochester, MNJan 20, 98 - Oct 02, 08Rochester, MN, USMar 25, 04 - May 26, 15



Technology Profile



Technology
Matters





G01R: 


MEASURING ELECTRIC VARIABLES; MEASURING MAGNETIC VARIABLES 


						1
							



G06F: 


ELECTRIC DIGITAL DATA PROCESSING 


						20
							



G06T: 


IMAGE DATA PROCESSING OR GENERATION, IN GENERAL 


						9
							




See more…




Patents / Publication
Patents / Publication #Year of Publication / IssuedTitleCitations90417132015Dynamic spatial index remapping for optimal aggregate performance082841952012Cooperative utilization of spatial indices between application and rendering hardware182591312012Adaptive sub-sampling for reduction in issued rays182591302012Color buffer contrast threshold for adaptive anti-aliasing082484022012Adaptive ray data reorder for optimized ray temporal locality0

See more…






Please wait while loading....!






Add Patents to Portfolio


  Existing Portfolios  Create New Portfolio


								Add Portfolio
							

 

User Portfolios

  
							You have not yet added any portfolios.
						

 
						OK
					
 


















We are sorry but your current selection exceeds the maximum number of portfolios (0) for this membership level.
					>
					Upgrade to our  Level for up to -1 portfolios!.
























Discover the top patent resource on the web.
Create a Patent Buddy account today and discover why over 250,000 people currently use Patent Buddy as a patent analytics resource.
Join TodayNo credit card required
Already have an account? Sign In ›








Note
The template below is formatted to ensure compatibility with our system.
							Provide tags with | separated like (tags1|tags2).

Mandatory Fields * - 'MatterType','AppType','Country','Title','SerialNo'.

Acceptable Date Format - 'MM/DD/YYYY'.

Acceptable Filing/App Types - 

Continuation/Divisional
Original
Paris Convention
PCT National
With Priority
EP Validation
Provisional Conversion
Reissue
Provisional
Foreign Extension

Acceptable Status - 

Pending
Abandoned
Unfiled
Expired
Granted

Acceptable Matter Types - 

Patent
Utility Model
Supplemental Protection Certificate
Design
Inventor Certificate
Plant
Statutory Invention Reg



Advertisement


  




Advertisement

Email Yourself the App Links



Advertisement






Advertisement





Advertisement





Recipient Email Address 


Send Email





Recipient Email Address 

Send Email



Comment 







Recipient Email Address 

Send Email






Success
E-mail has been sent successfully.




Failure
Some error occured while sending email. Please check e-mail and try again!







View Full Site

	Copyright 2017 PatentBuddy.
Help | Advertise | Contact | Terms | Privacy | About Usfalse










Brown, Jeffrey Douglas Inmate 2007-05087: Hays County Jail in San Marcos, TX 

































































 

877-91-BAIL-BOND 

 Blog
 Contact Us
 Privacy Policy
 




























Toggle navigation





                    	Bail Bond City                    


 Home
Inmate Directory Search 

Alabama Inmate Directory Search
Arizona Inmate Directory Search
Arkansas Inmate Directory Search
California Inmate Directory Search
Florida Inmate Directory Search
Idaho Inmate Directory Search
Illinois Inmate Directory Search
Indiana Inmate Directory Search
Iowa Inmate Directory Search
Kansas Inmate Directory Search
Kentucky Inmate Directory Search
Maine Inmate Directory Search
Maryland Inmate Directory Search
Michigan Inmate Directory Search
Minnesota Inmate Directory Search
Mississippi Inmate Directory Search
Missouri Inmate Directory Search
Montana Inmate Directory Search
Nebraska Inmate Directory Search
Nevada Inmate Directory Search
New Jersey Inmate Directory Search
North Carolina Inmate Directory Search
North Dakota Inmate Directory Search
Ohio Inmate Directory Search
Oklahoma Inmate Directory Search
Oregon Inmate Directory Search
Pennsylvania Inmate Directory Search
Rhode Island Inmate Directory Search
South Carolina Inmate Directory Search
South Dakota Inmate Directory Search
Tennessee Inmate Directory Search
Texas Inmate Directory Search
Virginia Inmate Directory Search
Washington Inmate Directory Search Wisconsin Inmate Directory Search


 Bondsman Directory 

Alabama Bondsmen Directory
Arizona Bondsmen Directory
Arkansas Bondsmen Directory
Florida Bondsmen Directory
Idaho Bondsmen Directory
Illinois Bondsmen Directory
Indiana Bondsmen Directory
Iowa Bondsmen Directory
Kansas Bondsmen Directory
Kentucky Bondsmen Directory
Maine Bondsmen Directory
Maryland Bondsmen Directory
Michigan Bondsmen Directory
Minnesota Bondsmen Directory
Mississippi Bondsmen Directory
Missouri Bondsmen Directory
Montana Bondsmen Directory
Nebraska Bondsmen Directory
Nevada Bondsmen Directory
New Jersey Bondsmen Directory
North Carolina Bondsmen Directory
North Dakota Bondsmen Directory
Ohio Bondsmen Directory
Oklahoma Bondsmen Directory
Oregon Bondsmen Directory
Pennsylvania Bondsmen Directory
South Carolina Bondsmen Directory
South Dakota Bondsmen Directory
Tennessee Bondsmen Directory
Texas Bondsmen Directory
Virginia Bondsmen Directory
Washington Bondsmen Directory Wisconsin Bondsmen Directory


 How Bail Bonds Work 

Bail Bond Indemnitor Responsibility
Bond Holds  /  No Bail Set
Factors Used By Judges To Determine Bail
Financning and Payment Options
Florida Laws Title XLVII Chapter 903 Bail


 Download our App 

Download Android App from Play Store
 ** iPhone App Coming Soon


 


Bail Bond City Home >> Texas Inmate Directory Search >> Hays >> Brown, Jeffrey Previous Inmate   |   Next Inmate 


Hays County Inmate Details for Brown, Jeffrey Douglas


Sorry. Bond Information is unavailable. Please speak with an attorney for more information.Get Background Check HereRemove MugshotBrown, Jeffrey Douglas Booking Details
Hays County Jail Visitation Schedule and Information

Hays County (San Marcos) TX Jail Booking Details



Booking #: 2007-05087HAYS COUNTY SHERIFF'S OFFICEFacility: Hays County JailBooked: 09/22/2007Released: 06/24/2008NameBrown, Jeffrey DouglasDescWhite  Male  5ft	    8in	      190 lbs        AliasBrown,n Jefferey Douglas; Brown, Jeffery Douglas; Brown, Jeffrey D; Brown, nJeffry; Brown, Jeffy D; Brown, Jerry; Brown, Lefty; Brown, Jeffy nD;Brown, Jeffrey D;Brown, Jeffrey Douglas;Brown, Jeffery Douglas;BrHairBlond or StrawberrySO #107071EyesBrownDOB11/15/1959AddressSan Marcos, TX 78666Warrant #ChargeIssuing AuthOffense DateBond/TypeFine/Crt CostsDispositionCR-07-708DWI 3RD-F3 (HCSO C07-33561)09/22/2007Indictment09-26-2007-03076881Blue WarrantTDCJ AUSTIN PAROLE DIVISIONReleased Per TTYCR-07-708INDICT(DWI)22DC/HAYS35,000.00Surety BondOther (See Release Comments)

The Hays County Jail is a 362 bed detention facility with 111 certified male and female corrections officers or peace officers (sheriff’s deputies) which are certified by the Texas Commission on Law Enforcement Officer Standards and Education (TCLEOSE).

The jail books an average of  8,000 inmates a year with an estimated 2,600 transferred to various courts. The amount of hot meals served per day totals approximately 1,086.
Where do I go to ask about someone who has been arrested?
Answer:
Hays County Jail

1307 Uhland Rd
San Marcos, TX 78666

Hays Texas's Best Bail Bondsmen Resource




DISCLAIMER NOTICE: INFORMATION POSTED ON THIS WEB SITE IS PROVIDED FOR INFORMATIONAL PURPOSES ONLY. IT IS SUBJECT TO CHANGE AND MAY BE UPDATED PERIODICALLY. WHILE EVERY EFFORT IS MADE TO ENSURE THAT THE POSTED INFORMATION IS ACCURATE, IT MAY CONTAIN FACTUAL OR OTHER ERRORS. INMATE INFORMATION CHANGES QUICKLY AND THE POSTED INFORMATION MAY NOT REFLECT THE CURRENT INFORMATION. ALL ARE PRESUMED INNOCENT UNTIL PROVEN GUILTY IN A COURT OF LAW. PUBLISHED MUGSHOTS AND/OR ARREST RECORDS ARE PREVIOUSLY PUBLISHED PUBLIC RECORDS OF: AN ARREST, A REGISTRATION, THE DEPRIVATION OF LIBERTY OR A DETENTION. THE MUGSHOTS AND/OR ARREST RECORDS PUBLISHED ON BAILBONDCITY.COM ARE IN NO WAY AN INDICATION OF GUILT AND THEY ARE NOT EVIDENCE THAT AN ACTUAL CRIME HAS BEEN COMMITTED. EVERY EFFORT IS MADE TO ENSURE THE ACCURACY OF INFORMATION POSTED ON THIS WEBSITE. HOWEVER, BAILBONDCITY.COM DOES NOT GUARANTEE THE ACCURACY OR TIMELINESS OF THE CONTENT OF THIS WEBSITE. IN ADDITION NAMES MAY BE SIMILAR OR IDENTICAL TO OTHER INDIVIDUALS. FOR LATEST CASE STATUS, CONTACT THE OFFICIAL LAW ENFORCEMENT AGENCY WHICH ORIGINALLY RELEASED THE INFORMATION. NO WARRANTY EXPRESSED OR IMPLIED IS MADE REGARDING THE ACCURACY, ADEQUACY, COMPLETENESS, LEGALITY, RELIABILITY, OR USEFULNESS OF ANY INFORMATION.  

Advertisement
County Jail Inmate Serach

Please input inmate's name or booking number and state










Browse All Inmates



Alabama Inmate Directory Search

Baldwin AL Inmates
Cherokee AL Inmates
Cleburne AL Inmates
Colbert AL Inmates
DeKalb AL Inmates
Etowah AL Inmates
Fayette AL Inmates
Franklin AL Inmates
Jackson AL Inmates
Jefferson AL Inmates
Madison AL Inmates
Marion AL Inmates
Montgomery AL Inmates
Morgan AL Inmates
Pike AL Inmates
Tuscaloosa AL Inmates
AL State (DOC) Prisoners




Arizona Inmate Directory Search

Apache AZ Inmates
Maricopa AZ Inmates
Navajo AZ Inmates
Pima AZ Inmates
Pinal AZ Inmates
Yavapai AZ Inmates
Yuma AZ Inmates
AZ State (DOC) Prisoners


Arkansas Inmate Directory Search

Baxter AR Inmates
Benton AR Inmates
Boone AR Inmates
Crittenden AR Inmates
Cross AR Inmates
Garland AR Inmates
Howard AR Inmates
Jefferson AR Inmates
Johnson AR Inmates
Marion AR Inmates
Ouachita AR Inmates
Pope AR Inmates
Pulaski AR Inmates
Saline AR Inmates
St. Francis AR Inmates
Union AR Inmates
Washington AR Inmates
AR Sexual Predators
AR State (DOC) Prisoners


California Inmate Directory Search

Lake CA Inmates
Madera CA Inmates
Nevada CA Inmates
Riverside CA Inmates
Tehama CA Inmates



Florida Inmate Directory Search

Alachua Inmates
Bay Inmates
Bradford Inmates
Brevard Inmates
Broward Inmates
Charlotte Inmates
Citrus Inmates
Collier Inmates
Columbia Inmates
DeSoto Inmates
Duval Inmates
Escambia Inmates
Flagler Inmates
Gadsden Inmates
Glades Inmates
Gulf Inmates
Hamilton Inmates
Hardee Inmates
Hendry Inmates
Hernando County Inmates
Highlands Inmates
Hillsborough Inmates
Indian River Inmates
Lake Inmates
Lee Inmates
Manatee Inmates
Martin Inmates
Miami-Dade Inmates
Nassau Inmates
Okaloosa Inmates
Orange Inmates
Osceola Inmates
Palm Beach Inmates
Pasco Inmates
Pinellas Inmates
Polk Inmates
Putnam Inmates
Santa Rosa Inmates
St Johns Inmates
St Lucie Inmates
Sarasota Inmates
Sumter Inmates
Suwannee County Inmates
Volusia County Inmates
FL State Prisoners
FL Sexual Predators


Idaho Inmate Directory Search

Ada ID Inmates
Bannock ID Inmates
Bonneville ID Inmates
Canyon ID Inmates
ID State Prisoners (DOC)


Illinois Inmate Directory Search

Champaign IL Inmates
Cook IL Inmates
Dupage IL Inmates
Kane IL Inmates
Peoria IL Inmates
Richland IL Inmates
Winnebago IL Inmates
IL Sexual Predators
IL State Prisoners (DOC)


Indiana Inmate Directory Search

Daviess IN Inmates
Jackson IN Inmates
Madison IN Inmates
Marion IN Inmates
Scott IN Inmates
Starke IN Inmates
St. Joseph IN Inmates
Vanderburgh IN Inmates
Wayne IN Inmates
IN Sexual Predators
IN State Prisoners (DOC)


Iowa Inmate Directory Search

Buena Vista IA Inmates
Cerro Gordo IA Inmates
Dallas IA Inmates
Polk IA Inmates
Scott IA Inmates
Story IA Inmates
Woodbury IA Inmates
IA Sexual Predators
IA State Prisoners (DOC)


Kansas Inmate Directory Search

Jefferson KS Inmates
Pratt KS Inmates
Saline KS Inmates
Sherman KS Inmates
Thomas KS Inmates
Wyandotte KS Inmates
KS Sexual Predators
KS State (DOC) Prisoners



Kentucky Inmate Directory Search

Boone KY Inmates
Jefferson KY Inmates
Warren KY Inmates
KY Sexual Predators
KY State (DOC) Prisoners


Maine Inmate Directory Search

Cumberland ME Inmates
Kennebec ME Inmates
Somerset ME Inmates
ME State (DOC) Prisoners


Maryland Inmate Directory Search

Allegany MD Inmates
Prince George MD Inmates
St. Marys MD Inmates
MD State Prisoners (DOC)


Michigan Inmate Directory Search

Gratiot MI Inmates
Kalamazoo MI Inmates
Kent MI Inmates
Muskegon MI Inmates
Ottawa MI Inmates
Van Buren MI Inmates
Wayne MI Inmates
MI Sexual Predators
MI State Prisoners (DOC)


Minnesota Inmate Directory Search

Beltrami MN Inmates
Benton MN Inmates
Chippewa MN Inmates
Faribault MN Inmates
Isanti MN Inmates
McLeod MN Inmates
Nobles MN Inmates
Ottertail MN Inmates
Pipestone MN Inmates
Renville MN Inmates
Stearns MN Inmates
MN Sexual Predators
State (MN) Prisoners


Mississippi Inmate Directory Search

Adams MS Inmates
Clay MS Inmates
Hinds MS Inmates
Jackson MS Inmates
Jones MS Inmates
Lee MS Inmates
Lincoln MS Inmates
Lowndes MS Inmates
Madison MS Inmates
Pearl River Inmates
MS State (DOC) Prisoners


Missouri Inmate Directory Search

Barry MO Inmates
Boone MO Inmates
Jackson MO Inmates
Johnson MO Inmates
Laclede MO Inmates
Lawrence MO Inmates
Livingston MO Inmates
Marion MO Inmates
Platte MO Inmates
Stone MO Inmates
MO Sexual Predators
State (MO) Prisoners


Montana Inmate Directory Search

Flathead MT Inmates
Missoula MT Inmates
Park MT Inmates
Ravalli MT Inmates
Yellowstone MT Inmates
MT State Prisoners (DOC)


Nebraska Inmate Directory Search

Douglas NE Inmates
Gage NE Inmates
Hall NE Inmates
Keith NE Inmates
Lincoln NE Inmates
Jefferson NE Inmates
Sarpy NE Inmates
NE Sexual Predators
State (NE) Prisoners


Nevada Inmate Directory Search

Clark NV Inmates
Lander NV Inmates
Washoe NV Inmates
State (NV) Prisoners


New Jersey Inmate Directory Search

Bergen NJ Inmates
Essex NJ Inmates
Ocean NJ Inmates
Passaic NJ Inmates
State (NJ) Prisoners


North Carolina Inmate Directory Search

Alamance NC Inmates
Burke NC Inmates
Buncombe NC Inmates
Cabarrus NC Inmates
Catawba NC Inmates
Cleveland  NC Inmates
Forsyth NC Inmates
Gaston NC Inmates
Guilford NC Inmates
Henderson NC Inmates
Johnston NC Inmates
Lincoln NC Inmates
Mecklenburg NC Inmates
New Hanover NC Inmates
Onslow NC Inmates
Randolph NC Inmates
Transylvania NC Inmates
Wake NC Inmates
NC Sexual Predators
State (NC) Prisoners


North Dakota Inmate Directory Search

Cass ND Inmates
Williams ND Inmates
State (ND) Prisoners


Ohio Inmate Directory Search

Ashland OH Inmates
Belmont OH Inmates
Erie OH Inmates
Gallia OH Inmates
Hamilton OH  Inmates
Huron OH  Inmates
Knox OH Inmates
Lorain OH Inmates
Mercer OH Inmates
Pickaway OH Inmates
Richland OH Inmates
Sandusky OH Inmates
Trumbull OH Inmates
Wood OH  Inmates
State (OH) Prisoners
OH Sexual Predators


Oklahoma Inmate Directory Search

Cater OK Inmates
Cleveland OK Inmates
Comanche OK Inmates
Pawnee OK Inmates
Rogers OK Inmates
Tulsa OK Inmates
Sexual Predators (OK)
State (OK) Prisoners


Oregon Inmate Directohy Search

Baker OR Inmates
Benton OR Inmates
Clackamas OR Inmates
Columbia OR  Inmates
Crook OR Inmates
Jackson OR Inmates
Lane OR Inmates
Lincoln OR Inmates
Linn OR  Inmates
Marion OR  Inmates
Multnomah OR  Inmates
Polk OR  Inmates
Umatilla OR  Inmates
Union OR  Inmates
Washington OR  Inmates
State (OR) Prisoners


Pennsylvania Inmate Directory Search

Clarion PA Inmates
Fayette PA Inmates
Greene PA Inmates
Philadelphia PA  Inmates
Washington PA  Inmates
State (PA) Prisoners


Rhode Island Inmate Directory Search

State (RI) Prisoners


South Carolina Inmate Directory Search

Aiken SC Inmates
Beaufort SC Inmates
Charleston SC Inmates
Horry SC Inmates
Lauren SC Inmates
Lexington SC Inmates
Pickens SC Inmates
Spartanburg SC Inmates
Sumter SC Inmates
SC Sexual Predators
SC State (DOC) Prisoners


South Dakota Inmate Directory Search

Minnehaha SD Inmates
Pennington SD Inmates
State (SD) Prisoners


Tennessee Inmate Directory Search

Anderson TN Inmates
Blount TN Inmates
Hamilton TN Inmates
Knox TN Inmates
McMinn TN Inmates
Rhea TN Inmates
Robertson TN Inmates
Shelby TN Inmates
Wilson TN Inmates


Texas Inmate Directory Search

Angelina TX Inmates
Andrews TX Inmates
Aransas TX Inmates
Bastrop TX Inmates
Bell TX Inmates
Bexar TX Inmates
Brazoria TX Inmates
Burnet TX Inmates
Cameron TX Inmates
Collin TX Inmates
Comal TX Inmates
Corryell TX Inmates
Denton TX Inmates
Ector TX Inmates
El Paso TX Inmates
Ellis TX Inmates
Galveston TX Inmates
Gillepsie TX Inmates
Grayson TX Inmates
Gregg TX Inmates
Guadalupe TX Inmates
Hale TX Inmates
Hays TX Inmates
Henderson TX Inmates
Hidalgo TX Inmates
Hood TX Inmates
Howard TX Inmates
Kerr TX Inmates
Lamar TX Inmates
Lubbock TX Inmates
Montgomery TX Inmates
Matagorda TX Inmates
Nacogdoches TX Inmates
Panola TX Inmates
Parker TX Inmates
Randall TX Inmates
Rockwall TX Inmates
Shackelford TX Inmates
Smith TX Inmates
Tarrant TX Inmates
Taylor TX Inmates
Tom Green TX Inmates
Walker TX Inmates
Waller TX Inmates
Wichita TX Inmates
Williamson TX Inmates
Wise TX Inmates
Wood TX Inmates
TX Sexual Predators
State (TX) Prisoners


Virginia Inmate Directory Search

Amherst VA Inmates
Bedford VA Inmates
Campbell VA Inmates
Danville VA Inmates
Fairfax VA Inmates
Halifax VA Inmates
Henrico VA Inmates
Lee VA Inmates
Lynchburg VA Inmates
Newport News VA Inmates
Portsmouth VA Inmates
Pulaski VA Inmates
Richmond VA Inmates
Roanoke VA Inmates
Virginia Beach VA Inmates
State (VA) Prisoners


Washington Inmate Directory Search

Clallam WA Inmates
Clark WA Inmates
Columbia WA Inmates
Cowlitz WA Inmates
Jefferson WA Inmates
Kitsap WA Inmates
Kittitas WA Inmates
Pierce WA Inmates
Skagit WA Inmates
Snohomish WA Inmates
Whatcom WA Inmates
Walla Walla WA Inmates
WA State (DOC) Prisoners



Wisconsin Inmate Directory Search

Brown WI Inmates
Douglas WI Inmates
Kenosha WI Inmates
LaCrosse WI Inmates
Milwaukee WI Inmates
Ozaukee WI Inmates
Racine WI Inmates
WI Sexual Predators
WI State (DOC) Prisoners




The Bonds Away AppThe Bonds Away App. The quickest way to post bail!  It has been called the 'Uber for Bondsmen'  Click here to watch the video. Bail Bond ArticlesWhat Happens When a Bond is Revoked or Forfeited?How to Become a Bail Bondsmen in FloridaWhat Is a Bail Bond Hearing?How is the Bail Amount Determined? 






Random PostsIs a bail bond tax deductible?What Are Your Options When Posting Bail?Can a Judge Deny Bail for a Defendant?What If The Person I Bailed Out Doesn’t Show Up In Court?How Much Does a Bail Bondsman Earn Annually?BAIL BOND CITY – WORLDS LARGEST BAIL BOND RESOURCE 


Share this Site 





















Disclaimer Bail Bond City is a marketing and directory service company.  Bail Bond City DOES NOT negotiate NOR write Bail Bonds.  We are a resource for bail bondsmen and are ad-supported.
Make $17 per hour Become an  Uber Driver and get a $200 signing bonus.

 



FAQ – Frequently Asked Questions
Careers
Florida Law
The Bail Bond City Blurb
Terms and Conditions
Return Policy
 





 © 2017 Bail Bond City All rights reserved.
 Android, Google Play, and the Google Play logo are trademarks of Google Inc.
7643 Gate Parkway Suite 104-559, Jacksonville, Florida 32256


































需要安全验证




Facebook加入或登录 Facebook   邮箱或手机号密码忘记帐户？登录想加入 Facebook 吗？注册注册安全验证码请输入以下文本看不清楚上面的文字？换一个或播放语音验证信息框中文字：这是什么？安全验证这是一个标准的安全测试，用于阻止垃圾邮件制造者创建假帐户并向用户发送垃圾信息。提交中文(简体)English (US)日本語한국어Français (France)Bahasa IndonesiaPolskiEspañolPortuguês (Brasil)DeutschItalianoMessengerFacebook Lite用户地点游戏位置名人二手市场小组食谱彩色气球Instagram公司简介创建广告创建主页开发者招聘信息隐私权政策Cookie广告选项条款设置活动日志 Facebook © 2017





Douglas Jeffrey Brown 的个人主页 | Facebook


Facebook邮箱或手机号密码忘记帐户？中文(简体)English (US)日本語한국어Français (France)Bahasa IndonesiaPolskiEspañolPortuguês (Brasil)DeutschItalianoMessengerFacebook Lite用户地点游戏位置名人二手市场小组食谱彩色气球Instagram公司简介创建广告创建主页开发者招聘信息隐私权政策Cookie广告选项条款设置活动日志 Facebook © 2017

















 









Data Cache Invalidate with Data Dependent Expiration Using a Step Value - Brown, Jeffrey Douglas 









































Login
                    
Sign up
                    









Search
                            





                                    Expert Search


                                    Quick Search








Patents/Apps
                                




                                    Non-Patent Literature
                                












SEARCH


                            RESEARCH



                            MPEP 2.0



                            TOOLS & RESOURCES
                        



                            ACCLAIM IP
                        


HELP






 

















Title:


                    Data Cache Invalidate with Data Dependent Expiration Using a Step Value                





                United States Patent Application 20090019228            

                Kind
                Code:
            

                A1            













Abstract:

            According to embodiments of the invention, a step value and a step-interval cache coherency protocol may be used to update and invalidate data stored within cache memory. A step value may be an integer value and may be stored within a cache directory entry associated with data in the memory cache. Upon reception of a cache read request, along with the normal address comparison to determine if the data is located within the cache a current step value may be compared with the stored step value to determine if the data is current. If the step values match, the data may be current and a cache hit may occur. However, if the step values do not match, the requested data may be provided from another source. Furthermore, an application may update the current step value to invalidate old data stored within the cache and associated with a different step value.        















Inventors:

                            Brown, Jeffrey Douglas (Rochester, MN, US)                
                            Hoover, Russell Dean (Rochester, MN, US)                
                            Mejdrich, Eric Oliver (Rochester, MN, US)                
                            Valk, Kenneth Michael (Rochester, MN, US)                




Application Number:

            11/776731        



Publication Date:

            01/15/2009        



Filing Date:

            07/12/2007        



Export Citation:

 Click for automatic bibliography
                generation 





Primary Class:

711/135 



Other Classes:

                                    711/141,                                    711/E12.069                            



International Classes:

G06F12/12 





View Patent Images:

Download PDF 20090019228                 
                  PDF help




Related US Applications:



20100083038METHOD AND SYSTEMS FOR RESTARTING A FLIGHT CONTROL SYSTEMApril, 2010Pierce et al.20070028046Flash device to external storage adapterFebruary, 2007Pham20100058010INCREMENTAL BACKUP USING SNAPSHOT DELTA VIEWSMarch, 2010Augenstein et al.20080022035RECORDABLE DEVICE THAT COULD RECORD FLASH DISKS WITHOUT COMPUTERSJanuary, 2008Yu et al.20090006719SCHEDULING METHODS OF PHASED GARBAGE COLLECTION AND HOUSE KEEPING OPERATIONS IN A FLASH MEMORY SYSTEMJanuary, 2009Traister20090177837METHODS AND APPARATUS FOR MANAGING HDD'S SPIN-DOWN AND SPIN-UP IN TIERED STORAGE SYSTEMSJuly, 2009Kaneda20080168229Method of Caching Data AssetsJuly, 2008Beelen et al.20080022034Segmentation for a flash memory of a flash discJanuary, 2008Cheng20100030963MANAGING STORAGE OF CACHED CONTENTFebruary, 2010Marcu et al.20080235500STRUCTURE FOR INSTRUCTION CACHE TRACE FORMATIONSeptember, 2008Davis et al.20100049930Managing Backups Using Virtual MachinesFebruary, 2010Pershin et al. 













Attorney, Agent or Firm:

                            IBM CORPORATION, INTELLECTUAL PROPERTY LAW;DEPT 917, BLDG. 006-1 (3605 HIGHWAY 52 NORTH, ROCHESTER, MN, 55901-7829, US)                





Claims:

            What is claimed is:
                1. A method of managing data in a memory cache, the method comprising: setting a first current step value; creating a cache directory entry having a local step value, wherein the cache directory entry corresponds to data within the memory cache; receiving a request for data at an address corresponding to the cache directory entry; and comparing at least the local step value with the first current step value to determine if at least one of a cache hit or a cache miss occurs.                    
                    2. The method of claim 1, wherein the memory cache corresponds to a first processing element; and wherein the method further comprises: providing a second current step value within a second memory cache, wherein the second memory cache corresponds to a second processing element; providing a cache directory entry within a second memory cache containing at least a second local step value and corresponds to data within the second memory cache; receiving a request for data at an address corresponding to the cache directory entry within the second memory cache; and determining a cache miss occurs within the second memory cache by comparing at least the second local step value of the cache directory entry within the second memory cache with the second current step value.                    
                    3. The method of claim 2, further comprising: flushing data within the memory cache associated with the first processing element back to a globally visible memory; and obtaining the data from the globally visible memory in response to the cache miss within the second memory cache.                    
                    4. The method of claim 2, further comprising: obtaining data from the memory cache corresponding to the first processing element in response to the cache miss within the second memory cache.                    
                    5. The method of claim 3, wherein the second current step value is equal to the first current step value.                    
                    6. The method of claim 1, further comprising: examining at least one cache directory entry within the memory cache; comparing a local step value within the at least one cache directory entry with the first current step value; and if the local step value and the first current step value do not match, invalidating the cache directory entry.                    
                    7. The method of claim 1, wherein the first current step value is stored in a register within a memory cache controller.                    
                    8. A computer readable medium containing a program which, when executed, performs an operation, comprising: setting a first current step value; creating a cache directory entry having a local step value, wherein the cache directory entry corresponds to data within the memory cache; receiving a request for data at an address corresponding to the cache directory entry; and comparing at least the local step value with the first current step value to determine if at least one of a cache hit or a cache miss occurs.                    
                    9. The computer readable medium of claim 8, wherein the memory cache corresponds to a first processing element; and wherein the operations further comprise: providing a second current step value within a second memory cache, wherein the second memory cache corresponds to a second processing element; providing a cache directory entry within a second memory cache containing at least a second local step value and corresponds to data within the second memory cache; receiving a request for data at an address corresponding to the cache directory entry within the second memory cache; and determining a cache miss occurs within the second memory cache by comparing at least the second local step value of the cache directory entry within the second memory cache with the second current step value.                    
                    10. The computer readable medium of claim 9, wherein the operations further comprise: flushing data within the memory cache associated with the first processing element back to a globally visible memory; and obtaining the data from the globally visible memory in response to the cache miss within the second memory cache.                    
                    11. The computer readable medium of claim 9, wherein the operations further comprise: obtaining data from the memory cache corresponding to the first processing element in response to the cache miss within the second memory cache.                    
                    12. The computer readable medium of claim 9, wherein the second current step value is equal to the first current step value.                    
                    13. The computer readable medium of claim 8, wherein the operations further comprise: examining at least one cache directory entry within the memory cache; comparing a local step value within the at least one cache directory entry with the first current step value; and if the step value and the first current step value do not match, invalidating the cache directory entry.                    
                    14. The computer readable medium of claim 8, wherein the first current step value is stored in a register within a memory cache controller.                    
                    15. A system, comprising: a first processing element; and a memory cache associated with the first processing element comprising: a cache data store; a cache directory; and a cache controller containing a current step value, and the cache controller configured to: create a cache directory entry in the cache directory having a step value equal to the current step value and the cache directory entry corresponding to data within the cache data store; receive a request for data at an address corresponding to the memory directory entry; and in response to receiving the request for data, compare the step value of the cache directory entry with the current step value to determine if at least one of a cache hit or a cache miss occurs.                    
                    16. The system of claim 15, further comprising: a second processing element; and a memory cache associated with the second processing element comprising: a data array; a cache directory containing a cache directory entry containing at least a second local step value and corresponding to data within the data array; and cache controller logic containing a second current step value, and the cache controller logic configured to: receive a request for data at an address corresponding to the cache directory entry within the second memory cache; and determine a cache miss occurs within the second memory cache by comparing at least the second local step value of the cache directory entry within the second memory cache with the second current step value.                    
                    17. The system of claim 16, further comprising: globally visible memory; and logic configured to flush data within the memory cache associated with the first processing element to the globally visible memory; and wherein the memory cache associated with the second processing element is configured to: obtain the data from the globally visible memory in response to the cache miss within the second memory cache.                    
                    18. The system of claim 16, wherein the second processing element is configured to obtain data from the memory cache corresponding to the first processing element in response to the cache miss within the second memory cache.                    
                    19. The system of claim 15, further comprising: logic configured to examine at least one cache directory entry within the memory cache; compare a local step value within the at least one cache directory entry with the first current step value; and if the local step value and the first current step value do not match, invalidate the cache directory entry.                    
                    20. The system of claim 15, wherein the first current step value is stored in a register within the cache controller.                    




Description:

BACKGROUND OF THE INVENTION1. Field of the InventionEmbodiments of the invention generally relate to the field of computer processing.2. Description of the Related ArtThe process of rendering two-dimensional images from three-dimensional scenes is commonly referred to as image processing. As the modern computer industry evolves image processing evolves as well. One particular goal in the evolution of image processing is to make two-dimensional simulations or renditions of three-dimensional scenes as realistic as possible. One limitation of rendering realistic images is that modern monitors display images through the use of pixels.A pixel is the smallest area of space which can be illuminated on a monitor. Most modern computer monitors will use a combination of hundreds of thousands or millions of pixels to compose the entire display or rendered scene. The individual pixels are arranged in a grid pattern and collectively cover the entire viewing area of the monitor. Each individual pixel may be illuminated to render a final picture for viewing.One technique for rendering a real world three-dimensional scene onto a two-dimensional monitor using pixels is called rasterization. Rasterization is the process of taking a two-dimensional image represented in vector format (mathematical representations of geometric objects within a scene) and converting the image into individual pixels for display on the monitor. Rasterization is effective at rendering graphics quickly and using relatively low amounts of computational power; however, rasterization suffers from some drawbacks. For example, rasterization often suffers from a lack of realism because it is not based on the physical properties of light, rather rasterization is based on the shape of three-dimensional geometric objects in a scene projected onto a two-dimensional plane. Furthermore, the computational power required to render a scene with rasterization scales directly with an increase in the complexity of the scene to be rendered. As image processing becomes more realistic, rendered scenes also become more complex. Therefore, rasterization suffers as image processing evolves, because rasterization scales directly with complexity.Another technique for rendering a real world three-dimensional scene onto a two-dimensional monitor using pixels is called ray tracing. The ray tracing technique traces the propagation of imaginary rays, rays which behave similar to rays of light, into a three-dimensional scene which is to be rendered onto a computer screen. The rays originate from the eye(s) of a viewer sitting behind the computer screen and traverse through pixels, which make up the computer screen, towards the three-dimensional scene. Each traced ray proceeds into the scene and may intersect with objects within the scene. If a ray intersects an object within the scene, properties of the object and several other contributing factors are used to calculate the amount of color and light, or lack thereof, the ray is exposed to. These calculations are then used to determine the final color of the pixel through which the traced ray passed.The process of tracing rays is carried out many times for a single scene. For example, a single ray may be traced for each pixel in the display. Once a sufficient number of rays have been traced to determine the color of all of the pixels which make up the two-dimensional display of the computer screen, the two-dimensional synthesis of the three-dimensional scene can be displayed on the computer screen to the viewer.Ray tracing typically renders real world three-dimensional scenes with more realism than rasterization. This is partially due to the fact that ray tracing simulates how light travels and behaves in a real world environment, rather than simply projecting a three-dimensional shape onto a two-dimensional plane as is done with rasterization. Therefore, graphics rendered using ray tracing more accurately depict on a monitor what our eyes are accustomed to seeing in the real world.Furthermore, ray tracing also handles increases in scene complexity better than rasterization as scenes become more complex. Ray tracing scales logarithmically with scene complexity. This is due to the fact that the same number of rays may be cast into a scene, even if the scene becomes more complex. Therefore, ray tracing does not suffer in terms of computational power requirements as scenes become more complex as rasterization does.One major drawback of ray tracing is the large number of calculations, and thus processing power, required to render scenes. This leads to problems when fast rendering is needed. For example, when an image processing system is to render graphics for animation purposes such as in a game console. Due to the increased computational requirements for ray tracing it is difficult to render animation quickly enough to seem realistic (realistic animation is approximately twenty to twenty-four frames per second).Therefore, there exists a need for more efficient techniques and devices to perform ray tracing.SUMMARY OF THE INVENTIONEmbodiments of the present invention generally provide methods and apparatus for managing data within a memory cache which may be used to perform ray tracing.According to one embodiment of the invention a method of managing data in a memory cache is provided. The method generally comprising: setting a first current step value; creating a cache directory entry having a local step value, wherein the cache directory entry corresponds to data within the memory cache; receiving a request for data at an address corresponding to the cache directory entry; and comparing at least the local step value with the first current step value to determine if at least one of a cache hit or a cache miss occurs.According to another embodiment of the invention, a computer readable medium containing a program is provided. The program, when executed, performs operations generally comprising: setting a first current step value; creating a cache directory entry having a local step value, wherein the cache directory entry corresponds to data within the memory cache; receiving a request for data at an address corresponding to the cache directory entry; and comparing at least the local step value with the first current step value to determine if at least one of a cache hit or a cache miss occurs.According to another embodiment of the invention a system is provided. The system generally comprising: a first processing element; and a memory cache associated with the first processing element. The memory cache generally comprising: a cache data store; a cache directory; and a cache controller containing a current step value, and the cache controller generally configured to: create a cache directory entry in the cache directory having a step value equal to the current step value and the cache directory entry corresponding to data within the cache data store; receive a request for data at an address corresponding to the memory directory entry; and in response to receiving the request for data, compare the step value of the cache directory entry with the current step value to determine if at least one of a cache hit or a cache miss occurs.BRIEF DESCRIPTION OF THE DRAWINGSFIG. 1 illustrates a computer system, according to one embodiment of the invention.FIGS. 2 illustrates exemplary multiple core processing elements, according to embodiments of the invention.FIG. 3 is an exemplary three-dimensional scene to be rendered by an image processing system, according to one embodiment of the invention.FIGS. 4A-4C illustrate a two-dimensional space to be rendered by an image processing system and a corresponding spatial index created by an image processing system, according to one embodiment of the invention.FIGS. 5 and 7 illustrate a three-dimensional scene to be rendered by an image processing system, according to one embodiment of the invention.FIGS. 6 and 8 illustrate a memory cache containing a static spatial index and a dynamic spatial index, according to one embodiment of the invention.FIG. 9 is a flowchart illustrating an exemplary method of writing data to cache memory along with a step value, according to one embodiment of the invention.FIGS. 10 and 12 illustrate an exemplary multiple core processor, according to one embodiment of the invention.FIG. 11 illustrates an exemplary cache memory, according to one embodiment of the invention.FIG. 13 is a flowchart illustrating an exemplary method of reading data from cache memory, according to one embodiment of the invention.DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTSEmbodiments of the invention provide methods and apparatus for updating and invalidating select portions of a memory cache while maintaining the validity of other portions of the memory cache. According to one embodiment of the invention, a step value may be associated with a data which is stored within a plurality of memory caches associated with a plurality of processing elements. When data is written to the cache memory, a step value may be stored within a corresponding cache directory entry. When data is read from the cache, along with an address comparison a current step value may be compared with a step value associated with the data stored within the memory cache. If the step value matches, the corresponding data is current the data stored within the cache may be provided to the processor. However, if the step value does not match, the cache compare is considered a miss and data may be provided from another source.Furthermore, according to embodiments of the invention, software may update the data structure by writing new data into the cache for the data structure along with a new step value. When the new data structure is ready to be used, software may update the current step value to match the new step value. By updating the current step value to match the new step value, all cache entries which have an old step value or have a step value which does not match the current step value are effectively invalidated thereby eliminating the need for software or hardware to invalidate the old cache entries related to the data structure.In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to specific described embodiments. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, in various embodiments the invention provides numerous advantages over the prior art. However, although embodiments of the invention may achieve advantages over other possible solutions and/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim(s). Likewise, reference to “the invention” shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim(s).Program Products Used with a Computer SystemOne embodiment of the invention is implemented as a program product for use with a computer system such as, for example, the computer system 1 00 shown in FIG. 1 and described below. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable media. Illustrative computer-readable media include, but are not limited to: (i) information permanently stored on non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by a CD-ROM drive); (ii) alterable information stored on writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive); and (iii) information conveyed to a computer by a communications medium, such as through a computer or telephone network, including wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such computer-readable media, when carrying computer-readable instructions that direct the functions of the present invention, represent embodiments of the present invention.In general, the routines executed to implement the embodiments of the invention, may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and/or implied by such nomenclature.An Exemplary Computer SystemFIG. 1 is a block diagram depicting the computer system 100 according to one embodiment of the invention. The system 100 may contain a one or more multi-core processors 102. Each multi-core unit 102 may include multiple cores 110 each arranged around a shared level two cache (L2 cache) 114. The shared L2 cache 114 may include a portion of memory, referred to herein as inbox memory 116, which, as described below, may be used to manage memory access for threads being executed by the cores 110 in a multi-core unit 102. Each core 110 may also include a level one cache (L1 cache) 112 which, in some cases, may be used exclusively by that core 110.In some cases, the system 100 may also include a further central processing unit (CPU) 104 which, in some cases, may provide additional processing functionality. The system 100 may also include an input/output (I/O) interface 106 and a memory interface 108 which may be used to communicate with external I/O device and additional system memory, respectively. Each of the components within the system may communicate across a high speed processor bus 150. The system 100 may also include an expansion bus 120 which may be used to connect the multi-core processor to additional system components. While depicted as separate components of a computer system 100, in some cases, two or more of the items depicted in FIG. 1 may be combined as part of a system on a chip (SOC).Each processor core 110 may contain a plurality of processing threads and a core cache (e.g., an L1 cache). The processing threads located within each processor core 110 may have access to the shared L2 cache 114.The processor cores 110 may also have access to a plurality of inboxes within the inbox memory 116. The inboxes may be memory mapped address space. The inboxes may be mapped to the processing threads located within each of the processor cores 110. Each thread located within the processor cores 110 may have a memory mapped inbox and access to all of the other memory mapped inboxes. The inboxes may make up a low latency and high bandwidth communications network used by the processor cores 110.The processor cores 110 may use the inboxes as a network to communicate with each other and redistribute data processing work amongst the processor cores 110. For some embodiments, separate outboxes may be used in the communications network, for example, to receive the results of processing by processor cores 110. For other embodiments, inboxes may also serve as outboxes, for example, with one processor core 110 writing the results of a processing function directly to the inbox of another processor core 110 that will use the results.The aggregate performance of an image processing system may be tied to how well the processor cores 110 can partition and redistribute work. The network of inboxes may be used to collect and distribute work to other processor cores 110 without corrupting the shared L2 cache 114 with processor cores 110 communication data packets that have no frame to frame coherency. An image processing system which can render many millions of triangles per frame may include many processor cores 110 connected in this manner.In one embodiment of the invention, the threads of one processor core 110 may be assigned to a workload manager. An image processing system may use various software and hardware components to render a two-dimensional image from a three-dimensional scene. According to one embodiment of the invention, an image processing system may use a workload manager to traverse a spatial index with a ray issued by the image processing system. A spatial index, as described further below with regards to FIG. 4, may be implemented as a tree type data structure used to partition a relatively large three-dimensional scene into smaller bounding volumes. An image processing system using a ray tracing methodology for image processing may use a spatial index to quickly determine ray-bounding volume intersections. In one embodiment of the invention, the workload manager may perform ray-bounding volume intersection tests by using the spatial index.In one embodiment of the invention, other threads of the multiple core processing element processor cores 110 on the multiple core processing element 100 may be vector throughput engines. After a workload manager determines a ray-bounding volume intersection, the workload manager may issue (send), via the inboxes, the ray to one of a plurality of vector throughput engines. The vector throughput engines may then determine if the ray intersects a primitive contained within the bounding volume. The vector throughput engines may also perform operations relating to determining the color of the pixel through which the ray passed.FIG. 2 illustrates a network of multiple core processors 200, according to one embodiment of the invention. FIG. 2 also illustrates one embodiment of the invention where the threads of one of the processor cores 110 of the multiple core processor 102 is a workload manager 205. Each multiple core processor 2201-N in the network of multiple core processing elements 200 may contain one workload manager 2051-N. according to one embodiment of the invention. Each multiple core processor 2201-N in the network of multiple core processors 200 may also contain a plurality of vector throughput engines 210, according to one embodiment of the invention.The workload managers 2051-N may use a high speed bus 225 (e.g., similar to the high speed processor bus 150 illustrated in FIG. 1) to communicate with other workload managers 2051-N and/or vector throughput engines 210 of other multiple core processing elements 2201-N. according to one embodiment of the invention. Each of the vector throughput engines 210 may use the high speed bus 225 to communicate with other vector throughput engines 210 or the workload managers 2051-N. The workload manager processors 205 may use the high speed bus 225 to collect and distribute image processing related tasks to other workload managers 2051-N, and/or distribute tasks to other vector throughput engines 210. The use of a high speed bus 225 may allow the workload managers 2051-N to communicate without affecting the caches 230 with data packets related to workload manager communications.An Exemplary Three-Dimensional SceneFIG. 3 is an exemplary three-dimensional scene 305 to be rendered by an image processing system. Within the three-dimensional scene 305 may be objects 320. The objects 320 in FIG. 3 are of different geometric shapes. Although only four objects 320 are illustrated in FIG. 3, the number of objects in a typical three-dimensional scene may be more or less. Commonly, three-dimensional scenes will have many more objects than illustrated in FIG. 3.As can be seen in FIG. 3 the objects are of varying geometric shape and size. For example, one object in FIG. 3 is a pyramid 320A. Other objects in FIG. 3 are boxes 320B-D. In many modern image processing systems objects are often broken up into smaller geometric shapes (e.g., squares, circles, triangles, etc.). The larger objects are then represented by a number of the smaller simple geometric shapes. These smaller geometric shapes are often referred to as primitives.Also illustrated in the scene 305 are light sources 325A-B. The light sources may illuminate the objects 320 located within the scene 305. Furthermore, depending on the location of the light sources 325 and the objects 320 within the scene 305, the light sources may cause shadows to be cast onto objects within the scene 305.The three-dimensional scene 305 may be rendered into a two-dimensional picture by an image processing system. The image processing system may also cause the two-dimensional picture to be displayed on a monitor 310. The monitor 310 may use many pixels 330 of different colors to render the final two-dimensional picture.One method used by image processing systems to render a three-dimensional scene 320 into a two-dimensional picture is called ray tracing. Ray tracing is accomplished by the image processing system “issuing” or “shooting” rays from the perspective of a viewer 315 into the three-dimensional scene 320. The rays have properties and behavior similar to light rays.One ray 340, that originates at the position of the viewer 315 and traverses through the three-dimensional scene 305, can be seen in FIG. 3. As the ray 340 traverses from the viewer 315 to the three-dimensional scene 305, the ray 340 passes through a plane where the final two-dimensional picture will be rendered by the image processing system. In FIG. 3 this plane is represented by the monitor 310. The point the ray 340 passes through the plane, or monitor 310, is represented by a pixel 335.As briefly discussed earlier, most image processing systems use a grid 330 of thousands (if not millions) of pixels to render the final scene on the monitor 310. The grid 330 may be referred to as a frame. Each individual pixel may display a different color to render the final composite two-dimensional picture on the monitor 310. An image processing system using a ray tracing image processing methodology to render a two-dimensional picture from a three-dimensional scene will calculate the colors that the issued ray or rays encounters in the three-dimensional scene. The image processing scene will then assign the colors encountered by the ray to the pixel through which the ray passed on its way from the viewer to the three-dimensional scene.The number of rays issued per pixel may vary. Some pixels may have many rays issued for a particular scene to be rendered. In which case the final color of the pixel is determined by the each color contribution from all of the rays that were issued for the pixel. Other pixels may only have a single ray issued to determine the resulting color of the pixel in the two-dimensional picture. Some pixels may not have any rays issued by the image processing system, in which case their color may be determined, approximated or assigned by algorithms within the image processing system.To determine the final color of the pixel 335 in the two-dimensional picture, the image processing system must determine if the ray 340 intersects an object within the scene. If the ray does not intersect an object within the scene it may be assigned a default background color (e.g., blue or black, representing the day or night sky). Conversely, as the ray 340 traverses through the three-dimensional scene the ray 305 may strike objects. As the rays strike objects within the scene, the color of the object may be assigned to the pixel through which the ray passes. However, the color of the object must be determined before it is assigned to the pixel.Many factors may contribute to the color of the object struck by the original ray 340. For example, light sources within the three-dimensional scene may illuminate the object. Furthermore, physical properties of the object may contribute to the color of the object. For example, if the object is reflective or transparent, other non-light source objects may then contribute to the color of the object.In order to determine the effects from other objects within the three-dimensional scene, secondary rays may be issued from the point where the original ray 340 intersected the object. For example, shadow rays 341 may be issued to determine the contribution of light to the point where the original ray 340 intersected the object. If the object has translucent properties, the image processing system may issue a transmitted ray 344 to determine what color or light to be transmitted through the body of the object. If the object has reflective properties, the image processing system may issue a reflected ray to determine what color or light is reflected onto the object 320.One type of secondary ray may be a shadow ray. Each shadow ray may be traced from the point of intersection of the original ray and the object, to a light source within the three-dimensional scene 305. If the ray reaches the light source without encountering another object before the ray reaches the light source, then the light source will illuminate the object struck by the original ray at the point where the original ray struck the object.For example, shadow ray 341A may be issued from the point where original ray 340 intersected the object 320A, and may traverse in a direction towards the light source 325A. The shadow ray 341A reaches the light source 325A without encountering any other objects 320 within the scene 305. Therefore, the light source 325A will illuminate the object 320A at the point where the original ray 340 intersected the object 320A.Other shadow rays may have their path between the point where the original ray struck the object and the light source blocked by another object within the three-dimensional scene. If the object obstructing the path between the point on the object the original ray struck and the light source is opaque, then the light source will not illuminate the object at the point where the original ray struck the object. Thus, the light source may not contribute to the color of the original ray and consequently neither to the color of the pixel to be rendered in the two-dimensional picture. However, if the object is translucent or transparent, then the light source may illuminate the object at the point where the original ray struck the object.For example, shadow ray 341B may be issued from the point where the original ray 340 intersected with the object 320A, and may traverse in a direction towards the light source 325B. In this example, the path of the shadow ray 341B is blocked by an object 320D. If the object 320D is opaque, then the light source 325B will not illuminate the object 320A at the point where the original ray 340 intersected the object 320A. However, if the object 320D which the shadow ray is translucent or transparent the light source 325B may illuminate the object 320A at the point where the original ray 340 intersected the object 320A.Another type of secondary ray is a transmitted ray. A transmitted ray may be issued by the image processing system if the object with which the original ray intersected has transparent or translucent properties (e.g., glass). A transmitted ray traverses through the object at an angle relative to the angle at which the original ray struck the object. For example, transmitted ray 344 is seen traversing through the object 320A which the original ray 340 intersected.Another type of secondary ray is a reflected ray. If the object with which the original ray intersected has reflective properties (e.g., a metal finish), then a reflected ray will be issued by the image processing system to determine what color or light may be reflected onto the object. Reflected rays traverse away from the object at an angle relative to the angle at which the original ray intersected the object. For example, reflected ray 343 may be issued by the image processing system to determine what color or light may be reflected onto the object 320A which the original ray 340 intersected.The total contribution of color and light of all secondary rays (e.g., shadow rays, transmitted rays, reflected rays, etc.) will result in the final color of the pixel through which the original ray passed.An Exemplary kd-TreeOne problem encountered when performing ray tracing is determining quickly and efficiently if an issued ray intersects any objects within the scene to be rendered. One methodology known by those of ordinary skill in the art to make the ray intersection determination more efficient is to use a spatial index. A spatial index divides a three-dimensional scene or world into smaller volumes (smaller relative to the entire three-dimensional scene) which may or may not contain primitives. An image processing system can then use the known boundaries of these smaller volumes to determine if a ray may intersect primitives contained within the smaller volumes. If a ray does intersect a volume containing primitives, then a ray intersection test can be run using the trajectory of the ray against the known location and dimensions of the primitives contained within that volume. If a ray does not intersect a particular volume, then there is no need to run ray-primitive intersection tests against the primitives contained within that volume. Furthermore, if a ray intersects a bounding volume which does not contain primitives then there is no need to run ray-primitive intersections tests against that bounding volume. Thus, by reducing the number of ray-primitive intersection tests which may be necessary, the use of a spatial index greatly increases the performance of a ray tracing image processing system. Some examples of different spatial index acceleration data structures are octrees, k dimensional Trees (kd-Trees), and binary space partitioning trees (BSP trees). While several different spatial index structures exist, for ease of describing embodiments of the present invention, a kd-Tree will be used in the examples to follow. However, those skilled in the art will readily recognize that embodiments of the invention may be applied to any of the different types of spatial indexes.A kd-Tree uses axis aligned bounding volumes to partition the entire scene or space into smaller volumes. That is, the kd-Tree may divide a three-dimensional space encompassed by a scene through the use of splitting planes which are parallel to known axes. The splitting planes partition a larger space into smaller bounding volumes. Together the smaller bounding volumes make up the entire space in the scene. The determination to partition (divide) a larger bounding volume into two smaller bounding volumes may be made by the image processing system through the use of a kd-tree construction algorithm.One criterion for determining when to partition a bounding volume into smaller volumes may be the number of primitives contained within the bounding volume. That is, as long as a bounding volume contains more primitives than a predetermined threshold, the tree construction algorithm may continue to divide volumes by drawing more splitting planes. Another criterion for determining when to partition a bounding volume into smaller volumes may be the amount of space contained within the bounding volume. Furthermore, a decision to continue partitioning the bounding volume may also be based on how many primitives may be intersected by the plane which creates the bounding volume.The partitioning of the scene may be represented by a binary tree structure made up of nodes, branches and leaves. Each internal node within the tree may represent a relatively large bounding volume, while the node may contain branches to sub-nodes which may represent two relatively smaller partitioned volumes resulting after a partitioning of the relatively large bounding volume by a splitting plane. In an axis-aligned kd-Tree, each internal node may contain only two branches to other nodes. The internal node may contain branches (i.e., pointers) to one or two leaf nodes. A leaf node is a node which is not further sub-divided into smaller volumes and contains pointers to primitives. An internal node may also contain branches to other internal nodes which are further sub-divided. An internal node may also contain the information needed to determine along what axis the splitting plane was drawn and where along the axis the splitting plane was drawn.Exemplary Bounding VolumesFIGS. 4A-4C illustrate a two-dimensional space to be rendered by an image processing system and a corresponding kd-tree. For simplicity, a two-dimensional scene is used to illustrate the building of a kd-Tree, however kd-Trees may also be used to represent three-dimensional scenes. In the two-dimensional illustration of FIGS. 4A-4C splitting lines are illustrated instead of splitting planes, and bounding areas are illustrated instead of bounding volumes as would be used in a three-dimensional structure. However, one skilled in the art will quickly recognize that the concepts may easily be applied to a three-dimensional scene containing objects.FIG. 4A illustrates a two-dimensional scene 405 containing primitives 410 to be rendered in the final picture to be displayed on a monitor 310. The largest volume which represents the entire volume of the scene is encompassed by bounding volume 1 (BV1). In the corresponding kd-Tree this may be represented by the top level node 450, also known as the root or world node. In one embodiment of an image processing system, an image processing system may continue to partition bounding volumes into smaller bounding volumes when the bounding volume contains, for example, more than two primitives. As noted earlier the decision to continue partitioning a bounding volume into smaller bounding volumes may be based on many factors, however for ease of explanation in this example the decision to continue partitioning a bounding volume is based only on the number of primitives. As can be seen in FIG. 4A, BV1 contains six primitives, therefore kd-Tree construction algorithm may partition BV1 into smaller bounding volumes.FIG. 4B illustrates the same two-dimensional scene 405 as illustrated in FIG. 4A. However, in FIG. 4B the tree construction algorithm has partitioned BV1 into two smaller bounding volumes BV2 and BV3. The partitioning of BV1, was accomplished, by drawing a splitting plane SP1 415 along the x-axis at point x1. This partitioning of BV1 is also reflected in the kd-Tree as the two nodes 455 and 460, corresponding to BV2 and BV3 respectively, under the internal or parent node BV1 450. The internal node representing BV1 may now store information such as, but not limited to, pointers to the two nodes beneath BV1 (e.g., BV2 and BV3), along which axis the splitting plane was drawn (e.g., x-axis), and where along the axis the splitting plane was drawn (e.g., at point x1).The kd-Tree construction algorithm may continue to partition bounding volume BV3 because it contains more than the predetermined threshold of primitives (e.g., more than two primitives). However, the kd-Tree construction algorithm may not continue to partition bounding volume BV2, because bounding volume BV2 contains less than or equal to the number of primitives (e.g., only two primitives 410A). Nodes which are not partitioned or sub-divided any further, such as BV2, are referred to as leaf nodes.FIG. 4C illustrates the same two-dimensional scene 405 as illustrated in FIG. 4B. However, in FIG. 4C the kd-Tree construction algorithm has partitioned BV3 into two smaller bounding volumes BV4 and BV5. The kd-construction algorithm has partitioned BV3 using a partitioning plane along the y-axis at point y1. Since BV3 has been partitioned into two sub-nodes it may now be referred to as an internal node. The partitioning of BV3 is also reflected in the kd-Tree as the two leaf nodes 465 and 470, corresponding to BV4 and BV5 respectively. BV4 and BV5 are leaf nodes because the volumes they represent are not further divided into smaller bounding volumes. The two leaf nodes, BV4 and BV5, are located under the internal node BV3 which represents the bounding volume which was partitioned in the kd-Tree.The internal node representing BV3 may store information such as, but not limited to, pointers to the two leaf nodes (i.e., BV4 and BV5), along which axis the splitting plane was drawn (i.e., y-axis), and where along the axis the splitting plane was drawn (i.e., at point y1).The kd-Tree construction algorithm may now stop partitioning the bounding volumes because all bounding volumes located within the scene contain less than or equal to the maximum predetermined number of primitives which may be enclosed within a bounding volume. The leaf nodes may contain pointers to the primitives which are enclosed within the bounding volumes each leaf represents. For example, leaf node BV2 may contain pointers to primitives 410A, leaf node BV4 may contain pointers to primitives 410B, and leaf node BV5 may contain pointers to primitives 410C.A ray tracing image processing system may use the workload manager 205 to traverse the spatial index (kd-Tree). Traversing the kd-Tree may include selecting a branch to a node on a lower level (sub-node) of the kd-Tree to take or proceed to in order to determine if the ray intersects any primitives contained within the sub-node. A workload manager 205 may use the coordinates and trajectory of an issued ray to traverse or navigate through the kd-Tree. By executing ray-bounding volume intersection tests, the workload manager 205 may determine if the ray intersects a plane of the bounding volumes represented by nodes within the kd-Tree structure. If the ray intersects a bounding volume which contains only primitives (i.e., a leaf node), then the workload manager 205 may send the ray and associated information to a vector throughput engine 210 for ray-primitive intersection tests. A ray-primitive intersection test may be executed to determine if the ray intersects the primitives within the bounding volume. This methodology results in fewer ray-primitive intersection tests needed to determine if a ray intersects an object within the scene, in comparison to running ray-primitive intersection tests for a ray against each primitive contained within the scene.The resulting kd-Tree structure, or other spatial index structure, may be stored in a processor cache 230. The kd-Tree and the size of corresponding data which comprises the kd-Tree may be optimized for storage in a processor cache 230. The storage of the kd-Tree in a processor cache 230 may allow a workload manager 205 to traverse the kd-Tree with a ray that has been issued by the image processing system without having to retrieve the kd-Tree from memory every time a ray is issued by the image processing system.Multiple Spatial IndexesThree-dimensional scenes may have static and dynamic objects. Static objects may be objects that do not move or change shape over a relatively long period of time (e.g., for several frames). For example, a building may be considered a static object. FIG. 5 illustrates an exemplary building 505 within a three-dimensional scene 500. The building 505 in FIG. 5 is a static object because it may not move or change shape over a relatively long period of time.In contrast, a dynamic object may move or change shape over a relatively short period of time (e.g., over a period of a frame or two). A car may be an example of a dynamic object. For example, FIG. 5 illustrates a car 510 which may move horizontally within the three-dimensional scene 500 over a relatively short period of time.As described previously, an image processing system may use a spatial index (e.g., a kd-tree) to render a two-dimensional image (i.e., a frame) from a three-dimensional scene. If the scene changes (e.g., objects in the scene move or change shape) the image processing system may have to change or rebuild the spatial index which represents the objects within the three-dimensional scene in order to correctly render the next two-dimensional image or frame.If all of the objects within the three-dimensional scene are static (i.e., the do not change shape or move) from frame to frame, the spatial index does not have to be rebuilt from frame to frame. However, if the image processing system only uses a single spatial index for ray tracing and some objects within the frame move or change shape from one frame to the next, the spatial index needs to be rebuilt to correctly represent the changes in the objects which make up the scene. For example, when a dynamic object moves from a first position in a first frame to a second position in a second frame, a spatial index which represents the first position of the object in the first frame may not correctly represent the second position of the object in the second frame. Therefore, the spatial index may need to be rebuilt to correctly represent the second position of the object in the second frame.Rebuilding the entire spatial index by the image processing system may require a considerable amount of processing cycles and thus increasing the overall amount of time required to render a two-dimensional image from a three-dimensional scene even if only a minimal portion of the three-dimensional scene changes. However, according to one embodiment of the invention, two separate spatial indexes may be built in order to reduce the amount of time necessary to respond to changes in position or shape of objects in the three-dimensional scene. By reducing the amount of time necessary to respond to changes, the amount of time necessary to render a two-dimensional image from a three-dimensional scene may be reduced as well.FIG. 6 illustrates two separate spatial indexes which together may represent all objects within a three-dimensional scene, according to one embodiment of the invention. A first index may be, for example, a static spatial index 605A which may represent all of the static objects within a three-dimensional scene. A second spatial index may be, for example, a dynamic spatial index 610A which may represent dynamic objects within a three-dimensional scene, according to one embodiment of the invention.For illustrative purposes, the three-dimensional scene to which the static spatial index corresponds may be the three-dimensional scene 500 of FIG. 5. Therefore, the static spatial index 605A may represent the static object, the building 505, in the three-dimensional scene 500 of FIG. 5. Furthermore, the dynamic spatial index 610A may correspond to the dynamic object (i.e., the car 610) in the three-dimensional scene 500 of FIG. 5.An image processing system using a workload manager 205 to traverse a spatial index may store the spatial index in a memory cache of a processing element (e.g., the memory cache 230 of FIG. 2). Storage of a spatial index in a memory cache may expedite the traversal of a ray through the spatial index by reducing time necessary for a workload manager 205 to access data stored in the spatial index. According to one embodiment of the invention, the static spatial index 605A and the dynamic spatial index 610A may be stored in separate portions of a memory cache. By storing the static spatial index and the dynamic spatial index in separate portions of a memory cache, the dynamic spatial index may be updated without affecting the static spatial index.FIG. 6 illustrates storing spatial indexes in separate portions of a memory cache 620. For example, the static spatial index 605A may be stored in a first portion 625 of the memory cache 620. The dynamic spatial index 610A may be stored in a second portion 630 of the spatial index.The image processing system may be used, for example, in conjunction with other systems which control the movement of objects within the three-dimensional scene. For example, the image processing system may be used in conjunction with a physics engine in a video game system. The physics engine may move objects within the three-dimensional scene and the image processing system may render multiple images or frames per second which illustrate the new or moved positions of the objects within the scene. Thus the image processing system and the physics engine may together provide animation.The image processing system may determine that it is time to update the static spatial index, for example, if objects which were once considered static objects move or change shape and hence need to be considered dynamic objects rather than static objects. Furthermore, it may be time to update the static spatial index, for example, if objects which were once dynamic are no longer moving or changing shape and now may be considered static objects. Although at times the image processing system may determine that the static spatial index may need to be updated, the frequency of this determination may be lower than the frequency of the need to update the dynamic spatial index. For example, a new dynamic spatial index may need to be created from frame to frame whereas a static spatial index may only need to be updated after sixty frames have passed.For example, FIG. 7 illustrates the three-dimensional scene 500 which was also illustrated in FIG. 5. However, the dynamic object in the three-dimensional scene 500 (i.e., the car 510) has moved from a first position 515A in the three-dimensional scene 500 to a new position 515B. However, the static object (i.e., the building 505) has remained in the same position. Consequently, in order to properly represent the new three-dimensional scene 500 a new dynamic spatial index may be created by the image processing system, according to embodiments of the invention. The new dynamic spatial index may reflect the movement of the dynamic object(s) within the scene (i.e., the car 510). In contrast, according to embodiments of the intervention, since the static objects have not changed position in the three-dimensional scene 500, the static spatial index which was created to represent to the static objects present in FIG. 5 correctly represents the static objects present in FIG. 8.Therefore, instead of rebuilding a single spatial index which represents all objects (i.e., static and dynamic) within the entire three-dimensional scene in response to movement of the dynamic objects within the scene, only the dynamic spatial index must be rebuilt to correspond to the movement of objects within the three-dimensional scene. Rebuilding a spatial index which only represents a portion of the objects within the three-dimensional scene (i.e., the dynamic spatial index) may require less time in contrast to rebuilding a spatial index which represents all of the objects (i.e., dynamic and static).After the image processing system has created a new dynamic spatial index 610B, the image processing system may store the new dynamic spatial index 610B in the dynamic spatial index portion 630 of the memory cache 620.FIG. 8 illustrates the memory cache 620 which was used to store the dynamic and spatial indexes which represented FIG. 5. However, the image processing system has since replaced the dynamic spatial index corresponding to the old position or shape of objects within the three-dimensional scene with a new dynamic spatial index. For example, a new dynamic spatial index 610B which may represent the new position 515B of the car 510. The new dynamic spatial index 610B may differ only slightly from the dynamic spatial index 610A which represented the initial position 515A of the car 510. As illustrated in FIG. 9, the difference between the old dynamic spatial index and the new dynamic spatial index is a portion 615B of the dynamic spatial index 610B. This portion 615B of the dynamic spatial index may correspond to the change in position of the car 510B from the first position 515A to the second position 515B.Also illustrated in FIG. 9 is the static spatial index 605A. The static spatial index 605A has not changed from FIG. 6 to FIG. 9 because the static object (i.e., the building 505) has not changed position or shape in the three-dimensional scene 500.Cache Invalidation with Data Dependent Expiration Using a Step ValueAccording to embodiments of the invention a memory cache may contain multiple data structures each of which may be updated or invalidated at various times. For example, as described above, a memory cache in an image processing system may contain both a dynamic spatial index and a static spatial index. Furthermore, the memory cache may have a dynamic portion where the dynamic spatial index is stored and a static portion where the static spatial index is stored. In some circumstances, it may be desirable to store the dynamic spatial index and static spatial index separately such that the portion of memory which stores the dynamic spatial index may be periodically invalidated while keeping the static portion of the memory cache valid.Periodic invalidation of the dynamic portion of the spatial index may be performed in anticipation that a new dynamic spatial index corresponding to new positions of objects (e.g., due to movement or collision) within the three-dimensional scene may be used by the image processing system. By periodically invalidating the dynamic portion of the spatial index, the risk of a processing element using invalid data is reduced.Invalidation of a data structure (e.g., the dynamic spatial index) in a memory cache may require an application to issue a large number of cache invalidate instructions in order to invalidate each line of the cache which contains data related to the data structure. The large number of invalidate instructions may consume a large amount of processing bandwidth and power.In some circumstances a data structure (e.g., the dynamic spatial index) may be stored within the cache memory of multiple processing elements in a multiple processor environment. For example, the dynamic spatial index may be stored within the L1 memory cache 112 of each of the processing cores 110 in the multiple core processor 102 illustrated in FIG. 1.Cache coherency may be necessary in a multiple processing core system when the caches of the various processor cores may contain data which relates to the same main memory address. Cache coherency may enable the system to avoid situations where different versions of data corresponding to a main memory address are located within separate memory caches and one processor might use an old or invalid version of the data. For example, one processor may update the a portion of the dynamic spatial index within its own cache while another processor may contain old data corresponding to the same portion of the dynamic spatial index within its cache and attempts to use the old data.In some circumstances, cache coherency may be maintained by hardware and accomplished, for example, using a snooping bus protocol (e.g., MESI protocol). Using a snooping bus protocol, each processor cache may monitor bus transactions for writes to memory at an address location which contains data present within the processor's cache. Although snooping bus protocols may effectively maintain cache coherency, when a periodic data structure (e.g., dynamic spatial index) is frequently invalidated many bus transactions may be generated each time new data relating to the data structure is written to a processor cache. Thus, periodic invalidation of a data structure contained within a plurality of processor caches using a standard cache coherency protocol (e.g., MESI protocol) may result in the consumption of a large amount of processing bandwidth and power.However, according to embodiments of the invention, portions of a memory cache may be periodically updated and the number of bus transactions relating to updating the data structure minimized, by associating step values with data which forms the data structure and by using and a modified cache coherency protocol. The modified cache coherency protocol may be referred to as a step-interval cache coherency protocol.Using the step value in conjunction with the step-interval cache coherency protocol to update portions of the memory cache eliminates the need to perform thousands if not millions of cache invalidate instructions when a data structure needs to be invalidated. The elimination of the need to perform these invalidate instructions, may allow a processing element (or elements) to perform other tasks (e.g., image processing tasks) and, consequently, may improve the performance of the system (e.g., a ray-tracing image processing system).According to embodiments of the invention, step values may be associated or stored with data stored within cache memory. Step values may be, for example, an integer value and may be used to determine if the associated data which resides within a memory cache is current by comparing a stored step value with a current step value. Additionally, the current step value may be altered (e.g., incremented) to invalidate data which is associated or stored with an old step value. The step value may be associated with data which forms a portion of a data structure (e.g., the dynamic spatial index or the static spatial index).According to embodiments of the invention, in conjunction with the normal address tag and state comparison in the cache, the current step value and the step value associated with data within the cache may be compared. The current step value may be specified in a register within the memory cache, and the step value associated with data within the cache may be located within the cache directory containing the valid bits and address tag associated with the data within the memory cache. If the current step value and the step value associated with data match, a cache hit occurs and the data stored within the cache memory associated with the address may be returned to the processor. However, if the current step value and a step value associated with the data do not match, a cache miss occurs and the data must be retrieved from another source. By associating a step value with data within the data structure and using the step value during the cache compare, the cache may quickly determine if data within the cache is current. In addition, by modifying (e.g., updating) the current step value, an application may quickly invalidate all data stored within cache memory which is associated with an old step value or values without needing to issue invalidate instructions.Furthermore, according to embodiments of the invention, the step-interval cache coherency protocol may be used to control when data associated with a new version of a data structure is shared with other processors and, thus, written to other cache memory. The step-interval cache coherency protocol may be used in conjunction with the step values in order to periodically update a data structure within the cache memory. An application may use the step-interval cache coherency protocol to write an entire data structure to cache memory before the data structure is to be used by other processors. For example, the image processing system may use the step-interval cache coherency protocol to write a new version of a dynamic spatial index (corresponding to a future frame) to the cache before the dynamic spatial index is to be used by the image processing system to render the frame.According to embodiments of the invention, when a miss occurs on a write to the cache memory, under the step-interval cache coherency protocol the logic within the cache memory may store the data from the write locally, but may not allow coherency between the writer processor cache and other caches. By not allowing coherency on a cache miss caused by a write to the cache memory, the step-interval cache coherency protocol may prevent the other caches from snooping the data which was written to the cache. However, on cache misses due to a read request, the step-interval cache coherency protocol may allow coherency between caches. By allowing cache coherency on a read miss, the step-interval cache coherency protocol may allow data for a new version of the data structure to be retrieved from other sources (e.g., cache memory for other processors, main memory, etc.).FIG. 9 is a flowchart which illustrates an exemplary method 900 of writing data to a memory cache and associating a step value with the data, according to embodiments of the invention. The method begins at step 905, for example, when an application or a system determines a data structure needs to be stored in cache memory. For example, the image processing system may determine a need for a dynamic spatial index to be stored in cache memory in order to perform image processing.Next at step 910, according to one embodiment of the invention the application may designate a writing processing element. The writing processing element may perform all of the writes of data associated with the data structure which is to be used by the application. The writing processing element may write the data into its cache memory (e.g., L1 cache memory).For example, FIG. 10 illustrates an exemplary multiple core processor 102 containing four processor cores (110A-110D). As illustrated, each processor core 110 contains cache memory (i.e., an L1 cache 112). One core processor 110A may be designated as the writing processor core by an application (e.g., the image processing system) and may write data corresponding to the data structure to its cache memory (e.g., L1 cache 112). As explained further below and illustrated in FIG. 10, the writer processor core 110A may have a current step value of 2 within its memory cache, while reader processor cores (110B-110D) may have a current step value of 1 within their memory caches.Although embodiments are described herein as using a single processing element or processor core to write data which corresponds to the data structure, other embodiments of the invention are envisioned which may use a plurality of processing elements to write data corresponding to the data structure to a plurality of memory caches.Next, at step 915 the application may mark the page address range for a data structure which is to be written into the data cache by the writer processor to indicate the step-interval cache coherency protocol is to be used. As described below, this may be accomplished by updating data coherence mode bits associated with an address range for the data structure which is to be written to the data cache.According to embodiments of the invention, a periodic data structure or a group of data structures may be identified by an address range. The address range may be specified, for example, within the memory management unit (MMU) logic of the processor. Alternatively, a register may be added to the processor which specifies an address range for the data structure. According to one embodiment of the invention, the address range register may be located within a cache controller of the cache memory.FIG. 11 illustrates an exemplary cache memory 1100 containing a cache directory 1105, cache data store 1110, and a cache controller 1115. As illustrated in FIG. 11, the cache controller 1115 may contain registers 1120 which may contain address ranges for a plurality of data structures. The data cache may be, for example, an L1 cache 112 of a processor core 110 illustrated in FIG. 1. A first bus 1125 and a second bus 1130 are also illustrated in FIG. 11. The first bus 1125 and the second bus 1130 may connect the processor with the cache memory 1100 and with other processing cores and memory caches.As illustrated a plurality of address ranges may be specified by a plurality of registers within the cache controller 1120. According to embodiments of the invention, each address range specified by an address range register may correspond to a single data structure or a group of data structures which may be defined by a plurality of rows within the cache data store. By identifying various data structures through the use of a separate address range registers within the cache controller, the various data structures may be invalidated at different times. Furthermore, by associating a step value with an address range which corresponds to a data structure or a group of data structures, an entire data structure or group of data structures may be invalidated by updating the current step value associated with an address range as will be further described below. Similarly, if the address ranges for various data structures are defined within the MMU logic of a processor, distinct step values may be associated with the address ranges within the MMU logic.For example, the dynamic spatial index may be associated with a first address range register while the static spatial index may be associated with a second address range specified by a second address range register. Consequently, the dynamic spatial index may be invalidated by updating the current step value associated with the first address range in the cache controller 1115, while the static spatial index may remain current by not modifying the current step value associated with the second address range in the cache controller.Associated with each address range may be several attribute bits. These bits may be used by the processor or logic within the data cache to determine how to handle reads from and writes to portions of a periodic data structure within the corresponding address range. A first attribute bit or set of attribute bits may be a data coherence mode bit or bits. The data coherence mode bits may specify if real time cache coherence or step interval cache coherence is to be used when reading data from or writing data to the periodic data structure. Real time coherence may be accomplished using a commonly known cache coherency protocol (e.g., MESI cache coherency protocol). In contrast, step interval cache coherence may be used as described above and according to embodiments of the invention.A second bit or set of bits may be used to specify a step value for the data. The step value associated with data within the memory cache may be used along with a current step value to determine if the data is current. The step value associated with the data within the data cache may be thought of as a version of the data within the data cache.For example, as illustrated in FIG. 11, the registers 1120 located within the cache controller 1115 of the cache memory 1100 may contain a data coherence mode bit or a set of data coherence mode bits and a current step value bit or a set of current step value bits. Thus, the application may mark the page address for the data structure for step-interval coherence at step 915, for example, by updating the cache coherence mode bits in a cache-controller register which corresponds to the address range for the data structure.In addition to updating the coherency mode bits for the address range corresponding to the data structure, at step 915 the application may also update a step value (current step value) which is to be associated with the data which is written into the data cache. This updated step value which may written with the data may be used to identify a new version of the data and, consequently, a new version of the data structure which is to be written into the cache memory by the processor. The application may set the step value for the data structure, for example, by updating the step value bits in a cache-controller register which corresponds to the address range for the data structure.For example, the image processing system may currently be using a first version of the dynamic spatial index to perform image processing. However, in anticipation of performing image processing for a future frame, the image processing system may use a writer processor to write a future version of the dynamic spatial index into the data cache. The first version of the dynamic spatial index may be stored within the memory cache of reader processors, and the cache directory lines or entries corresponding to the data within the first version of the dynamic spatial index may have step values equal to 1. In order to indicate the data which is to be written to the memory cache of the writer processor corresponds to the next version of the dynamic spatial index, the image processing system may update the current step value in the cache controller of the writer processor. Consequently, a step value of 2 may be written into the cache directory lines of data which makes up the new version of the dynamic spatial index as the writer processor writes the data into the cache memory.For example, as illustrated in FIG. 10, the writer processor core 110A may have a current step value of 2 within its memory cache, while reader processor cores (110B-110D) may have a current step value of 1 and a step value of 1 within the cache directory entries associated with data within the reader processor memory caches.Next, at step 920, the application may write the data for the data structure into the data cache. As data for the data structure is written into the data cache, the current step value on the writer processor may be written into cache directory entries within the cache directory. Although various configurations of cache directory entries may be used, along with the current step value a cache directory entry may also include state bits (e.g., valid bit) and bits which identify the data (e.g., an address tag) stored within the cache data store according to one embodiment of the invention.For example, as illustrated in FIG. 11 each cache directory entry may be defined by or contain a step value 1135, a state 1140, and an address tag 1145. Each cache directory entry may correspond to a data entry within the cache data store 1110 of the cache memory 1100. Furthermore, as illustrated in FIG. 10, the current step value of 2 may be associated with data (e.g., written to cache directory entries) written to the cache memory (L1 cache 112) of the writer processor core 110A. Although the cache directory entries are illustrated in FIG. 11 as having address tag bits, it should be understood that embodiments of the invention may be applied to any cache configuration including fully associative caches and set associative caches.As the data is written to the memory cache of the writer processor, a cache miss may occur if the step value being written to the data cache does not match the step value within the cache directory entry (local step value). According to embodiments of the invention, when using the step-interval cache coherency protocol cache misses on writes to the cache of the writer processor will cause a bus transaction of read (i.e., cacheable, but non-coherent). The cacheable but non-coherent status of the cache miss on a write will allow the writer processor to write the new data structure to the data cache and prevent other caches from snooping the write to the cache (i.e., accessing the data written into the cache). By treating misses on writes as reads, a processor may write an entire new data structure to the data cache before the data structure is to be used by other data caches. Thus, the new data structure may be written in its entirety and present within the cache when the applications needs to use the new data structure (e.g., the next frame of image processing).After the application is finished writing data for the data structure into the cache, at step 925 the application may make the data within the writer processor cache coherent across all caches. The time to make the data structures coherent may be determined by the period which a new data structure is required by the application.For example, an application such as an image processing system may require a new dynamic spatial index for each new frame to be rendered. An image processing system may render a new frame once every 60th of a second. Therefore, after writing new data into a data cache corresponding to a new dynamic spatial index, the image processing system may determine once every 60th of a second to make the other caches coherent with the cache containing the new or updated dynamic spatial index.According to embodiments of the invention, the application may make the caches coherent using one of several techniques. First, the application may make the data within the caches coherent by flushing all of the data which corresponded to the data structure from cache memory of the writer processor back to memory. This may be accomplished, for example, by issuing a cache flush instruction for each line of the cache structure that contains updated data (e.g., each line which pertains to the new version of the data structure) such that cache sends the updated data entry or entries to a globally visible memory location or locations (e.g., shared L2 cache 114, main memory, etc.). Alternatively, the application may make the caches coherent by initiating a hardware engine flush to send lines in the cache back to globally visible memory. According to embodiments of the invention, the hardware engine flush may send all of the lines in the cache back to main memory, may send only the lines which contain data relating to the updated data structure, or send only the lines which only contain modified data.However, as described below with respect to FIG. 13, the application may make all caches coherent by not doing anything at step 925. Rather, the application may rely on the step-interval cache coherency protocol to make the caches coherent by responding to cache misses in the reader caches.Next, at step 930, the application may update a current step value within a register which resides in each processor which may use the data structure (i.e., reader processor). The processor may update the current step value within each cache memory by sending messages from the writer processor or thread to threads on the reader processors. The application may update the step value to correspond to the step value which was used when writing data corresponding to a new data structure into cache memory of a writer processor.For example, if at step 915 the application wrote data to the data cache of the writing processor with a step value of 2, then at step 925 the application may update the current step value in each processor which may use the data structure to a value of 2. FIG. 12 illustrates the current step value stored within the memory cache of each reader processor (110B-110D) updated from a value of 1 to a value of 2.By updating the step value in the register of all processors which may use data within the data structure, the application effectively invalidates all data within processor caches (e.g., reader processor caches) which is associated with a non-matching step value. The data may be effectively invalidated, because when the cache controller compares the current step value (e.g., 2) with an old step value associated with data within the cache directory (e.g., 1), the values will not match and the cache controller may consider the comparison a miss.Next, at step 935, the application may perform or issue reads in processors to addresses within the address range of the data structure. An exemplary method of performing reads using the step value and the real-time coherency protocol is described further below with respect to FIG. 13.FIG. 13 is a flowchart illustrating an exemplary method 1300 of performing reads from a data cache using a step value and the step-interval cache coherency protocol, according to embodiments of the invention. The method 1300 begins at step 1305 when a processing element places an address on a bus in response to an instruction which requires data from memory (e.g., load instruction). The address placed on the bus may be used by the memory cache to determine if data corresponding to the address is stored within the memory cache.Once the cache receives the address from the processor, at step 1310 the cache controller may compare the address to an address range register within the cache controller to determine if the address is within an address range corresponding to a data structure. If so, at step 1315, the cache controller may retrieve the data coherence mode, the data group ID and the current step value associated with the data structure specified by the register. The data coherence mode may indicate that the step-interval cache coherency protocol is to be used and the current step value may be the current step value updated by the writer processing element in step 930 of method 900. By saving the attribute bits within the cache controller, no modification to the read instruction or instruction logic is necessary.Once the cache controller retrieves the attribute bits related to the address for the data structure, the cache controller may compare various information to determine if current data related to the address of the instruction is located within the memory cache. According to one embodiment of the invention, in addition to a comparison of the address provided by the processor and the address tag within the cache directory, the cache controller may also examine or compare the state bits of a matching cache directory entry with a known good state to determine if the data within the cache which corresponds to the cache directory entry is valid. Furthermore, according to embodiments of the invention, at step 1320 the cache controller may compare the step value bits retrieved from the cache directory entry with the current step value bits retrieved from the register within the cache controller. The comparison of the step value bits which are stored within the cache directory entry with the current step value bits retrieved from the register may indicate whether or not the data within the cache is current.Next at step 13325, the cache controller may determine if a cache hit or a cache miss occurs. The cache hit or miss determination may be based on the results of the comparison of the address values, the state tags, and the step values associated with the data located at the address requested by the processor. If any of the compared bits do not match or the data is invalid a cache miss occurs and the cache controller proceed to step 1330. However, if the current state bits match, the data is valid, and the address tag matches, a cache hit occurs and the cache controller may proceed to step 1335.After a cache hit, at step 1335, the cache controller may provide data from the data cache to the processor via a bus. In contrast, if a cache miss occurs, at step 1330, data may be provided to the processor from another source. For example, according to one embodiment of the invention, when using the step-interval cache coherency protocol, when a cache miss due to a read request occurs, data may be provided from the cache of the writer processor to the processor which requested the data. Subsequently, the data provided by the writer processor may be written into the data cache of the requesting processor and a corresponding cache directory may be created containing the current step value. Consequently, the data structure may be updated as needed by the cache of the writing processor.Alternatively, according to another embodiment of the invention, when a cache miss due to a read request occurs, data may be provided to the requesting processor from globally visible memory (e.g., the shared L2 cache or main memory). The requested data may be present in the globally visible memory, for example, due to a cache flush executed in step 925 of method 900. As the data is provided from a globally visible memory, the data may be written into the data cache of the requesting processor along with the current step value.Although the step value may sufficiently invalidate data within the memory cache from one increment of the step value to the next, a problem may exist if the number of step values is finite and at some point the application reuses step values. If the application reuses the step values, in some circumstances an old data cache entry associated with an old step value may remain within the cache until the application reuses the old step value. Consequently, a cache hit may occur when the application reuses the old step value and invalid data may be returned to the requesting processor.However, according to embodiments of the invention, a scrubber may be used to invalidate the old data within the memory cache. The scrubber may be a hardware unit or a software routine which invalidates old cache lines within the cache which are associated with old step values.According to one embodiment of the invention, the scrubber function may read each cache line within the cache directory and check the step value associated with each cache directory entry. Upon encountering a cache directory entry containing a step value which does not match the current step value, the scrubber function may invalidate the corresponding memory cache entry by setting the valid bit of the cache directory entry, for example, to ‘0’. Consequently, any attempted access to the cache entry that has been invalidated by the scrubber function will cause a cache miss. Thus, by invalidating the cache directory entries which contain old step values, the scrubber function may ensure that old data within the memory cache is not accessed in the future.The rate at which the scrubber function reads the rows within the cache directory may be programmable, and may be adjusted such that the scrubber may examine and invalidate all cache directory entries before a step value is reused by the application. Consequently, if the application uses many step values the scrubber function may operate more slowly than if the application uses very few step values.Although the embodiments of the invention for updating and invalidating memory cache are herein described with reference to a portion of a memory cache which contains a dynamic spatial index, it should be understood that the invention is not limited to invalidating cache memory areas which only contain dynamic spatial indexes. Instead, any portion of a memory cache containing any type of data, whether related to image processing or not, may be invalidated by the methods and apparatus described herein.Furthermore, although the current step value is herein described as being stored within the cache controller of a memory cache, the examples given above are for purposes of description and the invention is not limited to specific described embodiments. Embodiments of the invention are envisioned in which the current step value may be stored elsewhere within a processor core.CONCLUSIONAccording to embodiments of the invention, a step value and a step-interval cache coherency protocol may be used to update and invalidate data stored within cache memory. According to embodiments of the invention, a step value may be stored within a cache directory entry associated with data in the memory cache. Upon reception of a cache read request, along with the normal address comparison to determine if the data is located within the cache a current step value may be compared with the stored step value to determine if the data is current. If the step values match, the data may be current and a cache hit may occur. However, if the step values do not match, the requested data may be provided from another source. According to embodiments of the invention, an application may update the current step value effectively invalidating old data stored within the cache and associated with a different step value. By updating the current step value to invalidate data stored within the cache memory, embodiments of the invention eliminate the need to perform many cache invalidate instructions.While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow. 





 

Previous Patent: Method and Apparatus for Refetching DataNext Patent: Data Prefetch Throttle











Home


Search


Services


Communities


Help


Contact us

Advertise on this Site










            © 2004-2017 FreePatentsOnline.com. All rights reserved.
            Privacy Policy
                & Terms of Use.
A SumoBrain Solutions Company


 
















Microsoft personalized ad preferences




 













To opt out of personalized ads in this browser, your browser history must allow first-party and third-party cookies and you must have your browsing experience set to NOT delete browsing history on exit. Instructions for enabling cookies and configuring your browsing history may be available in your browsers settings, privacy, or help documentation.

















Sign in
















  Hold on… We’re sorry but this didn’t work.                  You can’t turn off personalized ads right now because your browser is currently blocking third-party cookies. We can help you fix this issue.                Let’s get started:  Depending on what browser you use, open Options or Settings.                  Make sure that third-party cookies are not blocked anymore. To find out how, search your browser’s Help.                                 Revisit http://choice.microsoft.com/opt-out, and then on the “Personalized ads in this browser” tile, click Off.                 ext74081 




  About Our Ads To create a more customized online experience, some of the ads you may receive on Microsoft websites and apps are tailored to your previous activities, searches and site visits. You're in control and here's where you can make the advertising choice that's right for you. ext74075 




  Where Can I Learn More about Advertising on Microsoft Websites and Apps? Microsoft partners with Oath, AppNexus and other third party service providers to help present customized content and display advertisements on MSN, Outlook.com and other websites and apps. Microsoft also delivers search ads to Bing and our search syndication partners. Learn more about Microsoft’s privacy practices here. You can learn more about interest-based ads from Oath and AppNexus in their privacy statements: Oath and AppNexus. What Choices Do I Have About Interest-Based Advertising? On this page, you can opt out of receiving interest based advertising from Microsoft. You can also opt out of receiving interest-based advertising from all self-regulatory members, including Microsoft, Oath, AppNexus and other third party ad networks, at the following sites:  In the US: Digital Advertising Alliance (DAA) In Europe: European Interactive Digital Advertising Alliance (EDAA) In Canada: Ad Choices: Digital Advertising Alliance of Canada (DAAC)  You can control interest-based advertising in Windows apps by turning off the advertising ID in Windows Settings.  More choices  Do you want personalized ads from other companies?  Questions? If you have a privacy question or a question for the Chief Privacy Officer of Microsoft, please contact us by using our web form. We will respond to questions within 30 days. ext74076 




       Personalized ads in this browser     OFF    Opt-out is currently unavailable, please try again later.  Control the "personalized ads" setting for this web browser.  Learn more           If you want Microsoft to show ads that might be relevant to you, click On. To show “generic” ads, click Off.          ext74078 




       Personalized ads wherever I use my Microsoft account     OFF   Sign in to change...    Opt-out is currently unavailable, please try again later.  Control the "personalized ads" setting that applies when you are signed in on any computer or device with your Microsoft account, including Windows, Windows phone, Xbox and other devices.  Learn more                    If you want Microsoft to show ads that might be relevant to you, click On. To show “generic” ads, click Off.         If you choose “generic” ads and use a browser, your choice applies to everyone when using that browser as long as you do not clear your cookies.          ext74079 




       Personalized ads in Windows         In your Windows Settings, you can turn off personalized ads that appear in apps on this device. You’ll still see ads, but they won’t be personalized anymore.     If you have Windows 8.1:            Access the charms by touching or moving your pointer to the right edge of the screen.                 Click or tap Settings, and then click or tap Change PC Settings.                 Click or tap Privacy, and then turn off Let apps use my advertising ID for experiences across apps.          If you have Windows 10:            Click or tap the Start button.                 Click or tap Settings.                 Click or tap Privacy, and then turn off Let apps use my advertising ID for experiences across apps.          If you have a Windows mobile device:            Go to Settings.                 Tap on Privacy.                 Tap on Advertising ID, and then turn off Let apps use my advertising ID for experiences across apps.                If you want to turn off personalized ads from Microsoft wherever you use your Microsoft account including apps on Windows, Windows Phone, Xbox and other devices, you can do so by selecting the Microsoft account option above.    ext74080 














Legal
Privacy & Cookies
© 2017 Microsoft













SpyFly


































































Spy Fly
















facebook
twitter
google_plus




Member Login



 




Find Out Everything
Quick and easy public record checks









First Name



Last Name



Select a State

- Select State -
Alabama
Alaska
Arizona
Arkansas
California
Colorado
Connecticut
Delaware
District of Columbia
Florida
Georgia
Hawaii
Idaho
Illinois
Indiana
Iowa
Kansas
Kentucky
Louisiana
Maine
Maryland
Massachusetts
Michigan
Minnesota
Mississippi
Missouri
Montana
Nebraska
Nevada
New Hampshire
New Jersey
New Mexico
New York
North Carolina
North Dakota
Ohio
Oklahoma
Oregon
Pennsylvania
Rhode Island
South Carolina
South Dakota
Tennessee
Texas
Utah
Vermont
Virginia
Washington
West Virginia
Wisconsin
Wyoming 














Phone and Email Records
SpyFly strives to provide accurate and up-to-date phone and email records  that you can rely on. 
View Records


Address History
SpyFly's address history lists current and past locations featuring an interactive map.
View Records


Career, Lifestyle, and More
With SpyFly you can access career and lifestyle info, relatives, associates, and much more.
View Records






DISCLAIMER: SpyFly provides affordable, immediate access to public record information. It is PROHIBITED by law to use our service or the information contained on our website to make decisions about employment, insurance, consumer credit, tenant screening, or for any other purpose subject to the Fair Credit Reporting Act, 15 USC 1681 et seq. SpyFly does not provide private investigator services, consumer reports and is not a consumer reporting agency as defined by the Fair Credit Reporting Act. Please be EXTREMELY careful when reviewing a person’s criminal history. Please DO NOT use this information without further investigating the accuracy of the information. The information available on our website may not be complete, accurate, or current. For more information, please review SpyFly Terms of Use.
 










WARNING!
The website you are about to access contains public records that may include phone numbers, email addresses, contact information, address history, careeer info, relatives, associates, and criminal records (DUI/DWI, felonies, misdemeanors, theft, sex crimes, etc.). 
					
					By clicking "Continue" you agree to not use our service or our information to make decisions about  employment, insurance, consumer credit, tenant screening, or for any other purpose subject to the Fair Credit Reporting Act, 15 USC 1681 et seq. SpyFly is not a consumer reporting agency as defined by the Fair Credit Reporting Act.
					

Continue

open lightbox
open lightbox



Creating private search...


1. Your Search is private 
2. We never notify the person you are searching 
3. We don't share search history with third-parties 

Establishing a private connection




Connecting to secure GEO database...




.


Optimizing Network Connection



Accessing Secure Connection...



Connecting to Federal, State, and County databases...



Establishing Privacy Protocol. Your search will be anonymous...








One Moment...



Ready to Search all available databases

Continue







Searching for   of ...
Please wait while we retrieve city, county, and state records.









Initiating Nationwide Search...
Searching through millions of public records 



Screening State and County Archives...
Identifying possible subjects that match search criteria...



Downloading matches from Database... 
Isolating possible subject matches




facebook

Person A, Somewhere
Testimonial One...



facebook

Person B, Somewhere
Testimonial Two...



facebook

Person C, Somewhere
Testimonial Three...




SEARCH COMPLETE!


Please enter your email address below to immediately view results











Privacy Policy | 
			Terms of Use




SEARCH COMPLETE!







 









Amazon.com: brown jeffrey: Books







 


























Interesting Finds Updated Daily










Amazon




    Try Prime
  


















Books



All Departments
Alexa Skills
Amazon Devices
Amazon Video
Amazon Warehouse Deals
Appliances
Apps & Games
Arts, Crafts & Sewing
Automotive Parts & Accessories
Baby
Beauty & Personal Care
Books
CDs & Vinyl
Cell Phones & Accessories
Clothing, Shoes & Jewelry
   Women
   Men
   Girls
   Boys
   Baby
Collectibles & Fine Art
Computers
Courses
Credit and Payment Cards
Digital Music
Electronics
Gift Cards
Grocery & Gourmet Food
Handmade
Health, Household & Baby Care
Home & Business Services
Home & Kitchen
Industrial & Scientific
Kindle Store
Luggage & Travel Gear
Luxury Beauty
Magazine Subscriptions
Movies & TV
Musical Instruments
Office Products
Patio, Lawn & Garden
Pet Supplies
Prime Exclusive
Prime Pantry
Software
Sports & Outdoors
Tools & Home Improvement
Toys & Games
Vehicles
Video Games
Wine





Go

















Departments









EN

 
      




Hello. Sign inAccount & ListsSign inAccount & ListsOrdersTry PrimeCart0






Your Amazon.comToday's DealsGift Cards & RegistrySellHelpDisability Customer Support 






Books Advanced Search New Releases NEW! Amazon Charts Best Sellers & More The New York Times® Best Sellers Children's Books Textbooks Textbook Rentals Sell Us Your Books Best Books of the Month Kindle eBooks 























































































1-12 of 967 results for Books : 
"brown jeffrey"


"brown jeffrey" 
                                





                                 Cancel









Sort by 
Relevance
Featured
Price: Low to High
Price: High to Low
Avg. Customer Review
Publication Date
Most reviews

























Book Format:Hardcover|Paperback|Kindle Edition|Audible Audio Edition|Audio CD



Lucy & Andy Neanderthal: The Stone Cold Age (Lucy and Andy Neanderthal)Aug 29, 2017by Jeffrey BrownHardcover
$
8
03

$12.99PrimeFREE Shipping on eligible ordersAvailable for Pre-order. This item will be released on August 29, 2017.See DetailsPre-order Price Guarantee. See DetailsInspiration With Explanation: 365 Life-Changing GoalsApr 1, 2017by Jeffrey S BrownPaperback
$
14
99

PrimeGet it by Friday, Jul 28FREE Shipping on eligible ordersMore Buying Choices$14.48(12 used &amp new offers)
5 out of 5 stars
3Cats are Weird and More ObservationsJul 28, 2010by Jeffrey BrownHardcover
$
8
51

$14.95PrimeGet it by Friday, Jul 28FREE Shipping on eligible ordersMore Buying Choices$1.12(101 used &amp new offers)Kindle Edition
$
7
99

Auto-delivered wirelessly
4.2 out of 5 stars
46Attack of the Journal (Star Wars: Jedi Academy)Aug 25, 2015by Jeffrey BrownHardcover
$
9
97

PrimeGet it by TODAY, Jul 26FREE Shipping on eligible ordersMore Buying Choices$1.21(118 used &amp new offers)Stationery$7.19(17 used &amp new offers)
4.7 out of 5 stars
70









Goodnight Darth Vader / Darth Vader and Friends Deluxe Box Set (includes two art prints) (Star Wars)Sep 13, 2016by Jeffrey BrownHardcover
$
25
00

$35.00PrimeFREE Shipping on eligible ordersOnly 5 left in stock - order soon.More Buying Choices$12.93(46 used &amp new offers)
4.2 out of 5 stars
3Darth Vader and SonApr 18, 2012by Jeffrey BrownHardcover
$
10
65

$14.95PrimeGet it by TODAY, Jul 26FREE Shipping on eligible ordersMore Buying Choices$0.99(282 used &amp new offers)Kindle Edition
$
8
51

Auto-delivered wirelesslyOther Formats:Paperback, Cards
4.7 out of 5 stars
1,491Darth Vader and FriendsApr 28, 2015by Jeffrey BrownHardcover
$
11
98

$14.95PrimeGet it by Tomorrow, Jul 27FREE Shipping on eligible ordersMore Buying Choices$1.05(134 used &amp new offers)Kindle Edition
$
8
51

Auto-delivered wirelesslyOther Formats:Calendar
4.4 out of 5 stars
148Darth Vader and Son Postcard BookApr 16, 2013by Jeffrey BrownCards
$
8
60

$9.95PrimeFREE Shipping on eligible ordersOnly 11 left in stock - order soon.More Buying Choices$2.50(71 used &amp new offers)
4.7 out of 5 stars
25Cat Companion JournalJul 29, 2009by Jeffrey BrownDiary
$
4
49

$9.95PrimeFREE Shipping on eligible ordersOnly 19 left in stock - order soon.More Buying Choices$3.50(40 used &amp new offers)
4.8 out of 5 stars
19Goodnight Darth VaderJul 22, 2014by Jeffrey BrownHardcover
$
10
59

$14.95PrimeGet it by Tomorrow, Jul 27FREE Shipping on eligible ordersMore Buying Choices$1.98(148 used &amp new offers)Kindle Edition
$
8
51

Auto-delivered wirelessly
4.5 out of 5 stars
398UnlikelyAug 18, 2003by Jeffrey BrownPaperback
$
12
11

$14.95PrimeFREE Shipping on eligible ordersOnly 2 left in stock - order soon.More Buying Choices$1.99(61 used &amp new offers)Kindle Edition
$
4
99

Auto-delivered wirelessly
3.3 out of 5 stars
9Star Wars: Jedi AcademyAug 27, 2013by Jeffrey BrownHardcover
$
7
92

$12.99PrimeGet it by TODAY, Jul 26FREE Shipping on eligible ordersMore Buying Choices$0.97(250 used &amp new offers)Kindle Edition
$
1
99

Auto-delivered wirelesslyOther Formats:Paperback
4.8 out of 5 stars
444Sponsored




These are ads for products you'll find on Amazon.com. Clicking an ad will take you to the product's page.Learn more about Sponsored Products.See a problem with these advertisements?Leave ad feedbackNature Scout Emily: A Comic Book of Nature SkillsNov 26, 2016by Clint HollingsworthChildren's comic: Nature adventure tracking animals, fishing, making a shelter and fire. Beautifully illustrated ebook version of print coloring book.Kindle Edition$0.00Read this and over 1 million books withKindle Unlimited.
$
2
99

to buyAuto-delivered wirelesslyPaperback
$
7
99

PrimeFREE Shipping on eligible ordersIn StockMore Buying Choices$7.42(10 used &amp new offers)
4.4 out of 5 stars
3Borrow for free from your Kindle device.Join Amazon Prime












 
Previous Page
1
2
3
...
81
 
Next Page
















Sponsored Links
(What's this?)








Ad feedback











Search FeedbackDid you find what you were looking for?YesNo
Choose a category that best describes the issue that you are having with the search:Choose a category…I need to talk to customer service.I still haven't found what I'm looking for.How do I filter or sort my search ?Something is broken.A picture or description looks wrong.Could you add a feature ?Could you start carrying a product not listed here ?Choose a category…







Leave us some comments about your search; your comments can help make our site better for everyone.Submit

Get Express customer service or contact us by e-mail or phone.contact us

Thank you for your feedback.
If you need help or have a question for Customer Service, please visit the Help Section.
















Show results for
                                Any CategoryBooksGraphic NovelsComics & Graphic NovelsComic StripsSatireChildren's BooksMedia Tie-In Graphic NovelsChildren's Comics & Graphic NovelsPerforming ArtsHumorParenting & Families HumorLiterature & FictionHumor & EntertainmentTeen & Young AdultPolitics & Social SciencesArts & PhotographyParenting & RelationshipsBiographies & MemoirsBusiness & MoneyCalendarsChristian Books & BiblesComputers & TechnologyCookbooks, Food & WineCrafts, Hobbies & HomeEducation & TeachingEngineering & TransportationHealth, Fitness & DietingHistoryLawMedical BooksMystery, Thriller & SuspenseReferenceReligion & SpiritualityRomanceScience & MathScience Fiction & FantasySelf-HelpSports & OutdoorsTravelSee moreRefine byDelivery DayGet It TodayGet It by TomorrowAmazon PrimeEligible for Free ShippingFree Shipping by AmazonNew ReleasesLast 30 daysLast 90 daysComing SoonAuthorJeffrey BrownJules FeifferEdith WhartonHenry JenkinsLincoln PeirceMatt GroeningRyk BrownCorey LewisRyan NorthBecky CloonanAdrianne AmbroseAriel SchragKatie CookGabrielle BellHeather WhiteSee moreComic & Graphic Novel FormatsKindle EditionHardcoverPaperbackCollector & Limited EditionBook LanguageEnglishComic & Graphic Novel PublishersTop Shelf ProductionsImage ComicsArchaia EntertainmentBOOM! StudiosBook SeriesThe Girlfriend TrilogyJedi AcademyIncredible Change-BotsThe Frontiers SagaPopgunTrue PornFraggle RockThe Frontiers Saga: Part 2: Rogue CastesSee moreBook FormatHardcoverPaperbackKindle EditionAudible Audio EditionAudio CDChildren's Books Age RangeBaby-2Ages 3-5Ages 6-8Ages 9-12Arts & Photography FormatsHardcoverPaperbackKindleOversizedAvg. Customer Review4 Stars & Up & Up3 Stars & Up & Up2 Stars & Up & Up1 Star & Up & UpInternational ShippingAmazonGlobal EligibleConditionCollectibleNewUsedAvailabilityInclude Out of Stock












































































There's a problem loading this menu right now.
Learn more about Amazon Prime.






 Get fast, free shipping with Amazon Prime 
 Prime members enjoy FREE Two-Day Shipping and exclusive access to music, movies, TV shows, original audio series, and Kindle books. 

      >
      Get started















































        Your recently viewed items and featured recommendations
    



 › 
View or edit your browsing history

After viewing product detail pages, look here to find an easy way to navigate back to pages you are interested in.






        Your recently viewed items and featured recommendations
    



 › 
View or edit your browsing history

After viewing product detail pages, look here to find an easy way to navigate back to pages you are interested in.








Back to top
Get to Know UsCareersAbout AmazonInvestor RelationsAmazon DevicesMake Money with UsSell on AmazonSell Your Services on AmazonSell on Amazon BusinessSell Your Apps on AmazonBecome an AffiliateAdvertise Your ProductsSelf-Publish with UsBecome an Amazon VendorSell Your Subscription on Amazon›See allAmazon Payment ProductsAmazon Rewards Visa Signature CardsAmazon.com Store CardAmazon.com Corporate Credit LineShop with PointsCredit Card MarketplaceReload Your BalanceAmazon Currency ConverterLet Us Help YouYour AccountYour OrdersShipping Rates & PoliciesAmazon PrimeReturns & ReplacementsManage Your Content and DevicesAmazon AssistantHelp




English



United States




Amazon Music Stream millions of songs

Amazon Drive Cloud storage from Amazon

6pm Score deals on fashion brands

AbeBooks Books, art & collectibles

ACX  Audiobook Publishing Made Easy

Alexa Actionable Analytics for the Web

Amazon Business Everything For Your Business

 

AmazonFresh Groceries & More Right To Your Door

AmazonGlobal Ship Orders Internationally

Home Services Handpicked Pros Happiness Guarantee

Amazon Inspire Digital Educational  Resources

Amazon Rapids Fun stories for  kids on the go

Amazon Restaurants Food delivery from local restaurants

Amazon Video Direct Video Distribution Made Easy

 

Amazon Web Services Scalable Cloud Computing Services

Audible Download Audio Books

AudiobookStand Discount Audiobooks on Disc

Book Depository Books With Free Delivery Worldwide

Box Office Mojo Find Movie Box Office Data

ComiXology Thousands of Digital Comics

CreateSpace Indie Print Publishing Made Easy

 

DPReview Digital Photography

East Dane Designer Men's Fashion

Fabric Sewing, Quilting & Knitting

Goodreads Book reviews & recommendations

IMDb Movies, TV & Celebrities

IMDbPro Get Info Entertainment Professionals Need

Junglee.com Shop Online in India

 

Kindle Direct Publishing Indie Digital Publishing Made Easy


Prime Now FREE 2-Hour Delivery on Everyday Items

Prime Photos Unlimited Photo Storage Free With Prime

Shopbop Designer Fashion Brands

TenMarks.com Math Activities for Kids & Schools

Warehouse Deals Open-Box Discounts

Whispercast Discover & Distribute Digital Content


 

 

Withoutabox Submit to Film Festivals

Woot! Deals and  Shenanigans

Zappos Shoes & Clothing

Souq.com Shop Online in the Middle East

Subscribe with Amazon Discover & try subscription services

 


Conditions of UsePrivacy NoticeInterest-Based Ads© 1996-2017, Amazon.com, Inc. or its affiliates














Robot Check













Enter the characters you see below
Sorry, we just need to make sure you're not a robot. For best results, please make sure your browser is accepting cookies.










Type the characters you see in this image:








Try different image











Continue shopping











Conditions of Use




Privacy Policy


          © 1996-2014, Amazon.com, Inc. or its affiliates
          











Robot Check













Enter the characters you see below
Sorry, we just need to make sure you're not a robot. For best results, please make sure your browser is accepting cookies.










Type the characters you see in this image:








Try different image











Continue shopping











Conditions of Use




Privacy Policy


          © 1996-2014, Amazon.com, Inc. or its affiliates
          


















Amazon.com: Amazon Music Unlimited








































Interesting Finds Updated Daily










Amazon




    Try Prime
  


















Digital Music



All Departments
Alexa Skills
Amazon Devices
Amazon Video
Amazon Warehouse Deals
Appliances
Apps & Games
Arts, Crafts & Sewing
Automotive Parts & Accessories
Baby
Beauty & Personal Care
Books
CDs & Vinyl
Cell Phones & Accessories
Clothing, Shoes & Jewelry
   Women
   Men
   Girls
   Boys
   Baby
Collectibles & Fine Art
Computers
Courses
Credit and Payment Cards
Digital Music
Electronics
Gift Cards
Grocery & Gourmet Food
Handmade
Health, Household & Baby Care
Home & Business Services
Home & Kitchen
Industrial & Scientific
Kindle Store
Luggage & Travel Gear
Luxury Beauty
Magazine Subscriptions
Movies & TV
Musical Instruments
Office Products
Patio, Lawn & Garden
Pet Supplies
Prime Exclusive
Prime Pantry
Software
Sports & Outdoors
Tools & Home Improvement
Toys & Games
Vehicles
Video Games
Wine





Go

















Departments









EN

 
      




Hello. Sign inAccount & ListsSign inAccount & ListsOrdersTry PrimeCart0






Your Amazon.comToday's DealsGift Cards & RegistrySellHelpDisability Customer Support 






 Amazon Music Unlimited Prime Music CDs & Vinyl Download Store         Open Web Player MP3 cart Settings













































































































$7.99/mo for Prime members




Non-Prime price: $9.99/month



Change or cancel anytime




            Start your 30-day free trial
          




$7.99/mo for Prime members




Non-Prime price: $9.99/month



Change or cancel anytime




            Start your 30-day free trial
          




$7.99/mo for Prime members




Non-Prime price: $9.99/month



Change or cancel anytime




            Start your 30-day free trial
          
















Any song, anywhere




Tens of millions of songs with new releases from today's most popular artists. Listen ad-free with unlimited skips. Download for offline listening.




Any song, anywhere




Tens of millions of songs with new releases from today's most popular artists. Listen ad-free with unlimited skips. Download for offline listening.




Any song, anywhere




Tens of millions of songs with new releases from today's most popular artists. Listen ad-free with unlimited skips. Download for offline listening.
















Already using Prime Music?




Upgrade to Amazon Music Unlimited now to unlock tens of millions of songs, including the hottest new releases. Only $7.99/month or $79/year (12 months for the price of 10).




Already using Prime Music?




Upgrade to Amazon Music Unlimited now to unlock tens of millions of songs, including the hottest new releases. Only $7.99/month or $79/year (12 months for the price of 10).




Already using Prime Music?




Upgrade to Amazon Music Unlimited now to unlock tens of millions of songs, including the hottest new releases. Only $7.99/month or $79/year (12 months for the price of 10).
















Better with Echo - Just ask




Play your favorite music with innovative Alexa voice controls, exclusive to Amazon Music.




Want Amazon Music Unlimited just on your Echo? Learn More




Better with Echo - Just ask




Play your favorite music with innovative Alexa voice controls, exclusive to Amazon Music.




Want Amazon Music Unlimited just on your Echo? Learn More




Better with Echo - Just ask




Play your favorite music with innovative Alexa voice controls, exclusive to Amazon Music.




Want Amazon Music Unlimited just on your Echo? Learn More


























Choose the right Amazon Music plan for you




Learn More




Learn More




Learn More




Questions? See our FAQ.





            Start free trial
          




Choose the right Amazon Music plan for you




Learn More




Learn More




Learn More




Questions? See our FAQ.





            Start free trial
          




Choose the right Amazon Music plan for you




Learn More




Learn More




Learn More




Questions? See our FAQ.





            Start free trial
          

















There's a problem loading this menu right now.
Learn more about Amazon Prime.






 Get fast, free shipping with Amazon Prime 
 Prime members enjoy FREE Two-Day Shipping and exclusive access to music, movies, TV shows, original audio series, and Kindle books. 

      >
      Get started

















v























 






Jeffrey Douglas Found! | Check For Arrests, Warrants 










































 


 





 Jeffrey Douglas Found!!  Check For Arrests, Warrants 
    Show Me Jeffrey's Records 





 Please take into consideration that Jeffrey Douglas's records can only be used for personal reasons. For example locating old friends and family or verifying if a person has criminal history and if they can be trusted, to name a few.

You cannot use these records for consumer credit, tenant screening, employment, insurance qualifications or anything else that may be subjected to the Fair Credit Reporting Act, 15 USC 1681 et seq.
Jeffrey Douglas's records do not contain credit scores and reports. We and our partners are not a consumer reporting agency.
Click here to continue.
 





 Discover Everything You Ever Wanted to Know About Jeffrey Douglas 


 

Arrest Records, Warrants, DWI and MugshotsIf Jeffrey’s ever had a run-in with the law then his records will show where, when and why.


Addresses, Phone and EmailJeffrey’s record will show current and past mailing addresses, phone numbers and any email addresses he’s had.


Marriage, Divorce and Birth RecordsImportant events from Jeffrey’s life have been compiled from state and local county.

  

Sex Offender RegistryFind out instantly if Jeffrey is registered as a sex offender and if he is a threat.


Hidden Online ProfilesFind out all of Jeffrey’s online social media profiles and any hidden ones you’re not supposed to know about.


Assets, Businesses and LicensesFind out if Jeffrey is hiding any assets, owns any businesses and what licenses they are registered for.

  Show Me Jeffrey's Records 


 Instant Access Anywhere and Anytime 


 

100% Anonymous and Instant
In a few minutes from now you'll get full access to Jeffrey's background in the comforts of home.
Jeffrey will not know you are looking up their background and pulling records.
With state of the art connection your search is also secure from prying eyes.


 


 Look Up Anyone You Want 



 Get Jeffrey's Records + Unlimited Searches
In addition to getting a full background on Jeffrey Douglas, which includes contact info, arrest records, assets, bankruptcies and more, you'll also get full access to our database 24/7.
Look up anyone else you want so long as they reside in the United States of America.
Whether it's celebrities, family members or friends you're not restricted on your search.
  Get Me Jeffrey's Records and Unlimited Searches on Anyone I Want 
     




Copyright 2016 - 911arrests.com - All Rights Reserved 



























